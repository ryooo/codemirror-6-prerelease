(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.CodeMirror = {}));
}(this, (function (exports) { 'use strict';

    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let extend = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    // Convert offsets into absolute values
    for (let i = 1; i < extend.length; i++)
        extend[i] += extend[i - 1];
    function isExtendingChar(code) {
        for (let i = 1; i < extend.length; i += 2)
            if (extend[i] > code)
                return extend[i - 1] <= code;
        return false;
    }
    function isRegionalIndicator(code) {
        return code >= 0x1F1E6 && code <= 0x1F1FF;
    }
    const ZWJ = 0x200d;
    /// Returns a grapheme cluster end _after_ (not equal to) `pos`, if
    /// possible. Moves across surrogate pairs, extending characters,
    /// characters joined with zero-width joiners, and flag emoji.
    function nextClusterBreak(str, pos) {
        if (pos == str.length)
            return pos;
        // If pos is in the middle of a surrogate pair, move to its start
        if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
            pos--;
        let prev = codePointAt(str, pos);
        pos += codePointSize(prev);
        while (pos < str.length) {
            let next = codePointAt(str, pos);
            if (prev == ZWJ || next == ZWJ || isExtendingChar(next)) {
                pos += codePointSize(next);
                prev = next;
            }
            else if (isRegionalIndicator(next)) {
                let countBefore = 0, i = pos - 2;
                while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                    countBefore++;
                    i -= 2;
                }
                if (countBefore % 2 == 0)
                    break;
                else
                    pos += 2;
            }
            else {
                break;
            }
        }
        return pos;
    }
    /// Returns a grapheme cluster end _before_ `pos`, if possible.
    function prevClusterBreak(str, pos) {
        while (pos > 0) {
            let found = nextClusterBreak(str, pos - 2);
            if (found < pos)
                return found;
            pos--;
        }
        return 0;
    }
    function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
    function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
    /// Find the code point at the given position in a string (as in the
    /// [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
    /// string method).
    function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
            return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
            return code0;
        return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
    }
    /// Given a Unicode codepoint, return the JavaScript string that
    /// respresents it (as in
    /// [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint).
    function fromCodePoint(code) {
        if (code <= 0xffff)
            return String.fromCharCode(code);
        code -= 0x10000;
        return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
    }
    /// The first character that takes up two positions in a JavaScript
    /// string. It is often useful to compare with this after calling
    /// `codePointAt`, to figure out whether your character takes up 1 or
    /// 2 index positions.
    function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

    /// Count the column position at the given offset into the string,
    /// taking extending characters and tab size into account.
    function countColumn(string, n, tabSize) {
        for (let i = 0; i < string.length;) {
            if (string.charCodeAt(i) == 9) {
                n += tabSize - (n % tabSize);
                i++;
            }
            else {
                n++;
                i = nextClusterBreak(string, i);
            }
        }
        return n;
    }
    /// Find the offset that corresponds to the given column position in a
    /// string, taking extending characters and tab size into account.
    function findColumn(string, n, col, tabSize) {
        for (let i = 0; i < string.length;) {
            if (n >= col)
                return { offset: i, leftOver: 0 };
            n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
            i = nextClusterBreak(string, i);
        }
        return { offset: string.length, leftOver: col - n };
    }

    /// The document tree type.
    class Text {
        /// @internal
        constructor() { }
        /// Get the line description around the given position.
        lineAt(pos) {
            if (pos < 0 || pos > this.length)
                throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
            for (let line of lineCache) {
                if (line.doc == this && line.from <= pos && line.to >= pos)
                    return line;
            }
            return cacheLine(this.lineInner(pos, false, 1, 0).finish(this));
        }
        /// Get the description for the given (1-based) line number.
        line(n) {
            if (n < 1 || n > this.lines)
                throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
            for (let line of lineCache) {
                if (line.doc == this && line.number == n)
                    return line;
            }
            return cacheLine(this.lineInner(n, true, 1, 0).finish(this));
        }
        /// Replace a range of the text with the given lines. `text` should
        /// have a length of at least one.
        replace(from, to, text) {
            let parts = [];
            this.decompose(0, from, parts);
            parts.push(text);
            this.decompose(to, this.length, parts);
            return TextNode.from(parts, this.length - (to - from) + text.length);
        }
        /// Append another document to this one.
        append(text) {
            return this.length == 0 ? text : text.length == 0 ? this : TextNode.from([this, text], this.length + text.length);
        }
        /// Retrieve the text between the given points.
        slice(from, to = this.length) {
            let parts = [];
            this.decompose(from, to, parts);
            return TextNode.from(parts, to - from);
        }
        /// Test whether this text is equal to another instance.
        eq(other) { return this == other || eqContent(this, other); }
        /// Iterate over the text. When `dir` is `-1`, iteration happens
        /// from end to start. This will return lines and the breaks between
        /// them as separate strings, and for long lines, might split lines
        /// themselves into multiple chunks as well.
        iter(dir = 1) { return new RawTextCursor(this, dir); }
        /// Iterate over a range of the text. When `from` > `to`, the
        /// iterator will run in reverse.
        iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
        /// Iterate over lines in the text, starting at position (_not_ line
        /// number) `from`. An iterator returned by this combines all text
        /// on a line into a single string (which may be expensive for very
        /// long lines), and skips line breaks (its
        /// [`lineBreak`](#text.TextIterator.lineBreak) property is always
        /// false).
        iterLines(from = 0) { return new LineCursor(this, from); }
        /// @internal
        toString() { return this.sliceString(0); }
        /// Convert the document to an array of lines (which can be
        /// deserialized again via [`Text.of`](#text.Text^of).
        toJSON() {
            let lines = [];
            for (let iter = this.iterLines(); !iter.next().done;)
                lines.push(iter.value);
            return lines;
        }
        /// Create a `Text` instance for the given array of lines.
        static of(text) {
            if (text.length == 0)
                throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0] && Text.empty)
                return Text.empty;
            let length = textLength(text);
            return length < 1024 /* MaxLeaf */ ? new TextLeaf(text, length) : TextNode.from(TextLeaf.split(text, []), length);
        }
    }
    if (typeof Symbol != "undefined")
        Text.prototype[Symbol.iterator] = function () { return this.iter(); };
    let lineCache = [], lineCachePos = -1, lineCacheSize = 10;
    function cacheLine(line) {
        return lineCache[lineCachePos = (lineCachePos + 1) % lineCacheSize] = line;
    }
    // Leaves store an array of strings. There are always line breaks
    // between these strings (though not between adjacent Text nodes).
    // These are limited in length, so that bigger documents are
    // constructed as a tree structure. Long lines will be broken into a
    // number of single-line leaves.
    class TextLeaf extends Text {
        constructor(text, length = textLength(text)) {
            super();
            this.text = text;
            this.length = length;
        }
        get lines() { return this.text.length; }
        get children() { return null; }
        lineInner(target, isLine, line, offset) {
            for (let i = 0; i < this.text.length; i++) {
                let string = this.text[i], end = offset + string.length;
                if ((isLine ? line : end) >= target)
                    return new Line(offset, end, line, string);
                offset = end + 1;
                line++;
            }
        }
        decompose(from, to, target) {
            target.push(new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from)));
        }
        lastLineLength() { return this.text[this.text.length - 1].length; }
        firstLineLength() { return this.text[0].length; }
        replace(from, to, text) {
            let newLen = this.length + text.length - (to - from);
            if (newLen >= 1024 /* MaxLeaf */ || !(text instanceof TextLeaf))
                return super.replace(from, to, text);
            return new TextLeaf(appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
                let line = this.text[i], end = pos + line.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += line.slice(Math.max(0, from - pos), to - pos);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            target[target.length - 1] += this.text[0];
            for (let i = 1; i < this.text.length; i++)
                target.push(this.text[i]);
        }
        static split(text, target) {
            let part = [], length = -1;
            for (let line of text) {
                for (;;) {
                    let newLength = length + line.length + 1;
                    if (newLength < 512 /* BaseLeaf */) {
                        length = newLength;
                        part.push(line);
                        break;
                    }
                    let cut = 512 /* BaseLeaf */ - length - 1, after = line.charCodeAt(cut);
                    if (after >= 0xdc00 && after < 0xe000)
                        cut++;
                    part.push(line.slice(0, cut));
                    target.push(new TextLeaf(part, 512 /* BaseLeaf */));
                    line = line.slice(cut);
                    length = -1;
                    part = [];
                }
            }
            if (length != -1)
                target.push(new TextLeaf(part, length));
            return target;
        }
    }
    // Nodes provide the tree structure of the `Text` type. They store a
    // number of other nodes or leaves, taking care to balance itself on
    // changes.
    class TextNode extends Text {
        constructor(children, length) {
            super();
            this.children = children;
            this.length = length;
            this.lines = 1;
            for (let child of children)
                this.lines += child.lines - 1;
        }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
                if ((isLine ? endLine : end) >= target) {
                    let inner = child.lineInner(target, isLine, line, offset), add;
                    if (inner.from == offset && (add = this.lineLengthTo(i))) {
                        inner.from -= add;
                        inner.content = null;
                    }
                    if (inner.to == end && (add = this.lineLengthFrom(i + 1))) {
                        inner.to += add;
                        inner.content = null;
                    }
                    return inner;
                }
                offset = end;
                line = endLine;
            }
        }
        decompose(from, to, target) {
            for (let i = 0, pos = 0; pos < to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from < end && to > pos) {
                    if (pos >= from && end <= to)
                        target.push(child);
                    else
                        child.decompose(from - pos, to - pos, target);
                }
                pos = end;
            }
        }
        lineLengthTo(to) {
            let length = 0;
            for (let i = to - 1; i >= 0; i--) {
                let child = this.children[i];
                if (child.lines > 1)
                    return length + child.lastLineLength();
                length += child.length;
            }
            return length;
        }
        lastLineLength() { return this.lineLengthTo(this.children.length); }
        lineLengthFrom(from) {
            let length = 0;
            for (let i = from; i < this.children.length; i++) {
                let child = this.children[i];
                if (child.lines > 1)
                    return length + child.firstLineLength();
                length += child.length;
            }
            return length;
        }
        firstLineLength() { return this.lineLengthFrom(0); }
        replace(from, to, text) {
            // Looks like a small change, try to optimize
            if (text.length < 512 /* BaseLeaf */ && to - from < 512 /* BaseLeaf */) {
                let lengthDiff = text.length - (to - from);
                for (let i = 0, pos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = pos + child.length;
                    // Fast path: if the change only affects one child and the
                    // child's size remains in the acceptable range, only update
                    // that child
                    if (from >= pos && to <= end &&
                        child.length + lengthDiff < (this.length + lengthDiff) >> (3 /* BranchShift */ - 1) &&
                        child.length + lengthDiff > 0) {
                        let copy = this.children.slice();
                        copy[i] = child.replace(from - pos, to - pos, text);
                        return new TextNode(copy, this.length + lengthDiff);
                    }
                    pos = end;
                }
            }
            return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let i = 0, pos = 0; pos < to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from < end && to > pos) {
                    let part = child.sliceString(from - pos, to - pos, lineSep);
                    if (from >= pos && to <= end)
                        return part;
                    result += part;
                }
                pos = end;
            }
            return result;
        }
        flatten(target) {
            for (let child of this.children)
                child.flatten(target);
        }
        static from(children, length) {
            if (!children.every(ch => ch instanceof Text))
                throw new Error("NOP");
            if (length < 1024 /* MaxLeaf */) {
                let text = [""];
                for (let child of children)
                    child.flatten(text);
                return new TextLeaf(text, length);
            }
            let chunkLength = Math.max(512 /* BaseLeaf */, length >> 3 /* BranchShift */), maxLength = chunkLength << 1, minLength = chunkLength >> 1;
            let chunked = [], currentLength = 0, currentChunk = [];
            function add(child) {
                let childLength = child.length, last;
                if (!childLength)
                    return;
                if (childLength > maxLength && child instanceof TextNode) {
                    for (let node of child.children)
                        add(node);
                }
                else if (childLength > minLength && (currentLength > minLength || currentLength == 0)) {
                    flush();
                    chunked.push(child);
                }
                else if (child instanceof TextLeaf && currentLength > 0 &&
                    (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                    child.length + last.length <= 512 /* BaseLeaf */) {
                    currentLength += childLength;
                    currentChunk[currentChunk.length - 1] = new TextLeaf(appendText(child.text, last.text.slice()), child.length + last.length);
                }
                else {
                    if (currentLength + childLength > chunkLength)
                        flush();
                    currentLength += childLength;
                    currentChunk.push(child);
                }
            }
            function flush() {
                if (currentLength == 0)
                    return;
                chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLength));
                currentLength = 0;
                currentChunk.length = 0;
            }
            for (let child of children)
                add(child);
            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
    }
    Text.empty = Text.of([""]);
    function textLength(text) {
        let length = -1;
        for (let line of text)
            length += line.length + 1;
        return length;
    }
    function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
            let line = text[i], end = pos + line.length;
            if (end >= from) {
                if (end > to)
                    line = line.slice(0, to - pos);
                if (pos < from)
                    line = line.slice(from - pos);
                if (first) {
                    target[target.length - 1] += line;
                    first = false;
                }
                else
                    target.push(line);
            }
            pos = end + 1;
        }
        return target;
    }
    function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
    }
    function eqContent(a, b) {
        if (a.length != b.length || a.lines != b.lines)
            return false;
        let iterA = new RawTextCursor(a), iterB = new RawTextCursor(b);
        for (let offA = 0, offB = 0;;) {
            if (iterA.lineBreak != iterB.lineBreak || iterA.done != iterB.done) {
                return false;
            }
            else if (iterA.done) {
                return true;
            }
            else if (iterA.lineBreak) {
                iterA.next();
                iterB.next();
                offA = offB = 0;
            }
            else {
                let strA = iterA.value.slice(offA), strB = iterB.value.slice(offB);
                if (strA.length == strB.length) {
                    if (strA != strB)
                        return false;
                    iterA.next();
                    iterB.next();
                    offA = offB = 0;
                }
                else if (strA.length > strB.length) {
                    if (strA.slice(0, strB.length) != strB)
                        return false;
                    offA += strB.length;
                    iterB.next();
                    offB = 0;
                }
                else {
                    if (strB.slice(0, strA.length) != strA)
                        return false;
                    offB += strA.length;
                    iterA.next();
                    offA = 0;
                }
            }
        }
    }
    class RawTextCursor {
        constructor(text, dir = 1) {
            this.dir = dir;
            this.done = false;
            this.lineBreak = false;
            this.value = "";
            this.nodes = [text];
            this.offsets = [dir > 0 ? 0 : text instanceof TextLeaf ? text.text.length : text.children.length];
        }
        next(skip = 0) {
            for (;;) {
                let last = this.nodes.length - 1;
                if (last < 0) {
                    this.done = true;
                    this.value = "";
                    this.lineBreak = false;
                    return this;
                }
                let top = this.nodes[last];
                let offset = this.offsets[last];
                if (top instanceof TextLeaf) {
                    // Internal offset with lineBreak == false means we have to
                    // count the line break at this position
                    if (offset != (this.dir > 0 ? 0 : top.text.length) && !this.lineBreak) {
                        this.lineBreak = true;
                        if (skip == 0) {
                            this.value = "\n";
                            return this;
                        }
                        skip--;
                        continue;
                    }
                    // Otherwise, move to the next string
                    let next = top.text[offset - (this.dir < 0 ? 1 : 0)];
                    this.offsets[last] = (offset += this.dir);
                    if (offset == (this.dir > 0 ? top.text.length : 0)) {
                        this.nodes.pop();
                        this.offsets.pop();
                    }
                    this.lineBreak = false;
                    if (next.length > Math.max(0, skip)) {
                        this.value = skip == 0 ? next : this.dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                        return this;
                    }
                    skip -= next.length;
                }
                else if (offset == (this.dir > 0 ? top.children.length : 0)) {
                    this.nodes.pop();
                    this.offsets.pop();
                }
                else {
                    let next = top.children[this.dir > 0 ? offset : offset - 1], len = next.length;
                    this.offsets[last] = offset + this.dir;
                    if (skip > len) {
                        skip -= len;
                    }
                    else {
                        this.nodes.push(next);
                        this.offsets.push(this.dir > 0 ? 0 : next instanceof TextLeaf ? next.text.length : next.children.length);
                    }
                }
            }
        }
    }
    class PartialTextCursor {
        constructor(text, start, end) {
            this.value = "";
            this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
            if (start > end) {
                this.skip = text.length - start;
                this.limit = start - end;
            }
            else {
                this.skip = start;
                this.limit = end - start;
            }
        }
        next() {
            if (this.limit <= 0) {
                this.limit = -1;
            }
            else {
                let { value, lineBreak, done } = this.cursor.next(this.skip);
                this.skip = 0;
                this.value = value;
                let len = lineBreak ? 1 : value.length;
                if (len > this.limit)
                    this.value = this.cursor.dir > 0 ? value.slice(0, this.limit) : value.slice(len - this.limit);
                if (done || this.value.length == 0)
                    this.limit = -1;
                else
                    this.limit -= this.value.length;
            }
            return this;
        }
        get lineBreak() { return this.cursor.lineBreak; }
        get done() { return this.limit < 0; }
    }
    class LineCursor {
        constructor(text, from = 0) {
            this.value = "";
            this.done = false;
            this.cursor = text.iter();
            this.skip = from;
        }
        next() {
            if (this.cursor.done) {
                this.done = true;
                this.value = "";
                return this;
            }
            for (this.value = "";;) {
                let { value, lineBreak, done } = this.cursor.next(this.skip);
                this.skip = 0;
                if (done || lineBreak)
                    return this;
                this.value += value;
            }
        }
        get lineBreak() { return false; }
    }
    // FIXME rename start/end to from/to for consistency with other types?
    /// This type describes a line in the document. It is created
    /// on-demand when lines are [queried](#text.Text.lineAt).
    class Line {
        /// @internal
        constructor(
        /// The position of the start of the line.
        from, 
        /// The position at the end of the line (_before_ the line break,
        /// if this isn't the last line).
        to, 
        /// This line's line number (1-based).
        number, 
        /// @internal
        content) {
            this.from = from;
            this.to = to;
            this.number = number;
            this.content = content;
        }
        /// The length of the line (not including any line break after it).
        get length() { return this.to - this.from; }
        /// Retrieve a part of the content of this line. This is a method,
        /// rather than, say, a string property, to avoid concatenating long
        /// lines whenever they are accessed. Try to write your code, if it
        /// is going to be doing a lot of line-reading, to read only the
        /// parts it needs.
        slice(from = 0, to = this.length) {
            if (from == to)
                return "";
            if (typeof this.content == "string")
                return this.content.slice(from, to);
            if (!this.content)
                this.content = new LineContent(this.doc, this.from);
            let result = this.content.slice(from, to);
            if (from == 0 && to == this.length)
                this.content = result;
            return result;
        }
        /// @internal
        finish(text) {
            this.doc = text;
            return this;
        }
        /// Find the next (or previous if `forward` is false) grapheme
        /// cluster break from the given start position (as an offset inside
        /// the line, not the document). Will return a position greater than
        /// (or less than if `forward` is false) `start` unless there is no
        /// such index in the string.
        findClusterBreak(start, forward) {
            if (start < 0 || start > this.length)
                throw new RangeError("Invalid position given to Line.findClusterBreak");
            let contextStart, context;
            if (this.content == "string") {
                contextStart = this.from;
                context = this.content;
            }
            else {
                contextStart = Math.max(0, start - 256);
                context = this.slice(contextStart, Math.min(this.length, contextStart + 512));
            }
            return (forward ? nextClusterBreak : prevClusterBreak)(context, start - contextStart) + contextStart;
        }
    }
    class LineContent {
        constructor(doc, start) {
            this.doc = doc;
            this.start = start;
            this.cursor = null;
            this.strings = null;
        }
        // FIXME quadratic complexity (somewhat) when iterating long lines in small pieces
        slice(from, to) {
            if (!this.cursor) {
                this.cursor = this.doc.iter();
                this.strings = [this.cursor.next(this.start).value];
            }
            for (let result = "", pos = 0, i = 0;; i++) {
                if (i == this.strings.length) {
                    let next = this.cursor.next().value;
                    if (!next)
                        return result;
                    this.strings.push(next);
                }
                let string = this.strings[i], start = pos;
                pos += string.length;
                if (pos <= from)
                    continue;
                result += string.slice(Math.max(0, from - start), Math.min(string.length, to - start));
                if (pos >= to)
                    return result;
            }
        }
    }

    /// The default maximum length of a `TreeBuffer` node.
    var DefaultBufferLength = 1024;
    var nextPropID = 0;
    var CachedNode = new WeakMap();
    /// Each [node type](#tree.NodeType) can have metadata associated with
    /// it in props. Instances of this class represent prop names.
    var NodeProp = /** @class */ (function () {
        /// Create a new node prop type. You can optionally pass a
        /// `deserialize` function.
        function NodeProp(_a) {
            var deserialize = (_a === void 0 ? {} : _a).deserialize;
            this.id = nextPropID++;
            this.deserialize = deserialize || (function () {
                throw new Error("This node type doesn't define a deserialize function");
            });
        }
        /// Create a string-valued node prop whose deserialize function is
        /// the identity function.
        NodeProp.string = function () { return new NodeProp({ deserialize: function (str) { return str; } }); };
        /// Create a number-valued node prop whose deserialize function is
        /// just `Number`.
        NodeProp.number = function () { return new NodeProp({ deserialize: Number }); };
        /// Creates a boolean-valued node prop whose deserialize function
        /// returns true for any input.
        NodeProp.flag = function () { return new NodeProp({ deserialize: function () { return true; } }); };
        /// Store a value for this prop in the given object. This can be
        /// useful when building up a prop object to pass to the
        /// [`NodeType`](#tree.NodeType) constructor. Returns its first
        /// argument.
        NodeProp.prototype.set = function (propObj, value) {
            propObj[this.id] = value;
            return propObj;
        };
        /// This is meant to be used with
        /// [`NodeGroup.extend`](#tree.NodeGroup.extend) or
        /// [`Parser.withProps`](#lezer.Parser.withProps) to compute prop
        /// values for each node type in the group. Takes a [match
        /// object](#tree.NodeType^match) or function that returns undefined
        /// if the node type doesn't get this prop, and the prop's value if
        /// it does.
        NodeProp.prototype.add = function (match) {
            var _this = this;
            if (typeof match != "function")
                match = NodeType.match(match);
            return function (type) {
                var result = match(type);
                return result === undefined ? null : [_this, result];
            };
        };
        /// Prop that is used to describe matching delimiters. For opening
        /// delimiters, this holds an array of node names (written as a
        /// space-separated string when declaring this prop in a grammar)
        /// for the node types of closing delimiters that match it.
        NodeProp.closedBy = new NodeProp({ deserialize: function (str) { return str.split(" "); } });
        /// The inverse of [`openedBy`](#tree.NodeProp^closedBy). This is
        /// attached to closing delimiters, holding an array of node names
        /// of types of matching opening delimiters.
        NodeProp.openedBy = new NodeProp({ deserialize: function (str) { return str.split(" "); } });
        /// Used to assign node types to groups (for example, all node
        /// types that represent an expression could be tagged with an
        /// `"Expression"` group).
        NodeProp.group = new NodeProp({ deserialize: function (str) { return str.split(" "); } });
        return NodeProp;
    }());
    /// Each node in a syntax tree has a node type associated with it.
    var NodeType = /** @class */ (function () {
        /// @internal
        function NodeType(
        /// The name of the node type. Not necessarily unique, but if the
        /// grammar was written properly, different node types with the
        /// same name within a node group should play the same semantic
        /// role.
        name, 
        /// @internal
        props, 
        /// The id of this node in its group. Corresponds to the term ids
        /// used in the parser.
        id, 
        /// @internal
        flags) {
            if (flags === void 0) { flags = 0; }
            this.name = name;
            this.props = props;
            this.id = id;
            this.flags = flags;
        }
        /// Retrieves a node prop for this type. Will return `undefined` if
        /// the prop isn't present on this node.
        NodeType.prototype.prop = function (prop) { return this.props[prop.id]; };
        Object.defineProperty(NodeType.prototype, "isTop", {
            /// True when this is the top node of a grammar.
            get: function () { return (this.flags & 1) > 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeType.prototype, "isSkipped", {
            /// True when this node is produced by a skip rule.
            get: function () { return (this.flags & 2) > 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeType.prototype, "isError", {
            /// Indicates whether this is an error node.
            get: function () { return (this.flags & 4) > 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeType.prototype, "isRepeated", {
            /// When true, this node type is used to cache repetition, and is
            /// not a user-defined named node.
            get: function () { return (this.flags & 8) > 0; },
            enumerable: true,
            configurable: true
        });
        /// Returns true when this node's name or one of its
        /// [groups](#tree.NodeProp^group) matches the given string.
        NodeType.prototype.is = function (name) {
            if (this.name == name)
                return true;
            var group = this.prop(NodeProp.group);
            return group ? group.indexOf(name) > -1 : false;
        };
        /// Create a function from node types to arbitrary values by
        /// specifying an object whose property names are node or
        /// [group](#tree.NodeProp^group) names. Often useful with
        /// [`NodeProp.add`](#tree.NodeProp.add). You can put multiple
        /// names, separated by spaces, in a single property name to map
        /// multiple node names to a single value.
        NodeType.match = function (map) {
            var direct = Object.create(null);
            for (var prop in map)
                for (var _i = 0, _a = prop.split(" "); _i < _a.length; _i++) {
                    var name = _a[_i];
                    direct[name] = map[prop];
                }
            return function (node) {
                for (var groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                    var found = direct[i < 0 ? node.name : groups[i]];
                    if (found)
                        return found;
                }
            };
        };
        /// An empty dummy node type to use when no actual type is available.
        NodeType.none = new NodeType("", Object.create(null), 0);
        return NodeType;
    }());
    /// A node group holds a collection of node types. It is used to
    /// compactly represent trees by storing their type ids, rather than a
    /// full pointer to the type object, in a number array. Each parser
    /// [has](#lezer.Parser.group) a node group, and [tree
    /// buffers](#tree.TreeBuffer) can only store collections of nodes
    /// from the same group. A group can have a maximum of 2**16 (65536)
    /// node types in it, so that the ids fit into 16-bit typed array
    /// slots.
    var NodeGroup = /** @class */ (function () {
        /// Create a group with the given types. The `id` property of each
        /// type should correspond to its position within the array.
        function NodeGroup(
        /// The node types in this group, by id.
        types) {
            this.types = types;
            for (var i = 0; i < types.length; i++)
                if (types[i].id != i)
                    throw new RangeError("Node type ids should correspond to array positions when creating a node group");
        }
        /// Create a copy of this group with some node properties added. The
        /// arguments to this method should be created with
        /// [`NodeProp.add`](#tree.NodeProp.add).
        NodeGroup.prototype.extend = function () {
            var props = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                props[_i] = arguments[_i];
            }
            var newTypes = [];
            for (var _a = 0, _b = this.types; _a < _b.length; _a++) {
                var type = _b[_a];
                var newProps = null;
                for (var _c = 0, props_1 = props; _c < props_1.length; _c++) {
                    var source = props_1[_c];
                    var add = source(type);
                    if (add) {
                        if (!newProps)
                            newProps = Object.assign({}, type.props);
                        add[0].set(newProps, add[1]);
                    }
                }
                newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
            }
            return new NodeGroup(newTypes);
        };
        return NodeGroup;
    }());
    /// A piece of syntax tree. There are two ways to approach these
    /// trees: the way they are actually stored in memory, and the
    /// convenient way.
    ///
    /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
    /// objects. By packing detail information into `TreeBuffer` leaf
    /// nodes, the representation is made a lot more memory-efficient.
    ///
    /// However, when you want to actually work with tree nodes, this
    /// representation is very awkward, so most client code will want to
    /// use the `TreeCursor` interface instead, which provides a view on
    /// some part of this data structure, and can be used to move around
    /// to adjacent nodes.
    var Tree = /** @class */ (function () {
        /// Construct a new tree. You usually want to go through
        /// [`Tree.build`](#tree.Tree^build) instead.
        function Tree(type, 
        /// The tree's child nodes. Children small enough to fit in a
        /// `TreeBuffer will be represented as such, other children can be
        /// further `Tree` instances with their own internal structure.
        children, 
        /// The positions (offsets relative to the start of this tree) of
        /// the children.
        positions, 
        /// The total length of this tree
        length) {
            this.type = type;
            this.children = children;
            this.positions = positions;
            this.length = length;
        }
        /// @internal
        Tree.prototype.toString = function () {
            var children = this.children.map(function (c) { return c.toString(); }).join();
            return !this.type.name ? children :
                (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                    (children.length ? "(" + children + ")" : "");
        };
        Tree.prototype.partial = function (start, end, offset, children, positions) {
            for (var i = 0; i < this.children.length; i++) {
                var from = this.positions[i];
                if (from > end)
                    break;
                var child = this.children[i], to = from + child.length;
                if (to < start)
                    continue;
                if (start <= from && end >= to) {
                    children.push(child);
                    positions.push(from + offset);
                }
                else if (child instanceof Tree) {
                    child.partial(start - from, end - from, offset + from, children, positions);
                }
            }
        };
        /// Apply a set of edits to a tree, removing all nodes that were
        /// touched by the edits, and moving remaining nodes so that their
        /// positions are updated for insertions/deletions before them. This
        /// is likely to destroy a lot of the structure of the tree, and
        /// mostly useful for extracting the nodes that can be reused in a
        /// subsequent incremental re-parse.
        Tree.prototype.applyChanges = function (changes) {
            if (changes.length == 0)
                return this;
            var children = [], positions = [];
            function cutAt(tree, pos, side) {
                var cursor = tree.cursor(pos, -side);
                for (;;) {
                    if (!cursor.enter(side, pos))
                        for (;;) {
                            if ((side < 0 ? cursor.to <= pos : cursor.from >= pos) && !cursor.type.isError)
                                return side < 0 ? Math.min(pos, cursor.to - 1) : Math.max(pos, cursor.from + 1);
                            if (cursor.sibling(side))
                                break;
                            if (!cursor.parent())
                                return side < 0 ? 0 : tree.length;
                        }
                }
            }
            var off = 0;
            for (var i = 0, pos = 0;; i++) {
                var next = i == changes.length ? null : changes[i];
                var nextPos = next ? cutAt(this, next.fromA, -1) : this.length;
                if (nextPos > pos)
                    this.partial(pos, nextPos, off, children, positions);
                if (!next)
                    break;
                pos = cutAt(this, next.toA, 1);
                off += (next.toB - next.fromB) - (next.toA - next.fromA);
            }
            return new Tree(NodeType.none, children, positions, this.length + off);
        };
        /// Take the part of the tree up to the given position.
        Tree.prototype.cut = function (at) {
            if (at >= this.length)
                return this;
            var children = [], positions = [];
            for (var i = 0; i < this.children.length; i++) {
                var from = this.positions[i];
                if (from >= at)
                    break;
                var child = this.children[i], to = from + child.length;
                children.push(to <= at ? child : child.cut(at - from));
                positions.push(from);
            }
            return new Tree(this.type, children, positions, at);
        };
        /// Get a [tree cursor](#tree.TreeCursor) rooted at this tree. When
        /// `pos` is given, the cursor is [moved](#tree.TreeCursor.moveTo)
        /// to the given position and side.
        Tree.prototype.cursor = function (pos, side) {
            if (side === void 0) { side = 0; }
            var scope = (pos != null && CachedNode.get(this)) || this.topNode;
            var cursor = new TreeCursor(scope);
            if (pos != null) {
                cursor.moveTo(pos, side);
                CachedNode.set(this, cursor.tree);
            }
            return cursor;
        };
        Object.defineProperty(Tree.prototype, "topNode", {
            /// Get a [syntax node](#tree.SyntaxNode) object for the top of the
            /// tree.
            get: function () {
                return new TreeNode(this, 0, 0, null);
            },
            enumerable: true,
            configurable: true
        });
        /// Get the [syntax node](#tree.SyntaxNode) at the given position.
        /// If `side` is -1, this will move into nodes that end at the
        /// position. If 1, it'll move into nodes that start at the
        /// position. With 0, it'll only enter nodes that cover the position
        /// from both sides.
        Tree.prototype.resolve = function (pos, side) {
            if (side === void 0) { side = 0; }
            return this.cursor(pos, side).node;
        };
        /// Iterate over the tree and its children, calling `enter` for any
        /// node that touches the `from`/`to` region (if given) before
        /// running over such a node's children, and `leave` (if given) when
        /// leaving the node. When `enter` returns `false`, the given node
        /// will not have its children iterated over (or `leave` called).
        Tree.prototype.iterate = function (spec) {
            var enter = spec.enter, leave = spec.leave, _a = spec.from, from = _a === void 0 ? 0 : _a, _b = spec.to, to = _b === void 0 ? this.length : _b;
            for (var c = this.cursor();;) {
                var mustLeave = false;
                if (c.from <= to && c.to >= from && (c.type.isRepeated || enter(c.type, c.from, c.to) !== false)) {
                    if (c.firstChild())
                        continue;
                    mustLeave = true;
                }
                for (;;) {
                    if (mustLeave && leave)
                        leave(c.type, c.from, c.to);
                    if (c.nextSibling())
                        break;
                    if (!c.parent())
                        return;
                    mustLeave = true;
                }
            }
        };
        /// Append another tree to this tree. `other` must have empty space
        /// big enough to fit this tree at its start.
        Tree.prototype.append = function (other) {
            if (!other.children.length)
                return this;
            if (other.positions[0] < this.length)
                throw new Error("Can't append overlapping trees");
            return new Tree(this.type, this.children.concat(other.children), this.positions.concat(other.positions), other.length);
        };
        /// Balance the direct children of this tree.
        Tree.prototype.balance = function (maxBufferLength) {
            if (maxBufferLength === void 0) { maxBufferLength = DefaultBufferLength; }
            return this.children.length <= BalanceBranchFactor ? this
                : balanceRange(this.type, NodeType.none, this.children, this.positions, 0, this.children.length, 0, maxBufferLength, this.length);
        };
        /// Build a tree from a postfix-ordered buffer of node information,
        /// or a cursor over such a buffer.
        Tree.build = function (data) { return buildTree(data); };
        /// The empty tree
        Tree.empty = new Tree(NodeType.none, [], [], 0);
        return Tree;
    }());
    /// Tree buffers contain (type, start, end, endIndex) quads for each
    /// node. In such a buffer, nodes are stored in prefix order (parents
    /// before children, with the endIndex of the parent indicating which
    /// children belong to it)
    var TreeBuffer = /** @class */ (function () {
        /// Create a tree buffer @internal
        function TreeBuffer(
        /// @internal
        buffer, 
        // The total length of the group of nodes in the buffer.
        length, 
        /// @internal
        group, type) {
            if (type === void 0) { type = NodeType.none; }
            this.buffer = buffer;
            this.length = length;
            this.group = group;
            this.type = type;
        }
        /// @internal
        TreeBuffer.prototype.toString = function () {
            var result = [];
            for (var index = 0; index < this.buffer.length;) {
                result.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result.join(",");
        };
        /// @internal
        TreeBuffer.prototype.childString = function (index) {
            var id = this.buffer[index], endIndex = this.buffer[index + 3];
            var type = this.group.types[id], result = type.name;
            if (/\W/.test(result) && !type.isError)
                result = JSON.stringify(result);
            index += 4;
            if (endIndex == index)
                return result;
            var children = [];
            while (index < endIndex) {
                children.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result + "(" + children.join(",") + ")";
        };
        /// @internal
        TreeBuffer.prototype.cut = function (at) {
            var cutPoint = 0;
            while (cutPoint < this.buffer.length && this.buffer[cutPoint + 1] < at)
                cutPoint += 4;
            var newBuffer = new Uint16Array(cutPoint);
            for (var i = 0; i < cutPoint; i += 4) {
                newBuffer[i] = this.buffer[i];
                newBuffer[i + 1] = this.buffer[i + 1];
                newBuffer[i + 2] = Math.min(at, this.buffer[i + 2]);
                newBuffer[i + 3] = Math.min(this.buffer[i + 3], cutPoint);
            }
            return new TreeBuffer(newBuffer, Math.min(at, this.length), this.group);
        };
        /// @internal
        TreeBuffer.prototype.findChild = function (startIndex, endIndex, dir, after) {
            var buffer = this.buffer, pick = -1;
            for (var i = startIndex; i != endIndex; i = buffer[i + 3]) {
                if (after != -100000000 /* None */) {
                    var start = buffer[i + 1], end = buffer[i + 2];
                    if (dir > 0) {
                        if (end > after)
                            pick = i;
                        if (end > after)
                            break;
                    }
                    else {
                        if (start < after)
                            pick = i;
                        if (end >= after)
                            break;
                    }
                }
                else {
                    pick = i;
                    if (dir > 0)
                        break;
                }
            }
            return pick;
        };
        return TreeBuffer;
    }());
    var TreeNode = /** @class */ (function () {
        function TreeNode(node, from, index, _parent) {
            this.node = node;
            this.from = from;
            this.index = index;
            this._parent = _parent;
        }
        Object.defineProperty(TreeNode.prototype, "type", {
            get: function () { return this.node.type; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "name", {
            get: function () { return this.node.type.name; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "to", {
            get: function () { return this.from + this.node.length; },
            enumerable: true,
            configurable: true
        });
        TreeNode.prototype.nextChild = function (i, dir, after) {
            for (var parent = this;;) {
                for (var _a = parent.node, children = _a.children, positions = _a.positions, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                    var next = children[i], start = positions[i] + parent.from;
                    if (after != -100000000 /* None */ && (dir < 0 ? start >= after : start + next.length <= after))
                        continue;
                    if (next instanceof TreeBuffer) {
                        var index = next.findChild(0, next.buffer.length, dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - start);
                        if (index > -1)
                            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                    }
                    else if (!next.type.isRepeated || hasChild(next)) {
                        var inner = new TreeNode(next, start, i, parent);
                        return !inner.type.isRepeated ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, after);
                    }
                }
                if (!parent.type.isRepeated)
                    return null;
                i = parent.index + dir;
                parent = parent._parent;
            }
        };
        Object.defineProperty(TreeNode.prototype, "firstChild", {
            get: function () { return this.nextChild(0, 1, -100000000 /* None */); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "lastChild", {
            get: function () { return this.nextChild(this.node.children.length - 1, -1, -100000000 /* None */); },
            enumerable: true,
            configurable: true
        });
        TreeNode.prototype.childAfter = function (pos) { return this.nextChild(0, 1, pos); };
        TreeNode.prototype.childBefore = function (pos) { return this.nextChild(this.node.children.length - 1, -1, pos); };
        TreeNode.prototype.nextSignificant = function () {
            var val = this;
            while (val.type.isRepeated)
                val = val._parent;
            return val;
        };
        Object.defineProperty(TreeNode.prototype, "parent", {
            get: function () {
                return this._parent ? this._parent.nextSignificant() : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "nextSibling", {
            get: function () {
                return this._parent ? this._parent.nextChild(this.index + 1, 1, -1) : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "prevSibling", {
            get: function () {
                return this._parent ? this._parent.nextChild(this.index - 1, -1, -1) : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "cursor", {
            get: function () { return new TreeCursor(this); },
            enumerable: true,
            configurable: true
        });
        TreeNode.prototype.resolve = function (pos, side) {
            if (side === void 0) { side = 0; }
            return this.cursor.moveTo(pos, side).node;
        };
        TreeNode.prototype.getChild = function (type, before, after) {
            if (before === void 0) { before = null; }
            if (after === void 0) { after = null; }
            var r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        };
        TreeNode.prototype.getChildren = function (type, before, after) {
            if (before === void 0) { before = null; }
            if (after === void 0) { after = null; }
            return getChildren(this, type, before, after);
        };
        /// @internal
        TreeNode.prototype.toString = function () { return this.node.toString(); };
        return TreeNode;
    }());
    function getChildren(node, type, before, after) {
        var cur = node.cursor, result = [];
        if (!cur.firstChild())
            return result;
        if (before != null)
            while (!cur.type.is(before))
                if (!cur.nextSibling())
                    return result;
        for (;;) {
            if (after != null && cur.type.is(after))
                return result;
            if (cur.type.is(type))
                result.push(cur.node);
            if (!cur.nextSibling())
                return after == null ? result : [];
        }
    }
    var BufferContext = /** @class */ (function () {
        function BufferContext(parent, buffer, index, start) {
            this.parent = parent;
            this.buffer = buffer;
            this.index = index;
            this.start = start;
        }
        return BufferContext;
    }());
    var BufferNode = /** @class */ (function () {
        function BufferNode(context, _parent, index) {
            this.context = context;
            this._parent = _parent;
            this.index = index;
            this.type = context.buffer.group.types[context.buffer.buffer[index]];
        }
        Object.defineProperty(BufferNode.prototype, "name", {
            get: function () { return this.type.name; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BufferNode.prototype, "from", {
            get: function () { return this.context.start + this.context.buffer.buffer[this.index + 1]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BufferNode.prototype, "to", {
            get: function () { return this.context.start + this.context.buffer.buffer[this.index + 2]; },
            enumerable: true,
            configurable: true
        });
        BufferNode.prototype.child = function (dir, after) {
            var buffer = this.context.buffer;
            var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.context.start);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        };
        Object.defineProperty(BufferNode.prototype, "firstChild", {
            get: function () { return this.child(1, -100000000 /* None */); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BufferNode.prototype, "lastChild", {
            get: function () { return this.child(-1, -100000000 /* None */); },
            enumerable: true,
            configurable: true
        });
        BufferNode.prototype.childAfter = function (pos) { return this.child(1, pos); };
        BufferNode.prototype.childBefore = function (pos) { return this.child(-1, pos); };
        Object.defineProperty(BufferNode.prototype, "parent", {
            get: function () {
                return this._parent || this.context.parent.nextSignificant();
            },
            enumerable: true,
            configurable: true
        });
        BufferNode.prototype.externalSibling = function (dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, -1);
        };
        Object.defineProperty(BufferNode.prototype, "nextSibling", {
            get: function () {
                var buffer = this.context.buffer;
                var after = buffer.buffer[this.index + 3];
                if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                    return new BufferNode(this.context, this._parent, after);
                return this.externalSibling(1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BufferNode.prototype, "prevSibling", {
            get: function () {
                var buffer = this.context.buffer;
                var parentStart = this._parent ? this._parent.index + 4 : 0;
                if (this.index == parentStart)
                    return this.externalSibling(-1);
                return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BufferNode.prototype, "cursor", {
            get: function () { return new TreeCursor(this); },
            enumerable: true,
            configurable: true
        });
        BufferNode.prototype.resolve = function (pos, side) {
            if (side === void 0) { side = 0; }
            return this.cursor.moveTo(pos, side).node;
        };
        /// @internal
        BufferNode.prototype.toString = function () { return this.context.buffer.childString(this.index); };
        BufferNode.prototype.getChild = function (type, before, after) {
            if (before === void 0) { before = null; }
            if (after === void 0) { after = null; }
            var r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        };
        BufferNode.prototype.getChildren = function (type, before, after) {
            if (before === void 0) { before = null; }
            if (after === void 0) { after = null; }
            return getChildren(this, type, before, after);
        };
        return BufferNode;
    }());
    /// A tree cursor object focuses on a given node in a syntax tree, and
    /// allows you to move to adjacent nodes.
    var TreeCursor = /** @class */ (function () {
        /// @internal
        function TreeCursor(node) {
            this.buffer = null;
            this.stack = [];
            this.index = 0;
            this.bufferNode = null;
            if (node instanceof TreeNode) {
                this.yieldNode(node);
            }
            else {
                this.tree = node.context.parent;
                this.buffer = node.context;
                for (var n = node._parent; n; n = n._parent)
                    this.stack.unshift(n.index);
                this.bufferNode = node;
                this.yieldBuf(node.index);
            }
        }
        Object.defineProperty(TreeCursor.prototype, "name", {
            /// Shorthand for `.type.name`.
            get: function () { return this.type.name; },
            enumerable: true,
            configurable: true
        });
        TreeCursor.prototype.yieldNode = function (node) {
            if (!node)
                return false;
            this.tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
        };
        TreeCursor.prototype.yieldBuf = function (index, type) {
            this.index = index;
            var _a = this.buffer, start = _a.start, buffer = _a.buffer;
            this.type = type || buffer.group.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
        };
        TreeCursor.prototype.yield = function (node) {
            if (!node)
                return false;
            if (node instanceof TreeNode) {
                this.buffer = null;
                return this.yieldNode(node);
            }
            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
        };
        /// @internal
        TreeCursor.prototype.toString = function () {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this.tree.toString();
        };
        /// @internal
        TreeCursor.prototype.enter = function (dir, after) {
            if (!this.buffer)
                return this.yield(this.tree.nextChild(dir < 0 ? this.tree.node.children.length - 1 : 0, dir, after));
            var buffer = this.buffer.buffer;
            var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.buffer.start);
            if (index < 0)
                return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
        };
        /// Move the cursor to this node's first child. When this returns
        /// false, the node has no child, and the cursor has not been moved.
        TreeCursor.prototype.firstChild = function () { return this.enter(1, -100000000 /* None */); };
        /// Move the cursor to this node's last child.
        TreeCursor.prototype.lastChild = function () { return this.enter(-1, -100000000 /* None */); };
        /// Move the cursor to the first child that starts at or after `pos`.
        TreeCursor.prototype.childAfter = function (pos) { return this.enter(1, pos); };
        /// Move to the last child that ends at or before `pos`.
        TreeCursor.prototype.childBefore = function (pos) { return this.enter(-1, pos); };
        /// Move the node's parent node, if this isn't the top node.
        TreeCursor.prototype.parent = function () {
            if (!this.buffer)
                return this.yieldNode(this.tree.parent);
            if (this.stack.length)
                return this.yieldBuf(this.stack.pop());
            var parent = this.buffer.parent.nextSignificant();
            this.buffer = null;
            return this.yieldNode(parent);
        };
        /// @internal
        TreeCursor.prototype.sibling = function (dir) {
            if (!this.buffer)
                return this.tree._parent ? this.yield(this.tree._parent.nextChild(this.tree.index + dir, dir, -100000000 /* None */)) : false;
            var buffer = this.buffer.buffer, d = this.stack.length - 1;
            if (dir < 0) {
                var parentStart = d < 0 ? 0 : this.stack[d] + 4;
                if (this.index != parentStart)
                    return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));
            }
            else {
                var after_1 = buffer.buffer[this.index + 3];
                if (after_1 < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                    return this.yieldBuf(after_1);
            }
            return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, -100000000 /* None */)) : false;
        };
        /// Move to this node's next sibling, if any.
        TreeCursor.prototype.nextSibling = function () { return this.sibling(1); };
        /// Move to this node's previous sibling, if any.
        TreeCursor.prototype.prevSibling = function () { return this.sibling(-1); };
        TreeCursor.prototype.atLastNode = function (dir) {
            var _a, _b;
            var index, parent, buffer = this.buffer;
            if (buffer) {
                if (dir > 0) {
                    if (this.index < buffer.buffer.buffer.length)
                        return false;
                }
                else {
                    for (var i = 0; i < this.index; i++)
                        if (buffer.buffer.buffer[i + 3] < this.index)
                            return false;
                }
                (index = buffer.index, parent = buffer.parent);
            }
            else {
                (_a = this.tree, index = _a.index, parent = _a._parent);
            }
            for (; parent; _b = parent, index = _b.index, parent = _b._parent, _b) {
                for (var i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {
                    var child = parent.node.children[i];
                    if (!child.type.isRepeated || child instanceof TreeBuffer || hasChild(child))
                        return false;
                }
            }
            return true;
        };
        TreeCursor.prototype.move = function (dir) {
            if (this.enter(dir, -100000000 /* None */))
                return true;
            for (;;) {
                if (this.sibling(dir))
                    return true;
                if (this.atLastNode(dir) || !this.parent())
                    return false;
            }
        };
        /// Move to the next node in a
        /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
        /// traversal, going from a node to its first child or, if the
        /// current node is empty, its next sibling or the next sibling of
        /// the first parent node that has one.
        TreeCursor.prototype.next = function () { return this.move(1); };
        /// Move to the next node in a last-to-first pre-order traveral. A
        /// node is followed by ist last child or, if it has none, its
        /// previous sibling or the previous sibling of the first parent
        /// node that has one.
        TreeCursor.prototype.prev = function () { return this.move(-1); };
        /// Move the cursor to the innermost node that covers `pos`. If
        /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        /// it will enter nodes that start at `pos`.
        TreeCursor.prototype.moveTo = function (pos, side) {
            if (side === void 0) { side = 0; }
            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to ||
                (side < 1 ? this.from >= pos : this.from > pos) ||
                (side > -1 ? this.to <= pos : this.to < pos))
                if (!this.parent())
                    break;
            // Then scan down into child nodes as far as possible
            for (;;) {
                if (side < 0 ? !this.childBefore(pos) : !this.childAfter(pos))
                    break;
                if (this.from == this.to ||
                    (side < 1 ? this.from >= pos : this.from > pos) ||
                    (side > -1 ? this.to <= pos : this.to < pos)) {
                    this.parent();
                    break;
                }
            }
            return this;
        };
        Object.defineProperty(TreeCursor.prototype, "node", {
            /// Get a [syntax node](#tree.SyntaxNode) at the cursor's current
            /// position.
            get: function () {
                if (!this.buffer)
                    return this.tree;
                var cache = this.bufferNode, result = null, depth = 0;
                if (cache && cache.context == this.buffer) {
                    scan: for (var index = this.index, d = this.stack.length; d >= 0;) {
                        for (var c = cache; c; c = c._parent)
                            if (c.index == index) {
                                if (index == this.index)
                                    return c;
                                result = c;
                                depth = d + 1;
                                break scan;
                            }
                        index = this.stack[--d];
                    }
                }
                for (var i = depth; i < this.stack.length; i++)
                    result = new BufferNode(this.buffer, result, this.stack[i]);
                return this.bufferNode = new BufferNode(this.buffer, result, this.index);
            },
            enumerable: true,
            configurable: true
        });
        return TreeCursor;
    }());
    function hasChild(tree) {
        return tree.children.some(function (ch) { return !ch.type.isRepeated || ch instanceof TreeBuffer || hasChild(ch); });
    }
    var FlatBufferCursor = /** @class */ (function () {
        function FlatBufferCursor(buffer, index) {
            this.buffer = buffer;
            this.index = index;
        }
        Object.defineProperty(FlatBufferCursor.prototype, "id", {
            get: function () { return this.buffer[this.index - 4]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FlatBufferCursor.prototype, "start", {
            get: function () { return this.buffer[this.index - 3]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FlatBufferCursor.prototype, "end", {
            get: function () { return this.buffer[this.index - 2]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FlatBufferCursor.prototype, "size", {
            get: function () { return this.buffer[this.index - 1]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FlatBufferCursor.prototype, "pos", {
            get: function () { return this.index; },
            enumerable: true,
            configurable: true
        });
        FlatBufferCursor.prototype.next = function () { this.index -= 4; };
        FlatBufferCursor.prototype.fork = function () { return new FlatBufferCursor(this.buffer, this.index); };
        return FlatBufferCursor;
    }());
    var BalanceBranchFactor = 8;
    function buildTree(data) {
        var _a = data, buffer = _a.buffer, group = _a.group, _b = _a.topID, topID = _b === void 0 ? 0 : _b, _c = _a.maxBufferLength, maxBufferLength = _c === void 0 ? DefaultBufferLength : _c, _d = _a.reused, reused = _d === void 0 ? [] : _d, _e = _a.minRepeatType, minRepeatType = _e === void 0 ? group.types.length : _e;
        var cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        var types = group.types;
        function takeNode(parentStart, minPos, children, positions, inRepeat) {
            var id = cursor.id, start = cursor.start, end = cursor.end, size = cursor.size;
            while (id == inRepeat) {
                cursor.next();
                (id = cursor.id, start = cursor.start, end = cursor.end, size = cursor.size);
            }
            var startPos = start - parentStart;
            if (size < 0) { // Reused node
                children.push(reused[id]);
                positions.push(startPos);
                cursor.next();
                return;
            }
            var type = types[id], node, buffer;
            if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                // Small enough for a buffer, and no reused nodes inside
                var data_1 = new Uint16Array(buffer.size - buffer.skip);
                var endPos = cursor.pos - buffer.size, index = data_1.length;
                while (cursor.pos > endPos)
                    index = copyToBuffer(buffer.start, data_1, index, inRepeat);
                node = new TreeBuffer(data_1, end - buffer.start, group, inRepeat < 0 ? NodeType.none : types[inRepeat]);
                startPos = buffer.start - parentStart;
            }
            else { // Make it a node
                var endPos = cursor.pos - size;
                cursor.next();
                var localChildren = [], localPositions = [];
                var localInRepeat = id >= minRepeatType ? id : -1;
                while (cursor.pos > endPos)
                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                localChildren.reverse();
                localPositions.reverse();
                if (localInRepeat > -1 && localChildren.length > BalanceBranchFactor)
                    node = balanceRange(type, type, localChildren, localPositions, 0, localChildren.length, 0, maxBufferLength, end - start);
                else
                    node = new Tree(type, localChildren, localPositions, end - start);
            }
            children.push(node);
            positions.push(startPos);
        }
        function findBufferSize(maxSize, inRepeat) {
            // Scan through the buffer to find previous siblings that fit
            // together in a TreeBuffer, and don't contain any reused nodes
            // (which can't be stored in a buffer).
            // If `inRepeat` is > -1, ignore node boundaries of that type for
            // nesting, but make sure the end falls either at the start
            // (`maxSize`) or before such a node.
            var fork = cursor.fork();
            var size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
            var result = { size: 0, start: 0, skip: 0 };
            scan: for (var minPos = fork.pos - maxSize; fork.pos > minPos;) {
                // Pretend nested repeat nodes of the same type don't exist
                if (fork.id == inRepeat) {
                    // Except that we store the current state as a valid return
                    // value.
                    result.size = size;
                    result.start = start;
                    result.skip = skip;
                    skip += 4;
                    size += 4;
                    fork.next();
                    continue;
                }
                var nodeSize = fork.size, startPos = fork.pos - nodeSize;
                if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                    break;
                var localSkipped = fork.id >= minRepeatType ? 4 : 0;
                var nodeStart = fork.start;
                fork.next();
                while (fork.pos > startPos) {
                    if (fork.size < 0)
                        break scan;
                    if (fork.id >= minRepeatType)
                        localSkipped += 4;
                    fork.next();
                }
                start = nodeStart;
                size += nodeSize;
                skip += localSkipped;
            }
            if (inRepeat < 0 || size == maxSize) {
                result.size = size;
                result.start = start;
                result.skip = skip;
            }
            return result.size > 4 ? result : undefined;
        }
        function copyToBuffer(bufferStart, buffer, index, inRepeat) {
            var id = cursor.id, start = cursor.start, end = cursor.end, size = cursor.size;
            cursor.next();
            if (id == inRepeat)
                return index;
            var startIndex = index;
            if (size > 4) {
                var endPos = cursor.pos - (size - 4);
                while (cursor.pos > endPos)
                    index = copyToBuffer(bufferStart, buffer, index, inRepeat);
            }
            if (id < minRepeatType) { // Don't copy repeat nodes into buffers
                buffer[--index] = startIndex;
                buffer[--index] = end - bufferStart;
                buffer[--index] = start - bufferStart;
                buffer[--index] = id;
            }
            return index;
        }
        var children = [], positions = [];
        while (cursor.pos > 0)
            takeNode(0, 0, children, positions, -1);
        var length = children.length ? positions[0] + children[0].length : 0;
        return new Tree(group.types[topID], children.reverse(), positions.reverse(), length);
    }
    function balanceRange(outerType, innerType, children, positions, from, to, start, maxBufferLength, length) {
        var localChildren = [], localPositions = [];
        if (length <= maxBufferLength) {
            for (var i = from; i < to; i++) {
                localChildren.push(children[i]);
                localPositions.push(positions[i] - start);
            }
        }
        else {
            var maxChild = Math.max(maxBufferLength, Math.ceil(length * 1.5 / BalanceBranchFactor));
            for (var i = from; i < to;) {
                var groupFrom = i, groupStart = positions[i];
                i++;
                for (; i < to; i++) {
                    var nextEnd = positions[i] + children[i].length;
                    if (nextEnd - groupStart > maxChild)
                        break;
                }
                if (i == groupFrom + 1) {
                    var only = children[groupFrom];
                    if (only instanceof Tree && only.type == innerType && only.length > maxChild << 1) { // Too big, collapse
                        for (var j = 0; j < only.children.length; j++) {
                            localChildren.push(only.children[j]);
                            localPositions.push(only.positions[j] + groupStart - start);
                        }
                        continue;
                    }
                    localChildren.push(only);
                }
                else if (i == groupFrom + 1) {
                    localChildren.push(children[groupFrom]);
                }
                else {
                    var inner = balanceRange(innerType, innerType, children, positions, groupFrom, i, groupStart, maxBufferLength, positions[i - 1] + children[i - 1].length - groupStart);
                    if (innerType != NodeType.none && !containsType(inner.children, innerType))
                        inner = new Tree(NodeType.none, inner.children, inner.positions, inner.length);
                    localChildren.push(inner);
                }
                localPositions.push(groupStart - start);
            }
        }
        return new Tree(outerType, localChildren, localPositions, length);
    }
    function containsType(nodes, type) {
        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
            var elt = nodes_1[_i];
            if (elt.type == type)
                return true;
        }
        return false;
    }

    const DefaultSplit = /\r\n?|\n/;
    /// Distinguishes different ways in which positions can be mapped.
    var MapMode;
    (function (MapMode) {
        /// Map a position to a valid new position, even when its context
        /// was deleted.
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /// Return null if deletion happens across the position.
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /// Return null if the character _before_ the position is deleted.
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /// Return null if the character _after_ the position is deleted.
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    })(MapMode || (MapMode = {}));
    /// A change description is a variant of [change set](#state.ChangeSet)
    /// that doesn't store the inserted text. As such, it can't be
    /// applied, but is cheaper to store and manipulate.
    class ChangeDesc {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /// @internal
        constructor(
        /// @internal
        sections) {
            this.sections = sections;
        }
        /// The length of the document before the change.
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /// The length of the document after the change.
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /// False when there are actual changes in this set.
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /// Iterate over the unchanged parts left by these changes.
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /// Iterate over the ranges changed by these changes. (See
        /// [`ChangeSet.iterChanges`](#state.ChangeSet.iterChanges) for a
        /// variant that also provides you with the inserted text.)
        ///
        /// When `individual` is true, adjacent changes (which are kept
        /// separate for [position mapping](#state.ChangeDesc.mapPos)) are
        /// reported separately.
        iterChangedRanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /// Get a description of the inverted form of these changes.
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc(sections);
        }
        /// Compute the combined effect of applying another set of changes
        /// after this one. The length of the document after this set should
        /// match the length before `other`.
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
        /// Map this description, which should start with the same document
        /// as `other`, over another set of changes, so that it can be
        /// applied after it.
        mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode.Simple && endA >= pos &&
                        (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode.TrackBefore && posA < pos ||
                            mode == MapMode.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /// Check whether these changes touch a given range. When one of the
        /// changes entirely covers the range, the string `"cover"` is
        /// returned.
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /// @internal
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
    }
    /// A change set represents a group of modifications to a document. It
    /// stores the document length, and can only be applied to documents
    /// with exactly that length.
    class ChangeSet extends ChangeDesc {
        /// @internal
        constructor(sections, 
        /// @internal
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /// Apply the changes to a document, returning the modified
        /// document.
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        /// Map this set, which should start with the same document as
        /// `other`, over another set of changes, so that it can be applied
        /// after it. When `before` is true, map as if the changes in
        /// `other` happened before the ones in `this`.
        mapDesc(other, before = false) { return mapSet(this, other, before, true); }
        /// Given the document as it existed _before_ the changes, return a
        /// change set that represents the inverse of this set, which could
        /// be used to go from the document created by the changes back to
        /// the document as it existed before the changes.
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
                }
                pos += len;
            }
            return new ChangeSet(sections, inserted);
        }
        /// Combine two subsequent change sets into a single set. `other`
        /// must start in the document produced by `this`. If `this` goes
        /// `docA` → `docB` and `other` represents `docB` → `docC`, the
        /// returned value will represent the change `docA` → `docC`.
        compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
        /// Given another change set starting in the same document, maps this
        /// change set over the other, producing a new change set that can be
        /// applied to the document produced by applying `other`. When
        /// `before` is `true`, order changes as if `this` comes before
        /// `other`, otherwise (the default) treat `other` as coming first.
        ///
        /// Given two changes `A` and `B`, `A.compose(B.map(A))` and
        /// `B.compose(A.map(B, true))` will produce the same document. This
        /// provides a basic form of [operational
        /// transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        /// and can be used for collaborative editing.
        map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
        /// Iterate over the changed ranges in the document, calling `f` for
        /// each.
        iterChanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /// Get a [change description](#state.ChangeDesc) for this change
        /// set.
        get desc() { return new ChangeDesc(this.sections); }
        /// @internal
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection(resultSections, len, ins);
                    if (ins > 0)
                        addInsert(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection(resultSections, len, -1);
                    addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet(resultSections, resultInserted),
                filtered: new ChangeDesc(filteredSections) };
        }
        /// Serialize this change set to a JSON-representable value.
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len, this.inserted[i >> 1].toJSON()]);
            }
            return parts;
        }
        /// Create a change set for the given changes, for a document of the
        /// given length, using `lineSep` as line separator.
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection(sections, length - pos, -1);
                let set = new ChangeSet(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection(sections, from - pos, -1);
                    addSection(sections, to - from, insLen);
                    addInsert(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /// Create an empty changeset of the given length.
        static empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
        }
        /// Create a changeset from its JSON representation (as produced by
        /// [`toJSON`](#state.ChangeSet.toJSON).
        static fromJSON(json) {
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text.empty);
                    inserted[i] = Text.of(part[1]);
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet(sections, inserted);
        }
    }
    function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text.empty);
            values.push(value);
        }
    }
    function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet(setA, setB, before, mkSet = false) {
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let posA = 0, posB = 0;;) {
            if (a.ins == -1) {
                posA += a.len;
                a.next();
            }
            else if (b.ins == -1 && posB < posA) {
                let skip = Math.min(b.len, posA - posB);
                b.forward(skip);
                addSection(sections, skip, -1);
                posB += skip;
            }
            else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
                addSection(sections, b.ins, -1);
                while (posA > posB && !a.done && posA + a.len < posB + b.len) {
                    posA += a.len;
                    a.next();
                }
                posB += b.len;
                b.next();
            }
            else if (a.ins >= 0) {
                let len = 0, end = posA + a.len;
                for (;;) {
                    if (b.ins >= 0 && posB > posA && posB + b.len < end) {
                        len += b.ins;
                        posB += b.len;
                        b.next();
                    }
                    else if (b.ins == -1 && posB < end) {
                        let skip = Math.min(b.len, end - posB);
                        len += skip;
                        b.forward(skip);
                        posB += skip;
                    }
                    else {
                        break;
                    }
                }
                addSection(sections, len, a.ins);
                if (insert)
                    addInsert(insert, sections, a.text);
                posA = end;
                a.next();
            }
            else if (a.done && b.done) {
                return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection(sections, 0, b.ins, open);
                if (insert)
                    addInsert(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection(sections, len, insB, open);
                    if (insert && insB)
                        addInsert(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert(insert, sections, a.textBit(len));
                }
                else {
                    addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }

    /// A single selection range. When
    /// [`allowMultipleSelections`](#state.EditorState^allowMultipleSelections)
    /// is enabled, a [selection](#state.EditorSelection) may hold
    /// multiple ranges. By default, selections hold exactly one range.
    class SelectionRange {
        // @internal
        constructor(
        /// The lower side of the range.
        from, 
        /// The upper side of the range.
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /// The anchor of the range—the side that doesn't move when you
        /// extend it.
        get anchor() { return this.flags & 16 /* Inverted */ ? this.to : this.from; }
        /// The head of the range, which is moved when the range is
        /// [extended](#state.SelectionRange.extend).
        get head() { return this.flags & 16 /* Inverted */ ? this.from : this.to; }
        /// True when `anchor` and `head` are at the same position.
        get empty() { return this.from == this.to; }
        /// If this is a cursor that is explicitly associated with the
        /// character on one of its sides, this returns the side. -1 means
        /// the character before its position, 1 the character after, and 0
        /// means no association.
        get assoc() { return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0; }
        /// The bidirectional text level associated with this cursor.
        get bidiLevel() {
            let level = this.flags & 3 /* BidiLevelMask */;
            return level == 3 ? null : level;
        }
        get goalColumn() {
            let value = this.flags >> 5 /* GoalColumnOffset */;
            return value == 33554431 /* NoGoalColumn */ ? undefined : value;
        }
        /// Map this range through a mapping.
        map(mapping) {
            let from = mapping.mapPos(this.from), to = mapping.mapPos(this.to);
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        /// Extend this range to cover at least `from` to `to`.
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
        }
        /// Compare this range to another range.
        eq(other) {
            return this.anchor == other.anchor && this.head == other.head;
        }
        /// Return a JSON-serializable object representing the range.
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /// Convert a JSON representation of a range to a `SelectionRange`
        /// instance.
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
        }
    }
    /// An editor selection holds one or more selection ranges.
    class EditorSelection {
        /// @internal
        constructor(
        /// The ranges in the selection, sorted by position. Ranges cannot
        /// overlap (but they may touch, if they aren't empty).
        ranges, 
        /// The index of the _primary_ range in the selection (which is
        /// usually the range that was added last).
        primaryIndex = 0) {
            this.ranges = ranges;
            this.primaryIndex = primaryIndex;
        }
        /// Map a selection through a mapping. Mostly used to adjust the
        /// selection position for changes.
        map(mapping) {
            if (mapping.empty)
                return this;
            return EditorSelection.create(this.ranges.map(r => r.map(mapping)), this.primaryIndex);
        }
        /// Compare this selection to another selection.
        eq(other) {
            if (this.ranges.length != other.ranges.length ||
                this.primaryIndex != other.primaryIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i]))
                    return false;
            return true;
        }
        /// Get the primary selection range. Usually, you should make sure
        /// your code applies to _all_ ranges, by using methods like
        /// [`changeByRange`](#state.EditorState.changeByRange).
        get primary() { return this.ranges[this.primaryIndex]; }
        /// Make sure the selection only has one range. Returns a selection
        /// holding only the primary range from this selection.
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.primary]);
        }
        /// Extend this selection with an extra range.
        addRange(range, primary = true) {
            return EditorSelection.create([range].concat(this.ranges), primary ? 0 : this.primaryIndex + 1);
        }
        /// Replace a given range with another range, and then normalize the
        /// selection to merge and sort ranges if necessary.
        replaceRange(range, which = this.primaryIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.primaryIndex);
        }
        /// Convert this selection to an object that can be serialized to
        /// JSON.
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), primaryIndex: this.primaryIndex };
        }
        /// Create a selection from a JSON representation.
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.primaryIndex != "number" || json.primaryIndex >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.primaryIndex);
        }
        /// Create a selection holding a single range.
        static single(anchor, head = anchor) {
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /// Sort and merge the given set of ranges, creating a valid
        /// selection.
        static create(ranges, primaryIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return normalized(ranges.slice(), primaryIndex);
                pos = range.to;
            }
            return new EditorSelection(ranges, primaryIndex);
        }
        /// Create a cursor selection range at the given position. You can
        /// probably ignore [association](#state.SelectionRange.assoc) and
        /// [bidi level](#state.SelectionRange.bidiLevel) in most
        /// situations.
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) |
                (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */));
        }
        /// Create a selection range.
        static range(anchor, head, goalColumn) {
            let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;
            return head < anchor ? new SelectionRange(head, anchor, 16 /* Inverted */ | goal) : new SelectionRange(anchor, head, goal);
        }
    }
    function normalized(ranges, primaryIndex = 0) {
        let primary = ranges[primaryIndex];
        ranges.sort((a, b) => a.from - b.from);
        primaryIndex = ranges.indexOf(primary);
        for (let i = 1; i < ranges.length; i++) {
            let range = ranges[i], prev = ranges[i - 1];
            if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                let from = prev.from, to = Math.max(range.to, prev.to);
                if (i <= primaryIndex)
                    primaryIndex--;
                ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
            }
        }
        return new EditorSelection(ranges, primaryIndex);
    }
    function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }

    let nextID = 0;
    /// A facet is a value that is assicated with a state and can be
    /// influenced by any number of extensions. Extensions can provide
    /// input values for the facet, and the facet combines those into an
    /// output value.
    ///
    /// Examples of facets are the theme styles associated with an editor
    /// (which are all stored) or the tab size (which is reduced to a
    /// single value, using the input with the hightest precedence).
    class Facet {
        constructor(
        /// @internal
        combine, 
        /// @internal
        compareInput, 
        /// @internal
        compare, isStatic) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            /// @internal
            this.id = nextID++;
            this.default = combine([]);
        }
        /// Define a new facet.
        static define(config = {}) {
            return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static);
        }
        /// Returns an extension that adds the given value for this facet.
        of(value) {
            return new FacetProvider([], this, 0 /* Static */, value);
        }
        /// Create an extension that computes a value for the facet from a
        /// state. You must take care to declare the parts of the state that
        /// this value depends on, since your function is only called again
        /// for a new state when one of those parts changed.
        ///
        /// In most cases, you'll want to use the
        /// [`provide`](#state.StateField^define^config.provide) option when
        /// defining a field instead.
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1 /* Single */, get);
        }
        /// Create an extension that computes zero or more values for this
        /// facet from a state.
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2 /* Multi */, get);
        }
        /// Helper method for registering a facet source with a state field
        /// via its [`provide`](#state.StateField^define^config.provide) option.
        /// Returns a value that can be passed to that option to make the
        /// field automatically provide a value for this facet.
        from(get, prec) {
            return field => maybePrec(prec, this.compute([field], state => get(state.field(field))));
        }
        /// Helper for [providing](#state.StateField^define^config.provide)
        /// a dynamic number of values for this facet from a state field.
        nFrom(get, prec) {
            return field => maybePrec(prec, this.computeN([field], state => get(state.field(field))));
        }
    }
    function sameArray(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    class FacetProvider {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID++;
        }
        dynamicSlot(addresses) {
            let getter = this.value;
            let compare = this.facet.compareInput;
            let idx = addresses[this.id] >> 1, multi = this.type == 2 /* Multi */;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((addresses[dep.id] & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return (state, tr) => {
                if (!tr || tr.reconfigure) {
                    state.values[idx] = getter(state);
                    return 1 /* Changed */;
                }
                else {
                    let depChanged = (depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) ||
                        depAddrs.some(addr => (ensureAddr(state, addr) & 1 /* Changed */) > 0);
                    if (!depChanged)
                        return 0;
                    let newVal = getter(state), oldVal = tr.startState.values[idx];
                    if (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))
                        return 0;
                    state.values[idx] = newVal;
                    return 1 /* Changed */;
                }
            };
        }
    }
    function compareArray(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        return (state, tr) => {
            let oldAddr = !tr ? null : tr.reconfigure ? tr.startState.config.address[facet.id] : idx << 1;
            let changed = oldAddr == null;
            for (let dynAddr of dynamic) {
                if (ensureAddr(state, dynAddr) & 1 /* Changed */)
                    changed = true;
            }
            if (!changed)
                return 0;
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr(state, providerAddrs[i]);
                if (providerTypes[i] == 2 /* Multi */)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            let newVal = facet.combine(values);
            if (oldAddr != null && facet.compare(newVal, getAddr(tr.startState, oldAddr)))
                return 0;
            state.values[idx] = newVal;
            return 1 /* Changed */;
        };
    }
    function maybeIndex(state, id) {
        let found = state.config.address[id];
        return found == null ? null : found >> 1;
    }
    /// Fields can store additional information in an editor state, and
    /// keep it in sync with the rest of the state.
    class StateField {
        constructor(
        /// @internal
        id, createF, updateF, compareF, 
        /// @internal
        facets) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.facets = facets;
        }
        /// Define a state field.
        static define(config) {
            let facets = [];
            let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), facets);
            if (config.provide)
                for (let p of config.provide) {
                    if (p instanceof Facet)
                        facets.push(p.compute([field], state => state.field(field)));
                    else
                        facets.push(p(field));
                }
            return field;
        }
        /// @internal
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return (state, tr) => {
                if (!tr) {
                    state.values[idx] = this.createF(state);
                    return 1 /* Changed */;
                }
                let oldVal, changed = 0;
                if (tr.reconfigure) {
                    let oldIdx = maybeIndex(tr.startState, this.id);
                    oldVal = oldIdx == null ? this.createF(tr.startState) : tr.startState.values[oldIdx];
                    changed = 1 /* Changed */;
                }
                else {
                    oldVal = tr.startState.values[idx];
                }
                let value = this.updateF(oldVal, tr);
                if (!changed && !this.compareF(oldVal, value))
                    changed = 1 /* Changed */;
                if (changed)
                    state.values[idx] = value;
                return changed;
            };
        }
    }
    const Prec = { fallback: 3, default: 2, extend: 1, override: 0 };
    /// By default extensions are registered in the order they are found
    /// the flattened form of nested array that was provided. Individual
    /// extension values can be assigned a precedence to override this.
    /// Extensions that do not have a precedence set get the precedence of
    /// the nearest parent with a precedence, or
    /// [`"default"`](#state.Precedence) if there is no such parent. The
    /// final ordering of extensions is determined by first sorting by
    /// precedence and then by order within each precedence.
    function precedence(extension, value) {
        if (!Prec.hasOwnProperty(value))
            throw new RangeError(`Invalid precedence: ${value}`);
        return new PrecExtension(extension, Prec[value]);
    }
    function maybePrec(prec, ext) {
        return prec ? precedence(ext, prec) : ext;
    }
    class PrecExtension {
        constructor(e, prec) {
            this.e = e;
            this.prec = prec;
        }
    }
    class TaggedExtension {
        constructor(tag, extension) {
            this.tag = tag;
            this.extension = extension;
        }
    }
    class Configuration {
        constructor(source, replacements, dynamicSlots, address, staticValues) {
            this.source = source;
            this.replacements = replacements;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.statusTemplate = [];
            while (this.statusTemplate.length < staticValues.length)
                this.statusTemplate.push(0 /* Uninitialized */);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(extension, replacements = Object.create(null), oldState) {
            let fields = [];
            let facets = Object.create(null);
            for (let ext of flatten(extension, replacements)) {
                if (ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                if (providers.every(p => p.type == 0 /* Static */)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    let value = facet.combine(providers.map(p => p.value));
                    let oldAddr = oldState ? oldState.config.address[facet.id] : null;
                    if (oldAddr != null) {
                        let oldVal = getAddr(oldState, oldAddr);
                        if (facet.compare(value, oldVal))
                            value = oldVal;
                    }
                    staticValues.push(value);
                }
                else {
                    for (let p of providers) {
                        if (p.type == 0 /* Static */) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
                }
            }
            return new Configuration(extension, replacements, dynamicSlots.map(f => f(address)), address, staticValues);
        }
    }
    function allKeys(obj) {
        return (Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(obj) : []).concat(Object.keys(obj));
    }
    function flatten(extension, replacements) {
        let result = [[], [], [], []];
        let seen = new Map();
        let tagsSeen = Object.create(null);
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known >= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof TaggedExtension) {
                if (ext.tag in tagsSeen)
                    throw new RangeError(`Duplicate use of tag '${String(ext.tag)}' in extensions`);
                tagsSeen[ext.tag] = true;
                inner(replacements[ext.tag] || ext.extension, prec);
            }
            else if (ext.extension) {
                inner(ext.extension, prec);
            }
            else if (ext instanceof PrecExtension) {
                inner(ext.e, ext.prec);
            }
            else {
                result[prec].push(ext);
                if (ext instanceof StateField)
                    inner(ext.facets, prec);
            }
        }
        inner(extension, Prec.default);
        for (let key of allKeys(replacements))
            if (!(key in tagsSeen) && key != "full" && replacements[key]) {
                tagsSeen[key] = true;
                inner(replacements[key], Prec.default);
            }
        return result.reduce((a, b) => a.concat(b));
    }
    function ensureAddr(state, addr) {
        if (addr & 1)
            return 2 /* Computed */;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4 /* Computing */)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2 /* Computed */)
            return status;
        state.status[idx] = 4 /* Computing */;
        let changed = state.config.dynamicSlots[idx](state, state.applying);
        return state.status[idx] = 2 /* Computed */ | changed;
    }
    function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }

    const allowMultipleSelections = Facet.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator = Facet.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter = Facet.define();
    const transactionFilter = Facet.define();
    /// A node prop stored on a grammar's top node to indicate the facet
    /// used to store [language data](#state.EditorState.languageDataAt)
    /// related to that language.
    const languageDataProp = new NodeProp();
    const globalLanguageData = Facet.define();
    /// Indentation contexts are used when calling
    /// [`EditorState.indentation`](#state.EditorState^indentation). They
    /// provide helper utilities useful in indentation logic, and can
    /// selectively override the indentation reported for some
    /// lines.
    class IndentContext {
        /// Create an indent context.
        constructor(
        /// The editor state.
        state, 
        /// @internal
        options = {}) {
            this.state = state;
            this.options = options;
        }
        /// The indent unit (number of columns per indentation level).
        get unit() { return this.state.indentUnit; }
        /// Get the text directly after `pos`, either the entire line
        /// or the next 100 characters, whichever is shorter.
        textAfterPos(pos) {
            var _a, _b;
            let sim = (_a = this.options) === null || _a === void 0 ? void 0 : _a.simulateBreak;
            if (pos == sim && ((_b = this.options) === null || _b === void 0 ? void 0 : _b.simulateDoubleBreak))
                return "";
            return this.state.sliceDoc(pos, Math.min(pos + 100, sim != null && sim > pos ? sim : 1e9, this.state.doc.lineAt(pos).to));
        }
        /// find the column position (taking tabs into account) of the given
        /// position in the given string.
        countColumn(line, pos) {
            return countColumn(pos < 0 ? line : line.slice(0, pos), 0, this.state.tabSize);
        }
        /// Find the indentation column of the given document line.
        lineIndent(line) {
            var _a;
            let override = (_a = this.options) === null || _a === void 0 ? void 0 : _a.overrideIndentation;
            if (override) {
                let overriden = override(line.from);
                if (overriden > -1)
                    return overriden;
            }
            let text = line.slice(0, Math.min(100, line.length));
            return this.countColumn(text, text.search(/\S/));
        }
        /// Find the column for the given position.
        column(pos) {
            var _a;
            let line = this.state.doc.lineAt(pos), text = line.slice(0, pos - line.from);
            let result = this.countColumn(text, pos - line.from);
            let override = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.overrideIndentation) ? this.options.overrideIndentation(line.from) : -1;
            if (override > -1)
                result += override - this.countColumn(text, text.search(/\S/));
            return result;
        }
    }

    /// Annotations are tagged values that are used to add metadata to
    /// transactions in an extensible way. They should be used to model
    /// things that effect the entire transaction (such as its [time
    /// stamp](#state.Transaction^time) or information about its
    /// [origin](#state.Transaction^userEvent)). For effects that happen
    /// _alongside_ the other changes made by the transaction, [state
    /// effects](#state.StateEffect) are more appropriate.
    class Annotation {
        /// @internal
        constructor(type, value) {
            this.type = type;
            this.value = value;
        }
        /// Define a new type of annotation.
        static define() { return new AnnotationType(); }
    }
    /// Marker that identifies a type of [annotation](#state.Annotation).
    class AnnotationType {
        of(value) { return new Annotation(this, value); }
    }
    /// State effects can be used to represent additional effects
    /// associated with a [transaction](#state.Transaction.effects). They
    /// are often useful to model changes to custom [state
    /// fields](#state.StateField), when those changes aren't implicit in
    /// document or selection changes.
    class StateEffect {
        /// @internal
        constructor(
        /// @internal
        type, 
        /// The value of this effect.
        value) {
            this.type = type;
            this.value = value;
        }
        /// Map this effect through a position mapping. Will return
        /// `undefined` when that ends up deleting the effect.
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /// Tells you whether this effect object is of a given
        /// [type](#state.StateEffectType).
        is(type) { return this.type == type; }
        /// Define a new effect type. The type parameter indicates the type
        /// of values that his effect holds.
        static define(spec = {}) {
            return new StateEffectType(spec.map || (v => v));
        }
        /// Map an array of effects through a change set.
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /// Representation of a type of state effect. Defined with
    /// [`StateEffect.define`](#state.StateEffect^define).
    class StateEffectType {
        /// @internal
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /// @internal
        map) {
            this.map = map;
        }
        /// Create a [state effect](#state.StateEffect) instance of this
        /// type.
        of(value) { return new StateEffect(this, value); }
    }
    /// Changes to the editor state are grouped into transactions.
    /// Typically, a user action creates a single transaction, which may
    /// contain any number of document changes, may change the selection,
    /// or have other effects. Create a transaction by calling
    /// [`EditorState.update`](#state.EditorState.update).
    class Transaction {
        /// @internal
        constructor(
        /// The state from which the transaction starts.
        startState, 
        /// The document changes made by this transaction.
        changes, 
        /// The selection set by this transaction, or undefined if it
        /// doesn't explicitly set a selection.
        selection, 
        /// The effects added to the transaction.
        effects, 
        /// @internal
        annotations, 
        /// Holds an object when this transaction
        /// [reconfigures](#state.ReconfigurationSpec) the state.
        reconfigure, 
        /// Whether the selection should be scrolled into view after this
        /// transaction is dispatched.
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.reconfigure = reconfigure;
            this.scrollIntoView = scrollIntoView;
            /// @internal
            this._doc = null;
            /// @internal
            this._state = null;
            if (selection)
                checkSelection(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction.time))
                this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /// The new document produced by the transaction. (Mostly exposed so
        /// that [transaction filters](#state.EditorState^transactionFilter)
        /// can look at the new document without forcing an entire new state
        /// to be computed by accessing
        /// [`.state`](#state.Transaction.state).
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /// The new selection produced by the transaction. If
        /// [`this.selection`](#state.Transaction.selection) is undefined,
        /// this will [map](#state.EditorSelection.map) the start state's
        /// current selection through the changes made by the transaction.
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /// The new state created by the transaction.
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /// Get the value of the given annotation type, if any.
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /// Indicates whether the transaction changed the document.
        get docChanged() { return !this.changes.empty; }
    }
    /// Annotation used to store transaction timestamps.
    Transaction.time = Annotation.define();
    /// Annotation used to associate a transaction with a user interface
    /// event. The view will set this to...
    ///
    ///  - `"input"` when the user types text
    ///  - `"delete"` when the user deletes the selection or text near the selection
    ///  - `"keyboardselection"` when moving the selection via the keyboard
    ///  - `"pointerselection"` when moving the selection through the pointing device
    ///  - `"paste"` when pasting content
    ///  - `"cut"` when cutting
    ///  - `"drop"` when content is inserted via drag-and-drop
    Transaction.userEvent = Annotation.define();
    /// Annotation indicating whether a transaction should be added to
    /// the undo history or not.
    Transaction.addToHistory = Annotation.define();
    function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView,
            reconfigure: !b.reconfigure ? a.reconfigure : b.reconfigure.full || !a.reconfigure ? b.reconfigure
                : Object.assign({}, a.reconfigure, b.reconfigure)
        };
    }
    function resolveTransactionInner(state, spec, docSize) {
        let reconf = spec.reconfigure;
        if (reconf && reconf.append) {
            reconf = Object.assign({}, reconf);
            let tag = typeof Symbol == "undefined" ? "__append" + Math.floor(Math.random() * 0xffffffff) : Symbol("appendConf");
            reconf[tag] = reconf.append;
            reconf.append = undefined;
        }
        let sel = spec.selection;
        return {
            changes: spec.changes instanceof ChangeSet ? spec.changes
                : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
            selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
            effects: asArray(spec.effects),
            annotations: asArray(spec.annotations),
            scrollIntoView: !!spec.scrollIntoView,
            reconfigure: reconf
        };
    }
    function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = new Transaction(state, s.changes, s.selection, s.effects, s.annotations, s.reconfigure, s.scrollIntoView);
        return filter ? filterTransaction(tr) : tr;
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.invertedDesc;
            }
            tr = new Transaction(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.reconfigure, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
                tr = filtered[0];
            else
                tr = resolveTransaction(state, asArray(filtered), false);
        }
        return tr;
    }
    const none = [];
    function asArray(value) {
        return value == null ? none : Array.isArray(value) ? value : [value];
    }

    /// This is used to [categorize](#state.EditorState.charCategorizer)
    /// characters into three categories—word characters, whitespace, and
    /// anything else. It is used do things like selecting by word.
    var CharCategory;
    (function (CharCategory) {
        CharCategory[CharCategory["Word"] = 0] = "Word";
        CharCategory[CharCategory["Space"] = 1] = "Space";
        CharCategory[CharCategory["Other"] = 2] = "Other";
    })(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
        wordChar = new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar(str) {
        if (wordChar)
            return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory.Space;
            if (hasWordChar(char))
                return CharCategory.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory.Word;
            return CharCategory.Other;
        };
    }

    /// The editor state class is a persistent (immutable) data structure.
    /// To update a state, you [create](#state.EditorState.update) a
    /// [transaction](#state.Transaction), which produces a _new_ state
    /// instance, without modifying the original object.
    ///
    /// As such, _never_ mutate properties of a state directly. That'll
    /// just break things.
    class EditorState {
        /// @internal
        constructor(
        /// @internal
        config, 
        /// The current document.
        doc, 
        /// The current selection.
        selection, tr = null) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            /// @internal
            this.applying = null;
            this.status = config.statusTemplate.slice();
            if (tr && !tr.reconfigure) {
                this.values = tr.startState.values.slice();
            }
            else {
                this.values = config.dynamicSlots.map(_ => null);
                // Copy over old values for shared facets/fields if this is a reconfigure
                if (tr)
                    for (let id in config.address) {
                        let cur = config.address[id], prev = tr.startState.config.address[id];
                        if (prev != null && (cur & 1) == 0)
                            this.values[cur >> 1] = getAddr(tr.startState, prev);
                    }
            }
            this.applying = tr;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr(this, i << 1);
            this.applying = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /// Create a [transaction](#state.Transaction) that updates this
        /// state. Any number of [transaction specs](#state.TransactionSpec)
        /// can be passed. The [changes](#state.TransactionSpec.changes) (if
        /// any) of each spec are assumed to start in the _current_ document
        /// (not the document produced by previous specs), and its
        /// [selection](#state.TransactionSpec.selection) and
        /// [effects](#state.TransactionSpec.effects) are assumed to refer
        /// to the document created by its _own_ changes. The resulting
        /// transaction contains the combined effect of all the different
        /// specs. For things like
        /// [selection](#state.TransactionSpec.selection) or
        /// [reconfiguration](#state.TransactionSpec.reconfigure), later
        /// specs take precedence over earlier ones.
        update(...specs) {
            return resolveTransaction(this, specs, true);
        }
        /// @internal
        applyTransaction(tr) {
            let conf = this.config;
            if (tr.reconfigure)
                conf = Configuration.resolve(tr.reconfigure.full || conf.source, Object.assign(conf.replacements, tr.reconfigure, { full: undefined }), this);
            new EditorState(conf, tr.newDoc, tr.newSelection, tr);
        }
        /// Create a [transaction spec](#state.TransactionSpec) that
        /// replaces every selection range with the given content.
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection.cursor(range.from + text.length) }));
        }
        /// Create a set of changes and a new selection by running the given
        /// function for each range in the active selection. The function
        /// can return an optional set of changes (in the coordinate space
        /// of the start document), plus an updated range (in the coordinate
        /// space of the document produced by the call's own changes). This
        /// method will merge all the changes and ranges into a single
        /// changeset and selection, and return it as a [transaction
        /// spec](#state.TransactionSpec), which can be passed to
        /// [`update`](#state.EditorState.update).
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection.create(ranges, sel.primaryIndex),
                effects
            };
        }
        /// Create a [change set](#state.ChangeSet) from the given change
        /// description, taking the state's document length and line
        /// separator into account.
        changes(spec = []) {
            if (spec instanceof ChangeSet)
                return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /// Using the state's [line
        /// separator](#state.EditorState^lineSeparator), create a
        /// [`Text`](#text.Text) instance from the given string.
        toText(string) {
            return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /// Return the given range of the document as a string.
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /// Get the value of a state [facet](#state.Facet).
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /// Convert this state to a JSON-serializable object.
        toJSON() {
            // FIXME plugin state serialization
            return {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
        }
        /// Deserialize a state from its JSON representation.
        static fromJSON(json, config = {}) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            return EditorState.create({
                doc: json.doc,
                selection: EditorSelection.fromJSON(json.selection),
                extensions: config.extensions
            });
        }
        /// Create a new state. You'll usually only need this when
        /// initializing an editor—updated states are created by applying
        /// transactions.
        static create(config = {}) {
            let configuration = Configuration.resolve(config.extensions || []);
            let doc = config.doc instanceof Text ? config.doc
                : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            let selection = !config.selection ? EditorSelection.single(0)
                : config.selection instanceof EditorSelection ? config.selection
                    : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections))
                selection = selection.asSingle();
            return new EditorState(configuration, doc, selection);
        }
        /// The size (in columns) of a tab in the document, determined by
        /// the [`tabSize`](#state.EditorState^tabSize) facet.
        get tabSize() { return this.facet(EditorState.tabSize); }
        /// Get the proper [line-break](#state.EditorState^lineSeparator)
        /// string for this state.
        get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
        /// The _column width_ of an indent unit in the document. Determined
        /// by the [`indentUnit`](#state.EditorState^indentUnit) facet, and
        /// [`tabSize`](#state.EditorState^tabSize) when that contains tabs.
        get indentUnit() {
            let unit = this.facet(EditorState.indentUnit);
            return unit.charCodeAt(0) == 9 ? this.tabSize * unit.length : unit.length;
        }
        /// Create an indentation string that covers columns 0 to `cols`.
        /// Will use tabs for as much of the columns as possible when the
        /// [`indentUnit`](#state.EditorState^indentUnit) facet contains
        /// tabs.
        indentString(cols) {
            let result = "";
            if (this.facet(EditorState.indentUnit).charCodeAt(0) == 9)
                while (cols >= this.tabSize) {
                    result += "\t";
                    cols -= this.tabSize;
                }
            for (let i = 0; i < cols; i++)
                result += " ";
            return result;
        }
        /// Look up a translation for the given phrase (via the
        /// [`phrases`](#state.EditorState^phrases) facet), or return the
        /// original string if no translation is found.
        phrase(phrase) {
            for (let map of this.facet(EditorState.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase))
                    return map[phrase];
            return phrase;
        }
        /// Return a function that can categorize strings (expected to
        /// represent a single [grapheme cluster](#text.nextClusterBreak))
        /// into one of:
        ///
        ///  - Word (contains an alphanumeric character or a character
        ///    explicitly listed in the local language's `"wordChars"`
        ///    language data, which should be a string)
        ///  - Space (contains only whitespace)
        ///  - Other (anything else)
        charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        /// Get the syntax tree for this state, which is the current
        /// (possibly incomplete) parse tree of the [syntax](#state.Syntax)
        /// with the highest precedence, or the empty tree if there is no
        /// syntax available.
        get tree() {
            let syntax = this.facet(EditorState.syntax);
            return syntax.length ? syntax[0].getTree(this) : Tree.empty;
        }
        /// Find the values for a given language data field, either provided
        /// by the [syntax](#syntax.LezerSyntax.languageData) or through the
        /// [`globalLanguageData`](#state.EditorState^globalLanguageData) facet,
        /// for the [language](#state.Syntax.languageDataFacetAt) at the
        /// given position. Values provided by the facet, in precedence
        /// order, will appear before those provided by the syntax.
        languageDataAt(name, pos) {
            let values = [];
            let syntax = this.facet(EditorState.syntax);
            for (let i = syntax.length ? 0 : 1; i < 2; i++) {
                let source = this.facet(i ? globalLanguageData : syntax[0].languageDataFacetAt(this, pos));
                for (let obj of source)
                    if (Object.prototype.hasOwnProperty.call(obj, name))
                        values.push(obj[name]);
            }
            return values;
        }
    }
    /// A facet that, when enabled, causes the editor to allow multiple
    /// ranges to be selected. Be careful though, because by default the
    /// editor relies on the native DOM selection, which cannot handle
    /// multiple selections. An extension like
    /// [`drawSelection`](#view.drawSelection) can be used to make
    /// secondary selections visible to the user.
    EditorState.allowMultipleSelections = allowMultipleSelections;
    /// Facet that defines a way to query for automatic indentation
    /// depth at the start of a given line.
    EditorState.indentation = Facet.define();
    /// Configures the tab size to use in this state. The first
    /// (highest-precedence) value of the facet is used. If no value is
    /// given, this defaults to 4.
    EditorState.tabSize = Facet.define({
        combine: values => values.length ? values[0] : 4
    });
    /// The line separator to use. By default, any of `"\n"`, `"\r\n"`
    /// and `"\r"` is treated as a separator when splitting lines, and
    /// lines are joined with `"\n"`.
    ///
    /// When you configure a value here, only that precise separator
    /// will be used, allowing you to round-trip documents through the
    /// editor without normalizing line separators.
    EditorState.lineSeparator = lineSeparator;
    /// Facet for overriding the unit by which indentation happens.
    /// Should be a string consisting either entirely of spaces or
    /// entirely of tabs. When not set, this defaults to 2 spaces.
    EditorState.indentUnit = Facet.define({
        combine: values => {
            if (!values.length)
                return "  ";
            if (!/^(?: +|\t+)$/.test(values[0]))
                throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
            return values[0];
        }
    });
    /// Registers translation phrases. The
    /// [`phrase`](#state.EditorState.phrase) method will look through
    /// all objects registered with this facet to find translations for
    /// its argument.
    EditorState.phrases = Facet.define();
    /// Facet that registers a parsing service for the state.
    EditorState.syntax = Facet.define();
    /// A facet used to register [language
    /// data](#state.EditorState.languageDataAt) that should apply
    /// throughout the document, regardless of language.
    EditorState.globalLanguageData = globalLanguageData;
    /// A facet that registers a code folding service. When called with
    /// the extent of a line, such a function should return a range
    /// object when a foldable that starts on that line (but continues
    /// beyond it), if one can be found.
    EditorState.foldable = Facet.define();
    /// Facet used to register change filters, which are called for each
    /// transaction (unless explicitly
    /// [disabled](#state.TransactionSpec.filter)), and can suppress
    /// part of the transaction's changes.
    ///
    /// Such a function can return `true` to indicate that it doesn't
    /// want to do anything, `false` to completely stop the changes in
    /// the transaction, or a set of ranges in which changes should be
    /// suppressed. Such ranges are represented as an array of numbers,
    /// with each pair of two number indicating the start and end of a
    /// range. So for example `[10, 20, 100, 110]` suppresses changes
    /// between 10 and 20, and between 100 and 110.
    EditorState.changeFilter = changeFilter;
    /// Facet used to register a hook that gets a chance to update or
    /// replace transaction specs before they are applied. This will
    /// only be applied for transactions that don't have
    /// [`filter`](#state.TransactionSpec.filter) set to `false`. You
    /// can either return a single (possibly the input transaction), or
    /// an array of specs (which will be combined in the same way as the
    /// arguments to [`EditorState.update`](#state.EditorState.update)).
    ///
    /// When possible, it is recommended to avoid accessing
    /// [`Transaction.state`](#state.Transaction.state) in a filter,
    /// since it will force creation of a state that will then be
    /// discarded again, if the transaction is actually filtered.
    ///
    /// (This functionality should be used with care. Indiscriminately
    /// modifying transaction is likely to break something or degrade
    /// the user experience.)
    EditorState.transactionFilter = transactionFilter;

    /// Utility function for combining behaviors to fill in a config
    /// object from an array of provided configs. Will, by default, error
    /// when a field gets two values that aren't ===-equal, but you can
    /// provide combine functions per field to do something else.
    function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
    combine = {}) {
        let result = {};
        for (let config of configs)
            for (let key of Object.keys(config)) {
                let value = config[key], current = result[key];
                if (current === undefined)
                    result[key] = value;
                else if (current === value || value === undefined) ; // No conflict
                else if (Object.hasOwnProperty.call(combine, key))
                    result[key] = combine[key](current, value);
                else
                    throw new Error("Config merge conflict for field " + key);
            }
        for (let key in defaults)
            if (result[key] === undefined)
                result[key] = defaults[key];
        return result;
    }

    const C = "\u037c";
    const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top = typeof global == "undefined" ? window : global;

    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule {
      // :: (Object<Style>, ?{process: (string) → string, extend: (string, string) → string})
      // Create a style module from the given spec.
      //
      // When `process` is given, it is called on regular (non-`@`)
      // selector properties to provide the actual selector. When `extend`
      // is given, it is called when a property containing an `&` is
      // found, and should somehow combine the `&`-template (its first
      // argument) with the selector (its second argument) to produce an
      // extended selector.
      constructor(spec, options) {
        this.rules = [];
        let {process, extend} = options || {};

        function processSelector(selector) {
          if (/^@/.test(selector)) return [selector]
          let selectors = selector.split(",");
          return process ? selectors.map(process) : selectors
        }

        function render(selectors, spec, target) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]);
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(selectors.map(s => extend ? extend(prop, s) : prop.replace(/&/, s)), value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(isAt[1] == "keyframes" ? [prop] : processSelector(prop), value, local);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || isAt && isAt[1] == "keyframes") target.push(selectors.join(",") + " {" + local.join(" ") + "}");
        }

        for (let prop in spec) render(processSelector(prop), spec[prop], this.rules);
      }

      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C + id.toString(36)
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      static mount(root, modules) {
        (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
      }
    }

    let adoptedSet = null;

    class StyleSet {
      constructor(root) {
        if (root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
          if (adoptedSet) {
            root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
            return root[SET] = adoptedSet
          }
          this.sheet = new CSSStyleSheet;
          root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
          adoptedSet = this;
        } else {
          this.styleTag = (root.ownerDocument || root).createElement("style");
          let target = root.head || root;
          target.insertBefore(this.styleTag, target.firstChild);
        }
        this.modules = [];
        root[SET] = this;
      }

      mount(modules) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }

        if (!sheet) {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].rules.join("\n") + "\n";
          this.styleTag.textContent = text;
        }
      }
    }

    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.

    /// Each range is associated with a value, which must inherit from
    /// this class.
    class RangeValue {
        /// Compare this value with another value. The default
        /// implementation compares by identity.
        eq(other) { return this == other; }
        /// Create a [range](#rangeset.Range) with this value.
        range(from, to = from) { return new Range(from, to, this); }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    /// A range associates a value with a range of positions.
    class Range {
        /// @internal
        constructor(
        /// The range's start position.
        from, 
        /// Its end position.
        to, 
        /// The value associated with this range.
        value) {
            this.from = from;
            this.to = to;
            this.value = value;
        }
    }
    function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
    }
    // The maximum amount of ranges to store in a single chunk
    const ChunkSize = 250, 
    // Chunks with points of this size are never skipped during
    // compare, since moving past those points is likely to speed
    // up, rather than slow down, the comparison.
    BigPointSize = 500, 
    // A large (fixnum) value to use for max/min values.
    Far = 1e9;
    class Chunk {
        constructor(from, to, value, 
        // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
            this.from = from;
            this.to = to;
            this.value = value;
            this.maxPoint = maxPoint;
        }
        get length() { return this.to[this.to.length - 1]; }
        // With side == -1, return the first index where to >= pos. When
        // side == 1, the first index where from > pos.
        findIndex(pos, end, side = end * Far, startAt = 0) {
            if (pos <= 0)
                return startAt;
            let arr = end < 0 ? this.to : this.from;
            for (let lo = startAt, hi = arr.length;;) {
                if (lo == hi)
                    return lo;
                let mid = (lo + hi) >> 1;
                let diff = arr[mid] - pos || (end < 0 ? this.value[mid].startSide : this.value[mid].endSide) - side;
                if (mid == lo)
                    return diff >= 0 ? lo : hi;
                if (diff >= 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
        }
        between(offset, from, to, f) {
            for (let i = this.findIndex(from, -1), e = this.findIndex(to, 1, undefined, i); i < e; i++)
                if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                    return false;
        }
        map(offset, changes) {
            let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
            for (let i = 0; i < this.value.length; i++) {
                let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
                if (curFrom == curTo) {
                    let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                    if (mapped == null)
                        continue;
                    newFrom = newTo = mapped;
                }
                else {
                    newFrom = changes.mapPos(curFrom, val.startSide);
                    newTo = changes.mapPos(curTo, val.endSide);
                    if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                        continue;
                }
                if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                    continue;
                if (newPos < 0)
                    newPos = newFrom;
                if (val.point)
                    maxPoint = Math.max(maxPoint, newTo - newFrom);
                value.push(val);
                from.push(newFrom - newPos);
                to.push(newTo - newPos);
            }
            return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
    }
    /// A range set stores a collection of [ranges](#rangeset.Range) in a
    /// way that makes them efficient to [map](#rangeset.RangeSet.map) and
    /// [update](#rangeset.RangeSet.update). This is an immutable data
    /// structure.
    class RangeSet {
        /// @internal
        constructor(
        /// @internal
        chunkPos, 
        /// @internal
        chunk, 
        /// @internal
        nextLayer = RangeSet.empty, 
        /// @internal
        maxPoint) {
            this.chunkPos = chunkPos;
            this.chunk = chunk;
            this.nextLayer = nextLayer;
            this.maxPoint = maxPoint;
        }
        /// @internal
        get length() {
            let last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /// @internal
        get size() {
            if (this == RangeSet.empty)
                return 0;
            let size = this.nextLayer.size;
            for (let chunk of this.chunk)
                size += chunk.value.length;
            return size;
        }
        /// @internal
        chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
        }
        /// Update the range set, optionally adding new ranges or filtering
        /// out existing ones.
        update(updateSpec) {
            let { add = [], sort = false, filter, filterFrom = 0, filterTo = this.length } = updateSpec;
            if (add.length == 0 && !filter)
                return this;
            if (sort)
                add.slice().sort(cmpRange);
            if (this == RangeSet.empty)
                return add.length ? RangeSet.of(add) : this;
            let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
            let builder = new RangeSetBuilder();
            while (cur.value || i < add.length) {
                if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                    let range = add[i++];
                    if (!builder.addInner(range.from, range.to, range.value))
                        spill.push(range);
                }
                else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                    (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                    (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                    builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                    cur.nextChunk();
                }
                else {
                    if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                        if (!builder.addInner(cur.from, cur.to, cur.value))
                            spill.push(new Range(cur.from, cur.to, cur.value));
                    }
                    cur.next();
                }
            }
            return builder.finishInner(this.nextLayer == RangeSet.empty && !spill.length ? RangeSet.empty
                : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /// Map this range set through a set of changes, return the new set.
        map(changes) {
            if (changes.length == 0 || this == RangeSet.empty)
                return this;
            let chunks = [], chunkPos = [], maxPoint = -1;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                let touch = changes.touchesRange(start, start + chunk.length);
                if (touch === false) {
                    maxPoint = Math.max(maxPoint, chunk.maxPoint);
                    chunks.push(chunk);
                    chunkPos.push(changes.mapPos(start));
                }
                else if (touch === true) {
                    let { mapped, pos } = chunk.map(start, changes);
                    if (mapped) {
                        maxPoint = Math.max(maxPoint, mapped.maxPoint);
                        chunks.push(mapped);
                        chunkPos.push(pos);
                    }
                }
            }
            let next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next, maxPoint);
        }
        /// Iterate over the ranges that touch the region `from` to `to`,
        /// calling `f` for each. There is no guarantee that the ranges will
        /// be reported in any order. When the callback returns `false`,
        /// iteration stops.
        between(from, to, f) {
            if (this == RangeSet.empty)
                return;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                if (to >= start && from <= start + chunk.length &&
                    chunk.between(start, from - start, to - start, f) === false)
                    return;
            }
            this.nextLayer.between(from, to, f);
        }
        /// Iterate over the ranges in this set, in order, including all
        /// ranges that end at or after `from`.
        iter(from = 0) {
            return HeapCursor.from([this]).goto(from);
        }
        /// Iterate over the given sets, starting from `from`.
        static iter(sets, from = 0) {
            return HeapCursor.from(sets).goto(from);
        }
        /// Iterate over two groups of sets, calling methods on `comparator`
        /// to notify it of possible differences. `textDiff` indicates how
        /// the underlying data changed between these ranges, and is needed
        /// to synchronize the iteration. `from` and `to` are coordinates in
        /// the _new_ space, after these changes.
        static compare(oldSets, newSets, textDiff, comparator) {
            var _a;
            let minPoint = (_a = comparator.minPointSize) !== null && _a !== void 0 ? _a : -1;
            let a = oldSets.filter(set => set.maxPoint >= BigPointSize ||
                set != RangeSet.empty && newSets.indexOf(set) < 0 && set.maxPoint >= minPoint);
            let b = newSets.filter(set => set.maxPoint >= BigPointSize ||
                set != RangeSet.empty && oldSets.indexOf(set) < 0 && set.maxPoint >= minPoint);
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, minPoint);
            let sideB = new SpanCursor(b, sharedChunks, minPoint);
            textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
            if (textDiff.empty && textDiff.length == 0)
                compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /// Iterate over a group of range sets at the same time, notifying
        /// the iterator about the ranges covering every given piece of
        /// content. Returns the open count (see
        /// [`SpanIterator.range`](#rangeset.SpanIterator.range)) at the end
        /// of the iteration.
        static spans(sets, from, to, iterator) {
            var _a;
            let cursor = new SpanCursor(sets, null, (_a = iterator.minPointSize) !== null && _a !== void 0 ? _a : -1).goto(from), pos = from;
            let open = cursor.openStart;
            for (;;) {
                let curTo = Math.min(cursor.to, to);
                if (cursor.point) {
                    iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open);
                    open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
                }
                else if (curTo > pos) {
                    iterator.span(pos, curTo, cursor.active, open);
                    open = cursor.openEnd(curTo);
                }
                if (cursor.to > to)
                    break;
                pos = cursor.to;
                cursor.next();
            }
            return open;
        }
        /// Create a range set for the given range or array of ranges. By
        /// default, this expects the ranges to be _sorted_ (by start
        /// position and, if two start at the same position,
        /// `value.startSide`). You can pass `true` as second argument to
        /// cause the method to sort them.
        static of(ranges, sort = false) {
            let build = new RangeSetBuilder();
            for (let range of ranges instanceof Range ? [ranges] : sort ? ranges.slice().sort(cmpRange) : ranges)
                build.add(range.from, range.to, range.value);
            return build.finish();
        }
    }
    /// The empty set of ranges.
    RangeSet.empty = new RangeSet([], [], null, -1);
    RangeSet.empty.nextLayer = RangeSet.empty;
    /// A range set builder is a data structure that helps build up a
    /// [range set](#rangeset.RangeSet) directly, without first allocating
    /// an array of [`Range`](#rangeset.Range) objects.
    class RangeSetBuilder {
        /// Create an empty builder.
        constructor() {
            this.chunks = [];
            this.chunkPos = [];
            this.chunkStart = -1;
            this.last = null;
            this.lastFrom = -Far;
            this.lastTo = -Far;
            this.from = [];
            this.to = [];
            this.value = [];
            this.maxPoint = -1;
            this.setMaxPoint = -1;
            this.nextLayer = null;
        }
        finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;
            if (newArrays) {
                this.from = [];
                this.to = [];
                this.value = [];
            }
        }
        /// Add a range. Ranges should be added in sorted (by `from` and
        /// `value.startSide`) order.
        add(from, to, value) {
            if (!this.addInner(from, to, value))
                (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
        }
        /// @internal
        addInner(from, to, value) {
            let diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
                throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0)
                return false;
            if (this.from.length == ChunkSize)
                this.finishChunk(true);
            if (this.chunkStart < 0)
                this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point)
                this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
        }
        /// @internal
        addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
                return false;
            if (this.from.length)
                this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            let last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
        }
        /// Finish the range set. Returns the new set. The builder can't be
        /// used anymore after this has been called.
        finish() { return this.finishInner(RangeSet.empty); }
        /// @internal
        finishInner(next) {
            if (this.from.length)
                this.finishChunk(false);
            if (this.chunks.length == 0)
                return next;
            let result = new RangeSet(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors
            return result;
        }
    }
    function findSharedChunks(a, b) {
        let inA = new Map();
        for (let set of a)
            for (let i = 0; i < set.chunk.length; i++)
                if (set.chunk[i].maxPoint < BigPointSize)
                    inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = new Set();
        for (let set of b)
            for (let i = 0; i < set.chunk.length; i++)
                if (inA.get(set.chunk[i]) == set.chunkPos[i])
                    shared.add(set.chunk[i]);
        return shared;
    }
    class LayerCursor {
        constructor(layer, skip, minPoint, rank = 0) {
            this.layer = layer;
            this.skip = skip;
            this.minPoint = minPoint;
            this.rank = rank;
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        get endSide() { return this.value ? this.value.endSide : 0; }
        goto(pos, side = -Far) {
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
        }
        gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
                let next = this.layer.chunk[this.chunkIndex];
                if (!(this.skip && this.skip.has(next) ||
                    this.layer.chunkEnd(this.chunkIndex) < pos ||
                    next.maxPoint < this.minPoint))
                    break;
                this.chunkIndex++;
                forward = false;
            }
            let rangeIndex = this.chunkIndex == this.layer.chunk.length ? 0
                : this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], -1, side);
            if (!forward || this.rangeIndex < rangeIndex)
                this.rangeIndex = rangeIndex;
            this.next();
        }
        forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0)
                this.gotoInner(pos, side, true);
        }
        next() {
            for (;;) {
                if (this.chunkIndex == this.layer.chunk.length) {
                    this.from = this.to = Far;
                    this.value = null;
                    break;
                }
                else {
                    let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                    let from = chunkPos + chunk.from[this.rangeIndex];
                    this.from = from;
                    this.to = chunkPos + chunk.to[this.rangeIndex];
                    this.value = chunk.value[this.rangeIndex];
                    if (++this.rangeIndex == chunk.value.length) {
                        this.chunkIndex++;
                        if (this.skip) {
                            while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                                this.chunkIndex++;
                        }
                        this.rangeIndex = 0;
                    }
                    if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                        break;
                }
            }
        }
        nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
        }
        compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.to - other.to || this.endSide - other.endSide;
        }
    }
    class HeapCursor {
        constructor(heap) {
            this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
            let heap = [];
            for (let i = 0; i < sets.length; i++) {
                for (let cur = sets[i]; cur != RangeSet.empty; cur = cur.nextLayer) {
                    if (cur.maxPoint >= minPoint)
                        heap.push(new LayerCursor(cur, skip, minPoint, i));
                }
            }
            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        goto(pos, side = -Far) {
            for (let cur of this.heap)
                cur.goto(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            this.next();
            return this;
        }
        forward(pos, side) {
            for (let cur of this.heap)
                cur.forward(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            if ((this.to - pos || this.value.endSide - side) < 0)
                this.next();
        }
        next() {
            if (this.heap.length == 0) {
                this.from = this.to = Far;
                this.value = null;
                this.rank = -1;
            }
            else {
                let top = this.heap[0];
                this.from = top.from;
                this.to = top.to;
                this.value = top.value;
                this.rank = top.rank;
                if (top.value)
                    top.next();
                heapBubble(this.heap, 0);
            }
        }
    }
    function heapBubble(heap, index) {
        for (let cur = heap[index];;) {
            let childIndex = (index << 1) + 1;
            if (childIndex >= heap.length)
                break;
            let child = heap[childIndex];
            if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
                child = heap[childIndex + 1];
                childIndex++;
            }
            if (cur.compare(child) < 0)
                break;
            heap[childIndex] = cur;
            heap[index] = child;
            index = childIndex;
        }
    }
    class SpanCursor {
        constructor(sets, skip, minPoint) {
            this.minPoint = minPoint;
            this.active = [];
            this.activeTo = [];
            this.activeRank = [];
            this.minActive = -1;
            // A currently active point range, if any
            this.point = null;
            this.pointFrom = 0;
            this.pointRank = 0;
            this.to = -Far;
            this.endSide = 0;
            this.openStart = -1;
            this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -Far) {
            this.cursor.goto(pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
        }
        forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
                this.removeActive(this.minActive);
            this.cursor.forward(pos, side);
        }
        removeActive(index) {
            remove(this.active, index);
            remove(this.activeTo, index);
            remove(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
            let i = 0, { value, to, rank } = this.cursor;
            while (i < this.activeRank.length && this.activeRank[i] <= rank)
                i++;
            insert(this.active, i, value);
            insert(this.activeTo, i, to);
            insert(this.activeRank, i, rank);
            if (trackOpen)
                insert(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
            let from = this.to;
            this.point = null;
            let trackOpen = this.openStart < 0 ? [] : null, trackExtra = 0;
            for (;;) {
                let a = this.minActive;
                if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                    if (this.activeTo[a] > from) {
                        this.to = this.activeTo[a];
                        this.endSide = this.active[a].endSide;
                        break;
                    }
                    this.removeActive(a);
                    if (trackOpen)
                        remove(trackOpen, a);
                }
                else if (!this.cursor.value) {
                    this.to = this.endSide = Far;
                    break;
                }
                else if (this.cursor.from > from) {
                    this.to = this.cursor.from;
                    this.endSide = this.cursor.startSide;
                    break;
                }
                else {
                    let nextVal = this.cursor.value;
                    if (!nextVal.point) { // Opening a range
                        this.addActive(trackOpen);
                        this.cursor.next();
                    }
                    else { // New point
                        this.point = nextVal;
                        this.pointFrom = this.cursor.from;
                        this.pointRank = this.cursor.rank;
                        this.to = this.cursor.to;
                        this.endSide = nextVal.endSide;
                        if (this.cursor.from < from)
                            trackExtra = 1;
                        this.cursor.next();
                        if (this.to > from)
                            this.forward(this.to, this.endSide);
                        break;
                    }
                }
            }
            if (trackOpen) {
                let openStart = 0;
                while (openStart < trackOpen.length && trackOpen[openStart] < from)
                    openStart++;
                this.openStart = openStart + trackExtra;
            }
        }
        activeForPoint(to) {
            if (!this.active.length)
                return this.active;
            let active = [];
            for (let i = 0; i < this.active.length; i++) {
                if (this.activeRank[i] > this.pointRank)
                    break;
                if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide > this.point.endSide)
                    active.push(this.active[i]);
            }
            return active;
        }
        openEnd(to) {
            let open = 0;
            while (open < this.activeTo.length && this.activeTo[open] > to)
                open++;
            return open;
        }
    }
    function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (;;) {
            let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
            let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
            if (a.point || b.point) {
                if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point))))
                    comparator.comparePoint(pos, clipEnd, a.point, b.point);
            }
            else {
                if (clipEnd > pos && !sameValues(a.active, b.active))
                    comparator.compareRange(pos, clipEnd, a.active, b.active);
            }
            if (end > endB)
                break;
            pos = end;
            if (diff <= 0)
                a.next();
            if (diff >= 0)
                b.next();
        }
    }
    function sameValues(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] != b[i] && !a[i].eq(b[i]))
                return false;
        return true;
    }
    function remove(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
            array[i] = array[i + 1];
        array.pop();
    }
    function insert(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
            array[i + 1] = array[i];
        array[index] = value;
    }
    function findMinIndex(value, array) {
        let found = -1, foundPos = Far;
        for (let i = 0; i < array.length; i++)
            if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
                found = i;
                foundPos = array[i];
            }
        return found;
    }

    let [nav, doc] = typeof navigator != "undefined"
        ? [navigator, document]
        : [{ userAgent: "", vendor: "", platform: "" }, { documentElement: { style: {} } }];
    const ie_edge = /Edge\/(\d+)/.exec(nav.userAgent);
    const ie_upto10 = /MSIE \d/.test(nav.userAgent);
    const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const gecko = !ie && /gecko\/(\d+)/i.test(nav.userAgent);
    const chrome = !ie && /Chrome\/(\d+)/.exec(nav.userAgent);
    const webkit = "webkitFontSmoothing" in doc.documentElement.style;
    var browser = {
        mac: /Mac/.test(nav.platform),
        ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko,
        gecko_version: gecko ? +(/Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios: !ie && /AppleWebKit/.test(nav.userAgent) && /Mobile\/\w+/.test(nav.userAgent),
        android: /Android\b/.test(nav.userAgent),
        webkit,
        safari: /Apple Computer/.test(nav.vendor),
        webkit_version: webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };

    function getSelection(root) {
        return (root.getSelection ? root.getSelection() : document.getSelection());
    }
    // Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
    // (isCollapsed inappropriately returns true in shadow dom)
    function selectionCollapsed(domSel) {
        let collapsed = domSel.isCollapsed;
        if (collapsed && browser.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)
            collapsed = false;
        return collapsed;
    }
    function hasSelection(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return dom.contains(selection.anchorNode.nodeType == 3 ? selection.anchorNode.parentNode : selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor(dom) {
        if (dom.nodeType == 3) {
            let range = tempRange();
            range.setEnd(dom, dom.nodeValue.length);
            range.setStart(dom, 0);
            return range.getClientRects();
        }
        else if (dom.nodeType == 1) {
            return dom.getClientRects();
        }
        else {
            return [];
        }
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                off = dir < 0 ? maxOffset(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect(win) {
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    const ScrollSpace = 5;
    function scrollRectIntoView(dom, rect) {
        let doc = dom.ownerDocument, win = doc.defaultView;
        for (let cur = dom.parentNode; cur;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == document.body;
                if (top) {
                    bounding = windowRect(win);
                }
                else {
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth,
                        top: rect.top, bottom: rect.top + cur.clientHeight };
                }
                let moveX = 0, moveY = 0;
                if (rect.top < bounding.top)
                    moveY = -(bounding.top - rect.top + ScrollSpace);
                else if (rect.bottom > bounding.bottom)
                    moveY = rect.bottom - bounding.bottom + ScrollSpace;
                if (rect.left < bounding.left)
                    moveX = -(bounding.left - rect.left + ScrollSpace);
                else if (rect.right > bounding.right)
                    moveX = rect.right - bounding.right + ScrollSpace;
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY;
                            moveY = cur.scrollTop - start;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX;
                            moveX = cur.scrollLeft - start;
                        }
                        rect = { left: rect.left - moveX, top: rect.top - moveY,
                            right: rect.right - moveX, bottom: rect.bottom - moveY };
                    }
                }
                if (top)
                    break;
                cur = cur.parentNode;
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    class DOMSelection {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        set(domSel) {
            this.anchorNode = domSel.anchorNode;
            this.anchorOffset = domSel.anchorOffset;
            this.focusNode = domSel.focusNode;
            this.focusOffset = domSel.focusOffset;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange;
    function tempRange() { return scratchRange || (scratchRange = document.createRange()); }

    var Dirty$1;
    (function (Dirty) {
        Dirty[Dirty["Not"] = 0] = "Not";
        Dirty[Dirty["Child"] = 1] = "Child";
        Dirty[Dirty["Node"] = 2] = "Node";
    })(Dirty$1 || (Dirty$1 = {}));
    class DOMPos {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
        static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
    }
    const none$1 = [];
    class ContentView {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.dirty = Dirty$1.Node;
        }
        get editorView() {
            if (!this.parent)
                throw new Error("Accessing view in orphan content view");
            return this.parent.editorView;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        // Will return a rectangle directly before (when side < 0), after
        // (side > 0) or directly on (when the browser supports it) the
        // given position.
        coordsAt(_pos, _side) { return null; }
        sync(track) {
            if (this.dirty & Dirty$1.Node) {
                let parent = this.dom, pos = null;
                for (let child of this.children) {
                    if (child.dirty) {
                        let next = pos ? pos.nextSibling : parent.firstChild;
                        if (next && !child.dom && !ContentView.get(next))
                            child.reuseDOM(next);
                        child.sync(track);
                        child.dirty = Dirty$1.Not;
                    }
                    if (track && track.node == parent && pos != child.dom)
                        track.written = true;
                    syncNodeInto(parent, pos, child.dom);
                    pos = child.dom;
                }
                let next = pos ? pos.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm(next);
            }
            else if (this.dirty & Dirty$1.Child) {
                for (let child of this.children)
                    if (child.dirty) {
                        child.sync(track);
                        child.dirty = Dirty$1.Not;
                    }
            }
        }
        reuseDOM(_dom) { return false; }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (end >= to && end != pos && toI == -1) {
                    toI = i;
                    toEnd = end;
                    break;
                }
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd, startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild, endDOM: toI < this.children.length - 1 && toI >= 0 ? this.children[toI + 1].dom : null };
        }
        // FIXME track precise dirty ranges, to avoid full DOM sync on every touched node?
        markDirty(andParent = false) {
            if (this.dirty & Dirty$1.Node)
                return;
            this.dirty |= Dirty$1.Node;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.dirty |= Dirty$1.Node;
                if (parent.dirty & Dirty$1.Child)
                    return;
                parent.dirty |= Dirty$1.Child;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.dirty)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = none$1) {
            this.markDirty();
            for (let i = from; i < to; i++)
                this.children[i].parent = null;
            this.children.splice(from, to - from, ...children);
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
    }
    ContentView.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    function syncNodeInto(parent, after, dom) {
        let next = after ? after.nextSibling : parent.firstChild;
        if (dom.parentNode == parent)
            while (next != dom)
                next = rm(next);
        else
            parent.insertBefore(dom, next);
    }
    class ChildCursor {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }

    const none$2 = [];
    class InlineView extends ContentView {
        /// Return true when this view is equivalent to `other` and can take
        /// on its role.
        become(_other) { return false; }
        // When this is a zero-length view with a side, this should return a
        // negative number to indicate it is before its position, or a
        // positive number when after its position.
        getSide() { return 0; }
    }
    InlineView.prototype.children = none$2;
    const MaxJoinLen = 256;
    class TextView extends InlineView {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType != 3)
                return false;
            this.createDOM(dom);
            return true;
        }
        merge(from, to, source) {
            if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        slice(from) {
            return new TextView(this.text.slice(from));
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords(this.dom, pos, side, this.length);
        }
    }
    class MarkView extends InlineView {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        createDOM() {
            let dom = document.createElement(this.mark.tagName);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            this.setDOM(dom);
        }
        sync(track) {
            if (!this.dom)
                this.createDOM();
            super.sync(track);
        }
        merge(from, to, source, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeInlineChildren(this, from, to, source ? source.children : none$2, openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        slice(from) {
            return new MarkView(this.mark, sliceInlineChildren(this.children, from), this.length - from);
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
    }
    function textCoords(text, pos, side, length) {
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else
                to++;
        }
        let range = tempRange();
        range.setEnd(text, to);
        range.setStart(text, from);
        let rect = range.getBoundingClientRect();
        return flatten ? flattenRect(rect, flatten < 0) : rect;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView extends InlineView {
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
        }
        static create(widget, length, side) {
            return new (widget.customView || WidgetView)(widget, length, side);
        }
        slice(from) { return WidgetView.create(this.widget, this.length - from, this.side); }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
                if (this.widget.constructor == other.widget.constructor) {
                    if (!this.widget.eq(other.widget))
                        this.markDirty(true);
                    this.widget = other.widget;
                    return true;
                }
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text.empty;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, _side) {
            let rects = this.dom.getClientRects(), rect = null;
            for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return rect;
        }
    }
    class CompositionView extends WidgetView {
        domAtPos(pos) { return new DOMPos(this.widget.text, pos); }
        sync() { if (!this.dom)
            this.setDOM(this.widget.toDOM()); }
        localPosFromDOM(node, offset) {
            return !offset ? 0 : node.nodeType == 3 ? Math.min(offset, this.length) : this.length;
        }
        ignoreMutation() { return false; }
        get overrideDOMText() { return null; }
        coordsAt(pos, side) { return textCoords(this.widget.text, pos, side, this.length); }
    }
    function mergeInlineChildren(parent, from, to, elts, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of elts)
            dLen += view.length;
        parent.length += dLen;
        let { children } = parent;
        // Both from and to point into the same text view
        if (fromI == toI && fromOff) {
            let start = children[fromI];
            // Maybe just update that view and be done
            if (elts.length == 1 && start.merge(fromOff, toOff, elts[0], openStart, openEnd))
                return;
            if (elts.length == 0) {
                start.merge(fromOff, toOff, null, openStart, openEnd);
                return;
            }
            // Otherwise split it, so that we don't have to worry about aliasing front/end afterwards
            let after = start.slice(toOff);
            if (after.merge(0, 0, elts[elts.length - 1], 0, openEnd))
                elts[elts.length - 1] = after;
            else
                elts.push(after);
            toI++;
            openEnd = toOff = 0;
        }
        // Make sure start and end positions fall on node boundaries
        // (fromOff/toOff are no longer used after this), and that if the
        // start or end of the elts can be merged with adjacent nodes,
        // this is done
        if (toOff) {
            let end = children[toI];
            if (elts.length && end.merge(0, toOff, elts[elts.length - 1], 0, openEnd)) {
                elts.pop();
                openEnd = 0;
            }
            else {
                end.merge(0, toOff, null, 0, 0);
            }
        }
        else if (toI < children.length && elts.length &&
            children[toI].merge(0, 0, elts[elts.length - 1], 0, openEnd)) {
            elts.pop();
            openEnd = 0;
        }
        if (fromOff) {
            let start = children[fromI];
            if (elts.length && start.merge(fromOff, start.length, elts[0], openStart, 0)) {
                elts.shift();
                openStart = 0;
            }
            else {
                start.merge(fromOff, start.length, null, 0, 0);
            }
            fromI++;
        }
        else if (fromI && elts.length) {
            let end = children[fromI - 1];
            if (end.merge(end.length, end.length, elts[0], openStart, 0)) {
                elts.shift();
                openStart = 0;
            }
        }
        // Then try to merge any mergeable nodes at the start and end of
        // the changed range
        while (fromI < toI && elts.length && children[toI - 1].become(elts[elts.length - 1])) {
            elts.pop();
            toI--;
            openEnd = 0;
        }
        while (fromI < toI && elts.length && children[fromI].become(elts[0])) {
            elts.shift();
            fromI++;
            openStart = 0;
        }
        if (!elts.length && fromI && toI < children.length && openStart && openEnd &&
            children[toI].merge(0, 0, children[fromI - 1], openStart, openEnd))
            fromI--;
        // And if anything remains, splice the child array to insert the new elts
        if (elts.length || fromI != toI)
            parent.replaceChildren(fromI, toI, elts);
    }
    function sliceInlineChildren(children, from) {
        let result = [], off = 0;
        for (let elt of children) {
            let end = off + elt.length;
            if (end > from)
                result.push(off < from ? elt.slice(from - off) : elt);
            off = end;
        }
        return result;
    }
    function inlineDOMAtPos(dom, children, pos) {
        let i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (; i > 0; i--) {
            let before = children[i - 1].dom;
            if (before.parentNode == dom)
                return DOMPos.after(before);
        }
        return new DOMPos(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length &&
            (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
            joinInlineInto(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren(view, pos, side) {
        for (let off = 0, i = 0; i < view.children.length; i++) {
            let child = view.children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (side <= 0 || end == view.length ? end >= pos : end > pos)
                return child.coordsAt(pos - off, side);
            off = end;
        }
        return (view.dom.lastChild || view.dom).getBoundingClientRect();
    }

    function combineAttrs(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    function attrsEq(a, b) {
        if (a == b)
            return true;
        if (!a || !b)
            return false;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length != keysB.length)
            return false;
        for (let key of keysA) {
            if (keysB.indexOf(key) == -1 || a[key] !== b[key])
                return false;
        }
        return true;
    }
    function updateAttrs(dom, prev, attrs) {
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs))
                    dom.removeAttribute(name);
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name]))
                    dom.setAttribute(name, attrs[name]);
    }

    /// Widgets added to the content are described by subclasses of this
    /// class. This makes it possible to delay creating of the DOM
    /// structure for a widget until it is needed, and to avoid redrawing
    /// widgets even when the decorations that define them are recreated.
    /// `T` can be a type of value passed to instances of the widget type.
    class WidgetType {
        /// Compare this instance to another instance of the same type.
        /// (TypeScript can't express this, but only instances of the same
        /// specific class will be passed to this method.) This is used to
        /// avoid redrawing widgets when they are replace by a new
        /// decoration of the same type. The default implementation just
        /// returns `false`, which may be wasteful.
        eq(_widget) { return false; }
        /// Update a DOM element created by a widget of the same type (but
        /// different, non-`eq` content) to reflect this widget. May return
        /// true to indicate that it could update, false to indicate it
        /// couldn't (in which case the widget will be redrawn). The default
        /// implementation just returns false.
        updateDOM(_dom) { return false; }
        /// @internal
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /// The estimated height this widget will have, to be used when
        /// estimating the height of content that hasn't been drawn. May
        /// return -1 to indicate you don't know. The default implementation
        /// returns -1.
        get estimatedHeight() { return -1; }
        /// Can be used to configure which kinds of events inside the widget
        /// should be ignored by the editor. The default is to ignore all
        /// events.
        ignoreEvent(_event) { return true; }
        //// @internal
        get customView() { return null; }
    }
    var Side;
    (function (Side) {
        Side[Side["BigInline"] = 100000000] = "BigInline";
        Side[Side["BigBlock"] = 200000000] = "BigBlock";
    })(Side || (Side = {}));
    /// The different types of blocks that can occur in an editor view.
    var BlockType;
    (function (BlockType) {
        /// A line of text.
        BlockType[BlockType["Text"] = 0] = "Text";
        /// A block widget associated with the position after it.
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /// A block widget associated with the position before it.
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /// A block widget [replacing](#view.Decoration^replace) a range of content.
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    })(BlockType || (BlockType = {}));
    /// A decoration provides information on how to draw or style a piece
    /// of content. You'll usually use it wrapped in a
    /// [`Range`](#rangeset.Range), which adds a start and end position.
    class Decoration extends RangeValue {
        /// @internal
        constructor(
        /// @internal
        startSide, 
        /// @internal
        endSide, 
        /// @internal
        widget, 
        /// The config object used to create this decoration.
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /// @internal
        get heightRelevant() { return false; }
        /// Create a mark decoration, which influences the styling of the
        /// content in its range. Nested mark decorations will cause nested
        /// DOM elements to be created. Nesting order is determined by
        /// precedence of the [facet](#view.EditorView^decorations) or
        /// (below the facet-provided decorations) [view
        /// plugin](#view.ViewPlugin.decorations). Such elements are broken
        /// on line boundaries and on the boundaries of higher-precedence
        /// decorations.
        static mark(spec) {
            return new MarkDecoration(spec);
        }
        /// Create a widget decoration, which adds an element at the given
        /// position.
        static widget(spec) {
            let side = spec.side || 0;
            if (spec.block)
                side += (Side.BigBlock + 1) * (side > 0 ? 1 : -1);
            return new PointDecoration(spec, side, side, !!spec.block, spec.widget || null, false);
        }
        /// Create a replace decoration which replaces the given range with
        /// a widget, or simply hides it.
        static replace(spec) {
            let block = !!spec.block;
            let { start, end } = getInclusive(spec);
            let startSide = block ? -Side.BigBlock * (start ? 2 : 1) : Side.BigInline * (start ? -1 : 1);
            let endSide = block ? Side.BigBlock * (end ? 2 : 1) : Side.BigInline * (end ? 1 : -1);
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /// Create a line decoration, which can add DOM attributes to the
        /// line starting at the given position.
        static line(spec) {
            return new LineDecoration(spec);
        }
        /// Build a [`DecorationSet`](#view.DecorationSet) from the given
        /// decorated range or ranges.
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /// @internal
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    }
    /// The empty set of decorations.
    Decoration.none = RangeSet.empty;
    class MarkDecoration extends Decoration {
        constructor(spec) {
            let { start, end } = getInclusive(spec);
            super(Side.BigInline * (start ? -1 : 1), Side.BigInline * (end ? 1 : -1), null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            return this == other ||
                other instanceof MarkDecoration &&
                    this.tagName == other.tagName &&
                    this.class == other.class &&
                    attrsEq(this.attrs, other.attrs);
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration {
        constructor(spec) {
            super(-Side.BigInline, -Side.BigInline, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide < 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide < this.endSide ? BlockType.WidgetRange
                : this.startSide < 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
        eq(other) {
            return other instanceof PointDecoration &&
                widgetsEq(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide < 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start || false, end: end || false };
    }
    function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    const MinRangeGap = 4;
    function addRange(from, to, ranges) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + MinRangeGap > from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }

    const theme = Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme = Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID = StyleModule.newName();
    function expandThemeClasses(sel) {
        return sel.replace(/\$\w[\w\.]*/g, cls => {
            let parts = cls.slice(1).split("."), result = "";
            for (let i = 1; i <= parts.length; i++)
                result += ".cm-" + parts.slice(0, i).join("-");
            return result;
        });
    }
    function buildTheme(main, spec) {
        return new StyleModule(spec, {
            process(sel) {
                sel = expandThemeClasses(sel);
                return /\$/.test(sel) ? sel.replace(/\$/, main) : main + " " + sel;
            },
            extend(template, sel) {
                template = expandThemeClasses(template);
                return sel.slice(0, main.length + 1) == main + " "
                    ? main + " " + template.replace(/&/, sel.slice(main.length + 1))
                    : template.replace(/&/, sel);
            }
        });
    }
    /// Create a set of CSS class names for the given theme class, which
    /// can be added to a DOM element within an editor to make themes able
    /// to style it. Theme classes can be single words or words separated
    /// by dot characters. In the latter case, the returned classes
    /// combine those that match the full name and those that match some
    /// prefix—for example `"panel.search"` will match both the theme
    /// styles specified as `"panel.search"` and those with just
    /// `"panel"`. More specific theme classes (with more dots) take
    /// precedence over less specific ones.
    function themeClass(selector) {
        if (selector.indexOf(".") < 0)
            return "cm-" + selector;
        let parts = selector.split("."), result = "";
        for (let i = 1; i <= parts.length; i++)
            result += (result ? " " : "") + "cm-" + parts.slice(0, i).join("-");
        return result;
    }
    const baseTheme = buildTheme("." + baseThemeID, {
        $: {
            position: "relative !important",
            boxSizing: "border-box",
            "&$focused": {
                // FIXME it would be great if we could directly use the browser's
                // default focus outline, but it appears we can't, so this tries to
                // approximate that
                outline_fallback: "1px dotted #212121",
                outline: "5px auto -webkit-focus-ring-color"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        $scroller: {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0
        },
        $content: {
            margin: 0,
            flexGrow: 2,
            minHeight: "100%",
            display: "block",
            whiteSpace: "pre",
            boxSizing: "border-box",
            padding: "4px 0",
            outline: "none"
        },
        "$$light $content": { caretColor: "black" },
        "$$dark $content": { caretColor: "white" },
        $line: {
            display: "block",
            padding: "0 2px 0 4px"
        },
        $selectionLayer: {
            zIndex: -1,
            contain: "size style"
        },
        $selectionBackground: {
            position: "absolute",
        },
        "$$light $selectionBackground": {
            background: "#d9d9d9"
        },
        "$$dark $selectionBackground": {
            background: "#222"
        },
        "$$focused$light $selectionBackground": {
            background: "#d7d4f0"
        },
        "$$focused$dark $selectionBackground": {
            background: "#233"
        },
        $cursorLayer: {
            zIndex: 100,
            contain: "size style",
            pointerEvents: "none"
        },
        "$$focused $cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        $cursor: {
            position: "absolute",
            borderLeft: "1.2px solid #bbb",
            marginLeft: "-0.6px",
            pointerEvents: "none"
        },
        "$$dark $cursor": {
            borderLeftColor: "#444"
        },
        "$$focused $cursor": {
            borderLeft: "1.2px solid black",
        },
        $placeholder: {
            color: "#888",
            display: "inline-block"
        },
        $button: {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "3px"
        },
        "$$light $button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "$$dark $button": {
            backgroundImage: "linear-gradient(#555, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        $textfield: {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "$$light $textfield": {
            backgroundColor: "white"
        },
        "$$dark $textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    });

    const LineClass = themeClass("line");
    class LineView extends ContentView {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, takeDeco, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (takeDeco)
                this.setDeco(source ? source.attrs : null);
            mergeInlineChildren(this, from, to, source ? source.children : none$3, openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].slice(off), 0);
                this.children[i].merge(off, this.children[i].length, null, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0) {
                this.children[i - 1].parent = null;
                i--;
            }
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        // Only called when building a line view in ContentBuilder
        append(child, openStart) {
            joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes;
            if (attrs)
                this.attrs = combineAttrs(attrs, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
        }
        // FIXME might need another hack to work around Firefox's behavior
        // of not actually displaying the cursor even though it's there in
        // the DOM
        sync(track) {
            if (!this.dom) {
                this.setDOM(document.createElement("div"));
                this.dom.className = LineClass;
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add(LineClass);
                this.prevAttrs = undefined;
            }
            super.sync(track);
            let last = this.dom.lastChild;
            if (!last || (last.nodeName != "BR" && (ContentView.get(last) instanceof WidgetView))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0;
            for (let child of this.children) {
                if (!(child instanceof TextView))
                    return null;
                let rects = clientRectsFor(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
            }
            return { lineHeight: this.dom.getBoundingClientRect().height, charWidth: totalWidth / this.length };
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
        match(_other) { return false; }
        get type() { return BlockType.Text; }
        static find(docView, pos) {
            for (let i = 0, off = 0;; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView)
                        return block;
                    if (block.length)
                        return null;
                }
                off = end + block.breakAfter;
            }
        }
    }
    const none$3 = [];
    class BlockWidgetView extends ContentView {
        constructor(widget, length, type) {
            super();
            this.widget = widget;
            this.length = length;
            this.type = type;
            this.breakAfter = 0;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            return new BlockWidgetView(this.widget, len, this.type);
        }
        get children() { return none$3; }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() { return null; }
        match(other) {
            if (other instanceof BlockWidgetView && other.type == this.type &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.eq(this.widget))
                    this.markDirty(true);
                this.widget = other.widget;
                this.length = other.length;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
    }

    class ContentBuilder {
        constructor(doc, pos, end) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
        }
        getLine() {
            if (!this.curLine)
                this.content.push(this.curLine = new LineView);
            return this.curLine;
        }
        addWidget(view) {
            this.curLine = null;
            this.content.push(view);
        }
        finish() {
            if (!this.posCovered())
                this.getLine();
        }
        wrapMarks(view, active) {
            for (let i = active.length - 1; i >= 0; i--)
                view = new MarkView(active[i], [view], view.length);
            return view;
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.curLine = null;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length);
                this.getLine().append(this.wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                length -= take;
                this.textOff += take;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart) {
            let len = to - from;
            if (deco instanceof PointDecoration) {
                if (deco.block) {
                    let { type } = deco;
                    if (type == BlockType.WidgetAfter && !this.posCovered())
                        this.getLine();
                    this.addWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
                }
                else {
                    let widget = this.wrapMarks(WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide), active);
                    this.getLine().append(widget, openStart);
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations) {
            let builder = new ContentBuilder(text, from, to);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish();
            return builder;
        }
    }
    class NullWidget extends WidgetType {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
    }

    /// Used to indicate [text direction](#view.EditorView.textDirection).
    var Direction;
    (function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        Direction[Direction["LTR"] = 0] = "LTR";
        Direction[Direction["RTL"] = 1] = "RTL";
    })(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    // Codes used for character types:
    var T;
    (function (T) {
        T[T["L"] = 1] = "L";
        T[T["R"] = 2] = "R";
        T[T["AL"] = 4] = "AL";
        T[T["EN"] = 8] = "EN";
        T[T["AN"] = 16] = "AN";
        T[T["ET"] = 64] = "ET";
        T[T["CS"] = 128] = "CS";
        T[T["NI"] = 256] = "NI";
        T[T["NSM"] = 512] = "NSM";
        T[T["Strong"] = 7] = "Strong";
        T[T["Num"] = 24] = "Num";
    })(T || (T = {}));
    // Decode a string with each type encoded as log2(type)
    function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes = dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes = dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] :
            0x590 <= ch && ch <= 0x5f4 ? T.R :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? T.AL :
                        0x2000 <= ch && ch <= 0x200b ? T.NI :
                            ch == 0x200c ? T.NI : T.L;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
    class BidiSpan {
        constructor(from, to, level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        get dir() { return this.level % 2 ? RTL : LTR; }
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    // Reused array of character types
    const types = [];
    function computeOrder(line, direction) {
        let len = line.length, outerType = direction == LTR ? T.L : T.R;
        if (!line || outerType == T.L && !BidiRE.test(line))
            return trivialOrder(len);
        // W1. Examine each non-spacing mark (NSM) in the level run, and
        // change the type of the NSM to the type of the previous
        // character. If the NSM is at the start of the level run, it will
        // get the type of sor.
        // W2. Search backwards from each instance of a European number
        // until the first strong type (R, L, AL, or sor) is found. If an
        // AL is found, change the type of the European number to Arabic
        // number.
        // W3. Change all ALs to R.
        // (Left after this: L, R, EN, AN, ET, CS, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = charType(line.charCodeAt(i));
            if (type == T.NSM)
                type = prev;
            else if (type == T.EN && prevStrong == T.AL)
                type = T.AN;
            types[i] = type == T.AL ? T.R : type;
            if (type & T.Strong)
                prevStrong = type;
            prev = type;
        }
        // W5. A sequence of European terminators adjacent to European
        // numbers changes to all European numbers.
        // W6. Otherwise, separators and terminators change to Other
        // Neutral.
        // W7. Search backwards from each instance of a European number
        // until the first strong type (R, L, or sor) is found. If an L is
        // found, then change the type of the European number to L.
        // (Left after this: L, R, EN+AN, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = types[i];
            if (type == T.CS) {
                if (i < len - 1 && prev == types[i + 1] && (prev & T.Num))
                    type = types[i] = prev;
                else
                    types[i] = T.NI;
            }
            else if (type == T.ET) {
                let end = i + 1;
                while (end < len && types[end] == T.ET)
                    end++;
                let replace = (i && prev == T.EN) || (end < len && types[end] == T.EN) ? (prevStrong == T.L ? T.L : T.EN) : T.NI;
                for (let j = i; j < end; j++)
                    types[j] = replace;
                i = end - 1;
            }
            else if (type == T.EN && prevStrong == T.L) {
                types[i] = T.L;
            }
            prev = type;
            if (type & T.Strong)
                prevStrong = type;
        }
        // N1. A sequence of neutrals takes the direction of the
        // surrounding strong text if the text on both sides has the same
        // direction. European and Arabic numbers act as if they were R in
        // terms of their influence on neutrals. Start-of-level-run (sor)
        // and end-of-level-run (eor) are used at level run boundaries.
        // N2. Any remaining neutrals take the embedding direction.
        // (Left after this: L, R, EN+AN)
        for (let i = 0; i < len; i++) {
            if (types[i] == T.NI) {
                let end = i + 1;
                while (end < len && types[end] == T.NI)
                    end++;
                let beforeL = (i ? types[i - 1] : outerType) == T.L;
                let afterL = (end < len ? types[end] : outerType) == T.L;
                let replace = beforeL == afterL ? (beforeL ? T.L : T.R) : outerType;
                for (let j = i; j < end; j++)
                    types[j] = replace;
                i = end - 1;
            }
        }
        // Here we depart from the documented algorithm, in order to avoid
        // building up an actual levels array. Since there are only three
        // levels (0, 1, 2) in an implementation that doesn't take
        // explicit embedding into account, we can build up the order on
        // the fly, without following the level-based algorithm.
        let order = [];
        if (outerType == T.L) {
            for (let i = 0; i < len;) {
                let start = i, rtl = types[i++] != T.L;
                while (i < len && rtl == (types[i] != T.L))
                    i++;
                if (rtl) {
                    for (let j = i; j > start;) {
                        let end = j, l = types[--j] != T.R;
                        while (j > start && l == (types[j - 1] != T.R))
                            j--;
                        order.push(new BidiSpan(j, end, l ? 2 : 1));
                    }
                }
                else {
                    order.push(new BidiSpan(start, i, 0));
                }
            }
        }
        else {
            for (let i = 0; i < len;) {
                let start = i, rtl = types[i++] == T.R;
                while (i < len && rtl == (types[i] == T.R))
                    i++;
                order.push(new BidiSpan(start, i, rtl ? 1 : 2));
            }
        }
        return order;
    }
    function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from, spanI = -1;
        if (startIndex == 0) {
            if (!forward || !line.length)
                return null;
            if (order[0].level != dir) {
                startIndex = order[0].side(false, dir);
                spanI = 0;
            }
        }
        else if (startIndex == line.length) {
            if (forward)
                return null;
            let last = order[order.length - 1];
            if (last.level != dir) {
                startIndex = last.side(true, dir);
                spanI = order.length - 1;
            }
        }
        if (spanI < 0)
            spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI];
        // End of span. (But not end of line--that was checked for above.)
        if (startIndex == span.side(forward, dir)) {
            span = order[spanI += forward ? 1 : -1];
            startIndex = span.side(!forward, dir);
        }
        let indexForward = forward == (span.dir == dir);
        let nextIndex = line.findClusterBreak(startIndex, indexForward);
        movedOver = line.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir))
            return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir)
            return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, 0, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, 0, span.level);
    }

    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line"];
    class HeightOracle {
        constructor() {
            this.doc = Text.empty;
            this.lineWrapping = false;
            this.direction = Direction.LTR;
            this.heightSamples = {};
            this.lineHeight = 14;
            this.charWidth = 7;
            this.lineLength = 30;
            // Used to track, during updateHeight, if any actual heights changed
            this.heightChanged = false;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefresh(lineHeights, whiteSpace, direction) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight || (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping || this.direction != direction;
        }
        refresh(whiteSpace, direction, lineHeight, charWidth, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) ||
                this.lineWrapping != lineWrapping ||
                this.direction != direction;
            this.lineWrapping = lineWrapping;
            this.direction = direction;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /// Record used to represent information about a block-level element
    /// in the editor view.
    class BlockInfo {
        /// @internal
        constructor(
        /// The start of the element in the document.
        from, 
        /// The length of the element.
        length, 
        /// The top position of the element.
        top, 
        /// Its height.
        height, 
        /// The type of element this is. When querying lines, this may be
        /// an array of all the blocks that make up the line.
        type) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this.type = type;
        }
        /// The end of the element as a document position.
        get to() { return this.from + this.length; }
        /// The bottom position of the element.
        get bottom() { return this.top + this.height; }
        /// @internal
        join(other) {
            let detail = (Array.isArray(this.type) ? this.type : [this])
                .concat(Array.isArray(other.type) ? other.type : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
        }
    }
    var QueryType;
    (function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    })(QueryType || (QueryType = {}));
    var Flag;
    (function (Flag) {
        Flag[Flag["Break"] = 1] = "Break";
        Flag[Flag["Outdated"] = 2] = "Outdated";
        Flag[Flag["SingleLine"] = 4] = "SingleLine";
    })(Flag || (Flag = {}));
    const Epsilon = 1e-4;
    class HeightMap {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = Flag.Outdated) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & Flag.Outdated) > 0; }
        set outdated(value) { this.flags = (value ? Flag.Outdated : 0) | (this.flags & ~Flag.Outdated); }
        setHeight(oracle, height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon)
                    oracle.heightChanged = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
                me = me.replace(fromA, toA, nodes);
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
        constructor(length, height, type) {
            super(length, height);
            this.type = type;
        }
        blockAt(_height, _doc, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.type);
        }
        lineAt(_value, _type, doc, top, offset) {
            return this.blockAt(0, doc, top, offset);
        }
        forEachLine(_from, _to, doc, top, offset, f) {
            f(this.blockAt(0, doc, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText extends HeightMapBlock {
        constructor(length, height) {
            super(length, height, BlockType.Text);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & Flag.SingleLine)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap)
                    node = new HeightMapText(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap extends HeightMap {
        constructor(length) { super(length, 0); }
        lines(doc, offset) {
            let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;
            return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
        }
        blockAt(height, doc, top, offset) {
            let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
            let { from, length } = doc.line(firstLine + line);
            return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
        }
        lineAt(value, type, doc, top, offset) {
            if (type == QueryType.ByHeight)
                return this.blockAt(value, doc, top, offset);
            if (type == QueryType.ByPosNoHeight) {
                let { from, to } = doc.lineAt(value);
                return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
            }
            let { firstLine, lineHeight } = this.lines(doc, offset);
            let { from, length, number } = doc.lineAt(value);
            return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let { firstLine, lineHeight } = this.lines(doc, offset);
            for (let pos = from; pos < to;) {
                let line = doc.lineAt(pos);
                if (pos == from)
                    top += lineHeight * (line.number - firstLine);
                f(new BlockInfo(line.from, line.length, top, top += lineHeight, BlockType.Text));
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap)
                    nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
                else
                    nodes.push(null, new HeightMapGap(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap)
                    nodes[0] = new HeightMapGap(from + first.length);
                else
                    nodes.unshift(new HeightMapGap(from - 1), null);
            }
            return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from);
                if (measured.from > offset)
                    nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let line = new HeightMapText(len, measured.heights[measured.index++]);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
                oracle.heightChanged = true;
                return HeightMap.of(nodes);
            }
            else if (force || this.outdated) {
                this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch extends HeightMap {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? Flag.Outdated : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & Flag.Break; }
        blockAt(height, doc, top, offset) {
            let mid = top + this.left.height;
            return height < mid || this.right.height == 0 ? this.left.blockAt(height, doc, top, offset)
                : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, doc, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType.ByHeight ? value < rightTop || this.right.height == 0 : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, doc, top, offset)
                : this.right.lineAt(value, type, doc, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, doc, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps(result, right);
            }
            return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap.of(this.break ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap &&
            (after = nodes[around + 1]) instanceof HeightMapGap)
            nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? Math.max(0, deco.widget.estimatedHeight) : 0;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock(len, height, deco.type));
                }
                else if (len || height >= relevantWidgetHeight) {
                    this.addLineDeco(height, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= Flag.SingleLine;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText)
                return last;
            let line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            this.enterLine();
            if (block.type == BlockType.WidgetAfter && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (block.type != BlockType.WidgetBefore)
                this.covering = block;
        }
        addLineDeco(height, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
                this.nodes.push(new HeightMapText(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder(from, oracle);
            RangeSet.spans(decorations, from, to, builder);
            return builder.finish(from);
        }
        get minPointSize() { return 0; }
    }
    function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator();
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }
    class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange(from, to, this.changes);
        }
        get minPointSize() { return 0; }
    }

    const none$4 = [];
    const clickAddsSelectionRange = Facet.define();
    const dragMovesSelection = Facet.define();
    const mouseSelectionStyle = Facet.define();
    const exceptionSink = Facet.define();
    const updateListener = Facet.define();
    const inputHandler = Facet.define();
    /// Log or report an unhandled exception in client code. Should
    /// probably only be used by extension code that allows client code to
    /// provide functions, and calls those functions in a context where an
    /// exception can't be propagated to calling code in a reasonable way
    /// (for example when in an event handler).
    ///
    /// Either calls a handler registered with
    /// [`EditorView.exceptionSink`](#view.EditorView^exceptionSink),
    /// `window.onerror`, if defined, or `console.error` (in which case
    /// it'll pass `context`, when given, as first argument).
    function logException(state, exception, context) {
        let handler = state.facet(exceptionSink);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror)
            window.onerror(String(exception), context, undefined, undefined, exception);
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable = Facet.define({ combine: values => values.length ? values[0] : true });
    /// Used to [declare](#view.PluginSpec.provide) which
    /// [fields](#view.PluginValue) a [view plugin](#view.ViewPlugin)
    /// provides.
    class PluginFieldProvider {
        /// @internal
        constructor(
        /// @internal
        field, 
        /// @internal
        get) {
            this.field = field;
            this.get = get;
        }
    }
    /// Plugin fields are a mechanism for allowing plugins to provide
    /// values that can be retrieved through the
    /// [`pluginField`](#view.EditorView.pluginField) view method.
    class PluginField {
        from(get) {
            return new PluginFieldProvider(this, get);
        }
        /// Define a new plugin field.
        static define() { return new PluginField(); }
    }
    /// Plugins can provide additional scroll margins (space around the
    /// sides of the scrolling element that should be considered
    /// invisible) through this field. This can be useful when the
    /// plugin introduces elements that cover part of that element (for
    /// example a horizontally fixed gutter).
    PluginField.scrollMargins = PluginField.define();
    let nextPluginID = 0;
    const viewPlugin = Facet.define();
    /// View plugins associate stateful values with a view. They can
    /// influence the way the content is drawn, and are notified of things
    /// that happen in the view.
    class ViewPlugin {
        constructor(
        /// @internal
        id, 
        /// @internal
        create, 
        /// @internal
        fields) {
            this.id = id;
            this.create = create;
            this.fields = fields;
            this.extension = viewPlugin.of(this);
        }
        /// Define a plugin from a constructor function that creates the
        /// plugin's value, given an editor view.
        static define(create, spec) {
            let { eventHandlers, provide, decorations } = spec || {};
            let fields = [];
            if (provide)
                for (let provider of Array.isArray(provide) ? provide : [provide])
                    fields.push(provider);
            if (eventHandlers)
                fields.push(domEventHandlers.from((value) => ({ plugin: value, handlers: eventHandlers })));
            if (decorations)
                for (let get of Array.isArray(decorations) ? decorations : [decorations])
                    fields.push(pluginDecorations.from(get));
            return new ViewPlugin(nextPluginID++, create, fields);
        }
        /// Create a plugin for a class whose constructor takes a single
        /// editor view as argument.
        static fromClass(cls, spec) {
            return ViewPlugin.define(view => new cls(view), spec);
        }
    }
    // FIXME somehow ensure that no replacing decorations end up in here
    const pluginDecorations = PluginField.define();
    const domEventHandlers = PluginField.define();
    class PluginInstance {
        constructor(value, spec) {
            this.value = value;
            this.spec = spec;
        }
        static create(spec, view) {
            let value;
            try {
                value = spec.create(view);
            }
            catch (e) {
                logException(view.state, e, "CodeMirror plugin crashed");
                return PluginInstance.dummy;
            }
            return new PluginInstance(value, spec);
        }
        takeField(type, target) {
            for (let { field, get } of this.spec.fields)
                if (field == type)
                    target.push(get(this.value));
        }
        update(update) {
            if (!this.value.update)
                return this;
            try {
                this.value.update(update);
                return this;
            }
            catch (e) {
                logException(update.state, e, "CodeMirror plugin crashed");
                if (this.value.destroy)
                    try {
                        this.value.destroy();
                    }
                    catch (_) { }
                return PluginInstance.dummy;
            }
        }
        destroy(view) {
            if (this.value.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
    }
    PluginInstance.dummy = new PluginInstance({}, ViewPlugin.define(() => ({})));
    const editorAttributes = Facet.define({
        combine: values => values.reduce((a, b) => combineAttrs(b, a), {})
    });
    const contentAttributes = Facet.define({
        combine: values => values.reduce((a, b) => combineAttrs(b, a), {})
    });
    // Provide decorations
    const decorations = Facet.define();
    const styleModule = Facet.define();
    var UpdateFlag$1;
    (function (UpdateFlag) {
        UpdateFlag[UpdateFlag["Focus"] = 1] = "Focus";
        UpdateFlag[UpdateFlag["Height"] = 2] = "Height";
        UpdateFlag[UpdateFlag["Viewport"] = 4] = "Viewport";
        UpdateFlag[UpdateFlag["LineGaps"] = 8] = "LineGaps";
        UpdateFlag[UpdateFlag["Geometry"] = 16] = "Geometry";
    })(UpdateFlag$1 || (UpdateFlag$1 = {}));
    class ChangedRange {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /// View [plugins](#view.ViewPlugin) are given instances of this
    /// class, which describe what happened, whenever the view is updated.
    class ViewUpdate {
        /// @internal
        constructor(
        /// The editor view that the update is associated with.
        view, 
        /// The new editor state.
        state, 
        /// The transactions involved in the update. May be empty.
        transactions = none$4) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /// @internal
            this.flags = 0;
            this.prevState = view.state;
            this.changes = ChangeSet.empty(this.prevState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                view.inputState.notifiedFocused = focus;
                this.flags != UpdateFlag$1.Focus;
            }
            if (this.docChanged)
                this.flags |= UpdateFlag$1.Height;
        }
        /// Tells you whether the viewport changed in this update.
        get viewportChanged() {
            return (this.flags & UpdateFlag$1.Viewport) > 0;
        }
        /// Indicates whether the line height in the editor changed in this update.
        get heightChanged() {
            return (this.flags & UpdateFlag$1.Height) > 0;
        }
        /// Returns true when the document changed or the size of the editor
        /// or the lines or characters within it has changed.
        get geometryChanged() {
            return this.docChanged || (this.flags & (UpdateFlag$1.Geometry | UpdateFlag$1.Height)) > 0;
        }
        /// True when this update indicates a focus change.
        get focusChanged() {
            return (this.flags & UpdateFlag$1.Focus) > 0;
        }
        /// Whether the document changed in this update.
        get docChanged() {
            return this.transactions.some(tr => tr.docChanged);
        }
        /// Whether the selection was explicitly set in this update.
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /// @internal
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }

    function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);
        for (let parent = dom.parentNode; parent;) { // (Cast to any because TypeScript is useless with Node types)
            if (parent.nodeType == 1) {
                if ((parent.scrollHeight > parent.clientHeight || parent.scrollWidth > parent.clientWidth) &&
                    window.getComputedStyle(parent).overflow != "visible") {
                    let parentRect = parent.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = Math.min(bottom, parentRect.bottom);
                }
                parent = parent.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: right - rect.left,
            top: top - (rect.top + paddingTop), bottom: bottom - (rect.top + paddingTop) };
    }
    var VP;
    (function (VP) {
        // FIXME look into appropriate value of this through benchmarking etc
        VP[VP["Margin"] = 1000] = "Margin";
        // coveredBy requires at least this many extra pixels to be covered
        VP[VP["MinCoverMargin"] = 10] = "MinCoverMargin";
        VP[VP["MaxCoverMargin"] = 250] = "MaxCoverMargin";
    })(VP || (VP = {}));
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap {
        constructor(from, to, size) {
            this.from = from;
            this.to = to;
            this.size = size;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(wrapping) {
            return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
        }
    }
    class LineGapWidget extends WidgetType {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    var LG;
    (function (LG) {
        LG[LG["Margin"] = 10000] = "Margin";
        LG[LG["HalfMargin"] = 5000] = "HalfMargin";
        LG[LG["MinViewPort"] = 15000] = "MinViewPort";
    })(LG || (LG = {}));
    class ViewState {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0;
            this.paddingBottom = 0;
            this.contentWidth = 0;
            this.heightOracle = new HeightOracle;
            this.heightMap = HeightMap.empty();
            this.scrollTo = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be signficant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            this.heightMap = this.heightMap.applyChanges(state.facet(decorations), Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
            this.viewport = this.getViewport(0, null);
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
            this.computeVisibleRanges();
        }
        update(update, scrollTo = null) {
            let prev = this.state;
            this.state = update.state;
            let newDeco = this.state.facet(decorations);
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(update.prevState.facet(decorations), newDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            this.heightMap = this.heightMap.applyChanges(newDeco, prev.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight)
                update.flags |= UpdateFlag$1.Height;
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTo && (scrollTo.head < viewport.from || scrollTo.head > viewport.to) || !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTo);
            if (!viewport.eq(this.viewport)) {
                this.viewport = viewport;
                update.flags |= UpdateFlag$1.Viewport;
            }
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > LG.MinViewPort)
                update.flags |= this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            this.computeVisibleRanges();
            if (scrollTo)
                this.scrollTo = scrollTo;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.primary.empty && update.state.selection.primary.assoc)
                this.mustEnforceCursorAssoc = true;
        }
        measure(docView, repeated) {
            let dom = docView.dom, whiteSpace = "", direction = Direction.LTR;
            if (!repeated) {
                // Vertical padding
                let style = window.getComputedStyle(dom);
                whiteSpace = style.whiteSpace, direction = (style.direction == "rtl" ? Direction.RTL : Direction.LTR);
                this.paddingTop = parseInt(style.paddingTop) || 0;
                this.paddingBottom = parseInt(style.paddingBottom) || 0;
            }
            // Pixel viewport
            let pixelViewport = this.printing ? { top: -1e8, bottom: 1e8, left: -1e8, right: 1e8 } : visiblePixelRange(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            this.inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (!this.inView)
                return 0;
            let lineHeights = docView.measureVisibleLineHeights();
            let refresh = false, bias = 0, result = 0, oracle = this.heightOracle;
            if (!repeated) {
                let contentWidth = docView.dom.clientWidth;
                if (oracle.mustRefresh(lineHeights, whiteSpace, direction) ||
                    oracle.lineWrapping && Math.abs(contentWidth - this.contentWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth } = docView.measureTextSize();
                    refresh = oracle.refresh(whiteSpace, direction, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        docView.minWidth = 0;
                        result |= UpdateFlag$1.Geometry;
                    }
                }
                if (this.contentWidth != contentWidth) {
                    this.contentWidth = contentWidth;
                    result |= UpdateFlag$1.Geometry;
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
            }
            oracle.heightChanged = false;
            this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(this.viewport.from, lineHeights));
            if (oracle.heightChanged)
                result |= UpdateFlag$1.Height;
            if (!this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTo && (this.scrollTo.head < this.viewport.from || this.scrollTo.head > this.viewport.to)) {
                this.viewport = this.getViewport(bias, this.scrollTo);
                result |= UpdateFlag$1.Viewport;
            }
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > LG.MinViewPort)
                result |= this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
            this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                docView.enforceCursorAssoc();
            }
            return result;
        }
        getViewport(bias, scrollTo) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / VP.Margin / 2));
            let map = this.heightMap, doc = this.state.doc, { top, bottom } = this.pixelViewport;
            let viewport = new Viewport(map.lineAt(top - marginTop * VP.Margin, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(bottom + (1 - marginTop) * VP.Margin, QueryType.ByHeight, doc, 0, 0).to);
            // If scrollTo is given, make sure the viewport includes that position
            if (scrollTo) {
                if (scrollTo.head < viewport.from) {
                    let { top: newTop } = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0);
                    viewport = new Viewport(map.lineAt(newTop - VP.Margin / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newTop + (bottom - top) + VP.Margin / 2, QueryType.ByHeight, doc, 0, 0).to);
                }
                else if (scrollTo.head > viewport.to) {
                    let { bottom: newBottom } = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0);
                    viewport = new Viewport(map.lineAt(newBottom - (bottom - top) - VP.Margin / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newBottom + VP.Margin / 2, QueryType.ByHeight, doc, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0);
            return (from == 0 || top <= this.pixelViewport.top - Math.max(VP.MinCoverMargin, Math.min(-bias, VP.MaxCoverMargin))) &&
                (to == this.state.doc.length ||
                    bottom >= this.pixelViewport.bottom + Math.max(VP.MinCoverMargin, Math.min(bias, VP.MaxCoverMargin))) &&
                (top > this.pixelViewport.top - 2 * VP.Margin && bottom < this.pixelViewport.bottom + 2 * VP.Margin);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current) {
            let gaps = [];
            // This won't work at all in predominantly right-to-left text.
            if (this.heightOracle.direction != Direction.LTR)
                return gaps;
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, line => {
                if (line.length < LG.Margin)
                    return;
                let structure = lineStructure(line.from, line.to, this.state);
                if (structure.total < LG.Margin)
                    return;
                let viewFrom, viewTo;
                if (this.heightOracle.lineWrapping) {
                    if (line.from != this.viewport.from)
                        viewFrom = line.from;
                    else
                        viewFrom = findPosition(structure, (this.pixelViewport.top - line.top) / line.height);
                    if (line.to != this.viewport.to)
                        viewTo = line.to;
                    else
                        viewTo = findPosition(structure, (this.pixelViewport.bottom - line.top) / line.height);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    viewFrom = findPosition(structure, this.pixelViewport.left / totalWidth);
                    viewTo = findPosition(structure, this.pixelViewport.right / totalWidth);
                }
                let sel = this.state.selection.primary;
                // Make sure the gap doesn't cover a selection end
                if (sel.from <= viewFrom && sel.to >= line.from)
                    viewFrom = sel.from;
                if (sel.from <= line.to && sel.to >= viewTo)
                    viewTo = sel.to;
                let gapTo = viewFrom - LG.Margin, gapFrom = viewTo + LG.Margin;
                if (gapTo > line.from + LG.HalfMargin)
                    gaps.push(find(current, gap => gap.from == line.from && gap.to > gapTo - LG.HalfMargin && gap.to < gapTo + LG.HalfMargin) ||
                        new LineGap(line.from, gapTo, this.gapSize(line, gapTo, true, structure)));
                if (gapFrom < line.to - LG.HalfMargin)
                    gaps.push(find(current, gap => gap.to == line.to && gap.from > gapFrom - LG.HalfMargin &&
                        gap.from < gapFrom + LG.HalfMargin) ||
                        new LineGap(gapFrom, line.to, this.gapSize(line, gapFrom, false, structure)));
            });
            return gaps;
        }
        gapSize(line, pos, start, structure) {
            if (this.heightOracle.lineWrapping) {
                let height = line.height * findFraction(structure, pos);
                return start ? height : line.height - height;
            }
            else {
                let ratio = findFraction(structure, pos);
                return structure.total * this.heightOracle.charWidth * (start ? ratio : 1 - ratio);
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
                return UpdateFlag$1.LineGaps;
            }
            return 0;
        }
        computeVisibleRanges() {
            let deco = this.state.facet(decorations);
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { },
                minPointSize: 20
            });
            this.visibleRanges = ranges;
        }
        lineAt(pos, editorTop) {
            return this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, editorTop + this.paddingTop, 0);
        }
        lineAtHeight(height, editorTop) {
            return this.heightMap.lineAt(height, QueryType.ByHeight, this.state.doc, editorTop + this.paddingTop, 0);
        }
        blockAtHeight(height, editorTop) {
            return this.heightMap.blockAt(height, this.state.doc, editorTop + this.paddingTop, 0);
        }
        forEachLine(from, to, f, editorTop) {
            return this.heightMap.forEachLine(from, to, this.state.doc, editorTop + this.paddingTop, 0, f);
        }
    }
    /// Indicates the range of the document that is in the visible
    /// viewport.
    class Viewport {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
        eq(b) { return this.from == b.from && this.to == b.to; }
    }
    function lineStructure(from, to, state) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(state.facet(decorations), from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            },
            minPointSize: 20 // We're only interested in collapsed ranges of a significant size
        });
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function find(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }

    const none$5 = [];
    class DocView extends ContentView {
        constructor(view) {
            super();
            this.view = view;
            this.viewports = none$5;
            this.compositionDeco = Decoration.none;
            this.decorations = [];
            // Track a minimum width for the editor. When measuring sizes in
            // checkLayout, this is updated to point at the width of a given
            // element and its extent in the document. When a change happens in
            // that range, these are reset. That way, once we've seen a
            // line/element of a given length, we keep the editor wide enough to
            // fit at least that element, until it is changed, at which point we
            // forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.setDOM(view.contentDOM);
            this.children = [new LineView];
            this.children[0].setParent(this);
            this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], this.updateDeco(), 0);
        }
        get root() { return this.view.root; }
        get editorView() { return this.view; }
        get length() { return this.view.state.doc.length; }
        // Update the document view to a given state. scrollIntoView can be
        // used as a hint to compute a new viewport that includes that
        // position, if we know the editor is going to scroll that position
        // into view.
        update(update) {
            var _a;
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            if (!((_a = this.view.inputState) === null || _a === void 0 ? void 0 : _a.composing))
                this.compositionDeco = Decoration.none;
            else if (update.transactions.length)
                this.compositionDeco = computeCompositionDeco(this.view, update.changes);
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            let forceSelection = (browser.ie || browser.chrome) && !this.compositionDeco.size && update &&
                update.state.doc.lines != update.prevState.doc.lines;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
            let pointerSel = update.transactions.some(tr => tr.annotation(Transaction.userEvent) == "pointerselection");
            if (this.dirty == Dirty$1.Not && changedRanges.length == 0 &&
                !(update.flags & (UpdateFlag$1.Viewport | UpdateFlag$1.LineGaps)) &&
                update.state.selection.primary.from >= this.view.viewport.from &&
                update.state.selection.primary.to <= this.view.viewport.to) {
                this.updateSelection(forceSelection, pointerSel);
                return false;
            }
            else {
                this.updateInner(changedRanges, deco, update.prevState.doc.length, forceSelection, pointerSel);
                return true;
            }
        }
        // Used both by update and checkLayout do perform the actual DOM
        // update
        updateInner(changes, deco, oldLength, forceSelection = false, pointerSel = false) {
            this.updateChildren(changes, deco, oldLength);
            this.view.observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.heightMap.height + "px";
                this.dom.style.minWidth = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser.chrome ? { node: getSelection(this.view.root).focusNode, written: false } : undefined;
                this.sync(track);
                this.dirty = Dirty$1.Not;
                if (track === null || track === void 0 ? void 0 : track.written)
                    forceSelection = true;
                this.updateSelection(forceSelection, pointerSel);
                this.dom.style.height = "";
            });
        }
        updateChildren(changes, deco, oldLength) {
            let cursor = this.childCursor(oldLength);
            for (let i = changes.length - 1;; i--) {
                let next = i >= 0 ? changes[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next;
                let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, deco);
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                this.replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
        }
        replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd) {
            let before = this.children[fromI], last = content.length ? content[content.length - 1] : null;
            let breakAtEnd = last ? last.breakAfter : breakAtStart;
            // Change within a single line
            if (fromI == toI && !breakAtStart && !breakAtEnd && content.length < 2 &&
                before.merge(fromOff, toOff, content.length ? last : null, fromOff == 0, openStart, openEnd))
                return;
            let after = this.children[toI];
            // Make sure the end of the line after the update is preserved in `after`
            if (toOff < after.length || after.children.length && after.children[after.children.length - 1].length == 0) {
                // If we're splitting a line, separate part of the start line to
                // avoid that being mangled when updating the start line.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    content[content.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff || after.children.length && after.children[0].length == 0)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    content.push(after);
                }
            }
            else if (after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && content.length && before.merge(fromOff, before.length, content[0], false, openStart, 0)) {
                    before.breakAfter = content.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
            // Try to merge widgets on the boundaries of the replacement
            while (fromI < toI && content.length) {
                if (this.children[toI - 1].match(content[content.length - 1]))
                    toI--, content.pop();
                else if (this.children[fromI].match(content[0]))
                    fromI++, content.shift();
                else
                    break;
            }
            if (fromI < toI || content.length)
                this.replaceChildren(fromI, toI, content);
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(force = false, fromPointer = false) {
            if (!(fromPointer || this.mayControlSelection()))
                return;
            let primary = this.view.state.selection.primary;
            // FIXME need to handle the case where the selection falls inside a block range
            let anchor = this.domAtPos(primary.anchor);
            let head = this.domAtPos(primary.head);
            let domSel = getSelection(this.root);
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode ||
                (browser.gecko && primary.empty && nextToUneditable(domSel.focusNode, domSel.focusOffset)) ||
                !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
                this.view.observer.ignore(() => {
                    if (primary.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser.gecko) {
                            let nextTo = nextToUneditable(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (NextTo.Before | NextTo.After)) {
                                let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == NextTo.Before ? 1 : -1);
                                if (text)
                                    anchor = new DOMPos(text, nextTo == NextTo.Before ? 0 : text.nodeValue.length);
                            }
                        }
                        domSel.collapse(anchor.node, anchor.offset);
                        if (primary.bidiLevel != null && domSel.cursorBidiLevel != null)
                            domSel.cursorBidiLevel = primary.bidiLevel;
                    }
                    else if (domSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        domSel.collapse(anchor.node, anchor.offset);
                        domSel.extend(head.node, head.offset);
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (primary.anchor > primary.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        domSel.removeAllRanges();
                        domSel.addRange(range);
                    }
                });
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        enforceCursorAssoc() {
            let cursor = this.view.state.selection.primary;
            let sel = getSelection(this.root);
            if (!cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView.find(this, cursor.head); // FIXME provide view-line-range finding helper
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
        }
        mayControlSelection() {
            return this.view.state.facet(editable) ? this.root.activeElement == this.dom : hasSelection(this.dom, getSelection(this.root));
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            for (let off = this.length, i = this.children.length - 1;; i--) {
                let child = this.children[i], start = off - child.breakAfter - child.length;
                if (pos >= start && child.type != BlockType.WidgetAfter)
                    return child.coordsAt(pos - start, side);
                off = start;
            }
        }
        measureVisibleLineHeights() {
            let result = [], { from, to } = this.view.viewState.viewport;
            let minWidth = Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    result.push(child.dom.getBoundingClientRect().height);
                    let width = child.dom.scrollWidth;
                    if (width > minWidth) {
                        this.minWidth = minWidth = width;
                        this.minWidthFrom = pos;
                        this.minWidthTo = end;
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth;
            dummy.className = "cm-line";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                dummy.remove();
            });
            return { lineHeight, charWidth };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let visible = this.view.viewState.viewport, viewports = [visible];
            let { head, anchor } = this.view.state.selection.primary;
            if (head < visible.from || head > visible.to) {
                let { from, to } = this.view.viewState.lineAt(head, 0);
                viewports.push(new Viewport(from, to));
            }
            if (!viewports.some(({ from, to }) => anchor >= from && anchor <= to)) {
                let { from, to } = this.view.viewState.lineAt(anchor, 0);
                viewports.push(new Viewport(from, to));
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            let deco = [];
            for (let pos = 0, i = 0;; i++) {
                let next = i == viewports.length ? null : viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = this.view.viewState.lineAt(end, 0).bottom - this.view.viewState.lineAt(pos, 0).top;
                    deco.push(Decoration.replace({ widget: new BlockGapWidget(height), block: true, inclusive: true }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration.set(deco);
        }
        updateDeco() {
            return this.decorations = [
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco,
                this.compositionDeco,
                ...this.view.state.facet(decorations),
                ...this.view.pluginField(pluginDecorations)
            ];
        }
        scrollPosIntoView(pos, side) {
            let rect = this.coordsAt(pos, side);
            if (!rect)
                return;
            let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
            for (let margins of this.view.pluginField(PluginField.scrollMargins))
                if (margins) {
                    let { left, right, top, bottom } = margins;
                    if (left != null)
                        mLeft = Math.max(mLeft, left);
                    if (right != null)
                        mRight = Math.max(mRight, right);
                    if (top != null)
                        mTop = Math.max(mTop, top);
                    if (bottom != null)
                        mBottom = Math.max(mBottom, bottom);
                }
            scrollRectIntoView(this.dom, {
                left: rect.left - mLeft, top: rect.top - mTop,
                right: rect.right + mRight, bottom: rect.bottom + mBottom
            });
        }
    }
    // Browsers appear to reserve a fixed amount of bits for height
    // styles, and ignore or clip heights above that. For Chrome and
    // Firefox, this is in the 20 million range, so we try to stay below
    // that.
    const MaxNodeHeight = 1e7;
    class BlockGapWidget extends WidgetType {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            if (this.height < MaxNodeHeight) {
                while (elt.lastChild)
                    elt.lastChild.remove();
                elt.style.height = this.height + "px";
            }
            else {
                elt.style.height = "";
                for (let remaining = this.height; remaining > 0; remaining -= MaxNodeHeight) {
                    let fill = elt.appendChild(document.createElement("div"));
                    fill.style.height = Math.min(remaining, MaxNodeHeight) + "px";
                }
            }
            return true;
        }
        get estimatedHeight() { return this.height; }
    }
    function computeCompositionDeco(view, changes) {
        let sel = getSelection(view.root);
        let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
        if (!textNode)
            return Decoration.none;
        let cView = view.docView.nearest(textNode);
        let from, to, topNode = textNode;
        if (cView instanceof InlineView) {
            while (cView.parent instanceof InlineView)
                cView = cView.parent;
            from = cView.posAtStart;
            to = from + cView.length;
            topNode = cView.dom;
        }
        else if (cView instanceof LineView) {
            while (topNode.parentNode != cView.dom)
                topNode = topNode.parentNode;
            let prev = topNode.previousSibling;
            while (prev && !ContentView.get(prev))
                prev = prev.previousSibling;
            from = to = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
        }
        else {
            return Decoration.none;
        }
        let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
        let text = textNode.nodeValue, { state } = view;
        if (newTo - newFrom < text.length) {
            if (state.sliceDoc(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text)
                newTo = newFrom + text.length;
            else if (state.sliceDoc(Math.max(0, newTo - text.length), newTo) == text)
                newFrom = newTo - text.length;
            else
                return Decoration.none;
        }
        else if (state.sliceDoc(newFrom, newTo) != text) {
            return Decoration.none;
        }
        return Decoration.set(Decoration.replace({ widget: new CompositionWidget(topNode, textNode) }).range(newFrom, newTo));
    }
    class CompositionWidget extends WidgetType {
        constructor(top, text) {
            super();
            this.top = top;
            this.text = text;
        }
        eq(other) { return this.top == other.top && this.text == other.text; }
        toDOM() { return this.top; }
        ignoreEvent() { return false; }
        get customView() { return CompositionView; }
    }
    function nearbyTextNode(node, offset, side) {
        for (;;) {
            if (node.nodeType == 3)
                return node;
            if (node.nodeType == 1 && offset > 0 && side <= 0) {
                node = node.childNodes[offset - 1];
                offset = maxOffset(node);
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
                node = node.childNodes[offset];
                offset = 0;
            }
            else {
                return null;
            }
        }
    }
    var NextTo;
    (function (NextTo) {
        NextTo[NextTo["Before"] = 1] = "Before";
        NextTo[NextTo["After"] = 2] = "After";
    })(NextTo || (NextTo = {}));
    function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? NextTo.Before : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? NextTo.After : 0);
    }
    class DecorationComparator$1 {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange(from, to, this.changes); }
        comparePoint(from, to) { addRange(from, to, this.changes); }
    }
    function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }

    function groupAt(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = line.findClusterBreak(linePos, false);
        else
            to = line.findClusterBreak(linePos, true);
        let cat = categorize(line.slice(from, to));
        while (from > 0) {
            let prev = line.findClusterBreak(from, false);
            if (categorize(line.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = line.findClusterBreak(to, true);
            if (categorize(line.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    // FIXME holding arrow-up/down at the end of the viewport is a rather
    // common use case that will repeatedly trigger this code. Maybe
    // introduce some element of binary search after all?
    function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap(closestRect, rect))
                    rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
                let dx = getdx(x, rect), dy = getdy(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap(aboveRect, rect)) {
                    aboveRect = upBot(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap(belowRect, rect)) {
                    belowRect = upTop(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText(closest, clipX, y);
        if (!closestX && closest.contentEditable == "true")
            return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText(node, x, y) {
        let len = node.nodeValue.length, range = tempRange();
        for (let i = 0; i < len; i++) {
            range.setEnd(node, i + 1);
            range.setStart(node, i);
            let rects = range.getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (rect.left - 1 <= x && rect.right + 1 >= x &&
                    rect.top - 1 <= y && rect.bottom + 1 >= y) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser.chrome || browser.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        range.setEnd(node, i);
                        let rectBefore = range.getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    return { node, offset: i + (after ? 1 : 0) };
                }
            }
        }
        return { node, offset: 0 };
    }
    function posAtCoords(view, { x, y }, bias = -1) {
        let content = view.contentDOM.getBoundingClientRect(), block;
        let halfLine = view.defaultLineHeight / 2;
        for (let bounced = false;;) {
            block = view.blockAtHeight(y, content.top);
            if (block.top > y || block.bottom < y) {
                bias = block.top > y ? -1 : 1;
                y = Math.min(block.bottom - halfLine, Math.max(block.top + halfLine, y));
                if (bounced)
                    return -1;
                else
                    bounced = true;
            }
            if (block.type == BlockType.Text)
                break;
            y = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        }
        let lineStart = block.from;
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : null;
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length : null;
        // Clip x to the viewport sides
        x = Math.max(content.left + 1, Math.min(content.right - 1, x));
        let root = view.root, element = root.elementFromPoint(x, y);
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && view.contentDOM.contains(element) && !(view.docView.nearest(element) instanceof WidgetView)) {
            if (root.caretPositionFromPoint) {
                let pos = root.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (root.caretRangeFromPoint) {
                let range = root.caretRangeFromPoint(x, y);
                if (range)
                    ({ startContainer: node, startOffset: offset } = range);
            }
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView.find(view.docView, lineStart);
            ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        return view.docView.posFromDOM(node, offset);
    }
    function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = view.state.doc.lineAt(start.head);
        let coords = !includeWrap || !view.lineWrapping ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let pos = view.posAtCoords({ x: forward == (view.textDirection == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        let lineView = LineView.find(view.docView, start.head);
        let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
        return EditorSelection.cursor(end, forward ? -1 : 1);
    }
    function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        for (let cur = start, check = null;;) {
            let next = moveVisually(line, spans, view.textDirection, cur, forward), char = movedOver;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = EditorSelection.cursor(forward ? line.from : line.to);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically(view, start, forward, distance) {
        var _a;
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos);
        let startCoords = view.coordsAtPos(startPos);
        if (startCoords) {
            let rect = view.dom.getBoundingClientRect();
            let goal = (_a = start.goalColumn) !== null && _a !== void 0 ? _a : startCoords.left - rect.left;
            let resolvedGoal = rect.left + goal;
            let dist = distance !== null && distance !== void 0 ? distance : 5;
            for (let startY = dir < 0 ? startCoords.top : startCoords.bottom, extra = 0; extra < 50; extra += 10) {
                let pos = posAtCoords(view, { x: resolvedGoal, y: startY + (dist + extra) * dir }, dir);
                if (pos == null)
                    break;
                if (pos != startPos)
                    return EditorSelection.cursor(pos, undefined, undefined, goal);
            }
        }
        // Outside of the drawn viewport, use a crude column-based approach
        let { doc } = view.state, line = doc.lineAt(startPos), tabSize = view.state.tabSize;
        let goal = start.goalColumn, goalCol = 0;
        if (goal == null) {
            for (const iter = doc.iterRange(line.from, startPos); !iter.next().done;)
                goalCol = countColumn(iter.value, goalCol, tabSize);
            goal = goalCol * view.defaultCharacterWidth;
        }
        else {
            goalCol = Math.round(goal / view.defaultCharacterWidth);
        }
        if (dir < 0 && line.from == 0)
            return EditorSelection.cursor(0);
        else if (dir > 0 && line.to == doc.length)
            return EditorSelection.cursor(line.to);
        let otherLine = doc.line(line.number + dir);
        let result = otherLine.from;
        let seen = 0;
        for (const iter = doc.iterRange(otherLine.from, otherLine.to); seen >= goalCol && !iter.next().done;) {
            const { offset, leftOver } = findColumn(iter.value, seen, goalCol, tabSize);
            seen = goalCol - leftOver;
            result += offset;
        }
        return EditorSelection.cursor(result, undefined, undefined, goal);
    }

    // This will also be where dragging info and such goes
    class InputState {
        constructor(view) {
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.scrollHandlers = [];
            this.registeredEvents = [];
            this.customHandlers = [];
            this.composing = false;
            this.compositionEndedAt = 0;
            this.mouseSelection = null;
            for (let type in handlers) {
                let handler = handlers[type];
                view.contentDOM.addEventListener(type, (event) => {
                    if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event))
                        return;
                    if (this.mustFlushObserver(event))
                        view.observer.forceFlush();
                    if (this.runCustomHandlers(type, view, event))
                        event.preventDefault();
                    else
                        handler(view, event);
                });
                this.registeredEvents.push(type);
            }
            // Must always run, even if a custom handler handled the event
            view.contentDOM.addEventListener("keydown", (event) => {
                view.inputState.lastKeyCode = event.keyCode;
                view.inputState.lastKeyTime = Date.now();
            });
            this.notifiedFocused = view.hasFocus;
            this.ensureHandlers(view);
        }
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        ensureHandlers(view) {
            let handlers = this.customHandlers = view.pluginField(domEventHandlers);
            for (let set of handlers) {
                for (let type in set.handlers)
                    if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                        this.registeredEvents.push(type);
                        view.contentDOM.addEventListener(type, (event) => {
                            if (!eventBelongsToEditor(view, event))
                                return;
                            if (this.runCustomHandlers(type, view, event))
                                event.preventDefault();
                        });
                    }
            }
        }
        runCustomHandlers(type, view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers[type];
                if (handler) {
                    try {
                        if (handler.call(set.plugin, event, view) || event.defaultPrevented)
                            return true;
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
            return false;
        }
        runScrollHandlers(view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers.scroll;
                if (handler) {
                    try {
                        handler.call(set.plugin, event, view);
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser.safari && event.timeStamp - this.compositionEndedAt < 500) {
                this.compositionEndedAt = 0;
                return true;
            }
            return false;
        }
        mustFlushObserver(event) {
            return event.type == "keydown" || event.type == "compositionend";
        }
        startMouseSelection(view, event, style) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = new MouseSelection(this, view, event, style);
        }
        update(update) {
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    }
    class MouseSelection {
        constructor(inputState, view, startEvent, style) {
            this.inputState = inputState;
            this.view = view;
            this.startEvent = startEvent;
            this.style = style;
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
            this.dragMove = dragMovesSelection$1(view, startEvent);
            this.dragging = isInPrimarySelection(view, startEvent) ? null : false;
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false) {
                startEvent.preventDefault();
                this.select(startEvent);
            }
        }
        move(event) {
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging !== false)
                return;
            this.select(event);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.startEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.inputState.mouseSelection = null;
        }
        select(event) {
            let selection = this.style.get(event, this.extend, this.multiple);
            if (!selection.eq(this.view.state.selection) || selection.primary.assoc != this.view.state.selection.primary.assoc)
                this.view.dispatch({
                    selection,
                    annotations: Transaction.userEvent.of("pointerselection"),
                    scrollIntoView: true
                });
        }
        update(update) {
            if (update.docChanged && this.dragging)
                this.dragging = this.dragging.map(update.changes);
            this.style.update(update);
        }
    }
    function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection$1(view, event) {
        let facet = view.state.facet(dragMovesSelection);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
        let { primary } = view.state.selection;
        if (primary.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection(view.root);
        if (sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers = Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
        (browser.ios && browser.webkit_version < 604);
    function capturePaste(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste(view, target.value);
        }, 50);
    }
    function doPaste(view, input) {
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
        if (linewise) {
            changes = {
                changes: state.selection.ranges.map(r => state.doc.lineAt(r.from))
                    .filter((l, i, a) => i == 0 || a[i - 1] != l)
                    .map(line => ({ from: line.from, insert: (byLine ? text.line(i++).slice() : input) + state.lineBreak }))
            };
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.slice() },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            annotations: Transaction.userEvent.of("paste"),
            scrollIntoView: true
        });
    }
    function mustCapture(event) {
        let Mod;
        (function (Mod) {
            Mod[Mod["Ctrl"] = 1] = "Ctrl";
            Mod[Mod["Alt"] = 2] = "Alt";
            Mod[Mod["Shift"] = 4] = "Shift";
            Mod[Mod["Meta"] = 8] = "Meta";
        })(Mod || (Mod = {}));
        let mods = (event.ctrlKey ? Mod.Ctrl : 0) | (event.metaKey ? Mod.Meta : 0) |
            (event.altKey ? Mod.Alt : 0) | (event.shiftKey ? Mod.Shift : 0);
        let code = event.keyCode, macCtrl = browser.mac && mods == Mod.Ctrl;
        return code == 8 || (macCtrl && code == 72) || // Backspace, Ctrl-h on Mac
            code == 46 || (macCtrl && code == 68) || // Delete, Ctrl-d on Mac
            code == 27 || // Esc
            (mods == (browser.mac ? Mod.Meta : Mod.Ctrl) && // Ctrl/Cmd-[biyz]
                (code == 66 || code == 73 || code == 89 || code == 90));
    }
    handlers.keydown = (view, event) => {
        if (mustCapture(event))
            event.preventDefault();
        view.inputState.setSelectionOrigin("keyboardselection");
    };
    handlers.touchdown = handlers.touchmove = view => {
        view.inputState.setSelectionOrigin("pointerselection");
    };
    handlers.mousedown = (view, event) => {
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection(view, event);
        if (style) {
            if (view.root.activeElement != view.contentDOM)
                view.observer.ignore(() => focusPreventScroll(view.contentDOM));
            view.inputState.startMouseSelection(view, event, style);
        }
    };
    function rangeForClick(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt(view.state, pos, bias);
        }
        else { // Triple click
            let line = LineView.find(view.docView, pos);
            if (line)
                return EditorSelection.range(line.posAtStart, line.posAtEnd);
            let { from, to } = view.state.doc.lineAt(pos);
            return EditorSelection.range(from, to);
        }
    }
    let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
    let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // beside it.
        return before && insideY(y, before) ? -1 : 1;
    }
    function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY });
        if (pos == null)
            return null;
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0;
    function getClickType(event) {
        if (!BadMouseDetail)
            return event.detail;
        let last = lastMouseDown;
        lastMouseDown = event;
        return lastMouseDownCount = !last || (last.timeStamp > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        let last = start, lastEvent = event;
        return {
            update(update) {
                if (update.changes) {
                    if (start)
                        start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, extend, multiple) {
                let cur;
                if (event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY)
                    cur = last;
                else {
                    cur = last = queryPos(view, event);
                    lastEvent = event;
                }
                if (!cur || !start)
                    return startSel;
                let range = rangeForClick(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.primary.extend(range.from, range.to));
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    handlers.dragstart = (view, event) => {
        let { selection: { primary } } = view.state;
        let { mouseSelection } = view.inputState;
        if (mouseSelection)
            mouseSelection.dragging = primary;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", view.state.sliceDoc(primary.from, primary.to));
            event.dataTransfer.effectAllowed = "copyMove";
        }
    };
    handlers.drop = (view, event) => {
        if (!event.dataTransfer)
            return;
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY });
        let text = event.dataTransfer.getData("Text");
        if (dropPos == null || !text)
            return;
        event.preventDefault();
        let { mouseSelection } = view.inputState;
        let del = mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
            { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            annotations: Transaction.userEvent.of("drop")
        });
    };
    handlers.paste = (view, event) => {
        view.observer.flush();
        let data = brokenClipboardAPI ? null : event.clipboardData;
        let text = data && data.getData("text/plain");
        if (text) {
            doPaste(view, text);
            event.preventDefault();
        }
        else {
            capturePaste(view);
        }
    };
    function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.slice());
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: content.join(state.lineBreak), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text)
            return;
        lastLinewiseCopy = linewise ? text : null;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, text);
        }
        if (event.type == "cut")
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                annotations: Transaction.userEvent.of("cut")
            });
    };
    handlers.focus = handlers.blur = view => {
        setTimeout(() => {
            if (view.hasFocus != view.inputState.notifiedFocused)
                view.update([]);
        }, 10);
    };
    handlers.beforeprint = view => {
        view.viewState.printing = true;
        view.requestMeasure();
        setTimeout(() => {
            view.viewState.printing = false;
            view.requestMeasure();
        }, 2000);
    };
    function forceClearComposition(view) {
        if (view.docView.compositionDeco.size)
            view.update([]);
    }
    handlers.compositionstart = handlers.compositionupdate = view => {
        if (!view.inputState.composing) {
            if (view.docView.compositionDeco.size) {
                view.observer.flush();
                forceClearComposition(view);
            }
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = true;
        }
    };
    handlers.compositionend = view => {
        view.inputState.composing = false;
        view.inputState.compositionEndedAt = Date.now();
        setTimeout(() => {
            if (!view.inputState.composing)
                forceClearComposition(view);
        }, 50);
    };

    const observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData = browser.ie && browser.ie_version <= 11;
    class DOMObserver {
        constructor(view, onChange, onScrollChanged) {
            this.view = view;
            this.onChange = onChange;
            this.onScrollChanged = onScrollChanged;
            this.active = false;
            this.ignoreSelection = new DOMSelection;
            this.delayedFlush = -1;
            this.queue = [];
            this.scrollTargets = [];
            this.intersection = null;
            this.intersecting = false;
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM
                if (browser.ie && browser.ie_version <= 11 &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (useCharData)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = () => {
                if (this.view.root.activeElement != this.dom)
                    return;
                // Deletions on IE11 fire their events in the wrong order, giving
                // us a selection change event before the DOM changes are
                // reported.
                if (browser.ie && browser.ie_version <= 11 && !this.view.state.selection.primary.empty) {
                    let sel = getSelection(this.view.root);
                    // Selection.isCollapsed isn't reliable on IE
                    if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                        return this.flushSoon();
                }
                this.flush();
            };
            this.start();
            this.onScroll = this.onScroll.bind(this);
            window.addEventListener("scroll", this.onScroll);
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        this.onScrollChanged(document.createEvent("Event"));
                    }
                }, {});
                this.intersection.observe(this.dom);
            }
            this.listenForScroll();
        }
        onScroll(e) {
            if (this.intersecting) {
                this.flush();
                this.onScrollChanged(e);
            }
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions);
            // FIXME is this shadow-root safe?
            this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
            if (useCharData)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
            if (useCharData)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        clearSelection() {
            this.ignoreSelection.set(getSelection(this.view.root));
        }
        // Throw away any pending changes
        clear() {
            this.observer.takeRecords();
            this.queue.length = 0;
            this.clearSelection();
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = window.setTimeout(() => { this.delayedFlush = -1; this.flush(); }, 20);
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                window.clearTimeout(this.delayedFlush);
                this.delayedFlush = -1;
                this.flush();
            }
        }
        // Apply pending changes, if any
        flush() {
            if (this.delayedFlush >= 0)
                return;
            let records = this.queue;
            for (let mut of this.observer.takeRecords())
                records.push(mut);
            if (records.length)
                this.queue = [];
            let selection = getSelection(this.view.root);
            let newSel = !this.ignoreSelection.eq(selection) && hasSelection(this.dom, selection);
            if (records.length == 0 && !newSel)
                return;
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            let startState = this.view.state;
            if (from > -1 || newSel)
                this.onChange(from, to, typeOver);
            if (this.view.state == startState) { // The view wasn't updated
                if (this.view.docView.dirty) {
                    this.ignore(() => this.view.docView.sync());
                    this.view.docView.dirty = Dirty.Not;
                }
                this.view.docView.updateSelection();
            }
            this.clearSelection();
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty();
            if (rec.type == "childList") {
                let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else { // "characterData"
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
        }
        destroy() {
            this.stop();
            if (this.intersection)
                this.intersection.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            window.removeEventListener("scroll", this.onScroll);
            clearTimeout(this.parentCheck);
        }
    }
    function findChild(cView, dom, dir) {
        while (dom) {
            let curView = ContentView.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }

    function applyDOMChange(view, start, end, typeOver) {
        let change, newSel;
        let sel = view.state.selection.primary, bounds;
        if (start > -1 && (bounds = view.docView.domBoundsAround(start, end, 0))) {
            let { from, to } = bounds;
            let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view.contentDOM, view.root);
            let reader = new DOMReader(selPoints, view.state.lineBreak);
            reader.readRange(bounds.startDOM, bounds.endDOM);
            newSel = selectionFromPoints(selPoints, from);
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed
            if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff(view.state.sliceDoc(from, to), reader.text, preferredPos - from, preferredSide);
            if (diff)
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: view.state.toText(reader.text.slice(diff.from, diff.toB)) };
        }
        else if (view.hasFocus) {
            let domSel = getSelection(view.root);
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ? view.state.selection.primary.head
                : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset
                ? view.state.selection.primary.anchor
                : selectionCollapsed(domSel) ? head : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
            if (head != sel.head || anchor != sel.anchor)
                newSel = EditorSelection.single(anchor, head);
        }
        if (!change && !newSel)
            return;
        // Heuristic to notice typing over a selected character
        if (!change && typeOver && !sel.empty && newSel && newSel.primary.empty)
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        if (change) {
            let startState = view.state;
            // Android browsers don't fire reasonable key events for enter,
            // backspace, or delete. So this detects changes that look like
            // they're caused by those keys, and reinterprets them as key
            // events.
            if (browser.android &&
                ((change.from == sel.from && change.to == sel.to &&
                    change.insert.length == 1 && change.insert.lines == 2 &&
                    dispatchKey(view, "Enter", 10)) ||
                    (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
                        dispatchKey(view, "Backspace", 8)) ||
                    (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                        dispatchKey(view, "Delete", 46))))
                return;
            let text = change.insert.toString();
            if (view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text)))
                return;
            let tr;
            if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3) {
                let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
                let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
                tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) +
                    after));
            }
            else {
                let changes = startState.changes(change);
                tr = {
                    changes,
                    selection: newSel && !startState.selection.primary.eq(newSel.primary) && newSel.primary.to <= changes.newLength
                        ? startState.selection.replaceRange(newSel.primary) : undefined
                };
            }
            view.dispatch(tr, { scrollIntoView: true, annotations: Transaction.userEvent.of("input") });
        }
        else if (newSel && !newSel.primary.eq(sel)) {
            let scrollIntoView = false, annotations;
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "keyboardselection")
                    scrollIntoView = true;
                else
                    annotations = Transaction.userEvent.of(view.inputState.lastSelectionOrigin);
            }
            view.dispatch({ selection: newSel, scrollIntoView, annotations });
        }
    }
    function findDiff(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    class DOMReader {
        constructor(points, lineSep) {
            this.points = points;
            this.lineSep = lineSep;
            this.text = "";
        }
        readRange(start, end) {
            if (!start)
                return;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView.get(cur), nextView = ContentView.get(next);
                if ((view ? view.breakAfter : isBlockElement(cur)) ||
                    ((nextView ? nextView.breakAfter : isBlockElement(next)) && !(cur.nodeName == "BR" && !cur.cmIgnore)))
                    this.text += this.lineSep;
                cur = next;
            }
            this.findPointBefore(parent, end);
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView.get(node);
            let fromView = view && view.overrideDOMText;
            let text;
            if (fromView != null)
                text = fromView.sliceString(0, undefined, this.lineSep);
            else if (node.nodeType == 3)
                text = node.nodeValue;
            else if (node.nodeName == "BR")
                text = node.nextSibling ? this.lineSep : "";
            else if (node.nodeType == 1)
                this.readRange(node.firstChild, null);
            if (text != null) {
                this.findPointIn(node, text.length);
                this.text += text;
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointIn(node, maxLen) {
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, maxLen);
        }
    }
    function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    class DOMPoint {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }
    function selectionPoints(dom, root) {
        let result = [];
        if (root.activeElement != dom)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = getSelection(root);
        if (anchorNode) {
            result.push(new DOMPoint(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }
    function dispatchKey(view, name, code) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        let down = new KeyboardEvent("keydown", options);
        view.contentDOM.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        view.contentDOM.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }

    var UpdateState;
    (function (UpdateState) {
        UpdateState[UpdateState["Idle"] = 0] = "Idle";
        UpdateState[UpdateState["Measuring"] = 1] = "Measuring";
        UpdateState[UpdateState["Updating"] = 2] = "Updating"; // Updating/drawing, either directly via the `update` method, or as a result of a layout check
    })(UpdateState || (UpdateState = {}));
    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /// An editor view represents the editor's user interface. It holds
    /// the editable DOM surface, and possibly other elements such as the
    /// line number gutter. It handles events and dispatches state
    /// transactions for editing actions.
    class EditorView {
        /// Construct a new view. You'll usually want to put `view.dom` into
        /// your document after creating a view, so that the user can see
        /// it.
        constructor(
        /// Configuration options.
        config = {}) {
            this.plugins = [];
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            /// @internal
            this.updateState = UpdateState.Updating;
            /// @internal
            this.measureScheduled = -1;
            /// @internal
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.className = themeClass("scroller");
            this.scrollDOM.appendChild(this.contentDOM);
            this.dom = document.createElement("div");
            this.dom.appendChild(this.scrollDOM);
            this._dispatch = config.dispatch || ((tr) => this.update([tr]));
            this.dispatch = this.dispatch.bind(this);
            this.root = (config.root || document);
            this.viewState = new ViewState(config.state || EditorState.create());
            this.plugins = this.state.facet(viewPlugin).map(spec => PluginInstance.create(spec, this));
            this.observer = new DOMObserver(this, (from, to, typeOver) => {
                applyDOMChange(this, from, to, typeOver);
            }, event => {
                this.inputState.runScrollHandlers(this, event);
                this.measure();
            });
            this.docView = new DocView(this);
            this.inputState = new InputState(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = UpdateState.Idle;
            ensureGlobalHandler();
            this.requestMeasure();
            if (config.parent)
                config.parent.appendChild(this.dom);
        }
        /// The current editor state.
        get state() { return this.viewState.state; }
        /// To be able to display large documents without consuming too much
        /// memory or overloading the browser, CodeMirror only draws the
        /// code that is visible (plus a margin around it) to the DOM. This
        /// property tells you the extent of the current drawn viewport, in
        /// document positions.
        get viewport() { return this.viewState.viewport; }
        /// When there are, for example, large collapsed ranges in the
        /// viewport, its size can be a lot bigger than the actual visible
        /// content. Thus, if you are doing something like styling the
        /// content in the viewport, it is preferable to only do so for
        /// these ranges, which are the subset of the viewport that is
        /// actually drawn.
        get visibleRanges() { return this.viewState.visibleRanges; }
        /// Returns false when the editor is entirely scrolled out of view
        /// or otherwise hidden.
        get inView() { return this.viewState.inView; }
        /// Indicates whether the user is currently composing text via
        /// [IME](https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide).
        get composing() { return this.inputState.composing; }
        dispatch(...input) {
            this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0]
                : this.state.update(...input));
        }
        /// Update the view for the given array of transactions. This will
        /// update the visible document and selection to match the state
        /// produced by the transactions, and notify view plugins of the
        /// change. You should usually call
        /// [`dispatch`](#view.EditorView.dispatch) instead, which uses this
        /// as a primitive.
        update(transactions) {
            if (this.updateState != UpdateState.Idle)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, update;
            this.updateState = UpdateState.Updating;
            try {
                let state = this.state;
                for (let tr of transactions) {
                    if (tr.startState != state)
                        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                    state = tr.state;
                }
                update = new ViewUpdate(this, state, transactions);
                let scrollTo = transactions.some(tr => tr.scrollIntoView) ? state.selection.primary : null;
                this.viewState.update(update, scrollTo);
                this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
                if (!update.empty)
                    this.updatePlugins(update);
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule) != this.styleModules)
                    this.mountStyles();
                this.updateAttrs();
            }
            finally {
                this.updateState = UpdateState.Idle;
            }
            if (redrawn || scrollTo || this.viewState.mustEnforceCursorAssoc)
                this.requestMeasure();
            for (let listener of this.state.facet(updateListener))
                listener(update);
        }
        /// Reset the view to the given state. (This will cause the entire
        /// document to be redrawn and all view plugins to be reinitialized,
        /// so you should probably only use it when the new state isn't
        /// derived from the old state. Otherwise, use
        /// [`update`](#view.EditorView.update) instead.)
        setState(newState) {
            if (this.updateState != UpdateState.Idle)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            this.updateState = UpdateState.Updating;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState(newState);
                this.plugins = newState.facet(viewPlugin).map(spec => PluginInstance.create(spec, this));
                this.docView = new DocView(this);
                this.inputState.ensureHandlers(this);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = UpdateState.Idle;
            }
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.prevState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
            if (prevSpecs != specs) {
                let newPlugins = [], reused = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(PluginInstance.create(spec, this));
                    }
                    else {
                        let plugin = this.plugins[found].update(update);
                        reused.push(plugin);
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (reused.indexOf(plugin) < 0)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.inputState.ensureHandlers(this);
            }
            else {
                for (let i = 0; i < this.plugins.length; i++)
                    this.plugins[i] = this.plugins[i].update(update);
            }
        }
        /// @internal
        measure() {
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
            this.measureScheduled = -1; // Prevent requestMeasure calls from scheduling another animation frame
            let updated = null;
            try {
                for (let i = 0;; i++) {
                    this.updateState = UpdateState.Measuring;
                    let changed = this.viewState.measure(this.docView, i > 0);
                    let measuring = this.measureRequests;
                    if (!changed && !measuring.length && this.viewState.scrollTo == null)
                        break;
                    this.measureRequests = [];
                    if (i > 5) {
                        console.warn("Viewport failed to stabilize");
                        break;
                    }
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException(this.state, e);
                            return BadMeasure;
                        }
                    });
                    let update = new ViewUpdate(this, this.state);
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = UpdateState.Updating;
                    this.updatePlugins(update);
                    this.updateAttrs();
                    if (changed)
                        this.docView.update(update);
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure) {
                            try {
                                measuring[i].write(measured[i], this);
                            }
                            catch (e) {
                                logException(this.state, e);
                            }
                        }
                    if (this.viewState.scrollTo) {
                        this.docView.scrollPosIntoView(this.viewState.scrollTo.head, this.viewState.scrollTo.assoc);
                        this.viewState.scrollTo = null;
                    }
                    if (!(changed & UpdateFlag$1.Viewport) && this.measureRequests.length == 0)
                        break;
                }
            }
            finally {
                this.updateState = UpdateState.Idle;
            }
            this.measureScheduled = -1;
            if (updated)
                for (let listener of this.state.facet(updateListener))
                    listener(updated);
        }
        /// Get the CSS classes for the currently active editor themes.
        get themeClasses() {
            return baseThemeID + " " +
                (this.state.facet(darkTheme) ? "cm-dark" : "cm-light") + " " +
                this.state.facet(theme);
        }
        updateAttrs() {
            let editorAttrs = combineAttrs(this.state.facet(editorAttributes), {
                class: themeClass("wrap") + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            updateAttrs(this.dom, this.editorAttrs, editorAttrs);
            this.editorAttrs = editorAttrs;
            let contentAttrs = combineAttrs(this.state.facet(contentAttributes), {
                spellcheck: "false",
                contenteditable: String(this.state.facet(editable)),
                class: themeClass("content"),
                style: `${browser.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            });
            updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
            this.contentAttrs = contentAttrs;
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            StyleModule.mount(this.root, this.styleModules.concat(baseTheme).reverse());
        }
        /// Find the DOM parent node and offset (child offset if `node` is
        /// an element, character offset when it is a text node) at the
        /// given document position.
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /// Find the document position at the given DOM node. Can be useful
        /// for associating positions with DOM events. Will raise an error
        /// when `node` isn't part of the editor content.
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        readMeasured() {
            if (this.updateState == UpdateState.Updating)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == UpdateState.Idle && this.measureScheduled > -1)
                this.measure();
        }
        /// Make sure plugins get a chance to measure the DOM before the
        /// next frame. Calling this is preferable to messing with the DOM
        /// directly from, for example, an even handler, because it'll make
        /// sure measuring and drawing done by other components is
        /// synchronized, avoiding unnecessary DOM layout computations.
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = requestAnimationFrame(() => this.measure());
            if (request) {
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /// Collect all values provided by the active plugins for a given
        /// field.
        pluginField(field) {
            // FIXME make this error when called during plugin updating
            let result = [];
            for (let plugin of this.plugins)
                plugin.takeField(field, result);
            return result;
        }
        /// Get the value of a specific plugin, if present. Note that
        /// plugins that crash can be dropped from a view, so even when you
        /// know you registered a given plugin, it is recommended to check
        /// the return value of this method.
        plugin(plugin) {
            for (let inst of this.plugins)
                if (inst.spec == plugin)
                    return inst.value;
            return null;
        }
        /// Find the line or block widget at the given vertical position.
        /// `editorTop`, if given, provides the vertical position of the top
        /// of the editor. It defaults to the editor's screen position
        /// (which will force a DOM layout).
        blockAtHeight(height, editorTop) {
            this.readMeasured();
            return this.viewState.blockAtHeight(height, ensureTop(editorTop, this.contentDOM));
        }
        /// Find information for the visual line (see
        /// [`visualLineAt`](#view.EditorView.visualLineAt)) at the given
        /// vertical position. The resulting block info might hold another
        /// array of block info structs in its `type` field if this line
        /// consists of more than one block.
        ///
        /// Heights are interpreted relative to the given `editorTop`
        /// position. When not given, the top position of the editor's
        /// [content element](#view.EditorView.contentDOM) is taken.
        visualLineAtHeight(height, editorTop) {
            this.readMeasured();
            return this.viewState.lineAtHeight(height, ensureTop(editorTop, this.contentDOM));
        }
        /// Find the extent and height of the visual line (the content shown
        /// in the editor as a line, which may be smaller than a document
        /// line when broken up by block widgets, or bigger than a document
        /// line when line breaks are covered by replaced decorations) at
        /// the given position.
        ///
        /// Vertical positions are computed relative to the `editorTop`
        /// argument. You can pass `view.dom.getBoundingClientRect().top`
        /// here to get screen coordinates.
        visualLineAt(pos, editorTop = 0) {
            return this.viewState.lineAt(pos, editorTop);
        }
        /// Iterate over the height information of the lines in the
        /// viewport.
        viewportLines(f, editorTop) {
            let { from, to } = this.viewport;
            this.viewState.forEachLine(from, to, f, ensureTop(editorTop, this.contentDOM));
        }
        /// The editor's total content height.
        get contentHeight() {
            return this.viewState.heightMap.height + this.viewState.paddingTop + this.viewState.paddingBottom;
        }
        /// Move a cursor position by [grapheme
        /// cluster](#text.nextClusterBreak). `forward` determines whether
        /// the motion is away from the line start, or towards it. Motion in
        /// bidirectional text is in visual order, in the editor's [text
        /// direction](#view.EditorView.textDirection). When the start
        /// position was the last one on the line, the returned position
        /// will be across the line break. If there is no further line, the
        /// original position is returned.
        moveByChar(start, forward, by) {
            return moveByChar(this, start, forward, by);
        }
        /// Move a cursor position across the next group of either
        /// [letters](#state.EditorState.charCategorizer) or non-letter
        /// non-whitespace characters.
        moveByGroup(start, forward) {
            return moveByChar(this, start, forward, initial => byGroup(this, start.head, initial));
        }
        /// Move to the next line boundary in the given direction. If
        /// `includeWrap` is true, line wrapping is on, and there is a
        /// further wrap point on the current line, the wrap point will be
        /// returned. Otherwise this function will return the start or end
        /// of the line.
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary(this, start, forward, includeWrap);
        }
        /// Move a cursor position vertically. When `distance` isn't given,
        /// it defaults to moving to the next line (including wrapped
        /// lines). Otherwise, `distance` should provide a positive distance
        /// in pixels.
        ///
        /// When `start` has a
        /// [`goalColumn`](#state.SelectionRange.goalColumn), the vertical
        /// motion will use that as a target horizontal position. Otherwise,
        /// the cursor's own horizontal position is used. The returned
        /// cursor will have its goal column set to whichever column was
        /// used.
        moveVertically(start, forward, distance) {
            return moveVertically(this, start, forward, distance);
        }
        /// Scroll the given document position into view.
        scrollPosIntoView(pos) {
            this.viewState.scrollTo = EditorSelection.cursor(pos);
            this.requestMeasure();
        }
        /// Get the document position at the given screen coordinates.
        /// Returns null if no valid position could be found.
        posAtCoords(coords) {
            this.readMeasured();
            return posAtCoords(this, coords);
        }
        /// Get the screen coordinates at the given document position.
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
        }
        /// The default width of a character in the editor. May not
        /// accurately reflect the width of all characters.
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /// The default height of a line in the editor.
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /// The text direction (`direction` CSS property) of the editor.
        get textDirection() { return this.viewState.heightOracle.direction; }
        /// Whether this editor [wraps lines](#view.EditorView.lineWrapping)
        /// (as determined by the `white-space` CSS property of its content
        /// element).
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /// Returns the bidirectional text structure of the given line
        /// (which should be in the current document) as an array of span
        /// objects. The order of these spans matches the [text
        /// direction](#view.EditorView.textDirection)—if that is
        /// left-to-right, the leftmost spans come first, otherwise the
        /// rightmost spans come first.
        bidiSpans(line) {
            if (line.length > MaxBidiLine)
                return trivialOrder(line.length);
            let dir = this.textDirection;
            for (let entry of this.bidiCache)
                if (entry.from == line.from && entry.dir == dir)
                    return entry.order;
            let order = computeOrder(line.slice(), this.textDirection);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
            return order;
        }
        /// Check whether the editor has focus.
        get hasFocus() {
            return this.root.activeElement == this.contentDOM;
        }
        /// Put focus on the editor.
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /// Clean up this editor view, removing its element from the
        /// document, unregistering event handlers, and notifying
        /// plugins. The view instance can no longer be used after
        /// calling this.
        destroy() {
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.inputState.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
        }
        /// Facet that can be used to add DOM event handlers. The value
        /// should be an object mapping event names to handler functions. The
        /// first such function to return true will be assumed to have handled
        /// that event, and no other handlers or built-in behavior will be
        /// activated for it.
        /// These are registered on the [content
        /// element](#view.EditorView.contentDOM), except for `scroll`
        /// handlers, which will be called any time the editor's [scroll
        /// element](#view.EditorView.scrollDOM) or one of its parent nodes
        /// is scrolled.
        static domEventHandlers(handlers) {
            return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
        }
        /// Create a theme extension. The first argument can be a
        /// [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        /// style spec providing the styles for the theme. These will be
        /// prefixed with a generated class for the style.
        ///
        /// It is highly recommended you use _theme classes_, rather than
        /// regular CSS classes, in your selectors. These are prefixed with
        /// a `$` instead of a `.`, and will be expanded (as with
        /// [`themeClass`](#view.themeClass)) to one or more prefixed class
        /// names. So for example `$content` targets the editor's [content
        /// element](#view.EditorView.contentDOM).
        ///
        /// Because the selectors will be prefixed with a scope class,
        /// directly matching the editor's [wrapper
        /// element](#view.EditorView.dom), which is the element on which
        /// the scope class will be added, needs to be explicitly
        /// differentiated by adding an additional `$` to the front of the
        /// pattern. For example `$$focused $panel` will expand to something
        /// like `.[scope].cm-focused .cm-panel`.
        ///
        /// When `dark` is set to true, the theme will be marked as dark,
        /// which will add the `$dark` selector to the wrapper element (as
        /// opposed to `$light` when a light theme is active).
        static theme(spec, options) {
            let prefix = StyleModule.newName();
            let result = [theme.of(prefix), styleModule.of(buildTheme(`.${baseThemeID}.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme.of(true));
            return result;
        }
        /// Create an extension that adds styles to the base theme. The
        /// given object works much like the one passed to
        /// [`theme`](#view.EditorView^theme). You'll often want to qualify
        /// base styles with `$dark` or `$light` so they only apply when
        /// there is a dark or light theme active. For example `"$$dark
        /// $myHighlight"`.
        static baseTheme(spec) {
            return precedence(styleModule.of(buildTheme("." + baseThemeID, spec)), "fallback");
        }
    }
    /// Facet to add a [style
    /// module](https://github.com/marijnh/style-mod#documentation) to
    /// an editor view. The view will ensure that the module is
    /// registered in its [document
    /// root](#view.EditorView.constructor^config.root).
    EditorView.styleModule = styleModule;
    /// An input handler can be used to override the way changes to the
    /// content are handled. A handler is passed the document positions
    /// between which the change was found, and the new content. When it
    /// returns true, no further input handlers are called and the
    /// default behavior is prevented.
    EditorView.inputHandler = inputHandler;
    /// Allows you to provide a function that should be called when the
    /// library catches an exception from an extension (mostly from view
    /// plugins, but may be used by other extensions to route exceptions
    /// from user-code-provided callbacks). This is mostly useful for
    /// debugging and logging. See [`logException`](#view.logException).
    EditorView.exceptionSink = exceptionSink;
    /// A facet that can be used to have a listener function be notified
    /// every time the view updates.
    EditorView.updateListener = updateListener;
    /// Facet that controls whether the editor content is editable. When
    /// its the highest-precedence value is `false`, editing is
    /// disabled, and the content element will no longer have its
    /// `contenteditable` attribute set to `true`. (Note that this
    /// doesn't affect API calls that change the editor content, even
    /// when those are bound to keys or buttons.)
    EditorView.editable = editable;
    /// Facet used to configure whether a given selection drag event
    /// should move or copy the selection. The given predicate will be
    /// called with the `mousedown` event, and can return `true` when
    /// the drag should move the content.
    EditorView.dragMovesSelection = dragMovesSelection;
    /// Facet used to configure whether a given selecting click adds
    /// a new range to the existing selection or replaces it entirely.
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    /// Allows you to influence the way mouse selection happens. The
    /// functions in this facet will be called for a `mousedown` event
    /// on the editor, and can return an object that overrides the way a
    /// selection is computed from that mouse click or drag.
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    /// A facet that determines which [decorations](#view.Decoration)
    /// are shown in the view. See also [view
    /// plugins](#view.EditorView^decorations), which have a separate
    /// mechanism for providing decorations.
    EditorView.decorations = decorations;
    /// An extension that enables line wrapping in the editor.
    EditorView.lineWrapping = EditorView.theme({ $content: { whiteSpace: "pre-wrap" } });
    /// Facet that provides attributes for the editor's editable DOM
    /// element.
    EditorView.contentAttributes = contentAttributes;
    /// Facet that provides editor DOM attributes for the editor's
    /// outer element.
    EditorView.editorAttributes = editorAttributes;
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine = 4096;
    function ensureTop(given, dom) {
        return given == null ? dom.getBoundingClientRect().top : given;
    }
    let resizeDebounce = -1;
    function ensureGlobalHandler() {
        window.addEventListener("resize", () => {
            if (resizeDebounce == -1)
                resizeDebounce = setTimeout(handleResize, 50);
        });
    }
    function handleResize() {
        resizeDebounce = -1;
        let found = document.querySelectorAll(".cm-content");
        for (let i = 0; i < found.length; i++) {
            let docView = ContentView.get(found[i]);
            if (docView)
                docView.editorView.requestMeasure();
        }
    }
    const BadMeasure = {};
    class CachedOrder {
        constructor(from, to, dir, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty)
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
            }
            return result;
        }
    }

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'",
      229: "q"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\"",
      229: "Q"
    };

    var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var safari = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
    var gecko$1 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    var brokenModifierNames = chrome$1 && (mac || +chrome$1[1] < 57) || gecko$1 && mac;

    // Fill in the digit keys
    for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

    // The function keys
    for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

    // And the alphabetic keys
    for (var i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

    function keyName(event) {
      // Don't trust event.key in Chrome when there are modifiers until
      // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
      var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
        (safari || ie$1) && event.shiftKey && event.key && event.key.length == 1;
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    const currentPlatform = typeof navigator == "undefined" ? "key"
        : /Mac/.test(navigator.platform) ? "mac"
            : /Win/.test(navigator.platform) ? "win"
                : /Linux|X11/.test(navigator.platform) ? "linux"
                    : "key";
    function normalizeKeyName(name, platform) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; ++i) {
            const mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (platform == "mac")
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function modifiers(name, event, shift) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    const keymaps = Facet.define();
    const handleKeyEvents = EditorView.domEventHandlers({
        keydown(event, view) {
            return runHandlers(view.state.facet(keymaps), event, view, "editor");
        }
    });
    /// Create a view extension that registers a keymap.
    ///
    /// You can add multiple keymap extensions to an editor. Their
    /// priorities determine their precedence (the ones specified early or
    /// with high priority get checked first). When a handler has returned
    /// `true` for a given key, no further handlers are called.
    ///
    /// When a key is bound multiple times (either in a single keymap or
    /// in separate maps), the bound commands all get a chance to handle
    /// the key stroke, in order of precedence, until one of them returns
    /// true.
    function keymap(bindings, platform) {
        return [handleKeyEvents, keymaps.of(buildKeymap(bindings, platform))];
    }
    let storedPrefix = null;
    const PrefixTimeout = 4000;
    function buildKeymap(bindings, platform = currentPlatform) {
        let bound = Object.create(null);
        let isPrefix = Object.create(null);
        let checkPrefix = (name, is) => {
            let current = isPrefix[name];
            if (current == null)
                isPrefix[name] = is;
            else if (current != is)
                throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };
        let add = (scope, key, command, preventDefault) => {
            let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
            for (let i = 1; i < parts.length; i++) {
                let prefix = parts.slice(0, i).join(" ");
                checkPrefix(prefix, true);
                if (!scopeObj[prefix])
                    scopeObj[prefix] = {
                        preventDefault: true,
                        commands: [(view) => {
                                let ourObj = storedPrefix = { view, prefix, scope };
                                setTimeout(() => { if (storedPrefix == ourObj)
                                    storedPrefix = null; }, PrefixTimeout);
                                return true;
                            }]
                    };
            }
            let full = parts.join(" ");
            checkPrefix(full, false);
            let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });
            binding.commands.push(command);
            if (preventDefault)
                binding.preventDefault = true;
        };
        for (let b of bindings) {
            let name = b[platform] || b.key;
            if (!name)
                continue;
            for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
                add(scope, name, b.run, b.preventDefault);
                if (b.shift)
                    add(scope, "Shift-" + name, b.shift, b.preventDefault);
            }
        }
        return bound;
    }
    function runHandlers(maps, event, view, scope) {
        let name = keyName(event), isChar = name.length == 1 && name != " ";
        let prefix = "";
        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
            prefix = storedPrefix.prefix + " ";
            storedPrefix = null;
        }
        let fallthrough = !!prefix;
        let runFor = (binding) => {
            if (binding) {
                for (let cmd of binding.commands)
                    if (cmd(view))
                        return true;
                if (binding.preventDefault)
                    fallthrough = true;
            }
            return false;
        };
        for (let map of maps) {
            let scopeObj = map[scope], baseName;
            if (!scopeObj)
                continue;
            if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
                return true;
            if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&
                (baseName = base[event.keyCode]) && baseName != name) {
                if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
                    return true;
            }
            else if (isChar && event.shiftKey) {
                if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
                    return true;
            }
        }
        return fallthrough;
    }

    const CanHidePrimary = !browser.ios; // FIXME test IE
    const selectionConfig = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                cursorBlinkRate: 1200,
                drawRangeCursor: true
            }, {
                cursorBlinkRate: (a, b) => Math.min(a, b),
                drawRangeCursor: (a, b) => a || b
            });
        }
    });
    /// Returns an extension that hides the browser's native selection and
    /// cursor, replacing the selection with a background behind the text
    /// (labeled with the `$selectionBackground` theme class), and the
    /// cursors with elements overlaid over the code (using
    /// `$cursor.primary` and `$cursor.secondary`).
    ///
    /// This allows the editor to display secondary selection ranges, and
    /// tends to produce a type of selection more in line with that users
    /// expect in a text editor (the native selection styling will often
    /// leave gaps between lines and won't fill the horizontal space after
    /// a line when the selection continues past it).
    ///
    /// It does have a performance cost, in that it requires an extra DOM
    /// layout cycle for many updates (the selection is drawn based on DOM
    /// layout information that's only available after laying out the
    /// content).
    function drawSelection(config = {}) {
        return [
            selectionConfig.of(config),
            drawSelectionPlugin,
            hideNativeSelection
        ];
    }
    class Piece {
        constructor(left, top, width, height, className) {
            this.left = left;
            this.top = top;
            this.width = width;
            this.height = height;
            this.className = className;
        }
        draw() {
            let elt = document.createElement("div");
            elt.className = this.className;
            elt.style.left = this.left + "px";
            elt.style.top = this.top + "px";
            if (this.width >= 0)
                elt.style.width = this.width + "px";
            elt.style.height = this.height + "px";
            return elt;
        }
        eq(p) {
            return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
                this.className == p.className;
        }
    }
    const drawSelectionPlugin = ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.rangePieces = [];
            this.cursors = [];
            this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };
            this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.selectionLayer.className = themeClass("selectionLayer");
            this.selectionLayer.setAttribute("aria-hidden", "true");
            this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.cursorLayer.className = themeClass("cursorLayer");
            this.cursorLayer.setAttribute("aria-hidden", "true");
            view.requestMeasure(this.measureReq);
            this.setBlinkRate();
        }
        setBlinkRate() {
            this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
        }
        update(update) {
            let confChanged = update.prevState.facet(selectionConfig) != update.state.facet(selectionConfig);
            if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged)
                this.view.requestMeasure(this.measureReq);
            if (update.transactions.some(tr => tr.scrollIntoView))
                this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
            if (confChanged)
                this.setBlinkRate();
        }
        readPos() {
            let { state } = this.view, conf = state.facet(selectionConfig);
            let rangePieces = state.selection.ranges.map(r => r.empty ? [] : measureRange(this.view, r)).reduce((a, b) => a.concat(b));
            let cursors = [];
            for (let r of state.selection.ranges) {
                let prim = r == state.selection.primary;
                if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                    let piece = measureCursor(this.view, r, prim);
                    if (piece)
                        cursors.push(piece);
                }
            }
            return { rangePieces, cursors };
        }
        drawSel({ rangePieces, cursors }) {
            if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {
                this.selectionLayer.textContent = "";
                for (let p of rangePieces)
                    this.selectionLayer.appendChild(p.draw());
                this.rangePieces = rangePieces;
            }
            if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {
                this.cursorLayer.textContent = "";
                for (let c of cursors)
                    this.cursorLayer.appendChild(c.draw());
                this.cursors = cursors;
            }
        }
        destroy() {
            this.selectionLayer.remove();
            this.cursorLayer.remove();
        }
    });
    const themeSpec = {
        $content: {
            "& ::selection": { backgroundColor: "transparent !important" }
        }
    };
    if (CanHidePrimary)
        themeSpec.$content.caretColor = "transparent !important";
    const hideNativeSelection = precedence(EditorView.theme(themeSpec), "override");
    const selectionClass = themeClass("selectionBackground");
    function getBase(view) {
        let rect = view.scrollDOM.getBoundingClientRect();
        return { left: rect.left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
    }
    function measureRange(view, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to)
            return [];
        let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
        let ltr = view.textDirection == Direction.LTR;
        let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
        let lineStyle = window.getComputedStyle(content.firstChild);
        let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft);
        let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
        let visualStart = view.visualLineAt(from), visualEnd = view.visualLineAt(to);
        if (visualStart.from == visualEnd.from) {
            return pieces(drawForLine(range.from, range.to));
        }
        else {
            let top = drawForLine(range.from, null);
            let bottom = drawForLine(null, range.to);
            let between = [];
            if (visualStart.to < visualEnd.from - 1)
                between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
            else if (top.bottom < bottom.top && bottom.top - top.bottom < 4)
                top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
            return pieces(top).concat(between).concat(pieces(bottom));
        }
        function piece(left, top, right, bottom) {
            return new Piece(left - base.left, top - base.top, right - left, bottom - top, selectionClass);
        }
        function pieces({ top, bottom, horizontal }) {
            let pieces = [];
            for (let i = 0; i < horizontal.length; i += 2)
                pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
            return pieces;
        }
        // Gets passed from/to in line-local positions
        function drawForLine(from, to) {
            let top = 1e9, bottom = -1e9, horizontal = [];
            function addSpan(from, fromOpen, to, toOpen, dir) {
                let fromCoords = view.coordsAtPos(from, 1), toCoords = view.coordsAtPos(to, -1);
                top = Math.min(fromCoords.top, toCoords.top, top);
                bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
                if (dir == Direction.LTR)
                    horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
                else
                    horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
            }
            let start = from !== null && from !== void 0 ? from : view.moveToLineBoundary(EditorSelection.cursor(to, 1), false).head;
            let end = to !== null && to !== void 0 ? to : view.moveToLineBoundary(EditorSelection.cursor(from, -1), true).head;
            // Split the range by visible range and document line
            for (let r of view.visibleRanges)
                if (r.to > start && r.from < end) {
                    for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                        let docLine = view.state.doc.lineAt(pos);
                        for (let span of view.bidiSpans(docLine)) {
                            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                            if (spanFrom >= endPos)
                                break;
                            if (spanTo > pos)
                                addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                        }
                        pos = docLine.to + 1;
                        if (pos >= endPos)
                            break;
                    }
                }
            if (horizontal.length == 0) {
                let coords = view.coordsAtPos(start, -1);
                top = Math.min(coords.top, top);
                bottom = Math.max(coords.bottom, bottom);
            }
            return { top, bottom, horizontal };
        }
    }
    const primaryCursorClass = themeClass("cursor.primary");
    const cursorClass = themeClass("cursor.secondary");
    function measureCursor(view, cursor, primary) {
        let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
        if (!pos)
            return null;
        let base = getBase(view);
        return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? primaryCursorClass : cursorClass);
    }

    const Specials = /[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b-\u200c\u200e\u200f\u2028\u2029\ufeff\ufff9-\ufffc]/gu;
    const Names = {
        0: "null",
        7: "bell",
        8: "backspace",
        10: "newline",
        11: "vertical tab",
        13: "carriage return",
        27: "escape",
        8203: "zero width space",
        8204: "zero width non-joiner",
        8205: "zero width joiner",
        8206: "left-to-right mark",
        8207: "right-to-left mark",
        8232: "line separator",
        8233: "paragraph separator",
        65279: "zero width no-break space",
        65532: "object replacement"
    };
    let _supportsTabSize = null;
    function supportsTabSize() {
        if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
            let styles = document.body.style;
            _supportsTabSize = (styles.tabSize || styles.MozTabSize) != null;
        }
        return _supportsTabSize || false;
    }
    const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
    const specialCharConfig = Facet.define({
        combine(configs) {
            // FIXME make configurations compose properly
            let config = combineConfig(configs, {
                render: null,
                specialChars: Specials,
                addSpecialChars: null
            });
            if (config.replaceTabs = !supportsTabSize())
                config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
            if (config.addSpecialChars)
                config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
            return config;
        }
    });
    /// Returns an extension that installs highlighting of special
    /// characters.
    function highlightSpecialChars(
    /// Configuration options.
    config = {}) {
        let ext = [specialCharConfig.of(config), specialCharPlugin];
        if (!supportsTabSize())
            ext.push(tabStyle);
        return ext;
    }
    const specialCharPlugin = ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.decorations = Decoration.none;
            this.decorationCache = Object.create(null);
            this.recompute();
        }
        update(update) {
            let confChange = update.prevState.facet(specialCharConfig) != update.state.facet(specialCharConfig);
            if (confChange)
                this.decorationCache = Object.create(null);
            if (confChange || update.changes.length || update.viewportChanged)
                this.recompute();
        }
        recompute() {
            let decorations = [];
            for (let { from, to } of this.view.visibleRanges)
                this.getDecorationsFor(from, to, decorations);
            this.decorations = Decoration.set(decorations);
        }
        getDecorationsFor(from, to, target) {
            let config = this.view.state.facet(specialCharConfig);
            let { doc } = this.view.state;
            for (let pos = from, cursor = doc.iterRange(from, to), m; !cursor.next().done;) {
                if (!cursor.lineBreak) {
                    while (m = config.specialChars.exec(cursor.value)) {
                        let code = codePointAt(m[0], 0), deco;
                        if (code == null)
                            continue;
                        if (code == 9) {
                            let line = doc.lineAt(pos + m.index);
                            let size = this.view.state.tabSize, col = countColumn(doc.sliceString(line.from, pos + m.index), 0, size);
                            deco = Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });
                        }
                        else {
                            deco = this.decorationCache[code] ||
                                (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(config, code) }));
                        }
                        target.push(deco.range(pos + m.index, pos + m.index + m[0].length));
                    }
                }
                pos += cursor.value.length;
            }
        }
    }, {
        decorations: v => v.decorations
    });
    // Assigns placeholder characters from the Control Pictures block to
    // ASCII control characters
    function placeHolder(code) {
        if (code >= 32)
            return null;
        if (code == 10)
            return "\u2424";
        return String.fromCharCode(9216 + code);
    }
    const DefaultPlaceholder = "\u2022";
    class SpecialCharWidget extends WidgetType {
        constructor(options, code) {
            super();
            this.options = options;
            this.code = code;
        }
        eq(other) { return other.code == this.code; }
        toDOM() {
            let ph = placeHolder(this.code) || DefaultPlaceholder;
            let desc = "Control character " + (Names[this.code] || this.code);
            let custom = this.options.render && this.options.render(this.code, desc, ph);
            if (custom)
                return custom;
            let span = document.createElement("span");
            span.textContent = ph;
            span.title = desc;
            span.setAttribute("aria-label", desc);
            span.style.color = "red";
            return span;
        }
        ignoreEvent() { return false; }
    }
    class TabWidget extends WidgetType {
        constructor(width) {
            super();
            this.width = width;
        }
        eq(other) { return other.width == this.width; }
        toDOM() {
            let span = document.createElement("span");
            span.textContent = "\t";
            span.className = tab;
            span.style.width = this.width + "px";
            return span;
        }
        ignoreEvent() { return false; }
    }
    const tab = StyleModule.newName(), tabStyle = EditorView.styleModule.of(new StyleModule({
        ["." + tab]: {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        }
    }));

    const DontIndentBeyond = 200;
    /// Enables reindentation on input. When a language defines an
    /// `indentOnInput` field in its [language
    /// data](#state.EditorState.languageDataAt), which must hold a
    /// regular expression, the line at the cursor will be reindented
    /// whenever new text is typed and the input from the start of the
    /// line up to the cursor matches that regexp.
    ///
    /// To avoid unneccesary reindents, it is recommended to start the
    /// regexp with `^` (usually followed by `\s*`), and end it with `$`.
    /// For example, `/^\s*\}$` will reindent when a closing brace is
    /// added at the start of a line.
    function indentOnInput() {
        return EditorState.transactionFilter.of(tr => {
            if (!tr.docChanged || tr.annotation(Transaction.userEvent) != "input")
                return tr;
            let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.primary.head);
            if (!rules.length)
                return tr;
            let doc = tr.newDoc, { head } = tr.newSelection.primary, line = doc.lineAt(head);
            if (head > line.from + DontIndentBeyond)
                return tr;
            let lineStart = doc.sliceString(line.from, head);
            if (!rules.some(r => r.test(lineStart)))
                return tr;
            let { state } = tr, last = -1, changes = [];
            for (let { head } of state.selection.ranges) {
                let line = state.doc.lineAt(head);
                if (line.from == last)
                    continue;
                last = line.from;
                let indent = Math.max(...state.facet(EditorState.indentation).map(f => f(new IndentContext(state), line.from)));
                if (indent < 0)
                    continue;
                let cur = /^\s*/.exec(line.slice(0, Math.min(line.length, DontIndentBeyond)))[0];
                let norm = state.indentString(indent);
                if (cur != norm)
                    changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
            return changes.length ? [tr, { changes }] : tr;
        });
    }

    const DefaultSplit$1 = /\r\n?|\n/;
    /// Distinguishes different ways in which positions can be mapped.
    var MapMode$1;
    (function (MapMode) {
        /// Map a position to a valid new position, even when its context
        /// was deleted.
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /// Return null if deletion happens across the position.
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /// Return null if the character _before_ the position is deleted.
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /// Return null if the character _after_ the position is deleted.
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    })(MapMode$1 || (MapMode$1 = {}));
    /// A change description is a variant of [change set](#state.ChangeSet)
    /// that doesn't store the inserted text. As such, it can't be
    /// applied, but is cheaper to store and manipulate.
    class ChangeDesc$1 {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /// @internal
        constructor(
        /// @internal
        sections) {
            this.sections = sections;
        }
        /// The length of the document before the change.
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /// The length of the document after the change.
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /// False when there are actual changes in this set.
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /// Iterate over the unchanged parts left by these changes.
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /// Iterate over the ranges changed by these changes. (See
        /// [`ChangeSet.iterChanges`](#state.ChangeSet.iterChanges) for a
        /// variant that also provides you with the inserted text.)
        ///
        /// When `individual` is true, adjacent changes (which are kept
        /// separate for [position mapping](#state.ChangeDesc.mapPos)) are
        /// reported separately.
        iterChangedRanges(f, individual = false) {
            iterChanges$1(this, f, individual);
        }
        /// Get a description of the inverted form of these changes.
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc$1(sections);
        }
        /// Compute the combined effect of applying another set of changes
        /// after this one. The length of the document after this set should
        /// match the length before `other`.
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets$1(this, other); }
        /// Map this description, which should start with the same document
        /// as `other`, over another set of changes, so that it can be
        /// applied after it.
        mapDesc(other, before = false) { return other.empty ? this : mapSet$1(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode$1.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode$1.Simple && endA >= pos &&
                        (mode == MapMode$1.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode$1.TrackBefore && posA < pos ||
                            mode == MapMode$1.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /// Check whether these changes touch a given range. When one of the
        /// changes entirely covers the range, the string `"cover"` is
        /// returned.
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /// @internal
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
    }
    /// A change set represents a group of modifications to a document. It
    /// stores the document length, and can only be applied to documents
    /// with exactly that length.
    class ChangeSet$1 extends ChangeDesc$1 {
        /// @internal
        constructor(sections, 
        /// @internal
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /// Apply the changes to a document, returning the modified
        /// document.
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges$1(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        /// Map this set, which should start with the same document as
        /// `other`, over another set of changes, so that it can be applied
        /// after it. When `before` is true, map as if the changes in
        /// `other` happened before the ones in `this`.
        mapDesc(other, before = false) { return mapSet$1(this, other, before, true); }
        /// Given the document as it existed _before_ the changes, return a
        /// change set that represents the inverse of this set, which could
        /// be used to go from the document created by the changes back to
        /// the document as it existed before the changes.
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
                }
                pos += len;
            }
            return new ChangeSet$1(sections, inserted);
        }
        /// Combine two subsequent change sets into a single set. `other`
        /// must start in the document produced by `this`. If `this` goes
        /// `docA` → `docB` and `other` represents `docB` → `docC`, the
        /// returned value will represent the change `docA` → `docC`.
        compose(other) { return this.empty ? other : other.empty ? this : composeSets$1(this, other, true); }
        /// Given another change set starting in the same document, maps this
        /// change set over the other, producing a new change set that can be
        /// applied to the document produced by applying `other`. When
        /// `before` is `true`, order changes as if `this` comes before
        /// `other`, otherwise (the default) treat `other` as coming first.
        ///
        /// Given two changes `A` and `B`, `A.compose(B.map(A))` and
        /// `B.compose(A.map(B, true))` will produce the same document. This
        /// provides a basic form of [operational
        /// transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        /// and can be used for collaborative editing.
        map(other, before = false) { return other.empty ? this : mapSet$1(this, other, before, true); }
        /// Iterate over the changed ranges in the document, calling `f` for
        /// each.
        iterChanges(f, individual = false) {
            iterChanges$1(this, f, individual);
        }
        /// Get a [change description](#state.ChangeDesc) for this change
        /// set.
        get desc() { return new ChangeDesc$1(this.sections); }
        /// @internal
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter$1(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection$1(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection$1(resultSections, len, ins);
                    if (ins > 0)
                        addInsert$1(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection$1(resultSections, len, -1);
                    addSection$1(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet$1(resultSections, resultInserted),
                filtered: new ChangeDesc$1(filteredSections) };
        }
        /// Serialize this change set to a JSON-representable value.
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len, this.inserted[i >> 1].toJSON()]);
            }
            return parts;
        }
        /// Create a change set for the given changes, for a document of the
        /// given length, using `lineSep` as line separator.
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection$1(sections, length - pos, -1);
                let set = new ChangeSet$1(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet$1) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit$1)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection$1(sections, from - pos, -1);
                    addSection$1(sections, to - from, insLen);
                    addInsert$1(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /// Create an empty changeset of the given length.
        static empty(length) {
            return new ChangeSet$1(length ? [length, -1] : [], []);
        }
        /// Create a changeset from its JSON representation (as produced by
        /// [`toJSON`](#state.ChangeSet.toJSON).
        static fromJSON(json) {
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text.empty);
                    inserted[i] = Text.of(part[1]);
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet$1(sections, inserted);
        }
    }
    function addSection$1(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert$1(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text.empty);
            values.push(value);
        }
    }
    function iterChanges$1(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet$1(setA, setB, before, mkSet = false) {
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter$1(setA), b = new SectionIter$1(setB);
        for (let posA = 0, posB = 0;;) {
            if (a.ins == -1) {
                posA += a.len;
                a.next();
            }
            else if (b.ins == -1 && posB < posA) {
                let skip = Math.min(b.len, posA - posB);
                b.forward(skip);
                addSection$1(sections, skip, -1);
                posB += skip;
            }
            else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
                addSection$1(sections, b.ins, -1);
                while (posA > posB && !a.done && posA + a.len < posB + b.len) {
                    posA += a.len;
                    a.next();
                }
                posB += b.len;
                b.next();
            }
            else if (a.ins >= 0) {
                let len = 0, end = posA + a.len;
                for (;;) {
                    if (b.ins >= 0 && posB > posA && posB + b.len < end) {
                        len += b.ins;
                        posB += b.len;
                        b.next();
                    }
                    else if (b.ins == -1 && posB < end) {
                        let skip = Math.min(b.len, end - posB);
                        len += skip;
                        b.forward(skip);
                        posB += skip;
                    }
                    else {
                        break;
                    }
                }
                addSection$1(sections, len, a.ins);
                if (insert)
                    addInsert$1(insert, sections, a.text);
                posA = end;
                a.next();
            }
            else if (a.done && b.done) {
                return insert ? new ChangeSet$1(sections, insert) : new ChangeDesc$1(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets$1(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter$1(setA), b = new SectionIter$1(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? new ChangeSet$1(sections, insert) : new ChangeDesc$1(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection$1(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection$1(sections, 0, b.ins, open);
                if (insert)
                    addInsert$1(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection$1(sections, len, insB, open);
                    if (insert && insB)
                        addInsert$1(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection$1(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert$1(insert, sections, a.textBit(len));
                }
                else {
                    addSection$1(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert$1(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter$1 {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }

    /// The default maximum length of a `TreeBuffer` node.
    var DefaultBufferLength$1 = 1024;
    var nextPropID$1 = 0;
    var CachedNode$1 = new WeakMap();
    /// Each [node type](#tree.NodeType) can have metadata associated with
    /// it in props. Instances of this class represent prop names.
    var NodeProp$1 = /** @class */ (function () {
        /// Create a new node prop type. You can optionally pass a
        /// `deserialize` function.
        function NodeProp(_a) {
            var deserialize = (_a === void 0 ? {} : _a).deserialize;
            this.id = nextPropID$1++;
            this.deserialize = deserialize || (function () {
                throw new Error("This node type doesn't define a deserialize function");
            });
        }
        /// Create a string-valued node prop whose deserialize function is
        /// the identity function.
        NodeProp.string = function () { return new NodeProp({ deserialize: function (str) { return str; } }); };
        /// Create a number-valued node prop whose deserialize function is
        /// just `Number`.
        NodeProp.number = function () { return new NodeProp({ deserialize: Number }); };
        /// Creates a boolean-valued node prop whose deserialize function
        /// returns true for any input.
        NodeProp.flag = function () { return new NodeProp({ deserialize: function () { return true; } }); };
        /// Store a value for this prop in the given object. This can be
        /// useful when building up a prop object to pass to the
        /// [`NodeType`](#tree.NodeType) constructor. Returns its first
        /// argument.
        NodeProp.prototype.set = function (propObj, value) {
            propObj[this.id] = value;
            return propObj;
        };
        /// This is meant to be used with
        /// [`NodeGroup.extend`](#tree.NodeGroup.extend) or
        /// [`Parser.withProps`](#lezer.Parser.withProps) to compute prop
        /// values for each node type in the group. Takes a [match
        /// object](#tree.NodeType^match) or function that returns undefined
        /// if the node type doesn't get this prop, and the prop's value if
        /// it does.
        NodeProp.prototype.add = function (match) {
            var _this = this;
            if (typeof match != "function")
                match = NodeType$1.match(match);
            return function (type) {
                var result = match(type);
                return result === undefined ? null : [_this, result];
            };
        };
        /// Prop that is used to describe matching delimiters. For opening
        /// delimiters, this holds an array of node names (written as a
        /// space-separated string when declaring this prop in a grammar)
        /// for the node types of closing delimiters that match it.
        NodeProp.closedBy = new NodeProp({ deserialize: function (str) { return str.split(" "); } });
        /// The inverse of [`openedBy`](#tree.NodeProp^closedBy). This is
        /// attached to closing delimiters, holding an array of node names
        /// of types of matching opening delimiters.
        NodeProp.openedBy = new NodeProp({ deserialize: function (str) { return str.split(" "); } });
        /// Used to assign node types to groups (for example, all node
        /// types that represent an expression could be tagged with an
        /// `"Expression"` group).
        NodeProp.group = new NodeProp({ deserialize: function (str) { return str.split(" "); } });
        return NodeProp;
    }());
    /// Each node in a syntax tree has a node type associated with it.
    var NodeType$1 = /** @class */ (function () {
        /// @internal
        function NodeType(
        /// The name of the node type. Not necessarily unique, but if the
        /// grammar was written properly, different node types with the
        /// same name within a node group should play the same semantic
        /// role.
        name, 
        /// @internal
        props, 
        /// The id of this node in its group. Corresponds to the term ids
        /// used in the parser.
        id, 
        /// @internal
        flags) {
            if (flags === void 0) { flags = 0; }
            this.name = name;
            this.props = props;
            this.id = id;
            this.flags = flags;
        }
        /// Retrieves a node prop for this type. Will return `undefined` if
        /// the prop isn't present on this node.
        NodeType.prototype.prop = function (prop) { return this.props[prop.id]; };
        Object.defineProperty(NodeType.prototype, "isTop", {
            /// True when this is the top node of a grammar.
            get: function () { return (this.flags & 1) > 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeType.prototype, "isSkipped", {
            /// True when this node is produced by a skip rule.
            get: function () { return (this.flags & 2) > 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeType.prototype, "isError", {
            /// Indicates whether this is an error node.
            get: function () { return (this.flags & 4) > 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NodeType.prototype, "isRepeated", {
            /// When true, this node type is used to cache repetition, and is
            /// not a user-defined named node.
            get: function () { return (this.flags & 8) > 0; },
            enumerable: true,
            configurable: true
        });
        /// Returns true when this node's name or one of its
        /// [groups](#tree.NodeProp^group) matches the given string.
        NodeType.prototype.is = function (name) {
            if (this.name == name)
                return true;
            var group = this.prop(NodeProp$1.group);
            return group ? group.indexOf(name) > -1 : false;
        };
        /// Create a function from node types to arbitrary values by
        /// specifying an object whose property names are node or
        /// [group](#tree.NodeProp^group) names. Often useful with
        /// [`NodeProp.add`](#tree.NodeProp.add). You can put multiple
        /// names, separated by spaces, in a single property name to map
        /// multiple node names to a single value.
        NodeType.match = function (map) {
            var direct = Object.create(null);
            for (var prop in map)
                for (var _i = 0, _a = prop.split(" "); _i < _a.length; _i++) {
                    var name = _a[_i];
                    direct[name] = map[prop];
                }
            return function (node) {
                for (var groups = node.prop(NodeProp$1.group), i = -1; i < (groups ? groups.length : 0); i++) {
                    var found = direct[i < 0 ? node.name : groups[i]];
                    if (found)
                        return found;
                }
            };
        };
        /// An empty dummy node type to use when no actual type is available.
        NodeType.none = new NodeType("", Object.create(null), 0);
        return NodeType;
    }());
    /// A node group holds a collection of node types. It is used to
    /// compactly represent trees by storing their type ids, rather than a
    /// full pointer to the type object, in a number array. Each parser
    /// [has](#lezer.Parser.group) a node group, and [tree
    /// buffers](#tree.TreeBuffer) can only store collections of nodes
    /// from the same group. A group can have a maximum of 2**16 (65536)
    /// node types in it, so that the ids fit into 16-bit typed array
    /// slots.
    var NodeGroup$1 = /** @class */ (function () {
        /// Create a group with the given types. The `id` property of each
        /// type should correspond to its position within the array.
        function NodeGroup(
        /// The node types in this group, by id.
        types) {
            this.types = types;
            for (var i = 0; i < types.length; i++)
                if (types[i].id != i)
                    throw new RangeError("Node type ids should correspond to array positions when creating a node group");
        }
        /// Create a copy of this group with some node properties added. The
        /// arguments to this method should be created with
        /// [`NodeProp.add`](#tree.NodeProp.add).
        NodeGroup.prototype.extend = function () {
            var props = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                props[_i] = arguments[_i];
            }
            var newTypes = [];
            for (var _a = 0, _b = this.types; _a < _b.length; _a++) {
                var type = _b[_a];
                var newProps = null;
                for (var _c = 0, props_1 = props; _c < props_1.length; _c++) {
                    var source = props_1[_c];
                    var add = source(type);
                    if (add) {
                        if (!newProps)
                            newProps = Object.assign({}, type.props);
                        add[0].set(newProps, add[1]);
                    }
                }
                newTypes.push(newProps ? new NodeType$1(type.name, newProps, type.id, type.flags) : type);
            }
            return new NodeGroup(newTypes);
        };
        return NodeGroup;
    }());
    /// A piece of syntax tree. There are two ways to approach these
    /// trees: the way they are actually stored in memory, and the
    /// convenient way.
    ///
    /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
    /// objects. By packing detail information into `TreeBuffer` leaf
    /// nodes, the representation is made a lot more memory-efficient.
    ///
    /// However, when you want to actually work with tree nodes, this
    /// representation is very awkward, so most client code will want to
    /// use the `TreeCursor` interface instead, which provides a view on
    /// some part of this data structure, and can be used to move around
    /// to adjacent nodes.
    var Tree$1 = /** @class */ (function () {
        /// Construct a new tree. You usually want to go through
        /// [`Tree.build`](#tree.Tree^build) instead.
        function Tree(type, 
        /// The tree's child nodes. Children small enough to fit in a
        /// `TreeBuffer will be represented as such, other children can be
        /// further `Tree` instances with their own internal structure.
        children, 
        /// The positions (offsets relative to the start of this tree) of
        /// the children.
        positions, 
        /// The total length of this tree
        length) {
            this.type = type;
            this.children = children;
            this.positions = positions;
            this.length = length;
        }
        /// @internal
        Tree.prototype.toString = function () {
            var children = this.children.map(function (c) { return c.toString(); }).join();
            return !this.type.name ? children :
                (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                    (children.length ? "(" + children + ")" : "");
        };
        Tree.prototype.partial = function (start, end, offset, children, positions) {
            for (var i = 0; i < this.children.length; i++) {
                var from = this.positions[i];
                if (from > end)
                    break;
                var child = this.children[i], to = from + child.length;
                if (to < start)
                    continue;
                if (start <= from && end >= to) {
                    children.push(child);
                    positions.push(from + offset);
                }
                else if (child instanceof Tree) {
                    child.partial(start - from, end - from, offset + from, children, positions);
                }
            }
        };
        /// Apply a set of edits to a tree, removing all nodes that were
        /// touched by the edits, and moving remaining nodes so that their
        /// positions are updated for insertions/deletions before them. This
        /// is likely to destroy a lot of the structure of the tree, and
        /// mostly useful for extracting the nodes that can be reused in a
        /// subsequent incremental re-parse.
        Tree.prototype.applyChanges = function (changes) {
            if (changes.length == 0)
                return this;
            var children = [], positions = [];
            function cutAt(tree, pos, side) {
                var cursor = tree.cursor(pos, -side);
                for (;;) {
                    if (!cursor.enter(side, pos))
                        for (;;) {
                            if ((side < 0 ? cursor.to <= pos : cursor.from >= pos) && !cursor.type.isError)
                                return side < 0 ? Math.min(pos, cursor.to - 1) : Math.max(pos, cursor.from + 1);
                            if (cursor.sibling(side))
                                break;
                            if (!cursor.parent())
                                return side < 0 ? 0 : tree.length;
                        }
                }
            }
            var off = 0;
            for (var i = 0, pos = 0;; i++) {
                var next = i == changes.length ? null : changes[i];
                var nextPos = next ? cutAt(this, next.fromA, -1) : this.length;
                if (nextPos > pos)
                    this.partial(pos, nextPos, off, children, positions);
                if (!next)
                    break;
                pos = cutAt(this, next.toA, 1);
                off += (next.toB - next.fromB) - (next.toA - next.fromA);
            }
            return new Tree(NodeType$1.none, children, positions, this.length + off);
        };
        /// Take the part of the tree up to the given position.
        Tree.prototype.cut = function (at) {
            if (at >= this.length)
                return this;
            var children = [], positions = [];
            for (var i = 0; i < this.children.length; i++) {
                var from = this.positions[i];
                if (from >= at)
                    break;
                var child = this.children[i], to = from + child.length;
                children.push(to <= at ? child : child.cut(at - from));
                positions.push(from);
            }
            return new Tree(this.type, children, positions, at);
        };
        /// Get a [tree cursor](#tree.TreeCursor) rooted at this tree. When
        /// `pos` is given, the cursor is [moved](#tree.TreeCursor.moveTo)
        /// to the given position and side.
        Tree.prototype.cursor = function (pos, side) {
            if (side === void 0) { side = 0; }
            var scope = (pos != null && CachedNode$1.get(this)) || this.topNode;
            var cursor = new TreeCursor$1(scope);
            if (pos != null) {
                cursor.moveTo(pos, side);
                CachedNode$1.set(this, cursor.tree);
            }
            return cursor;
        };
        Object.defineProperty(Tree.prototype, "topNode", {
            /// Get a [syntax node](#tree.SyntaxNode) object for the top of the
            /// tree.
            get: function () {
                return new TreeNode$1(this, 0, 0, null);
            },
            enumerable: true,
            configurable: true
        });
        /// Get the [syntax node](#tree.SyntaxNode) at the given position.
        /// If `side` is -1, this will move into nodes that end at the
        /// position. If 1, it'll move into nodes that start at the
        /// position. With 0, it'll only enter nodes that cover the position
        /// from both sides.
        Tree.prototype.resolve = function (pos, side) {
            if (side === void 0) { side = 0; }
            return this.cursor(pos, side).node;
        };
        /// Iterate over the tree and its children, calling `enter` for any
        /// node that touches the `from`/`to` region (if given) before
        /// running over such a node's children, and `leave` (if given) when
        /// leaving the node. When `enter` returns `false`, the given node
        /// will not have its children iterated over (or `leave` called).
        Tree.prototype.iterate = function (spec) {
            var enter = spec.enter, leave = spec.leave, _a = spec.from, from = _a === void 0 ? 0 : _a, _b = spec.to, to = _b === void 0 ? this.length : _b;
            for (var c = this.cursor();;) {
                var mustLeave = false;
                if (c.from <= to && c.to >= from && (c.type.isRepeated || enter(c.type, c.from, c.to) !== false)) {
                    if (c.firstChild())
                        continue;
                    mustLeave = true;
                }
                for (;;) {
                    if (mustLeave && leave)
                        leave(c.type, c.from, c.to);
                    if (c.nextSibling())
                        break;
                    if (!c.parent())
                        return;
                    mustLeave = true;
                }
            }
        };
        /// Append another tree to this tree. `other` must have empty space
        /// big enough to fit this tree at its start.
        Tree.prototype.append = function (other) {
            if (!other.children.length)
                return this;
            if (other.positions[0] < this.length)
                throw new Error("Can't append overlapping trees");
            return new Tree(this.type, this.children.concat(other.children), this.positions.concat(other.positions), other.length);
        };
        /// Balance the direct children of this tree.
        Tree.prototype.balance = function (maxBufferLength) {
            if (maxBufferLength === void 0) { maxBufferLength = DefaultBufferLength$1; }
            return this.children.length <= BalanceBranchFactor$1 ? this
                : balanceRange$1(this.type, NodeType$1.none, this.children, this.positions, 0, this.children.length, 0, maxBufferLength, this.length);
        };
        /// Build a tree from a postfix-ordered buffer of node information,
        /// or a cursor over such a buffer.
        Tree.build = function (data) { return buildTree$1(data); };
        /// The empty tree
        Tree.empty = new Tree(NodeType$1.none, [], [], 0);
        return Tree;
    }());
    /// Tree buffers contain (type, start, end, endIndex) quads for each
    /// node. In such a buffer, nodes are stored in prefix order (parents
    /// before children, with the endIndex of the parent indicating which
    /// children belong to it)
    var TreeBuffer$1 = /** @class */ (function () {
        /// Create a tree buffer @internal
        function TreeBuffer(
        /// @internal
        buffer, 
        // The total length of the group of nodes in the buffer.
        length, 
        /// @internal
        group, type) {
            if (type === void 0) { type = NodeType$1.none; }
            this.buffer = buffer;
            this.length = length;
            this.group = group;
            this.type = type;
        }
        /// @internal
        TreeBuffer.prototype.toString = function () {
            var result = [];
            for (var index = 0; index < this.buffer.length;) {
                result.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result.join(",");
        };
        /// @internal
        TreeBuffer.prototype.childString = function (index) {
            var id = this.buffer[index], endIndex = this.buffer[index + 3];
            var type = this.group.types[id], result = type.name;
            if (/\W/.test(result) && !type.isError)
                result = JSON.stringify(result);
            index += 4;
            if (endIndex == index)
                return result;
            var children = [];
            while (index < endIndex) {
                children.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result + "(" + children.join(",") + ")";
        };
        /// @internal
        TreeBuffer.prototype.cut = function (at) {
            var cutPoint = 0;
            while (cutPoint < this.buffer.length && this.buffer[cutPoint + 1] < at)
                cutPoint += 4;
            var newBuffer = new Uint16Array(cutPoint);
            for (var i = 0; i < cutPoint; i += 4) {
                newBuffer[i] = this.buffer[i];
                newBuffer[i + 1] = this.buffer[i + 1];
                newBuffer[i + 2] = Math.min(at, this.buffer[i + 2]);
                newBuffer[i + 3] = Math.min(this.buffer[i + 3], cutPoint);
            }
            return new TreeBuffer(newBuffer, Math.min(at, this.length), this.group);
        };
        /// @internal
        TreeBuffer.prototype.findChild = function (startIndex, endIndex, dir, after) {
            var buffer = this.buffer, pick = -1;
            for (var i = startIndex; i != endIndex; i = buffer[i + 3]) {
                if (after != -100000000 /* None */) {
                    var start = buffer[i + 1], end = buffer[i + 2];
                    if (dir > 0) {
                        if (end > after)
                            pick = i;
                        if (end > after)
                            break;
                    }
                    else {
                        if (start < after)
                            pick = i;
                        if (end >= after)
                            break;
                    }
                }
                else {
                    pick = i;
                    if (dir > 0)
                        break;
                }
            }
            return pick;
        };
        return TreeBuffer;
    }());
    var TreeNode$1 = /** @class */ (function () {
        function TreeNode(node, from, index, _parent) {
            this.node = node;
            this.from = from;
            this.index = index;
            this._parent = _parent;
        }
        Object.defineProperty(TreeNode.prototype, "type", {
            get: function () { return this.node.type; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "name", {
            get: function () { return this.node.type.name; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "to", {
            get: function () { return this.from + this.node.length; },
            enumerable: true,
            configurable: true
        });
        TreeNode.prototype.nextChild = function (i, dir, after) {
            for (var parent = this;;) {
                for (var _a = parent.node, children = _a.children, positions = _a.positions, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                    var next = children[i], start = positions[i] + parent.from;
                    if (after != -100000000 /* None */ && (dir < 0 ? start >= after : start + next.length <= after))
                        continue;
                    if (next instanceof TreeBuffer$1) {
                        var index = next.findChild(0, next.buffer.length, dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - start);
                        if (index > -1)
                            return new BufferNode$1(new BufferContext$1(parent, next, i, start), null, index);
                    }
                    else if (!next.type.isRepeated || hasChild$1(next)) {
                        var inner = new TreeNode(next, start, i, parent);
                        return !inner.type.isRepeated ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, after);
                    }
                }
                if (!parent.type.isRepeated)
                    return null;
                i = parent.index + dir;
                parent = parent._parent;
            }
        };
        Object.defineProperty(TreeNode.prototype, "firstChild", {
            get: function () { return this.nextChild(0, 1, -100000000 /* None */); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "lastChild", {
            get: function () { return this.nextChild(this.node.children.length - 1, -1, -100000000 /* None */); },
            enumerable: true,
            configurable: true
        });
        TreeNode.prototype.childAfter = function (pos) { return this.nextChild(0, 1, pos); };
        TreeNode.prototype.childBefore = function (pos) { return this.nextChild(this.node.children.length - 1, -1, pos); };
        TreeNode.prototype.nextSignificant = function () {
            var val = this;
            while (val.type.isRepeated)
                val = val._parent;
            return val;
        };
        Object.defineProperty(TreeNode.prototype, "parent", {
            get: function () {
                return this._parent ? this._parent.nextSignificant() : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "nextSibling", {
            get: function () {
                return this._parent ? this._parent.nextChild(this.index + 1, 1, -1) : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "prevSibling", {
            get: function () {
                return this._parent ? this._parent.nextChild(this.index - 1, -1, -1) : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNode.prototype, "cursor", {
            get: function () { return new TreeCursor$1(this); },
            enumerable: true,
            configurable: true
        });
        TreeNode.prototype.resolve = function (pos, side) {
            if (side === void 0) { side = 0; }
            return this.cursor.moveTo(pos, side).node;
        };
        TreeNode.prototype.getChild = function (type, before, after) {
            if (before === void 0) { before = null; }
            if (after === void 0) { after = null; }
            var r = getChildren$1(this, type, before, after);
            return r.length ? r[0] : null;
        };
        TreeNode.prototype.getChildren = function (type, before, after) {
            if (before === void 0) { before = null; }
            if (after === void 0) { after = null; }
            return getChildren$1(this, type, before, after);
        };
        /// @internal
        TreeNode.prototype.toString = function () { return this.node.toString(); };
        return TreeNode;
    }());
    function getChildren$1(node, type, before, after) {
        var cur = node.cursor, result = [];
        if (!cur.firstChild())
            return result;
        if (before != null)
            while (!cur.type.is(before))
                if (!cur.nextSibling())
                    return result;
        for (;;) {
            if (after != null && cur.type.is(after))
                return result;
            if (cur.type.is(type))
                result.push(cur.node);
            if (!cur.nextSibling())
                return after == null ? result : [];
        }
    }
    var BufferContext$1 = /** @class */ (function () {
        function BufferContext(parent, buffer, index, start) {
            this.parent = parent;
            this.buffer = buffer;
            this.index = index;
            this.start = start;
        }
        return BufferContext;
    }());
    var BufferNode$1 = /** @class */ (function () {
        function BufferNode(context, _parent, index) {
            this.context = context;
            this._parent = _parent;
            this.index = index;
            this.type = context.buffer.group.types[context.buffer.buffer[index]];
        }
        Object.defineProperty(BufferNode.prototype, "name", {
            get: function () { return this.type.name; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BufferNode.prototype, "from", {
            get: function () { return this.context.start + this.context.buffer.buffer[this.index + 1]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BufferNode.prototype, "to", {
            get: function () { return this.context.start + this.context.buffer.buffer[this.index + 2]; },
            enumerable: true,
            configurable: true
        });
        BufferNode.prototype.child = function (dir, after) {
            var buffer = this.context.buffer;
            var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.context.start);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        };
        Object.defineProperty(BufferNode.prototype, "firstChild", {
            get: function () { return this.child(1, -100000000 /* None */); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BufferNode.prototype, "lastChild", {
            get: function () { return this.child(-1, -100000000 /* None */); },
            enumerable: true,
            configurable: true
        });
        BufferNode.prototype.childAfter = function (pos) { return this.child(1, pos); };
        BufferNode.prototype.childBefore = function (pos) { return this.child(-1, pos); };
        Object.defineProperty(BufferNode.prototype, "parent", {
            get: function () {
                return this._parent || this.context.parent.nextSignificant();
            },
            enumerable: true,
            configurable: true
        });
        BufferNode.prototype.externalSibling = function (dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, -1);
        };
        Object.defineProperty(BufferNode.prototype, "nextSibling", {
            get: function () {
                var buffer = this.context.buffer;
                var after = buffer.buffer[this.index + 3];
                if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                    return new BufferNode(this.context, this._parent, after);
                return this.externalSibling(1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BufferNode.prototype, "prevSibling", {
            get: function () {
                var buffer = this.context.buffer;
                var parentStart = this._parent ? this._parent.index + 4 : 0;
                if (this.index == parentStart)
                    return this.externalSibling(-1);
                return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BufferNode.prototype, "cursor", {
            get: function () { return new TreeCursor$1(this); },
            enumerable: true,
            configurable: true
        });
        BufferNode.prototype.resolve = function (pos, side) {
            if (side === void 0) { side = 0; }
            return this.cursor.moveTo(pos, side).node;
        };
        /// @internal
        BufferNode.prototype.toString = function () { return this.context.buffer.childString(this.index); };
        BufferNode.prototype.getChild = function (type, before, after) {
            if (before === void 0) { before = null; }
            if (after === void 0) { after = null; }
            var r = getChildren$1(this, type, before, after);
            return r.length ? r[0] : null;
        };
        BufferNode.prototype.getChildren = function (type, before, after) {
            if (before === void 0) { before = null; }
            if (after === void 0) { after = null; }
            return getChildren$1(this, type, before, after);
        };
        return BufferNode;
    }());
    /// A tree cursor object focuses on a given node in a syntax tree, and
    /// allows you to move to adjacent nodes.
    var TreeCursor$1 = /** @class */ (function () {
        /// @internal
        function TreeCursor(node) {
            this.buffer = null;
            this.stack = [];
            this.index = 0;
            this.bufferNode = null;
            if (node instanceof TreeNode$1) {
                this.yieldNode(node);
            }
            else {
                this.tree = node.context.parent;
                this.buffer = node.context;
                for (var n = node._parent; n; n = n._parent)
                    this.stack.unshift(n.index);
                this.bufferNode = node;
                this.yieldBuf(node.index);
            }
        }
        Object.defineProperty(TreeCursor.prototype, "name", {
            /// Shorthand for `.type.name`.
            get: function () { return this.type.name; },
            enumerable: true,
            configurable: true
        });
        TreeCursor.prototype.yieldNode = function (node) {
            if (!node)
                return false;
            this.tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
        };
        TreeCursor.prototype.yieldBuf = function (index, type) {
            this.index = index;
            var _a = this.buffer, start = _a.start, buffer = _a.buffer;
            this.type = type || buffer.group.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
        };
        TreeCursor.prototype.yield = function (node) {
            if (!node)
                return false;
            if (node instanceof TreeNode$1) {
                this.buffer = null;
                return this.yieldNode(node);
            }
            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
        };
        /// @internal
        TreeCursor.prototype.toString = function () {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this.tree.toString();
        };
        /// @internal
        TreeCursor.prototype.enter = function (dir, after) {
            if (!this.buffer)
                return this.yield(this.tree.nextChild(dir < 0 ? this.tree.node.children.length - 1 : 0, dir, after));
            var buffer = this.buffer.buffer;
            var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.buffer.start);
            if (index < 0)
                return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
        };
        /// Move the cursor to this node's first child. When this returns
        /// false, the node has no child, and the cursor has not been moved.
        TreeCursor.prototype.firstChild = function () { return this.enter(1, -100000000 /* None */); };
        /// Move the cursor to this node's last child.
        TreeCursor.prototype.lastChild = function () { return this.enter(-1, -100000000 /* None */); };
        /// Move the cursor to the first child that starts at or after `pos`.
        TreeCursor.prototype.childAfter = function (pos) { return this.enter(1, pos); };
        /// Move to the last child that ends at or before `pos`.
        TreeCursor.prototype.childBefore = function (pos) { return this.enter(-1, pos); };
        /// Move the node's parent node, if this isn't the top node.
        TreeCursor.prototype.parent = function () {
            if (!this.buffer)
                return this.yieldNode(this.tree.parent);
            if (this.stack.length)
                return this.yieldBuf(this.stack.pop());
            var parent = this.buffer.parent.nextSignificant();
            this.buffer = null;
            return this.yieldNode(parent);
        };
        /// @internal
        TreeCursor.prototype.sibling = function (dir) {
            if (!this.buffer)
                return this.tree._parent ? this.yield(this.tree._parent.nextChild(this.tree.index + dir, dir, -100000000 /* None */)) : false;
            var buffer = this.buffer.buffer, d = this.stack.length - 1;
            if (dir < 0) {
                var parentStart = d < 0 ? 0 : this.stack[d] + 4;
                if (this.index != parentStart)
                    return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));
            }
            else {
                var after_1 = buffer.buffer[this.index + 3];
                if (after_1 < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                    return this.yieldBuf(after_1);
            }
            return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, -100000000 /* None */)) : false;
        };
        /// Move to this node's next sibling, if any.
        TreeCursor.prototype.nextSibling = function () { return this.sibling(1); };
        /// Move to this node's previous sibling, if any.
        TreeCursor.prototype.prevSibling = function () { return this.sibling(-1); };
        TreeCursor.prototype.atLastNode = function (dir) {
            var _a, _b;
            var index, parent, buffer = this.buffer;
            if (buffer) {
                if (dir > 0) {
                    if (this.index < buffer.buffer.buffer.length)
                        return false;
                }
                else {
                    for (var i = 0; i < this.index; i++)
                        if (buffer.buffer.buffer[i + 3] < this.index)
                            return false;
                }
                (index = buffer.index, parent = buffer.parent);
            }
            else {
                (_a = this.tree, index = _a.index, parent = _a._parent);
            }
            for (; parent; _b = parent, index = _b.index, parent = _b._parent, _b) {
                for (var i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {
                    var child = parent.node.children[i];
                    if (!child.type.isRepeated || child instanceof TreeBuffer$1 || hasChild$1(child))
                        return false;
                }
            }
            return true;
        };
        TreeCursor.prototype.move = function (dir) {
            if (this.enter(dir, -100000000 /* None */))
                return true;
            for (;;) {
                if (this.sibling(dir))
                    return true;
                if (this.atLastNode(dir) || !this.parent())
                    return false;
            }
        };
        /// Move to the next node in a
        /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
        /// traversal, going from a node to its first child or, if the
        /// current node is empty, its next sibling or the next sibling of
        /// the first parent node that has one.
        TreeCursor.prototype.next = function () { return this.move(1); };
        /// Move to the next node in a last-to-first pre-order traveral. A
        /// node is followed by ist last child or, if it has none, its
        /// previous sibling or the previous sibling of the first parent
        /// node that has one.
        TreeCursor.prototype.prev = function () { return this.move(-1); };
        /// Move the cursor to the innermost node that covers `pos`. If
        /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        /// it will enter nodes that start at `pos`.
        TreeCursor.prototype.moveTo = function (pos, side) {
            if (side === void 0) { side = 0; }
            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to ||
                (side < 1 ? this.from >= pos : this.from > pos) ||
                (side > -1 ? this.to <= pos : this.to < pos))
                if (!this.parent())
                    break;
            // Then scan down into child nodes as far as possible
            for (;;) {
                if (side < 0 ? !this.childBefore(pos) : !this.childAfter(pos))
                    break;
                if (this.from == this.to ||
                    (side < 1 ? this.from >= pos : this.from > pos) ||
                    (side > -1 ? this.to <= pos : this.to < pos)) {
                    this.parent();
                    break;
                }
            }
            return this;
        };
        Object.defineProperty(TreeCursor.prototype, "node", {
            /// Get a [syntax node](#tree.SyntaxNode) at the cursor's current
            /// position.
            get: function () {
                if (!this.buffer)
                    return this.tree;
                var cache = this.bufferNode, result = null, depth = 0;
                if (cache && cache.context == this.buffer) {
                    scan: for (var index = this.index, d = this.stack.length; d >= 0;) {
                        for (var c = cache; c; c = c._parent)
                            if (c.index == index) {
                                if (index == this.index)
                                    return c;
                                result = c;
                                depth = d + 1;
                                break scan;
                            }
                        index = this.stack[--d];
                    }
                }
                for (var i = depth; i < this.stack.length; i++)
                    result = new BufferNode$1(this.buffer, result, this.stack[i]);
                return this.bufferNode = new BufferNode$1(this.buffer, result, this.index);
            },
            enumerable: true,
            configurable: true
        });
        return TreeCursor;
    }());
    function hasChild$1(tree) {
        return tree.children.some(function (ch) { return !ch.type.isRepeated || ch instanceof TreeBuffer$1 || hasChild$1(ch); });
    }
    var FlatBufferCursor$1 = /** @class */ (function () {
        function FlatBufferCursor(buffer, index) {
            this.buffer = buffer;
            this.index = index;
        }
        Object.defineProperty(FlatBufferCursor.prototype, "id", {
            get: function () { return this.buffer[this.index - 4]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FlatBufferCursor.prototype, "start", {
            get: function () { return this.buffer[this.index - 3]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FlatBufferCursor.prototype, "end", {
            get: function () { return this.buffer[this.index - 2]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FlatBufferCursor.prototype, "size", {
            get: function () { return this.buffer[this.index - 1]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FlatBufferCursor.prototype, "pos", {
            get: function () { return this.index; },
            enumerable: true,
            configurable: true
        });
        FlatBufferCursor.prototype.next = function () { this.index -= 4; };
        FlatBufferCursor.prototype.fork = function () { return new FlatBufferCursor(this.buffer, this.index); };
        return FlatBufferCursor;
    }());
    var BalanceBranchFactor$1 = 8;
    function buildTree$1(data) {
        var _a = data, buffer = _a.buffer, group = _a.group, _b = _a.topID, topID = _b === void 0 ? 0 : _b, _c = _a.maxBufferLength, maxBufferLength = _c === void 0 ? DefaultBufferLength$1 : _c, _d = _a.reused, reused = _d === void 0 ? [] : _d, _e = _a.minRepeatType, minRepeatType = _e === void 0 ? group.types.length : _e;
        var cursor = Array.isArray(buffer) ? new FlatBufferCursor$1(buffer, buffer.length) : buffer;
        var types = group.types;
        function takeNode(parentStart, minPos, children, positions, inRepeat) {
            var id = cursor.id, start = cursor.start, end = cursor.end, size = cursor.size;
            while (id == inRepeat) {
                cursor.next();
                (id = cursor.id, start = cursor.start, end = cursor.end, size = cursor.size);
            }
            var startPos = start - parentStart;
            if (size < 0) { // Reused node
                children.push(reused[id]);
                positions.push(startPos);
                cursor.next();
                return;
            }
            var type = types[id], node, buffer;
            if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                // Small enough for a buffer, and no reused nodes inside
                var data_1 = new Uint16Array(buffer.size - buffer.skip);
                var endPos = cursor.pos - buffer.size, index = data_1.length;
                while (cursor.pos > endPos)
                    index = copyToBuffer(buffer.start, data_1, index, inRepeat);
                node = new TreeBuffer$1(data_1, end - buffer.start, group, inRepeat < 0 ? NodeType$1.none : types[inRepeat]);
                startPos = buffer.start - parentStart;
            }
            else { // Make it a node
                var endPos = cursor.pos - size;
                cursor.next();
                var localChildren = [], localPositions = [];
                var localInRepeat = id >= minRepeatType ? id : -1;
                while (cursor.pos > endPos)
                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                localChildren.reverse();
                localPositions.reverse();
                if (localInRepeat > -1 && localChildren.length > BalanceBranchFactor$1)
                    node = balanceRange$1(type, type, localChildren, localPositions, 0, localChildren.length, 0, maxBufferLength, end - start);
                else
                    node = new Tree$1(type, localChildren, localPositions, end - start);
            }
            children.push(node);
            positions.push(startPos);
        }
        function findBufferSize(maxSize, inRepeat) {
            // Scan through the buffer to find previous siblings that fit
            // together in a TreeBuffer, and don't contain any reused nodes
            // (which can't be stored in a buffer).
            // If `inRepeat` is > -1, ignore node boundaries of that type for
            // nesting, but make sure the end falls either at the start
            // (`maxSize`) or before such a node.
            var fork = cursor.fork();
            var size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
            var result = { size: 0, start: 0, skip: 0 };
            scan: for (var minPos = fork.pos - maxSize; fork.pos > minPos;) {
                // Pretend nested repeat nodes of the same type don't exist
                if (fork.id == inRepeat) {
                    // Except that we store the current state as a valid return
                    // value.
                    result.size = size;
                    result.start = start;
                    result.skip = skip;
                    skip += 4;
                    size += 4;
                    fork.next();
                    continue;
                }
                var nodeSize = fork.size, startPos = fork.pos - nodeSize;
                if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                    break;
                var localSkipped = fork.id >= minRepeatType ? 4 : 0;
                var nodeStart = fork.start;
                fork.next();
                while (fork.pos > startPos) {
                    if (fork.size < 0)
                        break scan;
                    if (fork.id >= minRepeatType)
                        localSkipped += 4;
                    fork.next();
                }
                start = nodeStart;
                size += nodeSize;
                skip += localSkipped;
            }
            if (inRepeat < 0 || size == maxSize) {
                result.size = size;
                result.start = start;
                result.skip = skip;
            }
            return result.size > 4 ? result : undefined;
        }
        function copyToBuffer(bufferStart, buffer, index, inRepeat) {
            var id = cursor.id, start = cursor.start, end = cursor.end, size = cursor.size;
            cursor.next();
            if (id == inRepeat)
                return index;
            var startIndex = index;
            if (size > 4) {
                var endPos = cursor.pos - (size - 4);
                while (cursor.pos > endPos)
                    index = copyToBuffer(bufferStart, buffer, index, inRepeat);
            }
            if (id < minRepeatType) { // Don't copy repeat nodes into buffers
                buffer[--index] = startIndex;
                buffer[--index] = end - bufferStart;
                buffer[--index] = start - bufferStart;
                buffer[--index] = id;
            }
            return index;
        }
        var children = [], positions = [];
        while (cursor.pos > 0)
            takeNode(0, 0, children, positions, -1);
        var length = children.length ? positions[0] + children[0].length : 0;
        return new Tree$1(group.types[topID], children.reverse(), positions.reverse(), length);
    }
    function balanceRange$1(outerType, innerType, children, positions, from, to, start, maxBufferLength, length) {
        var localChildren = [], localPositions = [];
        if (length <= maxBufferLength) {
            for (var i = from; i < to; i++) {
                localChildren.push(children[i]);
                localPositions.push(positions[i] - start);
            }
        }
        else {
            var maxChild = Math.max(maxBufferLength, Math.ceil(length * 1.5 / BalanceBranchFactor$1));
            for (var i = from; i < to;) {
                var groupFrom = i, groupStart = positions[i];
                i++;
                for (; i < to; i++) {
                    var nextEnd = positions[i] + children[i].length;
                    if (nextEnd - groupStart > maxChild)
                        break;
                }
                if (i == groupFrom + 1) {
                    var only = children[groupFrom];
                    if (only instanceof Tree$1 && only.type == innerType && only.length > maxChild << 1) { // Too big, collapse
                        for (var j = 0; j < only.children.length; j++) {
                            localChildren.push(only.children[j]);
                            localPositions.push(only.positions[j] + groupStart - start);
                        }
                        continue;
                    }
                    localChildren.push(only);
                }
                else if (i == groupFrom + 1) {
                    localChildren.push(children[groupFrom]);
                }
                else {
                    var inner = balanceRange$1(innerType, innerType, children, positions, groupFrom, i, groupStart, maxBufferLength, positions[i - 1] + children[i - 1].length - groupStart);
                    if (innerType != NodeType$1.none && !containsType$1(inner.children, innerType))
                        inner = new Tree$1(NodeType$1.none, inner.children, inner.positions, inner.length);
                    localChildren.push(inner);
                }
                localPositions.push(groupStart - start);
            }
        }
        return new Tree$1(outerType, localChildren, localPositions, length);
    }
    function containsType$1(nodes, type) {
        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
            var elt = nodes_1[_i];
            if (elt.type == type)
                return true;
        }
        return false;
    }

    // A range's flags field is used like this:
    // - 2 bits for bidi level (3 means unset) (only meaningful for
    //   cursors)
    // - 2 bits to indicate the side the cursor is associated with (only
    //   for cursors)
    // - 1 bit to indicate whether the range is inverted (head before
    //   anchor) (only meaningful for non-empty ranges)
    // - Any further bits hold the goal column (only for ranges
    //   produced by vertical motion)
    var RangeFlag;
    (function (RangeFlag) {
        RangeFlag[RangeFlag["BidiLevelMask"] = 3] = "BidiLevelMask";
        RangeFlag[RangeFlag["AssocBefore"] = 4] = "AssocBefore";
        RangeFlag[RangeFlag["AssocAfter"] = 8] = "AssocAfter";
        RangeFlag[RangeFlag["Inverted"] = 16] = "Inverted";
        RangeFlag[RangeFlag["GoalColumnOffset"] = 5] = "GoalColumnOffset";
        RangeFlag[RangeFlag["NoGoalColumn"] = 33554431] = "NoGoalColumn";
    })(RangeFlag || (RangeFlag = {}));
    /// A single selection range. When
    /// [`allowMultipleSelections`](#state.EditorState^allowMultipleSelections)
    /// is enabled, a [selection](#state.EditorSelection) may hold
    /// multiple ranges. By default, selections hold exactly one range.
    class SelectionRange$1 {
        // @internal
        constructor(
        /// The lower side of the range.
        from, 
        /// The upper side of the range.
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /// The anchor of the range—the side that doesn't move when you
        /// extend it.
        get anchor() { return this.flags & RangeFlag.Inverted ? this.to : this.from; }
        /// The head of the range, which is moved when the range is
        /// [extended](#state.SelectionRange.extend).
        get head() { return this.flags & RangeFlag.Inverted ? this.from : this.to; }
        /// True when `anchor` and `head` are at the same position.
        get empty() { return this.from == this.to; }
        /// If this is a cursor that is explicitly associated with the
        /// character on one of its sides, this returns the side. -1 means
        /// the character before its position, 1 the character after, and 0
        /// means no association.
        get assoc() { return this.flags & RangeFlag.AssocBefore ? -1 : this.flags & RangeFlag.AssocAfter ? 1 : 0; }
        /// The bidirectional text level associated with this cursor.
        get bidiLevel() {
            let level = this.flags & RangeFlag.BidiLevelMask;
            return level == 3 ? null : level;
        }
        get goalColumn() {
            let value = this.flags >> RangeFlag.GoalColumnOffset;
            return value == RangeFlag.NoGoalColumn ? undefined : value;
        }
        /// Map this range through a mapping.
        map(mapping) {
            let from = mapping.mapPos(this.from), to = mapping.mapPos(this.to);
            return from == this.from && to == this.to ? this : new SelectionRange$1(from, to, this.flags);
        }
        /// Extend this range to cover at least `from` to `to`.
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection$1.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection$1.range(this.anchor, head);
        }
        /// Compare this range to another range.
        eq(other) {
            return this.anchor == other.anchor && this.head == other.head;
        }
        /// Return a JSON-serializable object representing the range.
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /// Convert a JSON representation of a range to a `SelectionRange`
        /// instance.
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection$1.range(json.anchor, json.head);
        }
    }
    /// An editor selection holds one or more selection ranges.
    class EditorSelection$1 {
        /// @internal
        constructor(
        /// The ranges in the selection, sorted by position. Ranges cannot
        /// overlap (but they may touch, if they aren't empty).
        ranges, 
        /// The index of the _primary_ range in the selection (which is
        /// usually the range that was added last).
        primaryIndex = 0) {
            this.ranges = ranges;
            this.primaryIndex = primaryIndex;
        }
        /// Map a selection through a mapping. Mostly used to adjust the
        /// selection position for changes.
        map(mapping) {
            if (mapping.empty)
                return this;
            return EditorSelection$1.create(this.ranges.map(r => r.map(mapping)), this.primaryIndex);
        }
        /// Compare this selection to another selection.
        eq(other) {
            if (this.ranges.length != other.ranges.length ||
                this.primaryIndex != other.primaryIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i]))
                    return false;
            return true;
        }
        /// Get the primary selection range. Usually, you should make sure
        /// your code applies to _all_ ranges, by using methods like
        /// [`changeByRange`](#state.EditorState.changeByRange).
        get primary() { return this.ranges[this.primaryIndex]; }
        /// Make sure the selection only has one range. Returns a selection
        /// holding only the primary range from this selection.
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection$1([this.primary]);
        }
        /// Extend this selection with an extra range.
        addRange(range, primary = true) {
            return EditorSelection$1.create([range].concat(this.ranges), primary ? 0 : this.primaryIndex + 1);
        }
        /// Replace a given range with another range, and then normalize the
        /// selection to merge and sort ranges if necessary.
        replaceRange(range, which = this.primaryIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection$1.create(ranges, this.primaryIndex);
        }
        /// Convert this selection to an object that can be serialized to
        /// JSON.
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), primaryIndex: this.primaryIndex };
        }
        /// Create a selection from a JSON representation.
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.primaryIndex != "number" || json.primaryIndex >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection$1(json.ranges.map((r) => SelectionRange$1.fromJSON(r)), json.primaryIndex);
        }
        /// Create a selection holding a single range.
        static single(anchor, head = anchor) {
            return new EditorSelection$1([EditorSelection$1.range(anchor, head)], 0);
        }
        /// Sort and merge the given set of ranges, creating a valid
        /// selection.
        static create(ranges, primaryIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return normalized$1(ranges.slice(), primaryIndex);
                pos = range.to;
            }
            return new EditorSelection$1(ranges, primaryIndex);
        }
        /// Create a cursor selection range at the given position. You can
        /// probably ignore [association](#state.SelectionRange.assoc) and
        /// [bidi level](#state.SelectionRange.bidiLevel) in most
        /// situations.
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return new SelectionRange$1(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? RangeFlag.AssocBefore : RangeFlag.AssocAfter) |
                (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : RangeFlag.NoGoalColumn) << RangeFlag.GoalColumnOffset));
        }
        /// Create a selection range.
        static range(anchor, head, goalColumn) {
            let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : RangeFlag.NoGoalColumn) << RangeFlag.GoalColumnOffset;
            return head < anchor ? new SelectionRange$1(head, anchor, RangeFlag.Inverted | goal) : new SelectionRange$1(anchor, head, goal);
        }
    }
    function normalized$1(ranges, primaryIndex = 0) {
        let primary = ranges[primaryIndex];
        ranges.sort((a, b) => a.from - b.from);
        primaryIndex = ranges.indexOf(primary);
        for (let i = 1; i < ranges.length; i++) {
            let range = ranges[i], prev = ranges[i - 1];
            if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                let from = prev.from, to = Math.max(range.to, prev.to);
                if (i <= primaryIndex)
                    primaryIndex--;
                ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection$1.range(to, from) : EditorSelection$1.range(from, to));
            }
        }
        return new EditorSelection$1(ranges, primaryIndex);
    }
    function checkSelection$1(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }

    let nextID$1 = 0;
    /// A facet is a value that is assicated with a state and can be
    /// influenced by any number of extensions. Extensions can provide
    /// input values for the facet, and the facet combines those into an
    /// output value.
    ///
    /// Examples of facets are the theme styles associated with an editor
    /// (which are all stored) or the tab size (which is reduced to a
    /// single value, using the input with the hightest precedence).
    class Facet$1 {
        constructor(
        /// @internal
        combine, 
        /// @internal
        compareInput, 
        /// @internal
        compare, isStatic) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            /// @internal
            this.id = nextID$1++;
            this.default = combine([]);
        }
        /// Define a new facet.
        static define(config = {}) {
            return new Facet$1(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static);
        }
        /// Returns an extension that adds the given value for this facet.
        of(value) {
            return new FacetProvider$1([], this, Provider.Static, value);
        }
        /// Create an extension that computes a value for the facet from a
        /// state. You must take care to declare the parts of the state that
        /// this value depends on, since your function is only called again
        /// for a new state when one of those parts changed.
        ///
        /// In most cases, you'll want to use the
        /// [`provide`](#state.StateField^define^config.provide) option when
        /// defining a field instead.
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider$1(deps, this, Provider.Single, get);
        }
        /// Create an extension that computes zero or more values for this
        /// facet from a state.
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider$1(deps, this, Provider.Multi, get);
        }
        /// Helper method for registering a facet source with a state field
        /// via its [`provide`](#state.StateField^define^config.provide) option.
        /// Returns a value that can be passed to that option to make the
        /// field automatically provide a value for this facet.
        from(get, prec) {
            return field => maybePrec$1(prec, this.compute([field], state => get(state.field(field))));
        }
        /// Helper for [providing](#state.StateField^define^config.provide)
        /// a dynamic number of values for this facet from a state field.
        nFrom(get, prec) {
            return field => maybePrec$1(prec, this.computeN([field], state => get(state.field(field))));
        }
    }
    function sameArray$1(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    var Provider;
    (function (Provider) {
        Provider[Provider["Static"] = 0] = "Static";
        Provider[Provider["Single"] = 1] = "Single";
        Provider[Provider["Multi"] = 2] = "Multi";
    })(Provider || (Provider = {}));
    class FacetProvider$1 {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID$1++;
        }
        dynamicSlot(addresses) {
            let getter = this.value;
            let compare = this.facet.compareInput;
            let idx = addresses[this.id] >> 1, multi = this.type == Provider.Multi;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((addresses[dep.id] & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return (state, tr) => {
                if (!tr || tr.reconfigure) {
                    state.values[idx] = getter(state);
                    return SlotStatus.Changed;
                }
                else {
                    let depChanged = (depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) ||
                        depAddrs.some(addr => (ensureAddr$1(state, addr) & SlotStatus.Changed) > 0);
                    if (!depChanged)
                        return 0;
                    let newVal = getter(state), oldVal = tr.startState.values[idx];
                    if (multi ? compareArray$1(newVal, oldVal, compare) : compare(newVal, oldVal))
                        return 0;
                    state.values[idx] = newVal;
                    return SlotStatus.Changed;
                }
            };
        }
    }
    function compareArray$1(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function dynamicFacetSlot$1(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        return (state, tr) => {
            let oldAddr = !tr ? null : tr.reconfigure ? tr.startState.config.address[facet.id] : idx << 1;
            let changed = oldAddr == null;
            for (let dynAddr of dynamic) {
                if (ensureAddr$1(state, dynAddr) & SlotStatus.Changed)
                    changed = true;
            }
            if (!changed)
                return 0;
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr$1(state, providerAddrs[i]);
                if (providerTypes[i] == Provider.Multi)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            let newVal = facet.combine(values);
            if (oldAddr != null && facet.compare(newVal, getAddr$1(tr.startState, oldAddr)))
                return 0;
            state.values[idx] = newVal;
            return SlotStatus.Changed;
        };
    }
    function maybeIndex$1(state, id) {
        let found = state.config.address[id];
        return found == null ? null : found >> 1;
    }
    /// Fields can store additional information in an editor state, and
    /// keep it in sync with the rest of the state.
    class StateField$1 {
        constructor(
        /// @internal
        id, createF, updateF, compareF, 
        /// @internal
        facets) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.facets = facets;
        }
        /// Define a state field.
        static define(config) {
            let facets = [];
            let field = new StateField$1(nextID$1++, config.create, config.update, config.compare || ((a, b) => a === b), facets);
            if (config.provide)
                for (let p of config.provide) {
                    if (p instanceof Facet$1)
                        facets.push(p.compute([field], state => state.field(field)));
                    else
                        facets.push(p(field));
                }
            return field;
        }
        /// @internal
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return (state, tr) => {
                if (!tr) {
                    state.values[idx] = this.createF(state);
                    return SlotStatus.Changed;
                }
                let oldVal, changed = 0;
                if (tr.reconfigure) {
                    let oldIdx = maybeIndex$1(tr.startState, this.id);
                    oldVal = oldIdx == null ? this.createF(tr.startState) : tr.startState.values[oldIdx];
                    changed = SlotStatus.Changed;
                }
                else {
                    oldVal = tr.startState.values[idx];
                }
                let value = this.updateF(oldVal, tr);
                if (!changed && !this.compareF(oldVal, value))
                    changed = SlotStatus.Changed;
                if (changed)
                    state.values[idx] = value;
                return changed;
            };
        }
    }
    const Prec$1 = { fallback: 3, default: 2, extend: 1, override: 0 };
    /// By default extensions are registered in the order they are found
    /// the flattened form of nested array that was provided. Individual
    /// extension values can be assigned a precedence to override this.
    /// Extensions that do not have a precedence set get the precedence of
    /// the nearest parent with a precedence, or
    /// [`"default"`](#state.Precedence) if there is no such parent. The
    /// final ordering of extensions is determined by first sorting by
    /// precedence and then by order within each precedence.
    function precedence$1(extension, value) {
        if (!Prec$1.hasOwnProperty(value))
            throw new RangeError(`Invalid precedence: ${value}`);
        return new PrecExtension$1(extension, Prec$1[value]);
    }
    function maybePrec$1(prec, ext) {
        return prec ? precedence$1(ext, prec) : ext;
    }
    class PrecExtension$1 {
        constructor(e, prec) {
            this.e = e;
            this.prec = prec;
        }
    }
    class TaggedExtension$1 {
        constructor(tag, extension) {
            this.tag = tag;
            this.extension = extension;
        }
    }
    class Configuration$1 {
        constructor(source, replacements, dynamicSlots, address, staticValues) {
            this.source = source;
            this.replacements = replacements;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.statusTemplate = [];
            while (this.statusTemplate.length < staticValues.length)
                this.statusTemplate.push(SlotStatus.Uninitialized);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(extension, replacements = Object.create(null), oldState) {
            console.log(extension)
            let fields = [];
            let facets = Object.create(null);
            for (let ext of flatten$1(extension, replacements)) {
                console.log(ext)
                if (ext instanceof StateField$1 || ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                if (providers.every(p => p.type == Provider.Static)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    let value = facet.combine(providers.map(p => p.value));
                    let oldAddr = oldState ? oldState.config.address[facet.id] : null;
                    if (oldAddr != null) {
                        let oldVal = getAddr$1(oldState, oldAddr);
                        if (facet.compare(value, oldVal))
                            value = oldVal;
                    }
                    staticValues.push(value);
                }
                else {
                    for (let p of providers) {
                        if (p.type == Provider.Static) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot$1(a, facet, providers));
                }
            }
            return new Configuration$1(extension, replacements, dynamicSlots.map(f => f(address)), address, staticValues);
        }
    }
    function allKeys$1(obj) {
        return (Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(obj) : []).concat(Object.keys(obj));
    }
    function flatten$1(extension, replacements) {
        let result = [[], [], [], []];
        let seen = new Map();
        let tagsSeen = Object.create(null);
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known >= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof TaggedExtension$1) {
                if (ext.tag in tagsSeen)
                    throw new RangeError(`Duplicate use of tag '${String(ext.tag)}' in extensions`);
                tagsSeen[ext.tag] = true;
                inner(replacements[ext.tag] || ext.extension, prec);
            }
            else if (ext.extension) {
                inner(ext.extension, prec);
            }
            else if (ext instanceof PrecExtension$1) {
                inner(ext.e, ext.prec);
            }
            else {
                result[prec].push(ext);
                if (ext instanceof StateField$1)
                    inner(ext.facets, prec);
            }
        }
        inner(extension, Prec$1.default);
        for (let key of allKeys$1(replacements))
            if (!(key in tagsSeen) && key != "full" && replacements[key]) {
                tagsSeen[key] = true;
                inner(replacements[key], Prec$1.default);
            }
        return result.reduce((a, b) => a.concat(b));
    }
    var SlotStatus;
    (function (SlotStatus) {
        SlotStatus[SlotStatus["Uninitialized"] = 0] = "Uninitialized";
        SlotStatus[SlotStatus["Changed"] = 1] = "Changed";
        SlotStatus[SlotStatus["Computed"] = 2] = "Computed";
        SlotStatus[SlotStatus["Computing"] = 4] = "Computing";
    })(SlotStatus || (SlotStatus = {}));
    function ensureAddr$1(state, addr) {
        if (addr & 1)
            return SlotStatus.Computed;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == SlotStatus.Computing)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & SlotStatus.Computed)
            return status;
        state.status[idx] = SlotStatus.Computing;
        let changed = state.config.dynamicSlots[idx](state, state.applying);
        return state.status[idx] = SlotStatus.Computed | changed;
    }
    function getAddr$1(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }

    const allowMultipleSelections$1 = Facet$1.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator$1 = Facet$1.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter$1 = Facet$1.define();
    const transactionFilter$1 = Facet$1.define();
    /// A node prop stored on a grammar's top node to indicate the facet
    /// used to store [language data](#state.EditorState.languageDataAt)
    /// related to that language.
    const languageDataProp$1 = new NodeProp$1();
    const globalLanguageData$1 = Facet$1.define();

    /// Annotations are tagged values that are used to add metadata to
    /// transactions in an extensible way. They should be used to model
    /// things that effect the entire transaction (such as its [time
    /// stamp](#state.Transaction^time) or information about its
    /// [origin](#state.Transaction^userEvent)). For effects that happen
    /// _alongside_ the other changes made by the transaction, [state
    /// effects](#state.StateEffect) are more appropriate.
    class Annotation$1 {
        /// @internal
        constructor(type, value) {
            this.type = type;
            this.value = value;
        }
        /// Define a new type of annotation.
        static define() { return new AnnotationType$1(); }
    }
    /// Marker that identifies a type of [annotation](#state.Annotation).
    class AnnotationType$1 {
        of(value) { return new Annotation$1(this, value); }
    }
    /// State effects can be used to represent additional effects
    /// associated with a [transaction](#state.Transaction.effects). They
    /// are often useful to model changes to custom [state
    /// fields](#state.StateField), when those changes aren't implicit in
    /// document or selection changes.
    class StateEffect$1 {
        /// @internal
        constructor(
        /// @internal
        type, 
        /// The value of this effect.
        value) {
            this.type = type;
            this.value = value;
        }
        /// Map this effect through a position mapping. Will return
        /// `undefined` when that ends up deleting the effect.
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect$1(this.type, mapped);
        }
        /// Tells you whether this effect object is of a given
        /// [type](#state.StateEffectType).
        is(type) { return this.type == type; }
        /// Define a new effect type. The type parameter indicates the type
        /// of values that his effect holds.
        static define(spec = {}) {
            return new StateEffectType$1(spec.map || (v => v));
        }
        /// Map an array of effects through a change set.
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /// Representation of a type of state effect. Defined with
    /// [`StateEffect.define`](#state.StateEffect^define).
    class StateEffectType$1 {
        /// @internal
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /// @internal
        map) {
            this.map = map;
        }
        /// Create a [state effect](#state.StateEffect) instance of this
        /// type.
        of(value) { return new StateEffect$1(this, value); }
    }
    /// Changes to the editor state are grouped into transactions.
    /// Typically, a user action creates a single transaction, which may
    /// contain any number of document changes, may change the selection,
    /// or have other effects. Create a transaction by calling
    /// [`EditorState.update`](#state.EditorState.update).
    class Transaction$1 {
        /// @internal
        constructor(
        /// The state from which the transaction starts.
        startState, 
        /// The document changes made by this transaction.
        changes, 
        /// The selection set by this transaction, or undefined if it
        /// doesn't explicitly set a selection.
        selection, 
        /// The effects added to the transaction.
        effects, 
        /// @internal
        annotations, 
        /// Holds an object when this transaction
        /// [reconfigures](#state.ReconfigurationSpec) the state.
        reconfigure, 
        /// Whether the selection should be scrolled into view after this
        /// transaction is dispatched.
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.reconfigure = reconfigure;
            this.scrollIntoView = scrollIntoView;
            /// @internal
            this._doc = null;
            /// @internal
            this._state = null;
            if (selection)
                checkSelection$1(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction$1.time))
                this.annotations = annotations.concat(Transaction$1.time.of(Date.now()));
        }
        /// The new document produced by the transaction. (Mostly exposed so
        /// that [transaction filters](#state.EditorState^transactionFilter)
        /// can look at the new document without forcing an entire new state
        /// to be computed by accessing
        /// [`.state`](#state.Transaction.state).
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /// The new selection produced by the transaction. If
        /// [`this.selection`](#state.Transaction.selection) is undefined,
        /// this will [map](#state.EditorSelection.map) the start state's
        /// current selection through the changes made by the transaction.
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /// The new state created by the transaction.
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /// Get the value of the given annotation type, if any.
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /// Indicates whether the transaction changed the document.
        get docChanged() { return !this.changes.empty; }
    }
    /// Annotation used to store transaction timestamps.
    Transaction$1.time = Annotation$1.define();
    /// Annotation used to associate a transaction with a user interface
    /// event. The view will set this to...
    ///
    ///  - `"input"` when the user types text
    ///  - `"delete"` when the user deletes the selection or text near the selection
    ///  - `"keyboardselection"` when moving the selection via the keyboard
    ///  - `"pointerselection"` when moving the selection through the pointing device
    ///  - `"paste"` when pasting content
    ///  - `"cut"` when cutting
    ///  - `"drop"` when content is inserted via drag-and-drop
    Transaction$1.userEvent = Annotation$1.define();
    /// Annotation indicating whether a transaction should be added to
    /// the undo history or not.
    Transaction$1.addToHistory = Annotation$1.define();
    function joinRanges$1(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction$1(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet$1.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect$1.mapEffects(a.effects, mapForA).concat(StateEffect$1.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView,
            reconfigure: !b.reconfigure ? a.reconfigure : b.reconfigure.full || !a.reconfigure ? b.reconfigure
                : Object.assign({}, a.reconfigure, b.reconfigure)
        };
    }
    function resolveTransactionInner$1(state, spec, docSize) {
        let reconf = spec.reconfigure;
        if (reconf && reconf.append) {
            reconf = Object.assign({}, reconf);
            let tag = typeof Symbol == "undefined" ? "__append" + Math.floor(Math.random() * 0xffffffff) : Symbol("appendConf");
            reconf[tag] = reconf.append;
            reconf.append = undefined;
        }
        let sel = spec.selection;
        return {
            changes: spec.changes instanceof ChangeSet$1 ? spec.changes
                : ChangeSet$1.of(spec.changes || [], docSize, state.facet(lineSeparator$1)),
            selection: sel && (sel instanceof EditorSelection$1 ? sel : EditorSelection$1.single(sel.anchor, sel.head)),
            effects: asArray$1(spec.effects),
            annotations: asArray$1(spec.annotations),
            scrollIntoView: !!spec.scrollIntoView,
            reconfigure: reconf
        };
    }
    function resolveTransaction$1(state, specs, filter) {
        let s = resolveTransactionInner$1(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction$1(s, resolveTransactionInner$1(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = new Transaction$1(state, s.changes, s.selection, s.effects, s.annotations, s.reconfigure, s.scrollIntoView);
        return filter ? filterTransaction$1(tr) : tr;
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction$1(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter$1)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges$1(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet$1.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.invertedDesc;
            }
            tr = new Transaction$1(state, changes, tr.selection && tr.selection.map(back), StateEffect$1.mapEffects(tr.effects, back), tr.annotations, tr.reconfigure, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter$1);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction$1)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction$1)
                tr = filtered[0];
            else
                tr = resolveTransaction$1(state, asArray$1(filtered), false);
        }
        return tr;
    }
    const none$6 = [];
    function asArray$1(value) {
        return value == null ? none$6 : Array.isArray(value) ? value : [value];
    }

    /// This is used to [categorize](#state.EditorState.charCategorizer)
    /// characters into three categories—word characters, whitespace, and
    /// anything else. It is used do things like selecting by word.
    var CharCategory$1;
    (function (CharCategory) {
        CharCategory[CharCategory["Word"] = 0] = "Word";
        CharCategory[CharCategory["Space"] = 1] = "Space";
        CharCategory[CharCategory["Other"] = 2] = "Other";
    })(CharCategory$1 || (CharCategory$1 = {}));
    const nonASCIISingleCaseWordChar$1 = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar$1;
    try {
        wordChar$1 = new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar$1(str) {
        if (wordChar$1)
            return wordChar$1.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar$1.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer$1(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory$1.Space;
            if (hasWordChar$1(char))
                return CharCategory$1.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory$1.Word;
            return CharCategory$1.Other;
        };
    }

    /// The editor state class is a persistent (immutable) data structure.
    /// To update a state, you [create](#state.EditorState.update) a
    /// [transaction](#state.Transaction), which produces a _new_ state
    /// instance, without modifying the original object.
    ///
    /// As such, _never_ mutate properties of a state directly. That'll
    /// just break things.
    class EditorState$1 {
        /// @internal
        constructor(
        /// @internal
        config, 
        /// The current document.
        doc, 
        /// The current selection.
        selection, tr = null) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            /// @internal
            this.applying = null;
            this.status = config.statusTemplate.slice();
            if (tr && !tr.reconfigure) {
                this.values = tr.startState.values.slice();
            }
            else {
                this.values = config.dynamicSlots.map(_ => null);
                // Copy over old values for shared facets/fields if this is a reconfigure
                if (tr)
                    for (let id in config.address) {
                        let cur = config.address[id], prev = tr.startState.config.address[id];
                        if (prev != null && (cur & 1) == 0)
                            this.values[cur >> 1] = getAddr$1(tr.startState, prev);
                    }
            }
            this.applying = tr;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr$1(this, i << 1);
            this.applying = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr$1(this, addr);
            return getAddr$1(this, addr);
        }
        /// Create a [transaction](#state.Transaction) that updates this
        /// state. Any number of [transaction specs](#state.TransactionSpec)
        /// can be passed. The [changes](#state.TransactionSpec.changes) (if
        /// any) of each spec are assumed to start in the _current_ document
        /// (not the document produced by previous specs), and its
        /// [selection](#state.TransactionSpec.selection) and
        /// [effects](#state.TransactionSpec.effects) are assumed to refer
        /// to the document created by its _own_ changes. The resulting
        /// transaction contains the combined effect of all the different
        /// specs. For things like
        /// [selection](#state.TransactionSpec.selection) or
        /// [reconfiguration](#state.TransactionSpec.reconfigure), later
        /// specs take precedence over earlier ones.
        update(...specs) {
            return resolveTransaction$1(this, specs, true);
        }
        /// @internal
        applyTransaction(tr) {
            let conf = this.config;
            if (tr.reconfigure)
                conf = Configuration$1.resolve(tr.reconfigure.full || conf.source, Object.assign(conf.replacements, tr.reconfigure, { full: undefined }), this);
            new EditorState$1(conf, tr.newDoc, tr.newSelection, tr);
        }
        /// Create a [transaction spec](#state.TransactionSpec) that
        /// replaces every selection range with the given content.
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection$1.cursor(range.from + text.length) }));
        }
        /// Create a set of changes and a new selection by running the given
        /// function for each range in the active selection. The function
        /// can return an optional set of changes (in the coordinate space
        /// of the start document), plus an updated range (in the coordinate
        /// space of the document produced by the call's own changes). This
        /// method will merge all the changes and ranges into a single
        /// changeset and selection, and return it as a [transaction
        /// spec](#state.TransactionSpec), which can be passed to
        /// [`update`](#state.EditorState.update).
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray$1(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect$1.mapEffects(effects, newMapped).concat(StateEffect$1.mapEffects(asArray$1(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection$1.create(ranges, sel.primaryIndex),
                effects
            };
        }
        /// Create a [change set](#state.ChangeSet) from the given change
        /// description, taking the state's document length and line
        /// separator into account.
        changes(spec = []) {
            if (spec instanceof ChangeSet$1)
                return spec;
            return ChangeSet$1.of(spec, this.doc.length, this.facet(EditorState$1.lineSeparator));
        }
        /// Using the state's [line
        /// separator](#state.EditorState^lineSeparator), create a
        /// [`Text`](#text.Text) instance from the given string.
        toText(string) {
            return Text.of(string.split(this.facet(EditorState$1.lineSeparator) || DefaultSplit$1));
        }
        /// Return the given range of the document as a string.
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /// Get the value of a state [facet](#state.Facet).
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr$1(this, addr);
            return getAddr$1(this, addr);
        }
        /// Convert this state to a JSON-serializable object.
        toJSON() {
            // FIXME plugin state serialization
            return {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
        }
        /// Deserialize a state from its JSON representation.
        static fromJSON(json, config = {}) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            return EditorState$1.create({
                doc: json.doc,
                selection: EditorSelection$1.fromJSON(json.selection),
                extensions: config.extensions
            });
        }
        /// Create a new state. You'll usually only need this when
        /// initializing an editor—updated states are created by applying
        /// transactions.
        static create(config = {}) {
            let configuration = Configuration$1.resolve(config.extensions || []);
            let doc = config.doc instanceof Text ? config.doc
                : Text.of((config.doc || "").split(configuration.staticFacet(EditorState$1.lineSeparator) || DefaultSplit$1));
            let selection = !config.selection ? EditorSelection$1.single(0)
                : config.selection instanceof EditorSelection$1 ? config.selection
                    : EditorSelection$1.single(config.selection.anchor, config.selection.head);
            checkSelection$1(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections$1))
                selection = selection.asSingle();
            return new EditorState$1(configuration, doc, selection);
        }
        /// The size (in columns) of a tab in the document, determined by
        /// the [`tabSize`](#state.EditorState^tabSize) facet.
        get tabSize() { return this.facet(EditorState$1.tabSize); }
        /// Get the proper [line-break](#state.EditorState^lineSeparator)
        /// string for this state.
        get lineBreak() { return this.facet(EditorState$1.lineSeparator) || "\n"; }
        /// The _column width_ of an indent unit in the document. Determined
        /// by the [`indentUnit`](#state.EditorState^indentUnit) facet, and
        /// [`tabSize`](#state.EditorState^tabSize) when that contains tabs.
        get indentUnit() {
            let unit = this.facet(EditorState$1.indentUnit);
            return unit.charCodeAt(0) == 9 ? this.tabSize * unit.length : unit.length;
        }
        /// Create an indentation string that covers columns 0 to `cols`.
        /// Will use tabs for as much of the columns as possible when the
        /// [`indentUnit`](#state.EditorState^indentUnit) facet contains
        /// tabs.
        indentString(cols) {
            let result = "";
            if (this.facet(EditorState$1.indentUnit).charCodeAt(0) == 9)
                while (cols >= this.tabSize) {
                    result += "\t";
                    cols -= this.tabSize;
                }
            for (let i = 0; i < cols; i++)
                result += " ";
            return result;
        }
        /// Look up a translation for the given phrase (via the
        /// [`phrases`](#state.EditorState^phrases) facet), or return the
        /// original string if no translation is found.
        phrase(phrase) {
            for (let map of this.facet(EditorState$1.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase))
                    return map[phrase];
            return phrase;
        }
        /// Return a function that can categorize strings (expected to
        /// represent a single [grapheme cluster](#text.nextClusterBreak))
        /// into one of:
        ///
        ///  - Word (contains an alphanumeric character or a character
        ///    explicitly listed in the local language's `"wordChars"`
        ///    language data, which should be a string)
        ///  - Space (contains only whitespace)
        ///  - Other (anything else)
        charCategorizer(at) {
            return makeCategorizer$1(this.languageDataAt("wordChars", at).join(""));
        }
        /// Get the syntax tree for this state, which is the current
        /// (possibly incomplete) parse tree of the [syntax](#state.Syntax)
        /// with the highest precedence, or the empty tree if there is no
        /// syntax available.
        get tree() {
            let syntax = this.facet(EditorState$1.syntax);
            return syntax.length ? syntax[0].getTree(this) : Tree$1.empty;
        }
        /// Find the values for a given language data field, either provided
        /// by the [syntax](#syntax.LezerSyntax.languageData) or through the
        /// [`globalLanguageData`](#state.EditorState^globalLanguageData) facet,
        /// for the [language](#state.Syntax.languageDataFacetAt) at the
        /// given position. Values provided by the facet, in precedence
        /// order, will appear before those provided by the syntax.
        languageDataAt(name, pos) {
            let values = [];
            let syntax = this.facet(EditorState$1.syntax);
            for (let i = syntax.length ? 0 : 1; i < 2; i++) {
                let source = this.facet(i ? globalLanguageData$1 : syntax[0].languageDataFacetAt(this, pos));
                for (let obj of source)
                    if (Object.prototype.hasOwnProperty.call(obj, name))
                        values.push(obj[name]);
            }
            return values;
        }
    }
    /// A facet that, when enabled, causes the editor to allow multiple
    /// ranges to be selected. Be careful though, because by default the
    /// editor relies on the native DOM selection, which cannot handle
    /// multiple selections. An extension like
    /// [`drawSelection`](#view.drawSelection) can be used to make
    /// secondary selections visible to the user.
    EditorState$1.allowMultipleSelections = allowMultipleSelections$1;
    /// Facet that defines a way to query for automatic indentation
    /// depth at the start of a given line.
    EditorState$1.indentation = Facet$1.define();
    /// Configures the tab size to use in this state. The first
    /// (highest-precedence) value of the facet is used. If no value is
    /// given, this defaults to 4.
    EditorState$1.tabSize = Facet$1.define({
        combine: values => values.length ? values[0] : 4
    });
    /// The line separator to use. By default, any of `"\n"`, `"\r\n"`
    /// and `"\r"` is treated as a separator when splitting lines, and
    /// lines are joined with `"\n"`.
    ///
    /// When you configure a value here, only that precise separator
    /// will be used, allowing you to round-trip documents through the
    /// editor without normalizing line separators.
    EditorState$1.lineSeparator = lineSeparator$1;
    /// Facet for overriding the unit by which indentation happens.
    /// Should be a string consisting either entirely of spaces or
    /// entirely of tabs. When not set, this defaults to 2 spaces.
    EditorState$1.indentUnit = Facet$1.define({
        combine: values => {
            if (!values.length)
                return "  ";
            if (!/^(?: +|\t+)$/.test(values[0]))
                throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
            return values[0];
        }
    });
    /// Registers translation phrases. The
    /// [`phrase`](#state.EditorState.phrase) method will look through
    /// all objects registered with this facet to find translations for
    /// its argument.
    EditorState$1.phrases = Facet$1.define();
    /// Facet that registers a parsing service for the state.
    EditorState$1.syntax = Facet$1.define();
    /// A facet used to register [language
    /// data](#state.EditorState.languageDataAt) that should apply
    /// throughout the document, regardless of language.
    EditorState$1.globalLanguageData = globalLanguageData$1;
    /// A facet that registers a code folding service. When called with
    /// the extent of a line, such a function should return a range
    /// object when a foldable that starts on that line (but continues
    /// beyond it), if one can be found.
    EditorState$1.foldable = Facet$1.define();
    /// Facet used to register change filters, which are called for each
    /// transaction (unless explicitly
    /// [disabled](#state.TransactionSpec.filter)), and can suppress
    /// part of the transaction's changes.
    ///
    /// Such a function can return `true` to indicate that it doesn't
    /// want to do anything, `false` to completely stop the changes in
    /// the transaction, or a set of ranges in which changes should be
    /// suppressed. Such ranges are represented as an array of numbers,
    /// with each pair of two number indicating the start and end of a
    /// range. So for example `[10, 20, 100, 110]` suppresses changes
    /// between 10 and 20, and between 100 and 110.
    EditorState$1.changeFilter = changeFilter$1;
    /// Facet used to register a hook that gets a chance to update or
    /// replace transaction specs before they are applied. This will
    /// only be applied for transactions that don't have
    /// [`filter`](#state.TransactionSpec.filter) set to `false`. You
    /// can either return a single (possibly the input transaction), or
    /// an array of specs (which will be combined in the same way as the
    /// arguments to [`EditorState.update`](#state.EditorState.update)).
    ///
    /// When possible, it is recommended to avoid accessing
    /// [`Transaction.state`](#state.Transaction.state) in a filter,
    /// since it will force creation of a state that will then be
    /// discarded again, if the transaction is actually filtered.
    ///
    /// (This functionality should be used with care. Indiscriminately
    /// modifying transaction is likely to break something or degrade
    /// the user experience.)
    EditorState$1.transactionFilter = transactionFilter$1;

    var BranchName;
    (function (BranchName) {
        BranchName[BranchName["Done"] = 0] = "Done";
        BranchName[BranchName["Undone"] = 1] = "Undone";
    })(BranchName || (BranchName = {}));
    const fromHistory = Annotation.define();
    /// Transaction annotation that will prevent that annotation from
    /// being combined with other annotations in the undo history. Given
    /// `"before"`, it'll prevent merging with previous transactions. With
    /// `"after"`, subsequent transactions won't be combined with this
    /// one. With `"full"`, the transaction is isolated on both sides.
    const isolateHistory = Annotation.define();
    /// This facet provides a way to register functions that, given a
    /// transaction, provide a set of effects that the history should
    /// store when inverting the transaction. This can be used to
    /// integrate some kinds of effects in the history, so that they can
    /// be undone (and redone again).
    const invertedEffects = Facet.define();
    const historyConfig = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                minDepth: 100,
                newGroupDelay: 500
            }, { minDepth: Math.max, newGroupDelay: Math.min });
        }
    });
    const historyField = StateField.define({
        create() {
            return HistoryState.empty;
        },
        update(state, tr) {
            let config = tr.state.facet(historyConfig);
            let fromHist = tr.annotation(fromHistory);
            if (fromHist) {
                let item = HistEvent.fromTransaction(tr), from = fromHist.side;
                let other = from == BranchName.Done ? state.undone : state.done;
                if (item)
                    other = updateBranch(other, other.length, config.minDepth, item);
                else
                    other = addSelection(other, tr.startState.selection);
                return new HistoryState(from == BranchName.Done ? fromHist.rest : other, from == BranchName.Done ? other : fromHist.rest);
            }
            let isolate = tr.annotation(isolateHistory);
            if (isolate == "full" || isolate == "before")
                state = state.isolate();
            if (tr.annotation(Transaction.addToHistory) === false)
                return tr.changes.length ? state.addMapping(tr.changes.desc) : state;
            let event = HistEvent.fromTransaction(tr);
            let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
            if (event)
                state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);
            else if (tr.selection)
                state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
            if (isolate == "full" || isolate == "after")
                state = state.isolate();
            return state;
        }
    });
    /// Create a history extension with the given configuration.
    function history(config = {}) {
        // FIXME register beforeinput handler
        return [
            historyField,
            historyConfig.of(config)
        ];
    }
    function cmd(side, selection) {
        return function ({ state, dispatch }) {
            let historyState = state.field(historyField, false);
            if (!historyState)
                return false;
            let tr = historyState.pop(side, state, selection);
            if (!tr)
                return false;
            dispatch(tr);
            return true;
        };
    }
    /// Undo a single group of history events. Returns false if no group
    /// was available.
    const undo = cmd(BranchName.Done, false);
    /// Redo a group of history events. Returns false if no group was
    /// available.
    const redo = cmd(BranchName.Undone, false);
    /// Undo a selection change.
    const undoSelection = cmd(BranchName.Done, true);
    /// Redo a selection change.
    const redoSelection = cmd(BranchName.Undone, true);
    function depth(side) {
        return function (state) {
            let histState = state.field(historyField, false);
            if (!histState)
                return 0;
            let branch = side == BranchName.Done ? histState.done : histState.undone;
            return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
        };
    }
    /// The amount of undoable change events available in a given state.
    const undoDepth = depth(BranchName.Done);
    /// The amount of redoable change events available in a given state.
    const redoDepth = depth(BranchName.Undone);
    // History events store groups of changes or effects that need to be
    // undone/redone together.
    class HistEvent {
        constructor(
        // The changes in this event. Normal events hold at least one
        // change or effect. But it may be necessary to store selection
        // events before the first change, in which case a special type of
        // instance is created which doesn't hold any changes, with
        // changes == startSelection == undefined
        changes, 
        // The effects associated with this event
        effects, mapped, 
        // The selection before this event
        startSelection, 
        // Stores selection changes after this event, to be used for
        // selection undo/redo.
        selectionsAfter) {
            this.changes = changes;
            this.effects = effects;
            this.mapped = mapped;
            this.startSelection = startSelection;
            this.selectionsAfter = selectionsAfter;
        }
        setSelAfter(after) {
            return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
        }
        // This does not check `addToHistory` and such, it assumes the
        // transaction needs to be converted to an item. Returns null when
        // there are no changes or effects in the transaction.
        static fromTransaction(tr) {
            let effects = none$7;
            for (let invert of tr.startState.facet(invertedEffects)) {
                let result = invert(tr);
                if (result.length)
                    effects = effects.concat(result);
            }
            if (!effects.length && tr.changes.empty)
                return null;
            return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, tr.startState.selection, none$7);
        }
        static selection(selections) {
            return new HistEvent(undefined, none$7, undefined, undefined, selections);
        }
    }
    function updateBranch(branch, to, maxLen, newEvent) {
        let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
        let newBranch = branch.slice(start, to);
        newBranch.push(newEvent);
        return newBranch;
    }
    function isAdjacent(a, b) {
        let ranges = [], isAdjacent = false;
        a.iterChangedRanges((f, t) => ranges.push(f, t));
        b.iterChangedRanges((_f, _t, f, t) => {
            for (let i = 0; i < ranges.length;) {
                let from = ranges[i++], to = ranges[i++];
                if (t >= from && f <= to)
                    isAdjacent = true;
            }
        });
        return isAdjacent;
    }
    function eqSelectionShape(a, b) {
        return a.ranges.length == b.ranges.length &&
            a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
    }
    function conc(a, b) {
        return !a.length ? b : !b.length ? a : a.concat(b);
    }
    const none$7 = [];
    const MaxSelectionsPerEvent = 200;
    function addSelection(branch, selection) {
        if (!branch.length) {
            return [HistEvent.selection([selection])];
        }
        else {
            let lastEvent = branch[branch.length - 1];
            let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
            if (sels.length && sels[sels.length - 1].eq(selection))
                return branch;
            sels.push(selection);
            return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
        }
    }
    // Assumes the top item has one or more selectionAfter values
    function popSelection(branch) {
        let last = branch[branch.length - 1];
        let newBranch = branch.slice();
        newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
        return newBranch;
    }
    // Add a mapping to the top event in the given branch. If this maps
    // away all the changes and effects in that item, drop it and
    // propagate the mapping to the next item.
    function addMappingToBranch(branch, mapping) {
        if (!branch.length)
            return branch;
        let length = branch.length, selections = none$7;
        while (length) {
            let event = mapEvent(branch[length - 1], mapping, selections);
            if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
                let result = branch.slice(0, length);
                result[length - 1] = event;
                return result;
            }
            else { // Drop this event, since there's no changes or effects left
                mapping = event.mapped;
                length--;
                selections = event.selectionsAfter;
            }
        }
        return selections.length ? [HistEvent.selection(selections)] : none$7;
    }
    function mapEvent(event, mapping, extraSelections) {
        let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none$7, extraSelections);
        // Change-less events don't store mappings (they are always the last event in a branch)
        if (!event.changes)
            return HistEvent.selection(selections);
        let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
        let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
        return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
    }
    class HistoryState {
        constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
            this.done = done;
            this.undone = undone;
            this.prevTime = prevTime;
            this.prevUserEvent = prevUserEvent;
        }
        isolate() {
            return this.prevTime ? new HistoryState(this.done, this.undone) : this;
        }
        addChanges(event, time, userEvent, newGroupDelay, maxLen) {
            let done = this.done, lastEvent = done[done.length - 1];
            if (lastEvent && lastEvent.changes &&
                time - this.prevTime < newGroupDelay &&
                !lastEvent.selectionsAfter.length &&
                lastEvent.changes.length && event.changes &&
                isAdjacent(lastEvent.changes, event.changes)) {
                done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$7));
            }
            else {
                done = updateBranch(done, done.length, maxLen, event);
            }
            return new HistoryState(done, none$7, time, userEvent);
        }
        addSelection(selection, time, userEvent, newGroupDelay) {
            let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$7;
            if (last.length > 0 &&
                time - this.prevTime < newGroupDelay &&
                userEvent == "keyboardselection" && this.prevUserEvent == userEvent &&
                eqSelectionShape(last[last.length - 1], selection))
                return this;
            return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
        }
        addMapping(mapping) {
            return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
        }
        pop(side, state, selection) {
            let branch = side == BranchName.Done ? this.done : this.undone;
            if (branch.length == 0)
                return null;
            let event = branch[branch.length - 1];
            if (selection && event.selectionsAfter.length) {
                return state.update({
                    selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                    annotations: fromHistory.of({ side, rest: popSelection(branch) })
                });
            }
            else if (!event.changes) {
                return null;
            }
            else {
                let rest = branch.length == 1 ? none$7 : branch.slice(0, branch.length - 1);
                if (event.mapped)
                    rest = addMappingToBranch(rest, event.mapped);
                return state.update({
                    changes: event.changes,
                    selection: event.startSelection,
                    effects: event.effects,
                    annotations: fromHistory.of({ side, rest }),
                    filter: false
                });
            }
        }
    }
    HistoryState.empty = new HistoryState(none$7, none$7);
    /// Default key bindings for the undo history.
    ///
    /// - Mod-z: [`undo`](#history.undo).
    /// - Mod-y (Mod-Shift-z on macOS): [`redo`](#history.redo).
    /// - Mod-u: [`undoSelection`](#history.undoSelection).
    /// - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](#history.redoSelection).
    const historyKeymap = [
        { key: "Mod-z", run: undo, preventDefault: true },
        { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
        { key: "Mod-u", run: undoSelection, preventDefault: true },
        { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
    ];

    const C$1 = "\u037c";
    const COUNT$1 = typeof Symbol == "undefined" ? "__" + C$1 : Symbol.for(C$1);
    const SET$1 = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top$1 = typeof global == "undefined" ? window : global;

    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule$1 {
      // :: (Object<Style>, ?{process: (string) → string, extend: (string, string) → string})
      // Create a style module from the given spec.
      //
      // When `process` is given, it is called on regular (non-`@`)
      // selector properties to provide the actual selector. When `extend`
      // is given, it is called when a property containing an `&` is
      // found, and should somehow combine the `&`-template (its first
      // argument) with the selector (its second argument) to produce an
      // extended selector.
      constructor(spec, options) {
        this.rules = [];
        let {process, extend} = options || {};

        function processSelector(selector) {
          if (/^@/.test(selector)) return [selector]
          let selectors = selector.split(",");
          return process ? selectors.map(process) : selectors
        }

        function render(selectors, spec, target) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]);
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(selectors.map(s => extend ? extend(prop, s) : prop.replace(/&/, s)), value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(isAt[1] == "keyframes" ? [prop] : processSelector(prop), value, local);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || isAt && isAt[1] == "keyframes") target.push(selectors.join(",") + " {" + local.join(" ") + "}");
        }

        for (let prop in spec) render(processSelector(prop), spec[prop], this.rules);
      }

      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top$1[COUNT$1] || 1;
        top$1[COUNT$1] = id + 1;
        return C$1 + id.toString(36)
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      static mount(root, modules) {
        (root[SET$1] || new StyleSet$1(root)).mount(Array.isArray(modules) ? modules : [modules]);
      }
    }

    let adoptedSet$1 = null;

    class StyleSet$1 {
      constructor(root) {
        if (root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
          if (adoptedSet$1) {
            root.adoptedStyleSheets = [adoptedSet$1.sheet].concat(root.adoptedStyleSheets);
            return root[SET$1] = adoptedSet$1
          }
          this.sheet = new CSSStyleSheet;
          root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
          adoptedSet$1 = this;
        } else {
          this.styleTag = (root.ownerDocument || root).createElement("style");
          let target = root.head || root;
          target.insertBefore(this.styleTag, target.firstChild);
        }
        this.modules = [];
        root[SET$1] = this;
      }

      mount(modules) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }

        if (!sheet) {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].rules.join("\n") + "\n";
          this.styleTag.textContent = text;
        }
      }
    }

    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.

    var base$1 = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'",
      229: "q"
    };

    var shift$1 = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\"",
      229: "Q"
    };

    var chrome$2 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var safari$1 = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
    var gecko$2 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
    var mac$1 = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$2 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    var brokenModifierNames$1 = chrome$2 && (mac$1 || +chrome$2[1] < 57) || gecko$2 && mac$1;

    // Fill in the digit keys
    for (var i$1 = 0; i$1 < 10; i$1++) base$1[48 + i$1] = base$1[96 + i$1] = String(i$1);

    // The function keys
    for (var i$1 = 1; i$1 <= 24; i$1++) base$1[i$1 + 111] = "F" + i$1;

    // And the alphabetic keys
    for (var i$1 = 65; i$1 <= 90; i$1++) {
      base$1[i$1] = String.fromCharCode(i$1 + 32);
      shift$1[i$1] = String.fromCharCode(i$1);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code$1 in base$1) if (!shift$1.hasOwnProperty(code$1)) shift$1[code$1] = base$1[code$1];

    function keyName$1(event) {
      // Don't trust event.key in Chrome when there are modifiers until
      // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
      var ignoreKey = brokenModifierNames$1 && (event.ctrlKey || event.altKey || event.metaKey) ||
        (safari$1 || ie$2) && event.shiftKey && event.key && event.key.length == 1;
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift$1 : base$1)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    let [nav$1, doc$1] = typeof navigator != "undefined"
        ? [navigator, document]
        : [{ userAgent: "", vendor: "", platform: "" }, { documentElement: { style: {} } }];
    const ie_edge$1 = /Edge\/(\d+)/.exec(nav$1.userAgent);
    const ie_upto10$1 = /MSIE \d/.test(nav$1.userAgent);
    const ie_11up$1 = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav$1.userAgent);
    const ie$3 = !!(ie_upto10$1 || ie_11up$1 || ie_edge$1);
    const gecko$3 = !ie$3 && /gecko\/(\d+)/i.test(nav$1.userAgent);
    const chrome$3 = !ie$3 && /Chrome\/(\d+)/.exec(nav$1.userAgent);
    const webkit$1 = "webkitFontSmoothing" in doc$1.documentElement.style;
    var browser$1 = {
        mac: /Mac/.test(nav$1.platform),
        ie: ie$3,
        ie_version: ie_upto10$1 ? doc$1.documentMode || 6 : ie_11up$1 ? +ie_11up$1[1] : ie_edge$1 ? +ie_edge$1[1] : 0,
        gecko: gecko$3,
        gecko_version: gecko$3 ? +(/Firefox\/(\d+)/.exec(nav$1.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome$3,
        chrome_version: chrome$3 ? +chrome$3[1] : 0,
        ios: !ie$3 && /AppleWebKit/.test(nav$1.userAgent) && /Mobile\/\w+/.test(nav$1.userAgent),
        android: /Android\b/.test(nav$1.userAgent),
        webkit: webkit$1,
        safari: /Apple Computer/.test(nav$1.vendor),
        webkit_version: webkit$1 ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc$1.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };

    function getSelection$1(root) {
        return (root.getSelection ? root.getSelection() : document.getSelection());
    }
    // Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
    // (isCollapsed inappropriately returns true in shadow dom)
    function selectionCollapsed$1(domSel) {
        let collapsed = domSel.isCollapsed;
        if (collapsed && browser$1.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)
            collapsed = false;
        return collapsed;
    }
    function hasSelection$1(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return dom.contains(selection.anchorNode.nodeType == 3 ? selection.anchorNode.parentNode : selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor$1(dom) {
        if (dom.nodeType == 3) {
            let range = tempRange$1();
            range.setEnd(dom, dom.nodeValue.length);
            range.setStart(dom, 0);
            return range.getClientRects();
        }
        else if (dom.nodeType == 1) {
            return dom.getClientRects();
        }
        else {
            return [];
        }
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition$1(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor$1(node, off, targetNode, targetOff, -1) ||
            scanFor$1(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex$1(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function scanFor$1(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset$1(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex$1(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                off = dir < 0 ? maxOffset$1(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset$1(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function flattenRect$1(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect$1(win) {
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    const ScrollSpace$1 = 5;
    function scrollRectIntoView$1(dom, rect) {
        let doc = dom.ownerDocument, win = doc.defaultView;
        for (let cur = dom.parentNode; cur;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == document.body;
                if (top) {
                    bounding = windowRect$1(win);
                }
                else {
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth,
                        top: rect.top, bottom: rect.top + cur.clientHeight };
                }
                let moveX = 0, moveY = 0;
                if (rect.top < bounding.top)
                    moveY = -(bounding.top - rect.top + ScrollSpace$1);
                else if (rect.bottom > bounding.bottom)
                    moveY = rect.bottom - bounding.bottom + ScrollSpace$1;
                if (rect.left < bounding.left)
                    moveX = -(bounding.left - rect.left + ScrollSpace$1);
                else if (rect.right > bounding.right)
                    moveX = rect.right - bounding.right + ScrollSpace$1;
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY;
                            moveY = cur.scrollTop - start;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX;
                            moveX = cur.scrollLeft - start;
                        }
                        rect = { left: rect.left - moveX, top: rect.top - moveY,
                            right: rect.right - moveX, bottom: rect.bottom - moveY };
                    }
                }
                if (top)
                    break;
                cur = cur.parentNode;
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    class DOMSelection$1 {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        set(domSel) {
            this.anchorNode = domSel.anchorNode;
            this.anchorOffset = domSel.anchorOffset;
            this.focusNode = domSel.focusNode;
            this.focusOffset = domSel.focusOffset;
        }
    }
    let preventScrollSupported$1 = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll$1(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported$1)
            return dom.focus(preventScrollSupported$1);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported$1 == null ? {
            get preventScroll() {
                preventScrollSupported$1 = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported$1) {
            preventScrollSupported$1 = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange$1;
    function tempRange$1() { return scratchRange$1 || (scratchRange$1 = document.createRange()); }

    class DOMPos$1 {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos$1(dom.parentNode, domIndex$1(dom), precise); }
        static after(dom, precise) { return new DOMPos$1(dom.parentNode, domIndex$1(dom) + 1, precise); }
    }
    const none$8 = [];
    class ContentView$1 {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.dirty = 2 /* Node */;
        }
        get editorView() {
            if (!this.parent)
                throw new Error("Accessing view in orphan content view");
            return this.parent.editorView;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        // Will return a rectangle directly before (when side < 0), after
        // (side > 0) or directly on (when the browser supports it) the
        // given position.
        coordsAt(_pos, _side) { return null; }
        sync(track) {
            if (this.dirty & 2 /* Node */) {
                let parent = this.dom, pos = null;
                for (let child of this.children) {
                    if (child.dirty) {
                        let next = pos ? pos.nextSibling : parent.firstChild;
                        if (next && !child.dom && !ContentView$1.get(next))
                            child.reuseDOM(next);
                        child.sync(track);
                        child.dirty = 0 /* Not */;
                    }
                    if (track && track.node == parent && pos != child.dom)
                        track.written = true;
                    syncNodeInto$1(parent, pos, child.dom);
                    pos = child.dom;
                }
                let next = pos ? pos.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm$1(next);
            }
            else if (this.dirty & 1 /* Child */) {
                for (let child of this.children)
                    if (child.dirty) {
                        child.sync(track);
                        child.dirty = 0 /* Not */;
                    }
            }
        }
        reuseDOM(_dom) { return false; }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset$1(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView$1.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (end >= to && end != pos && toI == -1) {
                    toI = i;
                    toEnd = end;
                    break;
                }
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd, startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild, endDOM: toI < this.children.length - 1 && toI >= 0 ? this.children[toI + 1].dom : null };
        }
        // FIXME track precise dirty ranges, to avoid full DOM sync on every touched node?
        markDirty(andParent = false) {
            if (this.dirty & 2 /* Node */)
                return;
            this.dirty |= 2 /* Node */;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.dirty |= 2 /* Node */;
                if (parent.dirty & 1 /* Child */)
                    return;
                parent.dirty |= 1 /* Child */;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.dirty)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = none$8) {
            this.markDirty();
            for (let i = from; i < to; i++)
                this.children[i].parent = null;
            this.children.splice(from, to - from, ...children);
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor$1(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
    }
    ContentView$1.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm$1(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    function syncNodeInto$1(parent, after, dom) {
        let next = after ? after.nextSibling : parent.firstChild;
        if (dom.parentNode == parent)
            while (next != dom)
                next = rm$1(next);
        else
            parent.insertBefore(dom, next);
    }
    class ChildCursor$1 {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }

    const none$1$1 = [];
    class InlineView$1 extends ContentView$1 {
        /// Return true when this view is equivalent to `other` and can take
        /// on its role.
        become(_other) { return false; }
        // When this is a zero-length view with a side, this should return a
        // negative number to indicate it is before its position, or a
        // positive number when after its position.
        getSide() { return 0; }
    }
    InlineView$1.prototype.children = none$1$1;
    const MaxJoinLen$1 = 256;
    class TextView$1 extends InlineView$1 {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType != 3)
                return false;
            this.createDOM(dom);
            return true;
        }
        merge(from, to, source) {
            if (source && (!(source instanceof TextView$1) || this.length - (to - from) + source.length > MaxJoinLen$1))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        slice(from) {
            return new TextView$1(this.text.slice(from));
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos$1(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords$1(this.dom, pos, side, this.length);
        }
    }
    class MarkView$1 extends InlineView$1 {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        createDOM() {
            let dom = document.createElement(this.mark.tagName);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            this.setDOM(dom);
        }
        sync(track) {
            if (!this.dom)
                this.createDOM();
            super.sync(track);
        }
        merge(from, to, source, openStart, openEnd) {
            if (source && (!(source instanceof MarkView$1 && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeInlineChildren$1(this, from, to, source ? source.children : none$1$1, openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        slice(from) {
            return new MarkView$1(this.mark, sliceInlineChildren$1(this.children, from), this.length - from);
        }
        domAtPos(pos) {
            return inlineDOMAtPos$1(this.dom, this.children, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren$1(this, pos, side);
        }
    }
    function textCoords$1(text, pos, side, length) {
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser$1.chrome || browser$1.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else
                to++;
        }
        let range = tempRange$1();
        range.setEnd(text, to);
        range.setStart(text, from);
        let rect = range.getBoundingClientRect();
        return flatten ? flattenRect$1(rect, flatten < 0) : rect;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView$1 extends InlineView$1 {
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
        }
        static create(widget, length, side) {
            return new (widget.customView || WidgetView$1)(widget, length, side);
        }
        slice(from) { return WidgetView$1.create(this.widget, this.length - from, this.side); }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView$1) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other.length == this.length && other instanceof WidgetView$1 && other.side == this.side) {
                if (this.widget.constructor == other.widget.constructor) {
                    if (!this.widget.eq(other.widget))
                        this.markDirty(true);
                    this.widget = other.widget;
                    return true;
                }
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text.empty;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos$1.before(this.dom) : DOMPos$1.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, _side) {
            let rects = this.dom.getClientRects(), rect = null;
            for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return rect;
        }
    }
    class CompositionView$1 extends WidgetView$1 {
        domAtPos(pos) { return new DOMPos$1(this.widget.text, pos); }
        sync() { if (!this.dom)
            this.setDOM(this.widget.toDOM()); }
        localPosFromDOM(node, offset) {
            return !offset ? 0 : node.nodeType == 3 ? Math.min(offset, this.length) : this.length;
        }
        ignoreMutation() { return false; }
        get overrideDOMText() { return null; }
        coordsAt(pos, side) { return textCoords$1(this.widget.text, pos, side, this.length); }
    }
    function mergeInlineChildren$1(parent, from, to, elts, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of elts)
            dLen += view.length;
        parent.length += dLen;
        let { children } = parent;
        // Both from and to point into the same text view
        if (fromI == toI && fromOff) {
            let start = children[fromI];
            // Maybe just update that view and be done
            if (elts.length == 1 && start.merge(fromOff, toOff, elts[0], openStart, openEnd))
                return;
            if (elts.length == 0) {
                start.merge(fromOff, toOff, null, openStart, openEnd);
                return;
            }
            // Otherwise split it, so that we don't have to worry about aliasing front/end afterwards
            let after = start.slice(toOff);
            if (after.merge(0, 0, elts[elts.length - 1], 0, openEnd))
                elts[elts.length - 1] = after;
            else
                elts.push(after);
            toI++;
            openEnd = toOff = 0;
        }
        // Make sure start and end positions fall on node boundaries
        // (fromOff/toOff are no longer used after this), and that if the
        // start or end of the elts can be merged with adjacent nodes,
        // this is done
        if (toOff) {
            let end = children[toI];
            if (elts.length && end.merge(0, toOff, elts[elts.length - 1], 0, openEnd)) {
                elts.pop();
                openEnd = 0;
            }
            else {
                end.merge(0, toOff, null, 0, 0);
            }
        }
        else if (toI < children.length && elts.length &&
            children[toI].merge(0, 0, elts[elts.length - 1], 0, openEnd)) {
            elts.pop();
            openEnd = 0;
        }
        if (fromOff) {
            let start = children[fromI];
            if (elts.length && start.merge(fromOff, start.length, elts[0], openStart, 0)) {
                elts.shift();
                openStart = 0;
            }
            else {
                start.merge(fromOff, start.length, null, 0, 0);
            }
            fromI++;
        }
        else if (fromI && elts.length) {
            let end = children[fromI - 1];
            if (end.merge(end.length, end.length, elts[0], openStart, 0)) {
                elts.shift();
                openStart = 0;
            }
        }
        // Then try to merge any mergeable nodes at the start and end of
        // the changed range
        while (fromI < toI && elts.length && children[toI - 1].become(elts[elts.length - 1])) {
            elts.pop();
            toI--;
            openEnd = 0;
        }
        while (fromI < toI && elts.length && children[fromI].become(elts[0])) {
            elts.shift();
            fromI++;
            openStart = 0;
        }
        if (!elts.length && fromI && toI < children.length && openStart && openEnd &&
            children[toI].merge(0, 0, children[fromI - 1], openStart, openEnd))
            fromI--;
        // And if anything remains, splice the child array to insert the new elts
        if (elts.length || fromI != toI)
            parent.replaceChildren(fromI, toI, elts);
    }
    function sliceInlineChildren$1(children, from) {
        let result = [], off = 0;
        for (let elt of children) {
            let end = off + elt.length;
            if (end > from)
                result.push(off < from ? elt.slice(from - off) : elt);
            off = end;
        }
        return result;
    }
    function inlineDOMAtPos$1(dom, children, pos) {
        let i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (; i > 0; i--) {
            let before = children[i - 1].dom;
            if (before.parentNode == dom)
                return DOMPos$1.after(before);
        }
        return new DOMPos$1(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto$1(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView$1 && children.length &&
            (last = children[children.length - 1]) instanceof MarkView$1 && last.mark.eq(view.mark)) {
            joinInlineInto$1(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren$1(view, pos, side) {
        for (let off = 0, i = 0; i < view.children.length; i++) {
            let child = view.children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (side <= 0 || end == view.length ? end >= pos : end > pos)
                return child.coordsAt(pos - off, side);
            off = end;
        }
        return (view.dom.lastChild || view.dom).getBoundingClientRect();
    }

    function combineAttrs$1(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    function attrsEq$1(a, b) {
        if (a == b)
            return true;
        if (!a || !b)
            return false;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length != keysB.length)
            return false;
        for (let key of keysA) {
            if (keysB.indexOf(key) == -1 || a[key] !== b[key])
                return false;
        }
        return true;
    }
    function updateAttrs$1(dom, prev, attrs) {
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs))
                    dom.removeAttribute(name);
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name]))
                    dom.setAttribute(name, attrs[name]);
    }

    /// Widgets added to the content are described by subclasses of this
    /// class. This makes it possible to delay creating of the DOM
    /// structure for a widget until it is needed, and to avoid redrawing
    /// widgets even when the decorations that define them are recreated.
    /// `T` can be a type of value passed to instances of the widget type.
    class WidgetType$1 {
        /// Compare this instance to another instance of the same type.
        /// (TypeScript can't express this, but only instances of the same
        /// specific class will be passed to this method.) This is used to
        /// avoid redrawing widgets when they are replace by a new
        /// decoration of the same type. The default implementation just
        /// returns `false`, which may be wasteful.
        eq(_widget) { return false; }
        /// Update a DOM element created by a widget of the same type (but
        /// different, non-`eq` content) to reflect this widget. May return
        /// true to indicate that it could update, false to indicate it
        /// couldn't (in which case the widget will be redrawn). The default
        /// implementation just returns false.
        updateDOM(_dom) { return false; }
        /// @internal
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /// The estimated height this widget will have, to be used when
        /// estimating the height of content that hasn't been drawn. May
        /// return -1 to indicate you don't know. The default implementation
        /// returns -1.
        get estimatedHeight() { return -1; }
        /// Can be used to configure which kinds of events inside the widget
        /// should be ignored by the editor. The default is to ignore all
        /// events.
        ignoreEvent(_event) { return true; }
        //// @internal
        get customView() { return null; }
    }
    /// The different types of blocks that can occur in an editor view.
    var BlockType$1;
    (function (BlockType) {
        /// A line of text.
        BlockType[BlockType["Text"] = 0] = "Text";
        /// A block widget associated with the position after it.
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /// A block widget associated with the position before it.
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /// A block widget [replacing](#view.Decoration^replace) a range of content.
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    })(BlockType$1 || (BlockType$1 = {}));
    /// A decoration provides information on how to draw or style a piece
    /// of content. You'll usually use it wrapped in a
    /// [`Range`](#rangeset.Range), which adds a start and end position.
    class Decoration$1 extends RangeValue {
        /// @internal
        constructor(
        /// @internal
        startSide, 
        /// @internal
        endSide, 
        /// @internal
        widget, 
        /// The config object used to create this decoration.
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /// @internal
        get heightRelevant() { return false; }
        /// Create a mark decoration, which influences the styling of the
        /// content in its range. Nested mark decorations will cause nested
        /// DOM elements to be created. Nesting order is determined by
        /// precedence of the [facet](#view.EditorView^decorations) or
        /// (below the facet-provided decorations) [view
        /// plugin](#view.ViewPlugin.decorations). Such elements are broken
        /// on line boundaries and on the boundaries of higher-precedence
        /// decorations.
        static mark(spec) {
            return new MarkDecoration$1(spec);
        }
        /// Create a widget decoration, which adds an element at the given
        /// position.
        static widget(spec) {
            let side = spec.side || 0;
            if (spec.block)
                side += (200000000 /* BigBlock */ + 1) * (side > 0 ? 1 : -1);
            return new PointDecoration$1(spec, side, side, !!spec.block, spec.widget || null, false);
        }
        /// Create a replace decoration which replaces the given range with
        /// a widget, or simply hides it.
        static replace(spec) {
            let block = !!spec.block;
            let { start, end } = getInclusive$1(spec);
            let startSide = block ? -200000000 /* BigBlock */ * (start ? 2 : 1) : 100000000 /* BigInline */ * (start ? -1 : 1);
            let endSide = block ? 200000000 /* BigBlock */ * (end ? 2 : 1) : 100000000 /* BigInline */ * (end ? 1 : -1);
            return new PointDecoration$1(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /// Create a line decoration, which can add DOM attributes to the
        /// line starting at the given position.
        static line(spec) {
            return new LineDecoration$1(spec);
        }
        /// Build a [`DecorationSet`](#view.DecorationSet) from the given
        /// decorated range or ranges.
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /// @internal
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    }
    /// The empty set of decorations.
    Decoration$1.none = RangeSet.empty;
    class MarkDecoration$1 extends Decoration$1 {
        constructor(spec) {
            let { start, end } = getInclusive$1(spec);
            super(100000000 /* BigInline */ * (start ? -1 : 1), 100000000 /* BigInline */ * (end ? 1 : -1), null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            return this == other ||
                other instanceof MarkDecoration$1 &&
                    this.tagName == other.tagName &&
                    this.class == other.class &&
                    attrsEq$1(this.attrs, other.attrs);
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration$1.prototype.point = false;
    class LineDecoration$1 extends Decoration$1 {
        constructor(spec) {
            super(-100000000 /* BigInline */, -100000000 /* BigInline */, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration$1 && attrsEq$1(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration$1.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration$1.prototype.point = true;
    class PointDecoration$1 extends Decoration$1 {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide < 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide < this.endSide ? BlockType$1.WidgetRange
                : this.startSide < 0 ? BlockType$1.WidgetBefore : BlockType$1.WidgetAfter;
        }
        get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
        eq(other) {
            return other instanceof PointDecoration$1 &&
                widgetsEq$1(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide < 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration$1.prototype.point = true;
    function getInclusive$1(spec) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start || false, end: end || false };
    }
    function widgetsEq$1(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    const MinRangeGap$1 = 4;
    function addRange$1(from, to, ranges) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + MinRangeGap$1 > from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }

    const theme$1 = Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme$1 = Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID$1 = StyleModule$1.newName();
    function expandThemeClasses$1(sel) {
        return sel.replace(/\$\w[\w\.]*/g, cls => {
            let parts = cls.slice(1).split("."), result = "";
            for (let i = 1; i <= parts.length; i++)
                result += ".cm-" + parts.slice(0, i).join("-");
            return result;
        });
    }
    function buildTheme$1(main, spec) {
        return new StyleModule$1(spec, {
            process(sel) {
                sel = expandThemeClasses$1(sel);
                return /\$/.test(sel) ? sel.replace(/\$/, main) : main + " " + sel;
            },
            extend(template, sel) {
                template = expandThemeClasses$1(template);
                return sel.slice(0, main.length + 1) == main + " "
                    ? main + " " + template.replace(/&/, sel.slice(main.length + 1))
                    : template.replace(/&/, sel);
            }
        });
    }
    /// Create a set of CSS class names for the given theme class, which
    /// can be added to a DOM element within an editor to make themes able
    /// to style it. Theme classes can be single words or words separated
    /// by dot characters. In the latter case, the returned classes
    /// combine those that match the full name and those that match some
    /// prefix—for example `"panel.search"` will match both the theme
    /// styles specified as `"panel.search"` and those with just
    /// `"panel"`. More specific theme classes (with more dots) take
    /// precedence over less specific ones.
    function themeClass$1(selector) {
        if (selector.indexOf(".") < 0)
            return "cm-" + selector;
        let parts = selector.split("."), result = "";
        for (let i = 1; i <= parts.length; i++)
            result += (result ? " " : "") + "cm-" + parts.slice(0, i).join("-");
        return result;
    }
    const baseTheme$1 = buildTheme$1("." + baseThemeID$1, {
        $: {
            position: "relative !important",
            boxSizing: "border-box",
            "&$focused": {
                // FIXME it would be great if we could directly use the browser's
                // default focus outline, but it appears we can't, so this tries to
                // approximate that
                outline_fallback: "1px dotted #212121",
                outline: "5px auto -webkit-focus-ring-color"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        $scroller: {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0
        },
        $content: {
            margin: 0,
            flexGrow: 2,
            minHeight: "100%",
            display: "block",
            whiteSpace: "pre",
            boxSizing: "border-box",
            padding: "4px 0",
            outline: "none"
        },
        "$$light $content": { caretColor: "black" },
        "$$dark $content": { caretColor: "white" },
        $line: {
            display: "block",
            padding: "0 2px 0 4px"
        },
        $selectionLayer: {
            zIndex: -1,
            contain: "size style"
        },
        $selectionBackground: {
            position: "absolute",
        },
        "$$light $selectionBackground": {
            background: "#d9d9d9"
        },
        "$$dark $selectionBackground": {
            background: "#222"
        },
        "$$focused$light $selectionBackground": {
            background: "#d7d4f0"
        },
        "$$focused$dark $selectionBackground": {
            background: "#233"
        },
        $cursorLayer: {
            zIndex: 100,
            contain: "size style",
            pointerEvents: "none"
        },
        "$$focused $cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        $cursor: {
            position: "absolute",
            borderLeft: "1.2px solid #bbb",
            marginLeft: "-0.6px",
            pointerEvents: "none"
        },
        "$$dark $cursor": {
            borderLeftColor: "#444"
        },
        "$$focused $cursor": {
            borderLeft: "1.2px solid black",
        },
        $placeholder: {
            color: "#888",
            display: "inline-block"
        },
        $button: {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "3px"
        },
        "$$light $button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "$$dark $button": {
            backgroundImage: "linear-gradient(#555, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        $textfield: {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "$$light $textfield": {
            backgroundColor: "white"
        },
        "$$dark $textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    });

    const LineClass$1 = themeClass$1("line");
    class LineView$1 extends ContentView$1 {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, takeDeco, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView$1))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (takeDeco)
                this.setDeco(source ? source.attrs : null);
            mergeInlineChildren$1(this, from, to, source ? source.children : none$2$1, openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView$1;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].slice(off), 0);
                this.children[i].merge(off, this.children[i].length, null, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0) {
                this.children[i - 1].parent = null;
                i--;
            }
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq$1(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        // Only called when building a line view in ContentBuilder
        append(child, openStart) {
            joinInlineInto$1(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes;
            if (attrs)
                this.attrs = combineAttrs$1(attrs, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos$1(this.dom, this.children, pos);
        }
        // FIXME might need another hack to work around Firefox's behavior
        // of not actually displaying the cursor even though it's there in
        // the DOM
        sync(track) {
            if (!this.dom) {
                this.setDOM(document.createElement("div"));
                this.dom.className = LineClass$1;
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs$1(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add(LineClass$1);
                this.prevAttrs = undefined;
            }
            super.sync(track);
            let last = this.dom.lastChild;
            if (!last || (last.nodeName != "BR" && (ContentView$1.get(last) instanceof WidgetView$1))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0;
            for (let child of this.children) {
                if (!(child instanceof TextView$1))
                    return null;
                let rects = clientRectsFor$1(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
            }
            return { lineHeight: this.dom.getBoundingClientRect().height, charWidth: totalWidth / this.length };
        }
        coordsAt(pos, side) {
            return coordsInChildren$1(this, pos, side);
        }
        match(_other) { return false; }
        get type() { return BlockType$1.Text; }
        static find(docView, pos) {
            for (let i = 0, off = 0;; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView$1)
                        return block;
                    if (block.length)
                        return null;
                }
                off = end + block.breakAfter;
            }
        }
    }
    const none$2$1 = [];
    class BlockWidgetView$1 extends ContentView$1 {
        constructor(widget, length, type) {
            super();
            this.widget = widget;
            this.length = length;
            this.type = type;
            this.breakAfter = 0;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView$1) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos$1.before(this.dom) : DOMPos$1.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            return new BlockWidgetView$1(this.widget, len, this.type);
        }
        get children() { return none$2$1; }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() { return null; }
        match(other) {
            if (other instanceof BlockWidgetView$1 && other.type == this.type &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.eq(this.widget))
                    this.markDirty(true);
                this.widget = other.widget;
                this.length = other.length;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
    }

    class ContentBuilder$1 {
        constructor(doc, pos, end) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !last.breakAfter && !(last instanceof BlockWidgetView$1 && last.type == BlockType$1.WidgetBefore);
        }
        getLine() {
            if (!this.curLine)
                this.content.push(this.curLine = new LineView$1);
            return this.curLine;
        }
        addWidget(view) {
            this.curLine = null;
            this.content.push(view);
        }
        finish() {
            if (!this.posCovered())
                this.getLine();
        }
        wrapMarks(view, active) {
            for (let i = active.length - 1; i >= 0; i--)
                view = new MarkView$1(active[i], [view], view.length);
            return view;
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.curLine = null;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length);
                this.getLine().append(this.wrapMarks(new TextView$1(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                length -= take;
                this.textOff += take;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart) {
            let len = to - from;
            if (deco instanceof PointDecoration$1) {
                if (deco.block) {
                    let { type } = deco;
                    if (type == BlockType$1.WidgetAfter && !this.posCovered())
                        this.getLine();
                    this.addWidget(new BlockWidgetView$1(deco.widget || new NullWidget$1("div"), len, type));
                }
                else {
                    let widget = this.wrapMarks(WidgetView$1.create(deco.widget || new NullWidget$1("span"), len, deco.startSide), active);
                    this.getLine().append(widget, openStart);
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations) {
            let builder = new ContentBuilder$1(text, from, to);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish();
            return builder;
        }
    }
    class NullWidget$1 extends WidgetType$1 {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
    }

    /// Used to indicate [text direction](#view.EditorView.textDirection).
    var Direction$1;
    (function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        Direction[Direction["LTR"] = 0] = "LTR";
        Direction[Direction["RTL"] = 1] = "RTL";
    })(Direction$1 || (Direction$1 = {}));
    const LTR$1 = Direction$1.LTR, RTL$1 = Direction$1.RTL;
    // Decode a string with each type encoded as log2(type)
    function dec$1(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes$1 = dec$1("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes$1 = dec$1("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    function charType$1(ch) {
        return ch <= 0xf7 ? LowTypes$1[ch] :
            0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes$1[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ :
                        0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ :
                            ch == 0x200c ? 256 /* NI */ : 1 /* L */;
    }
    const BidiRE$1 = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
    class BidiSpan$1 {
        constructor(from, to, level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        get dir() { return this.level % 2 ? RTL$1 : LTR$1; }
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    // Reused array of character types
    const types$1 = [];
    function computeOrder$1(line, direction) {
        let len = line.length, outerType = direction == LTR$1 ? 1 /* L */ : 2 /* R */;
        if (!line || outerType == 1 /* L */ && !BidiRE$1.test(line))
            return trivialOrder$1(len);
        // W1. Examine each non-spacing mark (NSM) in the level run, and
        // change the type of the NSM to the type of the previous
        // character. If the NSM is at the start of the level run, it will
        // get the type of sor.
        // W2. Search backwards from each instance of a European number
        // until the first strong type (R, L, AL, or sor) is found. If an
        // AL is found, change the type of the European number to Arabic
        // number.
        // W3. Change all ALs to R.
        // (Left after this: L, R, EN, AN, ET, CS, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = charType$1(line.charCodeAt(i));
            if (type == 512 /* NSM */)
                type = prev;
            else if (type == 8 /* EN */ && prevStrong == 4 /* AL */)
                type = 16 /* AN */;
            types$1[i] = type == 4 /* AL */ ? 2 /* R */ : type;
            if (type & 7 /* Strong */)
                prevStrong = type;
            prev = type;
        }
        // W5. A sequence of European terminators adjacent to European
        // numbers changes to all European numbers.
        // W6. Otherwise, separators and terminators change to Other
        // Neutral.
        // W7. Search backwards from each instance of a European number
        // until the first strong type (R, L, or sor) is found. If an L is
        // found, then change the type of the European number to L.
        // (Left after this: L, R, EN+AN, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = types$1[i];
            if (type == 128 /* CS */) {
                if (i < len - 1 && prev == types$1[i + 1] && (prev & 24 /* Num */))
                    type = types$1[i] = prev;
                else
                    types$1[i] = 256 /* NI */;
            }
            else if (type == 64 /* ET */) {
                let end = i + 1;
                while (end < len && types$1[end] == 64 /* ET */)
                    end++;
                let replace = (i && prev == 8 /* EN */) || (end < len && types$1[end] == 8 /* EN */) ? (prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */) : 256 /* NI */;
                for (let j = i; j < end; j++)
                    types$1[j] = replace;
                i = end - 1;
            }
            else if (type == 8 /* EN */ && prevStrong == 1 /* L */) {
                types$1[i] = 1 /* L */;
            }
            prev = type;
            if (type & 7 /* Strong */)
                prevStrong = type;
        }
        // N1. A sequence of neutrals takes the direction of the
        // surrounding strong text if the text on both sides has the same
        // direction. European and Arabic numbers act as if they were R in
        // terms of their influence on neutrals. Start-of-level-run (sor)
        // and end-of-level-run (eor) are used at level run boundaries.
        // N2. Any remaining neutrals take the embedding direction.
        // (Left after this: L, R, EN+AN)
        for (let i = 0; i < len; i++) {
            if (types$1[i] == 256 /* NI */) {
                let end = i + 1;
                while (end < len && types$1[end] == 256 /* NI */)
                    end++;
                let beforeL = (i ? types$1[i - 1] : outerType) == 1 /* L */;
                let afterL = (end < len ? types$1[end] : outerType) == 1 /* L */;
                let replace = beforeL == afterL ? (beforeL ? 1 /* L */ : 2 /* R */) : outerType;
                for (let j = i; j < end; j++)
                    types$1[j] = replace;
                i = end - 1;
            }
        }
        // Here we depart from the documented algorithm, in order to avoid
        // building up an actual levels array. Since there are only three
        // levels (0, 1, 2) in an implementation that doesn't take
        // explicit embedding into account, we can build up the order on
        // the fly, without following the level-based algorithm.
        let order = [];
        if (outerType == 1 /* L */) {
            for (let i = 0; i < len;) {
                let start = i, rtl = types$1[i++] != 1 /* L */;
                while (i < len && rtl == (types$1[i] != 1 /* L */))
                    i++;
                if (rtl) {
                    for (let j = i; j > start;) {
                        let end = j, l = types$1[--j] != 2 /* R */;
                        while (j > start && l == (types$1[j - 1] != 2 /* R */))
                            j--;
                        order.push(new BidiSpan$1(j, end, l ? 2 : 1));
                    }
                }
                else {
                    order.push(new BidiSpan$1(start, i, 0));
                }
            }
        }
        else {
            for (let i = 0; i < len;) {
                let start = i, rtl = types$1[i++] == 2 /* R */;
                while (i < len && rtl == (types$1[i] == 2 /* R */))
                    i++;
                order.push(new BidiSpan$1(start, i, rtl ? 1 : 2));
            }
        }
        return order;
    }
    function trivialOrder$1(length) {
        return [new BidiSpan$1(0, length, 0)];
    }
    let movedOver$1 = "";
    function moveVisually$1(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from, spanI = -1;
        if (startIndex == 0) {
            if (!forward || !line.length)
                return null;
            if (order[0].level != dir) {
                startIndex = order[0].side(false, dir);
                spanI = 0;
            }
        }
        else if (startIndex == line.length) {
            if (forward)
                return null;
            let last = order[order.length - 1];
            if (last.level != dir) {
                startIndex = last.side(true, dir);
                spanI = order.length - 1;
            }
        }
        if (spanI < 0)
            spanI = BidiSpan$1.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI];
        // End of span. (But not end of line--that was checked for above.)
        if (startIndex == span.side(forward, dir)) {
            span = order[spanI += forward ? 1 : -1];
            startIndex = span.side(!forward, dir);
        }
        let indexForward = forward == (span.dir == dir);
        let nextIndex = line.findClusterBreak(startIndex, indexForward);
        movedOver$1 = line.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir))
            return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir)
            return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, 0, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, 0, span.level);
    }

    const wrappingWhiteSpace$1 = ["pre-wrap", "normal", "pre-line"];
    class HeightOracle$1 {
        constructor() {
            this.doc = Text.empty;
            this.lineWrapping = false;
            this.direction = Direction$1.LTR;
            this.heightSamples = {};
            this.lineHeight = 14;
            this.charWidth = 7;
            this.lineLength = 30;
            // Used to track, during updateHeight, if any actual heights changed
            this.heightChanged = false;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefresh(lineHeights, whiteSpace, direction) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight || (wrappingWhiteSpace$1.indexOf(whiteSpace) > -1) != this.lineWrapping || this.direction != direction;
        }
        refresh(whiteSpace, direction, lineHeight, charWidth, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace$1.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) ||
                this.lineWrapping != lineWrapping ||
                this.direction != direction;
            this.lineWrapping = lineWrapping;
            this.direction = direction;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights$1 {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /// Record used to represent information about a block-level element
    /// in the editor view.
    class BlockInfo$1 {
        /// @internal
        constructor(
        /// The start of the element in the document.
        from, 
        /// The length of the element.
        length, 
        /// The top position of the element.
        top, 
        /// Its height.
        height, 
        /// The type of element this is. When querying lines, this may be
        /// an array of all the blocks that make up the line.
        type) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this.type = type;
        }
        /// The end of the element as a document position.
        get to() { return this.from + this.length; }
        /// The bottom position of the element.
        get bottom() { return this.top + this.height; }
        /// @internal
        join(other) {
            let detail = (Array.isArray(this.type) ? this.type : [this])
                .concat(Array.isArray(other.type) ? other.type : [other]);
            return new BlockInfo$1(this.from, this.length + other.length, this.top, this.height + other.height, detail);
        }
    }
    var QueryType$1;
    (function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    })(QueryType$1 || (QueryType$1 = {}));
    const Epsilon$1 = 1e-4;
    class HeightMap$1 {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = 2 /* Outdated */) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & 2 /* Outdated */) > 0; }
        set outdated(value) { this.flags = (value ? 2 /* Outdated */ : 0) | (this.flags & ~2 /* Outdated */); }
        setHeight(oracle, height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon$1)
                    oracle.heightChanged = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap$1.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder$1.build(oracle, decorations, fromB, toB);
                me = me.replace(fromA, toA, nodes);
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText$1(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch$1(HeightMap$1.of(nodes.slice(0, i)), brk, HeightMap$1.of(nodes.slice(j)));
        }
    }
    HeightMap$1.prototype.size = 1;
    class HeightMapBlock$1 extends HeightMap$1 {
        constructor(length, height, type) {
            super(length, height);
            this.type = type;
        }
        blockAt(_height, _doc, top, offset) {
            return new BlockInfo$1(offset, this.length, top, this.height, this.type);
        }
        lineAt(_value, _type, doc, top, offset) {
            return this.blockAt(0, doc, top, offset);
        }
        forEachLine(_from, _to, doc, top, offset, f) {
            f(this.blockAt(0, doc, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText$1 extends HeightMapBlock$1 {
        constructor(length, height) {
            super(length, height, BlockType$1.Text);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText$1 || node instanceof HeightMapGap$1 && (node.flags & 4 /* SingleLine */)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap$1)
                    node = new HeightMapText$1(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap$1.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap$1 extends HeightMap$1 {
        constructor(length) { super(length, 0); }
        lines(doc, offset) {
            let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;
            return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
        }
        blockAt(height, doc, top, offset) {
            let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
            let { from, length } = doc.line(firstLine + line);
            return new BlockInfo$1(from, length, top + lineHeight * line, lineHeight, BlockType$1.Text);
        }
        lineAt(value, type, doc, top, offset) {
            if (type == QueryType$1.ByHeight)
                return this.blockAt(value, doc, top, offset);
            if (type == QueryType$1.ByPosNoHeight) {
                let { from, to } = doc.lineAt(value);
                return new BlockInfo$1(from, to - from, 0, 0, BlockType$1.Text);
            }
            let { firstLine, lineHeight } = this.lines(doc, offset);
            let { from, length, number } = doc.lineAt(value);
            return new BlockInfo$1(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType$1.Text);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let { firstLine, lineHeight } = this.lines(doc, offset);
            for (let pos = from; pos < to;) {
                let line = doc.lineAt(pos);
                if (pos == from)
                    top += lineHeight * (line.number - firstLine);
                f(new BlockInfo$1(line.from, line.length, top, top += lineHeight, BlockType$1.Text));
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap$1)
                    nodes[nodes.length - 1] = new HeightMapGap$1(last.length + after);
                else
                    nodes.push(null, new HeightMapGap$1(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap$1)
                    nodes[0] = new HeightMapGap$1(from + first.length);
                else
                    nodes.unshift(new HeightMapGap$1(from - 1), null);
            }
            return HeightMap$1.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap$1(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap$1(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from);
                if (measured.from > offset)
                    nodes.push(new HeightMapGap$1(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let line = new HeightMapText$1(len, measured.heights[measured.index++]);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap$1(end - pos).updateHeight(oracle, pos));
                oracle.heightChanged = true;
                return HeightMap$1.of(nodes);
            }
            else if (force || this.outdated) {
                this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch$1 extends HeightMap$1 {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & 1 /* Break */; }
        blockAt(height, doc, top, offset) {
            let mid = top + this.left.height;
            return height < mid || this.right.height == 0 ? this.left.blockAt(height, doc, top, offset)
                : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, doc, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType$1.ByHeight ? value < rightTop || this.right.height == 0 : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, doc, top, offset)
                : this.right.lineAt(value, type, doc, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, doc, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType$1.ByPos, doc, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps$1(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps$1(result, right);
            }
            return HeightMap$1.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap$1.of(this.break ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps$1(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap$1 &&
            (after = nodes[around + 1]) instanceof HeightMapGap$1)
            nodes.splice(around - 1, 3, new HeightMapGap$1(before.length + 1 + after.length));
    }
    const relevantWidgetHeight$1 = 5;
    class NodeBuilder$1 {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText$1)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText$1(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? Math.max(0, deco.widget.estimatedHeight) : 0;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock$1(len, height, deco.type));
                }
                else if (len || height >= relevantWidgetHeight$1) {
                    this.addLineDeco(height, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText$1(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap$1(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= 4 /* SingleLine */;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText$1)
                return last;
            let line = new HeightMapText$1(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            this.enterLine();
            if (block.type == BlockType$1.WidgetAfter && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (block.type != BlockType$1.WidgetBefore)
                this.covering = block;
        }
        addLineDeco(height, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText$1) && !this.isCovered)
                this.nodes.push(new HeightMapText$1(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText$1)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder$1(from, oracle);
            RangeSet.spans(decorations, from, to, builder);
            return builder.finish(from);
        }
        get minPointSize() { return 0; }
    }
    function heightRelevantDecoChanges$1(a, b, diff) {
        let comp = new DecorationComparator$2();
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }
    class DecorationComparator$2 {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange$1(from, to, this.changes);
        }
        get minPointSize() { return 0; }
    }

    const none$3$1 = [];
    const clickAddsSelectionRange$1 = Facet.define();
    const dragMovesSelection$2 = Facet.define();
    const mouseSelectionStyle$1 = Facet.define();
    const exceptionSink$1 = Facet.define();
    const updateListener$1 = Facet.define();
    const inputHandler$1 = Facet.define();
    /// Log or report an unhandled exception in client code. Should
    /// probably only be used by extension code that allows client code to
    /// provide functions, and calls those functions in a context where an
    /// exception can't be propagated to calling code in a reasonable way
    /// (for example when in an event handler).
    ///
    /// Either calls a handler registered with
    /// [`EditorView.exceptionSink`](#view.EditorView^exceptionSink),
    /// `window.onerror`, if defined, or `console.error` (in which case
    /// it'll pass `context`, when given, as first argument).
    function logException$1(state, exception, context) {
        let handler = state.facet(exceptionSink$1);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror)
            window.onerror(String(exception), context, undefined, undefined, exception);
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable$1 = Facet.define({ combine: values => values.length ? values[0] : true });
    /// Used to [declare](#view.PluginSpec.provide) which
    /// [fields](#view.PluginValue) a [view plugin](#view.ViewPlugin)
    /// provides.
    class PluginFieldProvider$1 {
        /// @internal
        constructor(
        /// @internal
        field, 
        /// @internal
        get) {
            this.field = field;
            this.get = get;
        }
    }
    /// Plugin fields are a mechanism for allowing plugins to provide
    /// values that can be retrieved through the
    /// [`pluginField`](#view.EditorView.pluginField) view method.
    class PluginField$1 {
        from(get) {
            return new PluginFieldProvider$1(this, get);
        }
        /// Define a new plugin field.
        static define() { return new PluginField$1(); }
    }
    /// Plugins can provide additional scroll margins (space around the
    /// sides of the scrolling element that should be considered
    /// invisible) through this field. This can be useful when the
    /// plugin introduces elements that cover part of that element (for
    /// example a horizontally fixed gutter).
    PluginField$1.scrollMargins = PluginField$1.define();
    let nextPluginID$1 = 0;
    const viewPlugin$1 = Facet.define();
    /// View plugins associate stateful values with a view. They can
    /// influence the way the content is drawn, and are notified of things
    /// that happen in the view.
    class ViewPlugin$1 {
        constructor(
        /// @internal
        id, 
        /// @internal
        create, 
        /// @internal
        fields) {
            this.id = id;
            this.create = create;
            this.fields = fields;
            this.extension = viewPlugin$1.of(this);
        }
        /// Define a plugin from a constructor function that creates the
        /// plugin's value, given an editor view.
        static define(create, spec) {
            let { eventHandlers, provide, decorations } = spec || {};
            let fields = [];
            if (provide)
                for (let provider of Array.isArray(provide) ? provide : [provide])
                    fields.push(provider);
            if (eventHandlers)
                fields.push(domEventHandlers$1.from((value) => ({ plugin: value, handlers: eventHandlers })));
            if (decorations)
                for (let get of Array.isArray(decorations) ? decorations : [decorations])
                    fields.push(pluginDecorations$1.from(get));
            return new ViewPlugin$1(nextPluginID$1++, create, fields);
        }
        /// Create a plugin for a class whose constructor takes a single
        /// editor view as argument.
        static fromClass(cls, spec) {
            return ViewPlugin$1.define(view => new cls(view), spec);
        }
    }
    // FIXME somehow ensure that no replacing decorations end up in here
    const pluginDecorations$1 = PluginField$1.define();
    const domEventHandlers$1 = PluginField$1.define();
    class PluginInstance$1 {
        constructor(value, spec) {
            this.value = value;
            this.spec = spec;
        }
        static create(spec, view) {
            let value;
            try {
                value = spec.create(view);
            }
            catch (e) {
                logException$1(view.state, e, "CodeMirror plugin crashed");
                return PluginInstance$1.dummy;
            }
            return new PluginInstance$1(value, spec);
        }
        takeField(type, target) {
            for (let { field, get } of this.spec.fields)
                if (field == type)
                    target.push(get(this.value));
        }
        update(update) {
            if (!this.value.update)
                return this;
            try {
                this.value.update(update);
                return this;
            }
            catch (e) {
                logException$1(update.state, e, "CodeMirror plugin crashed");
                if (this.value.destroy)
                    try {
                        this.value.destroy();
                    }
                    catch (_) { }
                return PluginInstance$1.dummy;
            }
        }
        destroy(view) {
            if (this.value.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException$1(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
    }
    PluginInstance$1.dummy = new PluginInstance$1({}, ViewPlugin$1.define(() => ({})));
    const editorAttributes$1 = Facet.define({
        combine: values => values.reduce((a, b) => combineAttrs$1(b, a), {})
    });
    const contentAttributes$1 = Facet.define({
        combine: values => values.reduce((a, b) => combineAttrs$1(b, a), {})
    });
    // Provide decorations
    const decorations$1 = Facet.define();
    const styleModule$1 = Facet.define();
    class ChangedRange$1 {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange$1(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange$1(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange$1(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /// View [plugins](#view.ViewPlugin) are given instances of this
    /// class, which describe what happened, whenever the view is updated.
    class ViewUpdate$1 {
        /// @internal
        constructor(
        /// The editor view that the update is associated with.
        view, 
        /// The new editor state.
        state, 
        /// The transactions involved in the update. May be empty.
        transactions = none$3$1) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /// @internal
            this.flags = 0;
            this.prevState = view.state;
            this.changes = ChangeSet.empty(this.prevState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange$1(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                view.inputState.notifiedFocused = focus;
                this.flags != 1 /* Focus */;
            }
            if (this.docChanged)
                this.flags |= 2 /* Height */;
        }
        /// Tells you whether the viewport changed in this update.
        get viewportChanged() {
            return (this.flags & 4 /* Viewport */) > 0;
        }
        /// Indicates whether the line height in the editor changed in this update.
        get heightChanged() {
            return (this.flags & 2 /* Height */) > 0;
        }
        /// Returns true when the document changed or the size of the editor
        /// or the lines or characters within it has changed.
        get geometryChanged() {
            return this.docChanged || (this.flags & (16 /* Geometry */ | 2 /* Height */)) > 0;
        }
        /// True when this update indicates a focus change.
        get focusChanged() {
            return (this.flags & 1 /* Focus */) > 0;
        }
        /// Whether the document changed in this update.
        get docChanged() {
            return this.transactions.some(tr => tr.docChanged);
        }
        /// Whether the selection was explicitly set in this update.
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /// @internal
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }

    function visiblePixelRange$1(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);
        for (let parent = dom.parentNode; parent;) { // (Cast to any because TypeScript is useless with Node types)
            if (parent.nodeType == 1) {
                if ((parent.scrollHeight > parent.clientHeight || parent.scrollWidth > parent.clientWidth) &&
                    window.getComputedStyle(parent).overflow != "visible") {
                    let parentRect = parent.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = Math.min(bottom, parentRect.bottom);
                }
                parent = parent.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: right - rect.left,
            top: top - (rect.top + paddingTop), bottom: bottom - (rect.top + paddingTop) };
    }
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap$1 {
        constructor(from, to, size) {
            this.from = from;
            this.to = to;
            this.size = size;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(wrapping) {
            return Decoration$1.replace({ widget: new LineGapWidget$1(this.size, wrapping) }).range(this.from, this.to);
        }
    }
    class LineGapWidget$1 extends WidgetType$1 {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    class ViewState$1 {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0;
            this.paddingBottom = 0;
            this.contentWidth = 0;
            this.heightOracle = new HeightOracle$1;
            this.heightMap = HeightMap$1.empty();
            this.scrollTo = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be signficant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            this.heightMap = this.heightMap.applyChanges(state.facet(decorations$1), Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange$1(0, 0, 0, state.doc.length)]);
            this.viewport = this.getViewport(0, null);
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration$1.set(this.lineGaps.map(gap => gap.draw(false)));
            this.computeVisibleRanges();
        }
        update(update, scrollTo = null) {
            let prev = this.state;
            this.state = update.state;
            let newDeco = this.state.facet(decorations$1);
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange$1.extendWithRanges(contentChanges, heightRelevantDecoChanges$1(update.prevState.facet(decorations$1), newDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            this.heightMap = this.heightMap.applyChanges(newDeco, prev.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight)
                update.flags |= 2 /* Height */;
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTo && (scrollTo.head < viewport.from || scrollTo.head > viewport.to) || !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTo);
            if (!viewport.eq(this.viewport)) {
                this.viewport = viewport;
                update.flags |= 4 /* Viewport */;
            }
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */)
                update.flags |= this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            this.computeVisibleRanges();
            if (scrollTo)
                this.scrollTo = scrollTo;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.primary.empty && update.state.selection.primary.assoc)
                this.mustEnforceCursorAssoc = true;
        }
        measure(docView, repeated) {
            let dom = docView.dom, whiteSpace = "", direction = Direction$1.LTR;
            if (!repeated) {
                // Vertical padding
                let style = window.getComputedStyle(dom);
                whiteSpace = style.whiteSpace, direction = (style.direction == "rtl" ? Direction$1.RTL : Direction$1.LTR);
                this.paddingTop = parseInt(style.paddingTop) || 0;
                this.paddingBottom = parseInt(style.paddingBottom) || 0;
            }
            // Pixel viewport
            let pixelViewport = this.printing ? { top: -1e8, bottom: 1e8, left: -1e8, right: 1e8 } : visiblePixelRange$1(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            this.inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (!this.inView)
                return 0;
            let lineHeights = docView.measureVisibleLineHeights();
            let refresh = false, bias = 0, result = 0, oracle = this.heightOracle;
            if (!repeated) {
                let contentWidth = docView.dom.clientWidth;
                if (oracle.mustRefresh(lineHeights, whiteSpace, direction) ||
                    oracle.lineWrapping && Math.abs(contentWidth - this.contentWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth } = docView.measureTextSize();
                    refresh = oracle.refresh(whiteSpace, direction, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        docView.minWidth = 0;
                        result |= 16 /* Geometry */;
                    }
                }
                if (this.contentWidth != contentWidth) {
                    this.contentWidth = contentWidth;
                    result |= 16 /* Geometry */;
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
            }
            oracle.heightChanged = false;
            this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights$1(this.viewport.from, lineHeights));
            if (oracle.heightChanged)
                result |= 2 /* Height */;
            if (!this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTo && (this.scrollTo.head < this.viewport.from || this.scrollTo.head > this.viewport.to)) {
                this.viewport = this.getViewport(bias, this.scrollTo);
                result |= 4 /* Viewport */;
            }
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */)
                result |= this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
            this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                docView.enforceCursorAssoc();
            }
            return result;
        }
        getViewport(bias, scrollTo) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));
            let map = this.heightMap, doc = this.state.doc, { top, bottom } = this.pixelViewport;
            let viewport = new Viewport$1(map.lineAt(top - marginTop * 1000 /* Margin */, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(bottom + (1 - marginTop) * 1000 /* Margin */, QueryType$1.ByHeight, doc, 0, 0).to);
            // If scrollTo is given, make sure the viewport includes that position
            if (scrollTo) {
                if (scrollTo.head < viewport.from) {
                    let { top: newTop } = map.lineAt(scrollTo.head, QueryType$1.ByPos, doc, 0, 0);
                    viewport = new Viewport$1(map.lineAt(newTop - 1000 /* Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(newTop + (bottom - top) + 1000 /* Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).to);
                }
                else if (scrollTo.head > viewport.to) {
                    let { bottom: newBottom } = map.lineAt(scrollTo.head, QueryType$1.ByPos, doc, 0, 0);
                    viewport = new Viewport$1(map.lineAt(newBottom - (bottom - top) - 1000 /* Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(newBottom + 1000 /* Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport$1(this.heightMap.lineAt(from, QueryType$1.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.state.doc, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            let { top } = this.heightMap.lineAt(from, QueryType$1.ByPos, this.state.doc, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType$1.ByPos, this.state.doc, 0, 0);
            return (from == 0 || top <= this.pixelViewport.top - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) &&
                (to == this.state.doc.length ||
                    bottom >= this.pixelViewport.bottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) &&
                (top > this.pixelViewport.top - 2 * 1000 /* Margin */ && bottom < this.pixelViewport.bottom + 2 * 1000 /* Margin */);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap$1(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current) {
            let gaps = [];
            // This won't work at all in predominantly right-to-left text.
            if (this.heightOracle.direction != Direction$1.LTR)
                return gaps;
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, line => {
                if (line.length < 10000 /* Margin */)
                    return;
                let structure = lineStructure$1(line.from, line.to, this.state);
                if (structure.total < 10000 /* Margin */)
                    return;
                let viewFrom, viewTo;
                if (this.heightOracle.lineWrapping) {
                    if (line.from != this.viewport.from)
                        viewFrom = line.from;
                    else
                        viewFrom = findPosition$1(structure, (this.pixelViewport.top - line.top) / line.height);
                    if (line.to != this.viewport.to)
                        viewTo = line.to;
                    else
                        viewTo = findPosition$1(structure, (this.pixelViewport.bottom - line.top) / line.height);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    viewFrom = findPosition$1(structure, this.pixelViewport.left / totalWidth);
                    viewTo = findPosition$1(structure, this.pixelViewport.right / totalWidth);
                }
                let sel = this.state.selection.primary;
                // Make sure the gap doesn't cover a selection end
                if (sel.from <= viewFrom && sel.to >= line.from)
                    viewFrom = sel.from;
                if (sel.from <= line.to && sel.to >= viewTo)
                    viewTo = sel.to;
                let gapTo = viewFrom - 10000 /* Margin */, gapFrom = viewTo + 10000 /* Margin */;
                if (gapTo > line.from + 5000 /* HalfMargin */)
                    gaps.push(find$1(current, gap => gap.from == line.from && gap.to > gapTo - 5000 /* HalfMargin */ && gap.to < gapTo + 5000 /* HalfMargin */) ||
                        new LineGap$1(line.from, gapTo, this.gapSize(line, gapTo, true, structure)));
                if (gapFrom < line.to - 5000 /* HalfMargin */)
                    gaps.push(find$1(current, gap => gap.to == line.to && gap.from > gapFrom - 5000 /* HalfMargin */ &&
                        gap.from < gapFrom + 5000 /* HalfMargin */) ||
                        new LineGap$1(gapFrom, line.to, this.gapSize(line, gapFrom, false, structure)));
            });
            return gaps;
        }
        gapSize(line, pos, start, structure) {
            if (this.heightOracle.lineWrapping) {
                let height = line.height * findFraction$1(structure, pos);
                return start ? height : line.height - height;
            }
            else {
                let ratio = findFraction$1(structure, pos);
                return structure.total * this.heightOracle.charWidth * (start ? ratio : 1 - ratio);
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap$1.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration$1.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
                return 8 /* LineGaps */;
            }
            return 0;
        }
        computeVisibleRanges() {
            let deco = this.state.facet(decorations$1);
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { },
                minPointSize: 20
            });
            this.visibleRanges = ranges;
        }
        lineAt(pos, editorTop) {
            return this.heightMap.lineAt(pos, QueryType$1.ByPos, this.state.doc, editorTop + this.paddingTop, 0);
        }
        lineAtHeight(height, editorTop) {
            return this.heightMap.lineAt(height, QueryType$1.ByHeight, this.state.doc, editorTop + this.paddingTop, 0);
        }
        blockAtHeight(height, editorTop) {
            return this.heightMap.blockAt(height, this.state.doc, editorTop + this.paddingTop, 0);
        }
        forEachLine(from, to, f, editorTop) {
            return this.heightMap.forEachLine(from, to, this.state.doc, editorTop + this.paddingTop, 0, f);
        }
    }
    /// Indicates the range of the document that is in the visible
    /// viewport.
    class Viewport$1 {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
        eq(b) { return this.from == b.from && this.to == b.to; }
    }
    function lineStructure$1(from, to, state) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(state.facet(decorations$1), from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            },
            minPointSize: 20 // We're only interested in collapsed ranges of a significant size
        });
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition$1({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction$1(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function find$1(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }

    const none$4$1 = [];
    class DocView$1 extends ContentView$1 {
        constructor(view) {
            super();
            this.view = view;
            this.viewports = none$4$1;
            this.compositionDeco = Decoration$1.none;
            this.decorations = [];
            // Track a minimum width for the editor. When measuring sizes in
            // checkLayout, this is updated to point at the width of a given
            // element and its extent in the document. When a change happens in
            // that range, these are reset. That way, once we've seen a
            // line/element of a given length, we keep the editor wide enough to
            // fit at least that element, until it is changed, at which point we
            // forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.setDOM(view.contentDOM);
            this.children = [new LineView$1];
            this.children[0].setParent(this);
            this.updateInner([new ChangedRange$1(0, 0, 0, view.state.doc.length)], this.updateDeco(), 0);
        }
        get root() { return this.view.root; }
        get editorView() { return this.view; }
        get length() { return this.view.state.doc.length; }
        // Update the document view to a given state. scrollIntoView can be
        // used as a hint to compute a new viewport that includes that
        // position, if we know the editor is going to scroll that position
        // into view.
        update(update) {
            var _a;
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            if (!((_a = this.view.inputState) === null || _a === void 0 ? void 0 : _a.composing))
                this.compositionDeco = Decoration$1.none;
            else if (update.transactions.length)
                this.compositionDeco = computeCompositionDeco$1(this.view, update.changes);
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            let forceSelection = (browser$1.ie || browser$1.chrome) && !this.compositionDeco.size && update &&
                update.state.doc.lines != update.prevState.doc.lines;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco$1(prevDeco, deco, update.changes);
            changedRanges = ChangedRange$1.extendWithRanges(changedRanges, decoDiff);
            let pointerSel = update.transactions.some(tr => tr.annotation(Transaction.userEvent) == "pointerselection");
            if (this.dirty == 0 /* Not */ && changedRanges.length == 0 &&
                !(update.flags & (4 /* Viewport */ | 8 /* LineGaps */)) &&
                update.state.selection.primary.from >= this.view.viewport.from &&
                update.state.selection.primary.to <= this.view.viewport.to) {
                this.updateSelection(forceSelection, pointerSel);
                return false;
            }
            else {
                this.updateInner(changedRanges, deco, update.prevState.doc.length, forceSelection, pointerSel);
                return true;
            }
        }
        // Used both by update and checkLayout do perform the actual DOM
        // update
        updateInner(changes, deco, oldLength, forceSelection = false, pointerSel = false) {
            this.updateChildren(changes, deco, oldLength);
            this.view.observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.heightMap.height + "px";
                this.dom.style.minWidth = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser$1.chrome ? { node: getSelection$1(this.view.root).focusNode, written: false } : undefined;
                this.sync(track);
                this.dirty = 0 /* Not */;
                if (track === null || track === void 0 ? void 0 : track.written)
                    forceSelection = true;
                this.updateSelection(forceSelection, pointerSel);
                this.dom.style.height = "";
            });
        }
        updateChildren(changes, deco, oldLength) {
            let cursor = this.childCursor(oldLength);
            for (let i = changes.length - 1;; i--) {
                let next = i >= 0 ? changes[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next;
                let { content, breakAtStart, openStart, openEnd } = ContentBuilder$1.build(this.view.state.doc, fromB, toB, deco);
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                this.replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
        }
        replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd) {
            let before = this.children[fromI], last = content.length ? content[content.length - 1] : null;
            let breakAtEnd = last ? last.breakAfter : breakAtStart;
            // Change within a single line
            if (fromI == toI && !breakAtStart && !breakAtEnd && content.length < 2 &&
                before.merge(fromOff, toOff, content.length ? last : null, fromOff == 0, openStart, openEnd))
                return;
            let after = this.children[toI];
            // Make sure the end of the line after the update is preserved in `after`
            if (toOff < after.length || after.children.length && after.children[after.children.length - 1].length == 0) {
                // If we're splitting a line, separate part of the start line to
                // avoid that being mangled when updating the start line.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    content[content.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff || after.children.length && after.children[0].length == 0)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    content.push(after);
                }
            }
            else if (after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && content.length && before.merge(fromOff, before.length, content[0], false, openStart, 0)) {
                    before.breakAfter = content.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
            // Try to merge widgets on the boundaries of the replacement
            while (fromI < toI && content.length) {
                if (this.children[toI - 1].match(content[content.length - 1]))
                    toI--, content.pop();
                else if (this.children[fromI].match(content[0]))
                    fromI++, content.shift();
                else
                    break;
            }
            if (fromI < toI || content.length)
                this.replaceChildren(fromI, toI, content);
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(force = false, fromPointer = false) {
            if (!(fromPointer || this.mayControlSelection()))
                return;
            let primary = this.view.state.selection.primary;
            // FIXME need to handle the case where the selection falls inside a block range
            let anchor = this.domAtPos(primary.anchor);
            let head = this.domAtPos(primary.head);
            let domSel = getSelection$1(this.root);
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode ||
                (browser$1.gecko && primary.empty && nextToUneditable$1(domSel.focusNode, domSel.focusOffset)) ||
                !isEquivalentPosition$1(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition$1(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
                this.view.observer.ignore(() => {
                    if (primary.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser$1.gecko) {
                            let nextTo = nextToUneditable$1(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {
                                let text = nearbyTextNode$1(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);
                                if (text)
                                    anchor = new DOMPos$1(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);
                            }
                        }
                        domSel.collapse(anchor.node, anchor.offset);
                        if (primary.bidiLevel != null && domSel.cursorBidiLevel != null)
                            domSel.cursorBidiLevel = primary.bidiLevel;
                    }
                    else if (domSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        domSel.collapse(anchor.node, anchor.offset);
                        domSel.extend(head.node, head.offset);
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (primary.anchor > primary.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        domSel.removeAllRanges();
                        domSel.addRange(range);
                    }
                });
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos$1(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos$1(domSel.focusNode, domSel.focusOffset);
        }
        enforceCursorAssoc() {
            let cursor = this.view.state.selection.primary;
            let sel = getSelection$1(this.root);
            if (!cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView$1.find(this, cursor.head); // FIXME provide view-line-range finding helper
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
        }
        mayControlSelection() {
            return this.view.state.facet(editable$1) ? this.root.activeElement == this.dom : hasSelection$1(this.dom, getSelection$1(this.root));
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView$1.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView$1)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            for (let off = this.length, i = this.children.length - 1;; i--) {
                let child = this.children[i], start = off - child.breakAfter - child.length;
                if (pos >= start && child.type != BlockType$1.WidgetAfter)
                    return child.coordsAt(pos - start, side);
                off = start;
            }
        }
        measureVisibleLineHeights() {
            let result = [], { from, to } = this.view.viewState.viewport;
            let minWidth = Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    result.push(child.dom.getBoundingClientRect().height);
                    let width = child.dom.scrollWidth;
                    if (width > minWidth) {
                        this.minWidth = minWidth = width;
                        this.minWidthFrom = pos;
                        this.minWidthTo = end;
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView$1) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth;
            dummy.className = "cm-line";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor$1(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                dummy.remove();
            });
            return { lineHeight, charWidth };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor$1(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let visible = this.view.viewState.viewport, viewports = [visible];
            let { head, anchor } = this.view.state.selection.primary;
            if (head < visible.from || head > visible.to) {
                let { from, to } = this.view.viewState.lineAt(head, 0);
                viewports.push(new Viewport$1(from, to));
            }
            if (!viewports.some(({ from, to }) => anchor >= from && anchor <= to)) {
                let { from, to } = this.view.viewState.lineAt(anchor, 0);
                viewports.push(new Viewport$1(from, to));
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            let deco = [];
            for (let pos = 0, i = 0;; i++) {
                let next = i == viewports.length ? null : viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = this.view.viewState.lineAt(end, 0).bottom - this.view.viewState.lineAt(pos, 0).top;
                    deco.push(Decoration$1.replace({ widget: new BlockGapWidget$1(height), block: true, inclusive: true }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration$1.set(deco);
        }
        updateDeco() {
            return this.decorations = [
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco,
                this.compositionDeco,
                ...this.view.state.facet(decorations$1),
                ...this.view.pluginField(pluginDecorations$1)
            ];
        }
        scrollPosIntoView(pos, side) {
            let rect = this.coordsAt(pos, side);
            if (!rect)
                return;
            let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
            for (let margins of this.view.pluginField(PluginField$1.scrollMargins))
                if (margins) {
                    let { left, right, top, bottom } = margins;
                    if (left != null)
                        mLeft = Math.max(mLeft, left);
                    if (right != null)
                        mRight = Math.max(mRight, right);
                    if (top != null)
                        mTop = Math.max(mTop, top);
                    if (bottom != null)
                        mBottom = Math.max(mBottom, bottom);
                }
            scrollRectIntoView$1(this.dom, {
                left: rect.left - mLeft, top: rect.top - mTop,
                right: rect.right + mRight, bottom: rect.bottom + mBottom
            });
        }
    }
    // Browsers appear to reserve a fixed amount of bits for height
    // styles, and ignore or clip heights above that. For Chrome and
    // Firefox, this is in the 20 million range, so we try to stay below
    // that.
    const MaxNodeHeight$1 = 1e7;
    class BlockGapWidget$1 extends WidgetType$1 {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            if (this.height < MaxNodeHeight$1) {
                while (elt.lastChild)
                    elt.lastChild.remove();
                elt.style.height = this.height + "px";
            }
            else {
                elt.style.height = "";
                for (let remaining = this.height; remaining > 0; remaining -= MaxNodeHeight$1) {
                    let fill = elt.appendChild(document.createElement("div"));
                    fill.style.height = Math.min(remaining, MaxNodeHeight$1) + "px";
                }
            }
            return true;
        }
        get estimatedHeight() { return this.height; }
    }
    function computeCompositionDeco$1(view, changes) {
        let sel = getSelection$1(view.root);
        let textNode = sel.focusNode && nearbyTextNode$1(sel.focusNode, sel.focusOffset, 0);
        if (!textNode)
            return Decoration$1.none;
        let cView = view.docView.nearest(textNode);
        let from, to, topNode = textNode;
        if (cView instanceof InlineView$1) {
            while (cView.parent instanceof InlineView$1)
                cView = cView.parent;
            from = cView.posAtStart;
            to = from + cView.length;
            topNode = cView.dom;
        }
        else if (cView instanceof LineView$1) {
            while (topNode.parentNode != cView.dom)
                topNode = topNode.parentNode;
            let prev = topNode.previousSibling;
            while (prev && !ContentView$1.get(prev))
                prev = prev.previousSibling;
            from = to = prev ? ContentView$1.get(prev).posAtEnd : cView.posAtStart;
        }
        else {
            return Decoration$1.none;
        }
        let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
        let text = textNode.nodeValue, { state } = view;
        if (newTo - newFrom < text.length) {
            if (state.sliceDoc(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text)
                newTo = newFrom + text.length;
            else if (state.sliceDoc(Math.max(0, newTo - text.length), newTo) == text)
                newFrom = newTo - text.length;
            else
                return Decoration$1.none;
        }
        else if (state.sliceDoc(newFrom, newTo) != text) {
            return Decoration$1.none;
        }
        return Decoration$1.set(Decoration$1.replace({ widget: new CompositionWidget$1(topNode, textNode) }).range(newFrom, newTo));
    }
    class CompositionWidget$1 extends WidgetType$1 {
        constructor(top, text) {
            super();
            this.top = top;
            this.text = text;
        }
        eq(other) { return this.top == other.top && this.text == other.text; }
        toDOM() { return this.top; }
        ignoreEvent() { return false; }
        get customView() { return CompositionView$1; }
    }
    function nearbyTextNode$1(node, offset, side) {
        for (;;) {
            if (node.nodeType == 3)
                return node;
            if (node.nodeType == 1 && offset > 0 && side <= 0) {
                node = node.childNodes[offset - 1];
                offset = maxOffset$1(node);
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
                node = node.childNodes[offset];
                offset = 0;
            }
            else {
                return null;
            }
        }
    }
    function nextToUneditable$1(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* Before */ : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* After */ : 0);
    }
    class DecorationComparator$1$1 {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange$1(from, to, this.changes); }
        comparePoint(from, to) { addRange$1(from, to, this.changes); }
    }
    function findChangedDeco$1(a, b, diff) {
        let comp = new DecorationComparator$1$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }

    function groupAt$1(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = line.findClusterBreak(linePos, false);
        else
            to = line.findClusterBreak(linePos, true);
        let cat = categorize(line.slice(from, to));
        while (from > 0) {
            let prev = line.findClusterBreak(from, false);
            if (categorize(line.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = line.findClusterBreak(to, true);
            if (categorize(line.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    // FIXME holding arrow-up/down at the end of the viewport is a rather
    // common use case that will repeatedly trigger this code. Maybe
    // introduce some element of binary search after all?
    function getdx$1(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy$1(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap$1(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop$1(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot$1(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords$1(parent, x, y) {
        let closest, closestRect, closestX, closestY;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor$1(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap$1(closestRect, rect))
                    rect = upTop$1(upBot$1(rect, closestRect.bottom), closestRect.top);
                let dx = getdx$1(x, rect), dy = getdy$1(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText$1(child, x, y) : domPosAtCoords$1(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap$1(aboveRect, rect)) {
                    aboveRect = upBot$1(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap$1(belowRect, rect)) {
                    belowRect = upTop$1(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText$1(closest, clipX, y);
        if (!closestX && closest.contentEditable == "true")
            return domPosAtCoords$1(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText$1(node, x, y) {
        let len = node.nodeValue.length, range = tempRange$1();
        for (let i = 0; i < len; i++) {
            range.setEnd(node, i + 1);
            range.setStart(node, i);
            let rects = range.getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (rect.left - 1 <= x && rect.right + 1 >= x &&
                    rect.top - 1 <= y && rect.bottom + 1 >= y) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser$1.chrome || browser$1.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        range.setEnd(node, i);
                        let rectBefore = range.getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    return { node, offset: i + (after ? 1 : 0) };
                }
            }
        }
        return { node, offset: 0 };
    }
    function posAtCoords$1(view, { x, y }, bias = -1) {
        let content = view.contentDOM.getBoundingClientRect(), block;
        let halfLine = view.defaultLineHeight / 2;
        for (let bounced = false;;) {
            block = view.blockAtHeight(y, content.top);
            if (block.top > y || block.bottom < y) {
                bias = block.top > y ? -1 : 1;
                y = Math.min(block.bottom - halfLine, Math.max(block.top + halfLine, y));
                if (bounced)
                    return -1;
                else
                    bounced = true;
            }
            if (block.type == BlockType$1.Text)
                break;
            y = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        }
        let lineStart = block.from;
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : null;
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length : null;
        // Clip x to the viewport sides
        x = Math.max(content.left + 1, Math.min(content.right - 1, x));
        let root = view.root, element = root.elementFromPoint(x, y);
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && view.contentDOM.contains(element) && !(view.docView.nearest(element) instanceof WidgetView$1)) {
            if (root.caretPositionFromPoint) {
                let pos = root.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (root.caretRangeFromPoint) {
                let range = root.caretRangeFromPoint(x, y);
                if (range)
                    ({ startContainer: node, startOffset: offset } = range);
            }
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView$1.find(view.docView, lineStart);
            ({ node, offset } = domPosAtCoords$1(line.dom, x, y));
        }
        return view.docView.posFromDOM(node, offset);
    }
    function moveToLineBoundary$1(view, start, forward, includeWrap) {
        let line = view.state.doc.lineAt(start.head);
        let coords = !includeWrap || !view.lineWrapping ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let pos = view.posAtCoords({ x: forward == (view.textDirection == Direction$1.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        let lineView = LineView$1.find(view.docView, start.head);
        let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
        return EditorSelection.cursor(end, forward ? -1 : 1);
    }
    function moveByChar$1(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        for (let cur = start, check = null;;) {
            let next = moveVisually$1(line, spans, view.textDirection, cur, forward), char = movedOver$1;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = EditorSelection.cursor(forward ? line.from : line.to);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup$1(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically$1(view, start, forward, distance) {
        var _a;
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos);
        let startCoords = view.coordsAtPos(startPos);
        if (startCoords) {
            let rect = view.dom.getBoundingClientRect();
            let goal = (_a = start.goalColumn) !== null && _a !== void 0 ? _a : startCoords.left - rect.left;
            let resolvedGoal = rect.left + goal;
            let dist = distance !== null && distance !== void 0 ? distance : 5;
            for (let startY = dir < 0 ? startCoords.top : startCoords.bottom, extra = 0; extra < 50; extra += 10) {
                let pos = posAtCoords$1(view, { x: resolvedGoal, y: startY + (dist + extra) * dir }, dir);
                if (pos == null)
                    break;
                if (pos != startPos)
                    return EditorSelection.cursor(pos, undefined, undefined, goal);
            }
        }
        // Outside of the drawn viewport, use a crude column-based approach
        let { doc } = view.state, line = doc.lineAt(startPos), tabSize = view.state.tabSize;
        let goal = start.goalColumn, goalCol = 0;
        if (goal == null) {
            for (const iter = doc.iterRange(line.from, startPos); !iter.next().done;)
                goalCol = countColumn(iter.value, goalCol, tabSize);
            goal = goalCol * view.defaultCharacterWidth;
        }
        else {
            goalCol = Math.round(goal / view.defaultCharacterWidth);
        }
        if (dir < 0 && line.from == 0)
            return EditorSelection.cursor(0);
        else if (dir > 0 && line.to == doc.length)
            return EditorSelection.cursor(line.to);
        let otherLine = doc.line(line.number + dir);
        let result = otherLine.from;
        let seen = 0;
        for (const iter = doc.iterRange(otherLine.from, otherLine.to); seen >= goalCol && !iter.next().done;) {
            const { offset, leftOver } = findColumn(iter.value, seen, goalCol, tabSize);
            seen = goalCol - leftOver;
            result += offset;
        }
        return EditorSelection.cursor(result, undefined, undefined, goal);
    }

    // This will also be where dragging info and such goes
    class InputState$1 {
        constructor(view) {
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.scrollHandlers = [];
            this.registeredEvents = [];
            this.customHandlers = [];
            this.composing = false;
            this.compositionEndedAt = 0;
            this.mouseSelection = null;
            for (let type in handlers$1) {
                let handler = handlers$1[type];
                view.contentDOM.addEventListener(type, (event) => {
                    if (!eventBelongsToEditor$1(view, event) || this.ignoreDuringComposition(event))
                        return;
                    if (this.mustFlushObserver(event))
                        view.observer.forceFlush();
                    if (this.runCustomHandlers(type, view, event))
                        event.preventDefault();
                    else
                        handler(view, event);
                });
                this.registeredEvents.push(type);
            }
            // Must always run, even if a custom handler handled the event
            view.contentDOM.addEventListener("keydown", (event) => {
                view.inputState.lastKeyCode = event.keyCode;
                view.inputState.lastKeyTime = Date.now();
            });
            this.notifiedFocused = view.hasFocus;
            this.ensureHandlers(view);
        }
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        ensureHandlers(view) {
            let handlers = this.customHandlers = view.pluginField(domEventHandlers$1);
            for (let set of handlers) {
                for (let type in set.handlers)
                    if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                        this.registeredEvents.push(type);
                        view.contentDOM.addEventListener(type, (event) => {
                            if (!eventBelongsToEditor$1(view, event))
                                return;
                            if (this.runCustomHandlers(type, view, event))
                                event.preventDefault();
                        });
                    }
            }
        }
        runCustomHandlers(type, view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers[type];
                if (handler) {
                    try {
                        if (handler.call(set.plugin, event, view) || event.defaultPrevented)
                            return true;
                    }
                    catch (e) {
                        logException$1(view.state, e);
                    }
                }
            }
            return false;
        }
        runScrollHandlers(view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers.scroll;
                if (handler) {
                    try {
                        handler.call(set.plugin, event, view);
                    }
                    catch (e) {
                        logException$1(view.state, e);
                    }
                }
            }
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser$1.safari && event.timeStamp - this.compositionEndedAt < 500) {
                this.compositionEndedAt = 0;
                return true;
            }
            return false;
        }
        mustFlushObserver(event) {
            return event.type == "keydown" || event.type == "compositionend";
        }
        startMouseSelection(view, event, style) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = new MouseSelection$1(this, view, event, style);
        }
        update(update) {
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    }
    class MouseSelection$1 {
        constructor(inputState, view, startEvent, style) {
            this.inputState = inputState;
            this.view = view;
            this.startEvent = startEvent;
            this.style = style;
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange$1(view, startEvent);
            this.dragMove = dragMovesSelection$1$1(view, startEvent);
            this.dragging = isInPrimarySelection$1(view, startEvent) ? null : false;
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false) {
                startEvent.preventDefault();
                this.select(startEvent);
            }
        }
        move(event) {
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging !== false)
                return;
            this.select(event);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.startEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.inputState.mouseSelection = null;
        }
        select(event) {
            let selection = this.style.get(event, this.extend, this.multiple);
            if (!selection.eq(this.view.state.selection) || selection.primary.assoc != this.view.state.selection.primary.assoc)
                this.view.dispatch({
                    selection,
                    annotations: Transaction.userEvent.of("pointerselection"),
                    scrollIntoView: true
                });
        }
        update(update) {
            if (update.docChanged && this.dragging)
                this.dragging = this.dragging.map(update.changes);
            this.style.update(update);
        }
    }
    function addsSelectionRange$1(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange$1);
        return facet.length ? facet[0](event) : browser$1.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection$1$1(view, event) {
        let facet = view.state.facet(dragMovesSelection$2);
        return facet.length ? facet[0](event) : browser$1.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection$1(view, event) {
        let { primary } = view.state.selection;
        if (primary.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection$1(view.root);
        if (sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor$1(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView$1.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers$1 = Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI$1 = (browser$1.ie && browser$1.ie_version < 15) ||
        (browser$1.ios && browser$1.webkit_version < 604);
    function capturePaste$1(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste$1(view, target.value);
        }, 50);
    }
    function doPaste$1(view, input) {
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy$1 && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy$1 == text.toString();
        if (linewise) {
            changes = {
                changes: state.selection.ranges.map(r => state.doc.lineAt(r.from))
                    .filter((l, i, a) => i == 0 || a[i - 1] != l)
                    .map(line => ({ from: line.from, insert: (byLine ? text.line(i++).slice() : input) + state.lineBreak }))
            };
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.slice() },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            annotations: Transaction.userEvent.of("paste"),
            scrollIntoView: true
        });
    }
    function mustCapture$1(event) {
        let mods = (event.ctrlKey ? 1 /* Ctrl */ : 0) | (event.metaKey ? 8 /* Meta */ : 0) |
            (event.altKey ? 2 /* Alt */ : 0) | (event.shiftKey ? 4 /* Shift */ : 0);
        let code = event.keyCode, macCtrl = browser$1.mac && mods == 1 /* Ctrl */;
        return code == 8 || (macCtrl && code == 72) || // Backspace, Ctrl-h on Mac
            code == 46 || (macCtrl && code == 68) || // Delete, Ctrl-d on Mac
            code == 27 || // Esc
            (mods == (browser$1.mac ? 8 /* Meta */ : 1 /* Ctrl */) && // Ctrl/Cmd-[biyz]
                (code == 66 || code == 73 || code == 89 || code == 90));
    }
    handlers$1.keydown = (view, event) => {
        if (mustCapture$1(event))
            event.preventDefault();
        view.inputState.setSelectionOrigin("keyboardselection");
    };
    handlers$1.touchdown = handlers$1.touchmove = view => {
        view.inputState.setSelectionOrigin("pointerselection");
    };
    handlers$1.mousedown = (view, event) => {
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle$1)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection$1(view, event);
        if (style) {
            if (view.root.activeElement != view.contentDOM)
                view.observer.ignore(() => focusPreventScroll$1(view.contentDOM));
            view.inputState.startMouseSelection(view, event, style);
        }
    };
    function rangeForClick$1(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt$1(view.state, pos, bias);
        }
        else { // Triple click
            let line = LineView$1.find(view.docView, pos);
            if (line)
                return EditorSelection.range(line.posAtStart, line.posAtEnd);
            let { from, to } = view.state.doc.lineAt(pos);
            return EditorSelection.range(from, to);
        }
    }
    let insideY$1 = (y, rect) => y >= rect.top && y <= rect.bottom;
    let inside$1 = (x, y, rect) => insideY$1(y, rect) && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide$1(view, pos, x, y) {
        let line = LineView$1.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside$1(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside$1(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // beside it.
        return before && insideY$1(y, before) ? -1 : 1;
    }
    function queryPos$1(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY });
        if (pos == null)
            return null;
        return { pos, bias: findPositionSide$1(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail$1 = browser$1.ie && browser$1.ie_version <= 11;
    let lastMouseDown$1 = null, lastMouseDownCount$1 = 0;
    function getClickType$1(event) {
        if (!BadMouseDetail$1)
            return event.detail;
        let last = lastMouseDown$1;
        lastMouseDown$1 = event;
        return lastMouseDownCount$1 = !last || (last.timeStamp > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount$1 + 1) % 3 : 1;
    }
    function basicMouseSelection$1(view, event) {
        let start = queryPos$1(view, event), type = getClickType$1(event);
        let startSel = view.state.selection;
        let last = start, lastEvent = event;
        return {
            update(update) {
                if (update.changes) {
                    if (start)
                        start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, extend, multiple) {
                let cur;
                if (event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY)
                    cur = last;
                else {
                    cur = last = queryPos$1(view, event);
                    lastEvent = event;
                }
                if (!cur || !start)
                    return startSel;
                let range = rangeForClick$1(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick$1(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.primary.extend(range.from, range.to));
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    handlers$1.dragstart = (view, event) => {
        let { selection: { primary } } = view.state;
        let { mouseSelection } = view.inputState;
        if (mouseSelection)
            mouseSelection.dragging = primary;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", view.state.sliceDoc(primary.from, primary.to));
            event.dataTransfer.effectAllowed = "copyMove";
        }
    };
    handlers$1.drop = (view, event) => {
        if (!event.dataTransfer)
            return;
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY });
        let text = event.dataTransfer.getData("Text");
        if (dropPos == null || !text)
            return;
        event.preventDefault();
        let { mouseSelection } = view.inputState;
        let del = mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
            { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            annotations: Transaction.userEvent.of("drop")
        });
    };
    handlers$1.paste = (view, event) => {
        view.observer.flush();
        let data = brokenClipboardAPI$1 ? null : event.clipboardData;
        let text = data && data.getData("text/plain");
        if (text) {
            doPaste$1(view, text);
            event.preventDefault();
        }
        else {
            capturePaste$1(view);
        }
    };
    function captureCopy$1(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange$1(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.slice());
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: content.join(state.lineBreak), ranges, linewise };
    }
    let lastLinewiseCopy$1 = null;
    handlers$1.copy = handlers$1.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange$1(view.state);
        if (!text)
            return;
        lastLinewiseCopy$1 = linewise ? text : null;
        let data = brokenClipboardAPI$1 ? null : event.clipboardData;
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/plain", text);
        }
        else {
            captureCopy$1(view, text);
        }
        if (event.type == "cut")
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                annotations: Transaction.userEvent.of("cut")
            });
    };
    handlers$1.focus = handlers$1.blur = view => {
        setTimeout(() => {
            if (view.hasFocus != view.inputState.notifiedFocused)
                view.update([]);
        }, 10);
    };
    handlers$1.beforeprint = view => {
        view.viewState.printing = true;
        view.requestMeasure();
        setTimeout(() => {
            view.viewState.printing = false;
            view.requestMeasure();
        }, 2000);
    };
    function forceClearComposition$1(view) {
        if (view.docView.compositionDeco.size)
            view.update([]);
    }
    handlers$1.compositionstart = handlers$1.compositionupdate = view => {
        if (!view.inputState.composing) {
            if (view.docView.compositionDeco.size) {
                view.observer.flush();
                forceClearComposition$1(view);
            }
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = true;
        }
    };
    handlers$1.compositionend = view => {
        view.inputState.composing = false;
        view.inputState.compositionEndedAt = Date.now();
        setTimeout(() => {
            if (!view.inputState.composing)
                forceClearComposition$1(view);
        }, 50);
    };

    const observeOptions$1 = {
        childList: true,
        characterData: true,
        subtree: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData$1 = browser$1.ie && browser$1.ie_version <= 11;
    class DOMObserver$1 {
        constructor(view, onChange, onScrollChanged) {
            this.view = view;
            this.onChange = onChange;
            this.onScrollChanged = onScrollChanged;
            this.active = false;
            this.ignoreSelection = new DOMSelection$1;
            this.delayedFlush = -1;
            this.queue = [];
            this.scrollTargets = [];
            this.intersection = null;
            this.intersecting = false;
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM
                if (browser$1.ie && browser$1.ie_version <= 11 &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (useCharData$1)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = () => {
                if (this.view.root.activeElement != this.dom)
                    return;
                // Deletions on IE11 fire their events in the wrong order, giving
                // us a selection change event before the DOM changes are
                // reported.
                if (browser$1.ie && browser$1.ie_version <= 11 && !this.view.state.selection.primary.empty) {
                    let sel = getSelection$1(this.view.root);
                    // Selection.isCollapsed isn't reliable on IE
                    if (sel.focusNode && isEquivalentPosition$1(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                        return this.flushSoon();
                }
                this.flush();
            };
            this.start();
            this.onScroll = this.onScroll.bind(this);
            window.addEventListener("scroll", this.onScroll);
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        this.onScrollChanged(document.createEvent("Event"));
                    }
                }, {});
                this.intersection.observe(this.dom);
            }
            this.listenForScroll();
        }
        onScroll(e) {
            if (this.intersecting) {
                this.flush();
                this.onScrollChanged(e);
            }
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions$1);
            // FIXME is this shadow-root safe?
            this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
            if (useCharData$1)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
            if (useCharData$1)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        clearSelection() {
            this.ignoreSelection.set(getSelection$1(this.view.root));
        }
        // Throw away any pending changes
        clear() {
            this.observer.takeRecords();
            this.queue.length = 0;
            this.clearSelection();
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = window.setTimeout(() => { this.delayedFlush = -1; this.flush(); }, 20);
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                window.clearTimeout(this.delayedFlush);
                this.delayedFlush = -1;
                this.flush();
            }
        }
        // Apply pending changes, if any
        flush() {
            if (this.delayedFlush >= 0)
                return;
            let records = this.queue;
            for (let mut of this.observer.takeRecords())
                records.push(mut);
            if (records.length)
                this.queue = [];
            let selection = getSelection$1(this.view.root);
            let newSel = !this.ignoreSelection.eq(selection) && hasSelection$1(this.dom, selection);
            if (records.length == 0 && !newSel)
                return;
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            let startState = this.view.state;
            if (from > -1 || newSel)
                this.onChange(from, to, typeOver);
            if (this.view.state == startState) { // The view wasn't updated
                if (this.view.docView.dirty) {
                    this.ignore(() => this.view.docView.sync());
                    this.view.docView.dirty = 0 /* Not */;
                }
                this.view.docView.updateSelection();
            }
            this.clearSelection();
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty();
            if (rec.type == "childList") {
                let childBefore = findChild$1(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild$1(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else { // "characterData"
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
        }
        destroy() {
            this.stop();
            if (this.intersection)
                this.intersection.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            window.removeEventListener("scroll", this.onScroll);
            clearTimeout(this.parentCheck);
        }
    }
    function findChild$1(cView, dom, dir) {
        while (dom) {
            let curView = ContentView$1.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }

    function applyDOMChange$1(view, start, end, typeOver) {
        let change, newSel;
        let sel = view.state.selection.primary, bounds;
        if (start > -1 && (bounds = view.docView.domBoundsAround(start, end, 0))) {
            let { from, to } = bounds;
            let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints$1(view.contentDOM, view.root);
            let reader = new DOMReader$1(selPoints, view.state.lineBreak);
            reader.readRange(bounds.startDOM, bounds.endDOM);
            newSel = selectionFromPoints$1(selPoints, from);
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed
            if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff$1(view.state.sliceDoc(from, to), reader.text, preferredPos - from, preferredSide);
            if (diff)
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: view.state.toText(reader.text.slice(diff.from, diff.toB)) };
        }
        else if (view.hasFocus) {
            let domSel = getSelection$1(view.root);
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ? view.state.selection.primary.head
                : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset
                ? view.state.selection.primary.anchor
                : selectionCollapsed$1(domSel) ? head : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
            if (head != sel.head || anchor != sel.anchor)
                newSel = EditorSelection.single(anchor, head);
        }
        if (!change && !newSel)
            return;
        // Heuristic to notice typing over a selected character
        if (!change && typeOver && !sel.empty && newSel && newSel.primary.empty)
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        if (change) {
            let startState = view.state;
            // Android browsers don't fire reasonable key events for enter,
            // backspace, or delete. So this detects changes that look like
            // they're caused by those keys, and reinterprets them as key
            // events.
            if (browser$1.android &&
                ((change.from == sel.from && change.to == sel.to &&
                    change.insert.length == 1 && change.insert.lines == 2 &&
                    dispatchKey$1(view, "Enter", 10)) ||
                    (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
                        dispatchKey$1(view, "Backspace", 8)) ||
                    (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                        dispatchKey$1(view, "Delete", 46))))
                return;
            let text = change.insert.toString();
            if (view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text)))
                return;
            let tr;
            if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3) {
                let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
                let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
                tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) +
                    after));
            }
            else {
                let changes = startState.changes(change);
                tr = {
                    changes,
                    selection: newSel && !startState.selection.primary.eq(newSel.primary) && newSel.primary.to <= changes.newLength
                        ? startState.selection.replaceRange(newSel.primary) : undefined
                };
            }
            view.dispatch(tr, { scrollIntoView: true, annotations: Transaction.userEvent.of("input") });
        }
        else if (newSel && !newSel.primary.eq(sel)) {
            let scrollIntoView = false, annotations;
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "keyboardselection")
                    scrollIntoView = true;
                else
                    annotations = Transaction.userEvent.of(view.inputState.lastSelectionOrigin);
            }
            view.dispatch({ selection: newSel, scrollIntoView, annotations });
        }
    }
    function findDiff$1(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    class DOMReader$1 {
        constructor(points, lineSep) {
            this.points = points;
            this.lineSep = lineSep;
            this.text = "";
        }
        readRange(start, end) {
            if (!start)
                return;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView$1.get(cur), nextView = ContentView$1.get(next);
                if ((view ? view.breakAfter : isBlockElement$1(cur)) ||
                    ((nextView ? nextView.breakAfter : isBlockElement$1(next)) && !(cur.nodeName == "BR" && !cur.cmIgnore)))
                    this.text += this.lineSep;
                cur = next;
            }
            this.findPointBefore(parent, end);
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView$1.get(node);
            let fromView = view && view.overrideDOMText;
            let text;
            if (fromView != null)
                text = fromView.sliceString(0, undefined, this.lineSep);
            else if (node.nodeType == 3)
                text = node.nodeValue;
            else if (node.nodeName == "BR")
                text = node.nextSibling ? this.lineSep : "";
            else if (node.nodeType == 1)
                this.readRange(node.firstChild, null);
            if (text != null) {
                this.findPointIn(node, text.length);
                this.text += text;
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointIn(node, maxLen) {
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, maxLen);
        }
    }
    function isBlockElement$1(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    class DOMPoint$1 {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }
    function selectionPoints$1(dom, root) {
        let result = [];
        if (root.activeElement != dom)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = getSelection$1(root);
        if (anchorNode) {
            result.push(new DOMPoint$1(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint$1(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints$1(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }
    function dispatchKey$1(view, name, code) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        let down = new KeyboardEvent("keydown", options);
        view.contentDOM.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        view.contentDOM.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }

    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /// An editor view represents the editor's user interface. It holds
    /// the editable DOM surface, and possibly other elements such as the
    /// line number gutter. It handles events and dispatches state
    /// transactions for editing actions.
    class EditorView$1 {
        /// Construct a new view. You'll usually want to put `view.dom` into
        /// your document after creating a view, so that the user can see
        /// it.
        constructor(
        /// Configuration options.
        config = {}) {
            this.plugins = [];
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            /// @internal
            this.updateState = 2 /* Updating */;
            /// @internal
            this.measureScheduled = -1;
            /// @internal
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.className = themeClass$1("scroller");
            this.scrollDOM.appendChild(this.contentDOM);
            this.dom = document.createElement("div");
            this.dom.appendChild(this.scrollDOM);
            this._dispatch = config.dispatch || ((tr) => this.update([tr]));
            this.dispatch = this.dispatch.bind(this);
            this.root = (config.root || document);
            this.viewState = new ViewState$1(config.state || EditorState.create());
            this.plugins = this.state.facet(viewPlugin$1).map(spec => PluginInstance$1.create(spec, this));
            this.observer = new DOMObserver$1(this, (from, to, typeOver) => {
                applyDOMChange$1(this, from, to, typeOver);
            }, event => {
                this.inputState.runScrollHandlers(this, event);
                this.measure();
            });
            this.docView = new DocView$1(this);
            this.inputState = new InputState$1(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = 0 /* Idle */;
            ensureGlobalHandler$1();
            this.requestMeasure();
            if (config.parent)
                config.parent.appendChild(this.dom);
        }
        /// The current editor state.
        get state() { return this.viewState.state; }
        /// To be able to display large documents without consuming too much
        /// memory or overloading the browser, CodeMirror only draws the
        /// code that is visible (plus a margin around it) to the DOM. This
        /// property tells you the extent of the current drawn viewport, in
        /// document positions.
        get viewport() { return this.viewState.viewport; }
        /// When there are, for example, large collapsed ranges in the
        /// viewport, its size can be a lot bigger than the actual visible
        /// content. Thus, if you are doing something like styling the
        /// content in the viewport, it is preferable to only do so for
        /// these ranges, which are the subset of the viewport that is
        /// actually drawn.
        get visibleRanges() { return this.viewState.visibleRanges; }
        /// Returns false when the editor is entirely scrolled out of view
        /// or otherwise hidden.
        get inView() { return this.viewState.inView; }
        /// Indicates whether the user is currently composing text via
        /// [IME](https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide).
        get composing() { return this.inputState.composing; }
        dispatch(...input) {
            this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0]
                : this.state.update(...input));
        }
        /// Update the view for the given array of transactions. This will
        /// update the visible document and selection to match the state
        /// produced by the transactions, and notify view plugins of the
        /// change. You should usually call
        /// [`dispatch`](#view.EditorView.dispatch) instead, which uses this
        /// as a primitive.
        update(transactions) {
            if (this.updateState != 0 /* Idle */)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, update;
            this.updateState = 2 /* Updating */;
            try {
                let state = this.state;
                for (let tr of transactions) {
                    if (tr.startState != state)
                        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                    state = tr.state;
                }
                update = new ViewUpdate$1(this, state, transactions);
                let scrollTo = transactions.some(tr => tr.scrollIntoView) ? state.selection.primary : null;
                this.viewState.update(update, scrollTo);
                this.bidiCache = CachedOrder$1.update(this.bidiCache, update.changes);
                if (!update.empty)
                    this.updatePlugins(update);
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule$1) != this.styleModules)
                    this.mountStyles();
                this.updateAttrs();
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            if (redrawn || scrollTo || this.viewState.mustEnforceCursorAssoc)
                this.requestMeasure();
            for (let listener of this.state.facet(updateListener$1))
                listener(update);
        }
        /// Reset the view to the given state. (This will cause the entire
        /// document to be redrawn and all view plugins to be reinitialized,
        /// so you should probably only use it when the new state isn't
        /// derived from the old state. Otherwise, use
        /// [`update`](#view.EditorView.update) instead.)
        setState(newState) {
            if (this.updateState != 0 /* Idle */)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            this.updateState = 2 /* Updating */;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState$1(newState);
                this.plugins = newState.facet(viewPlugin$1).map(spec => PluginInstance$1.create(spec, this));
                this.docView = new DocView$1(this);
                this.inputState.ensureHandlers(this);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.prevState.facet(viewPlugin$1), specs = update.state.facet(viewPlugin$1);
            if (prevSpecs != specs) {
                let newPlugins = [], reused = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(PluginInstance$1.create(spec, this));
                    }
                    else {
                        let plugin = this.plugins[found].update(update);
                        reused.push(plugin);
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (reused.indexOf(plugin) < 0)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.inputState.ensureHandlers(this);
            }
            else {
                for (let i = 0; i < this.plugins.length; i++)
                    this.plugins[i] = this.plugins[i].update(update);
            }
        }
        /// @internal
        measure() {
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
            this.measureScheduled = -1; // Prevent requestMeasure calls from scheduling another animation frame
            let updated = null;
            try {
                for (let i = 0;; i++) {
                    this.updateState = 1 /* Measuring */;
                    let changed = this.viewState.measure(this.docView, i > 0);
                    let measuring = this.measureRequests;
                    if (!changed && !measuring.length && this.viewState.scrollTo == null)
                        break;
                    this.measureRequests = [];
                    if (i > 5) {
                        console.warn("Viewport failed to stabilize");
                        break;
                    }
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException$1(this.state, e);
                            return BadMeasure$1;
                        }
                    });
                    let update = new ViewUpdate$1(this, this.state);
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = 2 /* Updating */;
                    this.updatePlugins(update);
                    this.updateAttrs();
                    if (changed)
                        this.docView.update(update);
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure$1) {
                            try {
                                measuring[i].write(measured[i], this);
                            }
                            catch (e) {
                                logException$1(this.state, e);
                            }
                        }
                    if (this.viewState.scrollTo) {
                        this.docView.scrollPosIntoView(this.viewState.scrollTo.head, this.viewState.scrollTo.assoc);
                        this.viewState.scrollTo = null;
                    }
                    if (!(changed & 4 /* Viewport */) && this.measureRequests.length == 0)
                        break;
                }
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            this.measureScheduled = -1;
            if (updated)
                for (let listener of this.state.facet(updateListener$1))
                    listener(updated);
        }
        /// Get the CSS classes for the currently active editor themes.
        get themeClasses() {
            return baseThemeID$1 + " " +
                (this.state.facet(darkTheme$1) ? "cm-dark" : "cm-light") + " " +
                this.state.facet(theme$1);
        }
        updateAttrs() {
            let editorAttrs = combineAttrs$1(this.state.facet(editorAttributes$1), {
                class: themeClass$1("wrap") + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            updateAttrs$1(this.dom, this.editorAttrs, editorAttrs);
            this.editorAttrs = editorAttrs;
            let contentAttrs = combineAttrs$1(this.state.facet(contentAttributes$1), {
                spellcheck: "false",
                contenteditable: String(this.state.facet(editable$1)),
                class: themeClass$1("content"),
                style: `${browser$1.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            });
            updateAttrs$1(this.contentDOM, this.contentAttrs, contentAttrs);
            this.contentAttrs = contentAttrs;
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule$1);
            StyleModule$1.mount(this.root, this.styleModules.concat(baseTheme$1).reverse());
        }
        /// Find the DOM parent node and offset (child offset if `node` is
        /// an element, character offset when it is a text node) at the
        /// given document position.
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /// Find the document position at the given DOM node. Can be useful
        /// for associating positions with DOM events. Will raise an error
        /// when `node` isn't part of the editor content.
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        readMeasured() {
            if (this.updateState == 2 /* Updating */)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1)
                this.measure();
        }
        /// Make sure plugins get a chance to measure the DOM before the
        /// next frame. Calling this is preferable to messing with the DOM
        /// directly from, for example, an even handler, because it'll make
        /// sure measuring and drawing done by other components is
        /// synchronized, avoiding unnecessary DOM layout computations.
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = requestAnimationFrame(() => this.measure());
            if (request) {
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /// Collect all values provided by the active plugins for a given
        /// field.
        pluginField(field) {
            // FIXME make this error when called during plugin updating
            let result = [];
            for (let plugin of this.plugins)
                plugin.takeField(field, result);
            return result;
        }
        /// Get the value of a specific plugin, if present. Note that
        /// plugins that crash can be dropped from a view, so even when you
        /// know you registered a given plugin, it is recommended to check
        /// the return value of this method.
        plugin(plugin) {
            for (let inst of this.plugins)
                if (inst.spec == plugin)
                    return inst.value;
            return null;
        }
        /// Find the line or block widget at the given vertical position.
        /// `editorTop`, if given, provides the vertical position of the top
        /// of the editor. It defaults to the editor's screen position
        /// (which will force a DOM layout).
        blockAtHeight(height, editorTop) {
            this.readMeasured();
            return this.viewState.blockAtHeight(height, ensureTop$1(editorTop, this.contentDOM));
        }
        /// Find information for the visual line (see
        /// [`visualLineAt`](#view.EditorView.visualLineAt)) at the given
        /// vertical position. The resulting block info might hold another
        /// array of block info structs in its `type` field if this line
        /// consists of more than one block.
        ///
        /// Heights are interpreted relative to the given `editorTop`
        /// position. When not given, the top position of the editor's
        /// [content element](#view.EditorView.contentDOM) is taken.
        visualLineAtHeight(height, editorTop) {
            this.readMeasured();
            return this.viewState.lineAtHeight(height, ensureTop$1(editorTop, this.contentDOM));
        }
        /// Find the extent and height of the visual line (the content shown
        /// in the editor as a line, which may be smaller than a document
        /// line when broken up by block widgets, or bigger than a document
        /// line when line breaks are covered by replaced decorations) at
        /// the given position.
        ///
        /// Vertical positions are computed relative to the `editorTop`
        /// argument. You can pass `view.dom.getBoundingClientRect().top`
        /// here to get screen coordinates.
        visualLineAt(pos, editorTop = 0) {
            return this.viewState.lineAt(pos, editorTop);
        }
        /// Iterate over the height information of the lines in the
        /// viewport.
        viewportLines(f, editorTop) {
            let { from, to } = this.viewport;
            this.viewState.forEachLine(from, to, f, ensureTop$1(editorTop, this.contentDOM));
        }
        /// The editor's total content height.
        get contentHeight() {
            return this.viewState.heightMap.height + this.viewState.paddingTop + this.viewState.paddingBottom;
        }
        /// Move a cursor position by [grapheme
        /// cluster](#text.nextClusterBreak). `forward` determines whether
        /// the motion is away from the line start, or towards it. Motion in
        /// bidirectional text is in visual order, in the editor's [text
        /// direction](#view.EditorView.textDirection). When the start
        /// position was the last one on the line, the returned position
        /// will be across the line break. If there is no further line, the
        /// original position is returned.
        moveByChar(start, forward, by) {
            return moveByChar$1(this, start, forward, by);
        }
        /// Move a cursor position across the next group of either
        /// [letters](#state.EditorState.charCategorizer) or non-letter
        /// non-whitespace characters.
        moveByGroup(start, forward) {
            return moveByChar$1(this, start, forward, initial => byGroup$1(this, start.head, initial));
        }
        /// Move to the next line boundary in the given direction. If
        /// `includeWrap` is true, line wrapping is on, and there is a
        /// further wrap point on the current line, the wrap point will be
        /// returned. Otherwise this function will return the start or end
        /// of the line.
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary$1(this, start, forward, includeWrap);
        }
        /// Move a cursor position vertically. When `distance` isn't given,
        /// it defaults to moving to the next line (including wrapped
        /// lines). Otherwise, `distance` should provide a positive distance
        /// in pixels.
        ///
        /// When `start` has a
        /// [`goalColumn`](#state.SelectionRange.goalColumn), the vertical
        /// motion will use that as a target horizontal position. Otherwise,
        /// the cursor's own horizontal position is used. The returned
        /// cursor will have its goal column set to whichever column was
        /// used.
        moveVertically(start, forward, distance) {
            return moveVertically$1(this, start, forward, distance);
        }
        /// Scroll the given document position into view.
        scrollPosIntoView(pos) {
            this.viewState.scrollTo = EditorSelection.cursor(pos);
            this.requestMeasure();
        }
        /// Get the document position at the given screen coordinates.
        /// Returns null if no valid position could be found.
        posAtCoords(coords) {
            this.readMeasured();
            return posAtCoords$1(this, coords);
        }
        /// Get the screen coordinates at the given document position.
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan$1.find(order, pos - line.from, -1, side)];
            return flattenRect$1(rect, (span.dir == Direction$1.LTR) == (side > 0));
        }
        /// The default width of a character in the editor. May not
        /// accurately reflect the width of all characters.
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /// The default height of a line in the editor.
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /// The text direction (`direction` CSS property) of the editor.
        get textDirection() { return this.viewState.heightOracle.direction; }
        /// Whether this editor [wraps lines](#view.EditorView.lineWrapping)
        /// (as determined by the `white-space` CSS property of its content
        /// element).
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /// Returns the bidirectional text structure of the given line
        /// (which should be in the current document) as an array of span
        /// objects. The order of these spans matches the [text
        /// direction](#view.EditorView.textDirection)—if that is
        /// left-to-right, the leftmost spans come first, otherwise the
        /// rightmost spans come first.
        bidiSpans(line) {
            if (line.length > MaxBidiLine$1)
                return trivialOrder$1(line.length);
            let dir = this.textDirection;
            for (let entry of this.bidiCache)
                if (entry.from == line.from && entry.dir == dir)
                    return entry.order;
            let order = computeOrder$1(line.slice(), this.textDirection);
            this.bidiCache.push(new CachedOrder$1(line.from, line.to, dir, order));
            return order;
        }
        /// Check whether the editor has focus.
        get hasFocus() {
            return this.root.activeElement == this.contentDOM;
        }
        /// Put focus on the editor.
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll$1(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /// Clean up this editor view, removing its element from the
        /// document, unregistering event handlers, and notifying
        /// plugins. The view instance can no longer be used after
        /// calling this.
        destroy() {
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.inputState.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
        }
        /// Facet that can be used to add DOM event handlers. The value
        /// should be an object mapping event names to handler functions. The
        /// first such function to return true will be assumed to have handled
        /// that event, and no other handlers or built-in behavior will be
        /// activated for it.
        /// These are registered on the [content
        /// element](#view.EditorView.contentDOM), except for `scroll`
        /// handlers, which will be called any time the editor's [scroll
        /// element](#view.EditorView.scrollDOM) or one of its parent nodes
        /// is scrolled.
        static domEventHandlers(handlers) {
            return ViewPlugin$1.define(() => ({}), { eventHandlers: handlers });
        }
        /// Create a theme extension. The first argument can be a
        /// [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        /// style spec providing the styles for the theme. These will be
        /// prefixed with a generated class for the style.
        ///
        /// It is highly recommended you use _theme classes_, rather than
        /// regular CSS classes, in your selectors. These are prefixed with
        /// a `$` instead of a `.`, and will be expanded (as with
        /// [`themeClass`](#view.themeClass)) to one or more prefixed class
        /// names. So for example `$content` targets the editor's [content
        /// element](#view.EditorView.contentDOM).
        ///
        /// Because the selectors will be prefixed with a scope class,
        /// directly matching the editor's [wrapper
        /// element](#view.EditorView.dom), which is the element on which
        /// the scope class will be added, needs to be explicitly
        /// differentiated by adding an additional `$` to the front of the
        /// pattern. For example `$$focused $panel` will expand to something
        /// like `.[scope].cm-focused .cm-panel`.
        ///
        /// When `dark` is set to true, the theme will be marked as dark,
        /// which will add the `$dark` selector to the wrapper element (as
        /// opposed to `$light` when a light theme is active).
        static theme(spec, options) {
            let prefix = StyleModule$1.newName();
            let result = [theme$1.of(prefix), styleModule$1.of(buildTheme$1(`.${baseThemeID$1}.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme$1.of(true));
            return result;
        }
        /// Create an extension that adds styles to the base theme. The
        /// given object works much like the one passed to
        /// [`theme`](#view.EditorView^theme). You'll often want to qualify
        /// base styles with `$dark` or `$light` so they only apply when
        /// there is a dark or light theme active. For example `"$$dark
        /// $myHighlight"`.
        static baseTheme(spec) {
            return precedence(styleModule$1.of(buildTheme$1("." + baseThemeID$1, spec)), "fallback");
        }
    }
    /// Facet to add a [style
    /// module](https://github.com/marijnh/style-mod#documentation) to
    /// an editor view. The view will ensure that the module is
    /// registered in its [document
    /// root](#view.EditorView.constructor^config.root).
    EditorView$1.styleModule = styleModule$1;
    /// An input handler can be used to override the way changes to the
    /// content are handled. A handler is passed the document positions
    /// between which the change was found, and the new content. When it
    /// returns true, no further input handlers are called and the
    /// default behavior is prevented.
    EditorView$1.inputHandler = inputHandler$1;
    /// Allows you to provide a function that should be called when the
    /// library catches an exception from an extension (mostly from view
    /// plugins, but may be used by other extensions to route exceptions
    /// from user-code-provided callbacks). This is mostly useful for
    /// debugging and logging. See [`logException`](#view.logException).
    EditorView$1.exceptionSink = exceptionSink$1;
    /// A facet that can be used to have a listener function be notified
    /// every time the view updates.
    EditorView$1.updateListener = updateListener$1;
    /// Facet that controls whether the editor content is editable. When
    /// its the highest-precedence value is `false`, editing is
    /// disabled, and the content element will no longer have its
    /// `contenteditable` attribute set to `true`. (Note that this
    /// doesn't affect API calls that change the editor content, even
    /// when those are bound to keys or buttons.)
    EditorView$1.editable = editable$1;
    /// Facet used to configure whether a given selection drag event
    /// should move or copy the selection. The given predicate will be
    /// called with the `mousedown` event, and can return `true` when
    /// the drag should move the content.
    EditorView$1.dragMovesSelection = dragMovesSelection$2;
    /// Facet used to configure whether a given selecting click adds
    /// a new range to the existing selection or replaces it entirely.
    EditorView$1.clickAddsSelectionRange = clickAddsSelectionRange$1;
    /// Allows you to influence the way mouse selection happens. The
    /// functions in this facet will be called for a `mousedown` event
    /// on the editor, and can return an object that overrides the way a
    /// selection is computed from that mouse click or drag.
    EditorView$1.mouseSelectionStyle = mouseSelectionStyle$1;
    /// A facet that determines which [decorations](#view.Decoration)
    /// are shown in the view. See also [view
    /// plugins](#view.EditorView^decorations), which have a separate
    /// mechanism for providing decorations.
    EditorView$1.decorations = decorations$1;
    /// An extension that enables line wrapping in the editor.
    EditorView$1.lineWrapping = EditorView$1.theme({ $content: { whiteSpace: "pre-wrap" } });
    /// Facet that provides attributes for the editor's editable DOM
    /// element.
    EditorView$1.contentAttributes = contentAttributes$1;
    /// Facet that provides editor DOM attributes for the editor's
    /// outer element.
    EditorView$1.editorAttributes = editorAttributes$1;
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine$1 = 4096;
    function ensureTop$1(given, dom) {
        return given == null ? dom.getBoundingClientRect().top : given;
    }
    let resizeDebounce$1 = -1;
    function ensureGlobalHandler$1() {
        window.addEventListener("resize", () => {
            if (resizeDebounce$1 == -1)
                resizeDebounce$1 = setTimeout(handleResize$1, 50);
        });
    }
    function handleResize$1() {
        resizeDebounce$1 = -1;
        let found = document.querySelectorAll(".cm-content");
        for (let i = 0; i < found.length; i++) {
            let docView = ContentView$1.get(found[i]);
            if (docView)
                docView.editorView.requestMeasure();
        }
    }
    const BadMeasure$1 = {};
    class CachedOrder$1 {
        constructor(from, to, dir, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty)
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction$1.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder$1(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
            }
            return result;
        }
    }

    const currentPlatform$1 = typeof navigator == "undefined" ? "key"
        : /Mac/.test(navigator.platform) ? "mac"
            : /Win/.test(navigator.platform) ? "win"
                : /Linux|X11/.test(navigator.platform) ? "linux"
                    : "key";
    function normalizeKeyName$1(name, platform) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; ++i) {
            const mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (platform == "mac")
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function modifiers$1(name, event, shift) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    const keymaps$1 = Facet.define();
    const handleKeyEvents$1 = EditorView$1.domEventHandlers({
        keydown(event, view) {
            return runHandlers$1(view.state.facet(keymaps$1), event, view, "editor");
        }
    });
    /// Create a view extension that registers a keymap.
    ///
    /// You can add multiple keymap extensions to an editor. Their
    /// priorities determine their precedence (the ones specified early or
    /// with high priority get checked first). When a handler has returned
    /// `true` for a given key, no further handlers are called.
    ///
    /// When a key is bound multiple times (either in a single keymap or
    /// in separate maps), the bound commands all get a chance to handle
    /// the key stroke, in order of precedence, until one of them returns
    /// true.
    function keymap$1(bindings, platform) {
        return [handleKeyEvents$1, keymaps$1.of(buildKeymap$1(bindings, platform))];
    }
    /// Run the key handlers registered for a given scope. Returns true if
    /// any of them handled the event.
    function runScopeHandlers(view, event, scope) {
        return runHandlers$1(view.state.facet(keymaps$1), event, view, scope);
    }
    let storedPrefix$1 = null;
    const PrefixTimeout$1 = 4000;
    function buildKeymap$1(bindings, platform = currentPlatform$1) {
        let bound = Object.create(null);
        let isPrefix = Object.create(null);
        let checkPrefix = (name, is) => {
            let current = isPrefix[name];
            if (current == null)
                isPrefix[name] = is;
            else if (current != is)
                throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };
        let add = (scope, key, command, preventDefault) => {
            let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            let parts = key.split(/ (?!$)/).map(k => normalizeKeyName$1(k, platform));
            for (let i = 1; i < parts.length; i++) {
                let prefix = parts.slice(0, i).join(" ");
                checkPrefix(prefix, true);
                if (!scopeObj[prefix])
                    scopeObj[prefix] = {
                        preventDefault: true,
                        commands: [(view) => {
                                let ourObj = storedPrefix$1 = { view, prefix, scope };
                                setTimeout(() => { if (storedPrefix$1 == ourObj)
                                    storedPrefix$1 = null; }, PrefixTimeout$1);
                                return true;
                            }]
                    };
            }
            let full = parts.join(" ");
            checkPrefix(full, false);
            let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });
            binding.commands.push(command);
            if (preventDefault)
                binding.preventDefault = true;
        };
        for (let b of bindings) {
            let name = b[platform] || b.key;
            if (!name)
                continue;
            for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
                add(scope, name, b.run, b.preventDefault);
                if (b.shift)
                    add(scope, "Shift-" + name, b.shift, b.preventDefault);
            }
        }
        return bound;
    }
    function runHandlers$1(maps, event, view, scope) {
        let name = keyName$1(event), isChar = name.length == 1 && name != " ";
        let prefix = "";
        if (storedPrefix$1 && storedPrefix$1.view == view && storedPrefix$1.scope == scope) {
            prefix = storedPrefix$1.prefix + " ";
            storedPrefix$1 = null;
        }
        let fallthrough = !!prefix;
        let runFor = (binding) => {
            if (binding) {
                for (let cmd of binding.commands)
                    if (cmd(view))
                        return true;
                if (binding.preventDefault)
                    fallthrough = true;
            }
            return false;
        };
        for (let map of maps) {
            let scopeObj = map[scope], baseName;
            if (!scopeObj)
                continue;
            if (runFor(scopeObj[prefix + modifiers$1(name, event, !isChar)]))
                return true;
            if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&
                (baseName = base$1[event.keyCode]) && baseName != name) {
                if (runFor(scopeObj[prefix + modifiers$1(baseName, event, true)]))
                    return true;
            }
            else if (isChar && event.shiftKey) {
                if (runFor(scopeObj[prefix + modifiers$1(name, event, true)]))
                    return true;
            }
        }
        return fallthrough;
    }

    const CanHidePrimary$1 = !browser$1.ios; // FIXME test IE
    const selectionConfig$1 = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                cursorBlinkRate: 1200,
                drawRangeCursor: true
            }, {
                cursorBlinkRate: (a, b) => Math.min(a, b),
                drawRangeCursor: (a, b) => a || b
            });
        }
    });
    class Piece$1 {
        constructor(left, top, width, height, className) {
            this.left = left;
            this.top = top;
            this.width = width;
            this.height = height;
            this.className = className;
        }
        draw() {
            let elt = document.createElement("div");
            elt.className = this.className;
            elt.style.left = this.left + "px";
            elt.style.top = this.top + "px";
            if (this.width >= 0)
                elt.style.width = this.width + "px";
            elt.style.height = this.height + "px";
            return elt;
        }
        eq(p) {
            return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
                this.className == p.className;
        }
    }
    const drawSelectionPlugin$1 = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.view = view;
            this.rangePieces = [];
            this.cursors = [];
            this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };
            this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.selectionLayer.className = themeClass$1("selectionLayer");
            this.selectionLayer.setAttribute("aria-hidden", "true");
            this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.cursorLayer.className = themeClass$1("cursorLayer");
            this.cursorLayer.setAttribute("aria-hidden", "true");
            view.requestMeasure(this.measureReq);
            this.setBlinkRate();
        }
        setBlinkRate() {
            this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig$1).cursorBlinkRate + "ms";
        }
        update(update) {
            let confChanged = update.prevState.facet(selectionConfig$1) != update.state.facet(selectionConfig$1);
            if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged)
                this.view.requestMeasure(this.measureReq);
            if (update.transactions.some(tr => tr.scrollIntoView))
                this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
            if (confChanged)
                this.setBlinkRate();
        }
        readPos() {
            let { state } = this.view, conf = state.facet(selectionConfig$1);
            let rangePieces = state.selection.ranges.map(r => r.empty ? [] : measureRange$1(this.view, r)).reduce((a, b) => a.concat(b));
            let cursors = [];
            for (let r of state.selection.ranges) {
                let prim = r == state.selection.primary;
                if (r.empty ? !prim || CanHidePrimary$1 : conf.drawRangeCursor) {
                    let piece = measureCursor$1(this.view, r, prim);
                    if (piece)
                        cursors.push(piece);
                }
            }
            return { rangePieces, cursors };
        }
        drawSel({ rangePieces, cursors }) {
            if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {
                this.selectionLayer.textContent = "";
                for (let p of rangePieces)
                    this.selectionLayer.appendChild(p.draw());
                this.rangePieces = rangePieces;
            }
            if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {
                this.cursorLayer.textContent = "";
                for (let c of cursors)
                    this.cursorLayer.appendChild(c.draw());
                this.cursors = cursors;
            }
        }
        destroy() {
            this.selectionLayer.remove();
            this.cursorLayer.remove();
        }
    });
    const themeSpec$1 = {
        $content: {
            "& ::selection": { backgroundColor: "transparent !important" }
        }
    };
    if (CanHidePrimary$1)
        themeSpec$1.$content.caretColor = "transparent !important";
    const hideNativeSelection$1 = precedence(EditorView$1.theme(themeSpec$1), "override");
    const selectionClass$1 = themeClass$1("selectionBackground");
    function getBase$1(view) {
        let rect = view.scrollDOM.getBoundingClientRect();
        return { left: rect.left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
    }
    function measureRange$1(view, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to)
            return [];
        let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
        let ltr = view.textDirection == Direction$1.LTR;
        let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase$1(view);
        let lineStyle = window.getComputedStyle(content.firstChild);
        let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft);
        let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
        let visualStart = view.visualLineAt(from), visualEnd = view.visualLineAt(to);
        if (visualStart.from == visualEnd.from) {
            return pieces(drawForLine(range.from, range.to));
        }
        else {
            let top = drawForLine(range.from, null);
            let bottom = drawForLine(null, range.to);
            let between = [];
            if (visualStart.to < visualEnd.from - 1)
                between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
            else if (top.bottom < bottom.top && bottom.top - top.bottom < 4)
                top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
            return pieces(top).concat(between).concat(pieces(bottom));
        }
        function piece(left, top, right, bottom) {
            return new Piece$1(left - base.left, top - base.top, right - left, bottom - top, selectionClass$1);
        }
        function pieces({ top, bottom, horizontal }) {
            let pieces = [];
            for (let i = 0; i < horizontal.length; i += 2)
                pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
            return pieces;
        }
        // Gets passed from/to in line-local positions
        function drawForLine(from, to) {
            let top = 1e9, bottom = -1e9, horizontal = [];
            function addSpan(from, fromOpen, to, toOpen, dir) {
                let fromCoords = view.coordsAtPos(from, 1), toCoords = view.coordsAtPos(to, -1);
                top = Math.min(fromCoords.top, toCoords.top, top);
                bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
                if (dir == Direction$1.LTR)
                    horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
                else
                    horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
            }
            let start = from !== null && from !== void 0 ? from : view.moveToLineBoundary(EditorSelection.cursor(to, 1), false).head;
            let end = to !== null && to !== void 0 ? to : view.moveToLineBoundary(EditorSelection.cursor(from, -1), true).head;
            // Split the range by visible range and document line
            for (let r of view.visibleRanges)
                if (r.to > start && r.from < end) {
                    for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                        let docLine = view.state.doc.lineAt(pos);
                        for (let span of view.bidiSpans(docLine)) {
                            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                            if (spanFrom >= endPos)
                                break;
                            if (spanTo > pos)
                                addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                        }
                        pos = docLine.to + 1;
                        if (pos >= endPos)
                            break;
                    }
                }
            if (horizontal.length == 0) {
                let coords = view.coordsAtPos(start, -1);
                top = Math.min(coords.top, top);
                bottom = Math.max(coords.bottom, bottom);
            }
            return { top, bottom, horizontal };
        }
    }
    const primaryCursorClass$1 = themeClass$1("cursor.primary");
    const cursorClass$1 = themeClass$1("cursor.secondary");
    function measureCursor$1(view, cursor, primary) {
        let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
        if (!pos)
            return null;
        let base = getBase$1(view);
        return new Piece$1(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? primaryCursorClass$1 : cursorClass$1);
    }

    const Specials$1 = /[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b-\u200c\u200e\u200f\u2028\u2029\ufeff\ufff9-\ufffc]/gu;
    const Names$1 = {
        0: "null",
        7: "bell",
        8: "backspace",
        10: "newline",
        11: "vertical tab",
        13: "carriage return",
        27: "escape",
        8203: "zero width space",
        8204: "zero width non-joiner",
        8205: "zero width joiner",
        8206: "left-to-right mark",
        8207: "right-to-left mark",
        8232: "line separator",
        8233: "paragraph separator",
        65279: "zero width no-break space",
        65532: "object replacement"
    };
    let _supportsTabSize$1 = null;
    function supportsTabSize$1() {
        if (_supportsTabSize$1 == null && typeof document != "undefined" && document.body) {
            let styles = document.body.style;
            _supportsTabSize$1 = (styles.tabSize || styles.MozTabSize) != null;
        }
        return _supportsTabSize$1 || false;
    }
    const UnicodeRegexpSupport$1 = /x/.unicode != null ? "gu" : "g";
    const specialCharConfig$1 = Facet.define({
        combine(configs) {
            // FIXME make configurations compose properly
            let config = combineConfig(configs, {
                render: null,
                specialChars: Specials$1,
                addSpecialChars: null
            });
            if (config.replaceTabs = !supportsTabSize$1())
                config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport$1);
            if (config.addSpecialChars)
                config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport$1);
            return config;
        }
    });
    const specialCharPlugin$1 = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.view = view;
            this.decorations = Decoration$1.none;
            this.decorationCache = Object.create(null);
            this.recompute();
        }
        update(update) {
            let confChange = update.prevState.facet(specialCharConfig$1) != update.state.facet(specialCharConfig$1);
            if (confChange)
                this.decorationCache = Object.create(null);
            if (confChange || update.changes.length || update.viewportChanged)
                this.recompute();
        }
        recompute() {
            let decorations = [];
            for (let { from, to } of this.view.visibleRanges)
                this.getDecorationsFor(from, to, decorations);
            this.decorations = Decoration$1.set(decorations);
        }
        getDecorationsFor(from, to, target) {
            let config = this.view.state.facet(specialCharConfig$1);
            let { doc } = this.view.state;
            for (let pos = from, cursor = doc.iterRange(from, to), m; !cursor.next().done;) {
                if (!cursor.lineBreak) {
                    while (m = config.specialChars.exec(cursor.value)) {
                        let code = codePointAt(m[0], 0), deco;
                        if (code == null)
                            continue;
                        if (code == 9) {
                            let line = doc.lineAt(pos + m.index);
                            let size = this.view.state.tabSize, col = countColumn(doc.sliceString(line.from, pos + m.index), 0, size);
                            deco = Decoration$1.replace({ widget: new TabWidget$1((size - (col % size)) * this.view.defaultCharacterWidth) });
                        }
                        else {
                            deco = this.decorationCache[code] ||
                                (this.decorationCache[code] = Decoration$1.replace({ widget: new SpecialCharWidget$1(config, code) }));
                        }
                        target.push(deco.range(pos + m.index, pos + m.index + m[0].length));
                    }
                }
                pos += cursor.value.length;
            }
        }
    }, {
        decorations: v => v.decorations
    });
    // Assigns placeholder characters from the Control Pictures block to
    // ASCII control characters
    function placeHolder$1(code) {
        if (code >= 32)
            return null;
        if (code == 10)
            return "\u2424";
        return String.fromCharCode(9216 + code);
    }
    const DefaultPlaceholder$1 = "\u2022";
    class SpecialCharWidget$1 extends WidgetType$1 {
        constructor(options, code) {
            super();
            this.options = options;
            this.code = code;
        }
        eq(other) { return other.code == this.code; }
        toDOM() {
            let ph = placeHolder$1(this.code) || DefaultPlaceholder$1;
            let desc = "Control character " + (Names$1[this.code] || this.code);
            let custom = this.options.render && this.options.render(this.code, desc, ph);
            if (custom)
                return custom;
            let span = document.createElement("span");
            span.textContent = ph;
            span.title = desc;
            span.setAttribute("aria-label", desc);
            span.style.color = "red";
            return span;
        }
        ignoreEvent() { return false; }
    }
    class TabWidget$1 extends WidgetType$1 {
        constructor(width) {
            super();
            this.width = width;
        }
        eq(other) { return other.width == this.width; }
        toDOM() {
            let span = document.createElement("span");
            span.textContent = "\t";
            span.className = tab$1;
            span.style.width = this.width + "px";
            return span;
        }
        ignoreEvent() { return false; }
    }
    const tab$1 = StyleModule$1.newName(), tabStyle$1 = EditorView$1.styleModule.of(new StyleModule$1({
        ["." + tab$1]: {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        }
    }));

    /// A gutter marker represents a bit of information attached to a line
    /// in a specific gutter. Your own custom markers have to extend this
    /// class.
    class GutterMarker extends RangeValue {
        /// @internal
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /// Render the DOM node for this marker, if any.
        toDOM(_view) { return null; }
        /// Create a range that places this marker at the given position.
        at(pos) { return new Range(pos, pos, this); }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    const defaults = {
        style: "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: () => RangeSet.empty,
        lineMarker: () => null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {}
    };
    const activeGutters = Facet.define();
    /// Define an editor gutter.
    function gutter(config) {
        return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];
    }
    const baseTheme$2 = EditorView$1.baseTheme({
        $gutters: {
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            left: 0
        },
        "$$light $gutters": {
            backgroundColor: "#f5f5f5",
            color: "#999",
            borderRight: "1px solid #ddd"
        },
        "$$dark $gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        $gutter: {
            display: "flex !important",
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            height: "100%",
            overflow: "hidden"
        },
        $gutterElement: {
            boxSizing: "border-box"
        },
        "$gutterElement.lineNumber": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        }
    });
    const unfixGutters = Facet.define({
        combine: values => values.some(x => x)
    });
    /// The gutter-drawing plugin is automatically enabled when you add a
    /// gutter, but you can use this function to explicitly configure it.
    ///
    /// Unless `fixed` is explicitly set to `false`, the gutters are
    /// fixed, meaning they don't scroll along with the content
    /// horizontally.
    function gutters(config) {
        let result = [
            gutterView,
            baseTheme$2
        ];
        if (config && config.fixed === false)
            result.push(unfixGutters.of(true));
        return result;
    }
    const gutterView = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.view = view;
            this.dom = document.createElement("div");
            this.dom.className = themeClass$1("gutters");
            this.dom.setAttribute("aria-hidden", "true");
            this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
            for (let gutter of this.gutters)
                this.dom.appendChild(gutter.dom);
            this.fixed = !view.state.facet(unfixGutters);
            if (this.fixed) {
                // FIXME IE11 fallback, which doesn't support position: sticky,
                // by using position: relative + event handlers that realign the
                // gutter (or just force fixed=false on IE11?)
                this.dom.style.position = "sticky";
            }
            view.scrollDOM.insertBefore(this.dom, view.contentDOM);
        }
        update(update) {
            if (!this.updateGutters(update))
                return;
            let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport));
            this.view.viewportLines(line => {
                let text;
                if (Array.isArray(line.type)) {
                    for (let b of line.type)
                        if (b.type == BlockType$1.Text) {
                            text = b;
                            break;
                        }
                }
                else {
                    text = line.type == BlockType$1.Text ? line : undefined;
                }
                if (!text)
                    return;
                for (let cx of contexts)
                    cx.line(this.view, text);
            }, 0);
            for (let cx of contexts)
                cx.finish();
            this.dom.style.minHeight = this.view.contentHeight + "px";
            if (update.state.facet(unfixGutters) != !this.fixed) {
                this.fixed = !this.fixed;
                this.dom.style.position = this.fixed ? "sticky" : "";
            }
        }
        updateGutters(update) {
            let prev = update.prevState.facet(activeGutters), cur = update.state.facet(activeGutters);
            let change = update.docChanged || update.heightChanged || update.viewportChanged;
            if (prev == cur) {
                for (let gutter of this.gutters)
                    if (gutter.update(update))
                        change = true;
            }
            else {
                change = true;
                let gutters = [];
                for (let conf of cur) {
                    let known = prev.indexOf(conf);
                    if (known < 0) {
                        gutters.push(new SingleGutterView(this.view, conf));
                    }
                    else {
                        this.gutters[known].update(update);
                        gutters.push(this.gutters[known]);
                    }
                }
                for (let g of this.gutters)
                    g.dom.remove();
                for (let g of gutters)
                    this.dom.appendChild(g.dom);
                this.gutters = gutters;
            }
            return change;
        }
        destroy() {
            this.dom.remove();
        }
    }, {
        provide: PluginField$1.scrollMargins.from(value => {
            if (value.gutters.length == 0 || !value.fixed)
                return null;
            return value.view.textDirection == Direction$1.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
        })
    });
    class UpdateContext {
        constructor(gutter, viewport) {
            this.gutter = gutter;
            this.localMarkers = [];
            this.i = 0;
            this.height = 0;
            this.cursor = RangeSet.iter(Array.isArray(gutter.markers) ? gutter.markers : [gutter.markers], viewport.from);
        }
        line(view, line) {
            if (this.localMarkers.length)
                this.localMarkers = [];
            while (this.cursor.value && this.cursor.from <= line.from) {
                if (this.cursor.from == line.from)
                    this.localMarkers.push(this.cursor.value);
                this.cursor.next();
            }
            let forLine = this.gutter.config.lineMarker(view, line, this.localMarkers);
            if (forLine)
                this.localMarkers.unshift(forLine);
            let gutter = this.gutter;
            if (this.localMarkers.length == 0 && !gutter.config.renderEmptyElements)
                return;
            let above = line.top - this.height;
            if (this.i == gutter.elements.length) {
                let newElt = new GutterElement(view, line.height, above, this.localMarkers, gutter.elementClass);
                gutter.elements.push(newElt);
                gutter.dom.appendChild(newElt.dom);
            }
            else {
                let markers = this.localMarkers, elt = gutter.elements[this.i];
                if (sameMarkers(markers, elt.markers)) {
                    markers = elt.markers;
                    this.localMarkers.length = 0;
                }
                elt.update(view, line.height, above, markers, gutter.elementClass);
            }
            this.height = line.bottom;
            this.i++;
        }
        finish() {
            let gutter = this.gutter;
            while (gutter.elements.length > this.i)
                gutter.dom.removeChild(gutter.elements.pop().dom);
        }
    }
    class SingleGutterView {
        constructor(view, config) {
            this.view = view;
            this.config = config;
            this.elements = [];
            this.spacer = null;
            this.dom = document.createElement("div");
            this.dom.className = themeClass$1("gutter" + (this.config.style ? "." + this.config.style : ""));
            this.elementClass = themeClass$1("gutterElement" + (this.config.style ? "." + this.config.style : ""));
            for (let prop in config.domEventHandlers) {
                this.dom.addEventListener(prop, (event) => {
                    let line = view.visualLineAtHeight(event.clientY, view.contentDOM.getBoundingClientRect().top);
                    if (config.domEventHandlers[prop](view, line, event))
                        event.preventDefault();
                });
            }
            this.markers = config.markers(view.state);
            if (config.initialSpacer) {
                this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)], this.elementClass);
                this.dom.appendChild(this.spacer.dom);
                this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
            }
        }
        update(update) {
            let prevMarkers = this.markers;
            this.markers = this.config.markers(update.state);
            if (this.spacer && this.config.updateSpacer) {
                let updated = this.config.updateSpacer(this.spacer.markers[0], update);
                if (updated != this.spacer.markers[0])
                    this.spacer.update(update.view, 0, 0, [updated], this.elementClass);
            }
            return this.markers != prevMarkers;
        }
    }
    class GutterElement {
        constructor(view, height, above, markers, eltClass) {
            this.height = -1;
            this.above = 0;
            this.dom = document.createElement("div");
            this.update(view, height, above, markers, eltClass);
        }
        update(view, height, above, markers, cssClass) {
            if (this.height != height)
                this.dom.style.height = (this.height = height) + "px";
            if (this.above != above)
                this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
            if (this.markers != markers) {
                this.markers = markers;
                for (let ch; ch = this.dom.lastChild;)
                    ch.remove();
                let cls = cssClass;
                for (let m of markers) {
                    let dom = m.toDOM(view);
                    if (dom)
                        this.dom.appendChild(dom);
                    let c = m.elementClass;
                    if (c)
                        cls += " " + c;
                }
                this.dom.className = cls;
            }
        }
    }
    function sameMarkers(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].compare(b[i]))
                return false;
        return true;
    }
    /// Facet used to provide markers to the line number gutter.
    const lineNumberMarkers = Facet.define();
    const lineNumberConfig = Facet.define({
        combine(values) {
            return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
                domEventHandlers(a, b) {
                    let result = Object.assign({}, a);
                    for (let event in b) {
                        let exists = result[event], add = b[event];
                        result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                    }
                    return result;
                }
            });
        }
    });
    class NumberMarker extends GutterMarker {
        constructor(number) {
            super();
            this.number = number;
        }
        eq(other) { return this.number == other.number; }
        toDOM(view) {
            let config = view.state.facet(lineNumberConfig);
            return document.createTextNode(config.formatNumber(this.number));
        }
    }
    const lineNumberGutter = gutter({
        style: "lineNumber",
        markers(state) { return state.facet(lineNumberMarkers); },
        lineMarker(view, line, others) {
            if (others.length)
                return null;
            // FIXME try to make the line number queries cheaper?
            return new NumberMarker(view.state.doc.lineAt(line.from).number);
        },
        initialSpacer(view) {
            return new NumberMarker(maxLineNumber(view.state.doc.lines));
        },
        updateSpacer(spacer, update) {
            let max = maxLineNumber(update.view.state.doc.lines);
            return max == spacer.number ? spacer : new NumberMarker(max);
        }
    });
    function maxLineNumber(lines) {
        let last = 9;
        while (last < lines)
            last = last * 10 + 9;
        return last;
    }

    function mapRange(range, mapping) {
        let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
        return from >= to ? undefined : { from, to };
    }
    const foldEffect = StateEffect.define({ map: mapRange });
    const unfoldEffect = StateEffect.define({ map: mapRange });
    function selectedLines(view) {
        let lines = [];
        for (let { head } of view.state.selection.ranges) {
            if (lines.some(l => l.from <= head && l.to >= head))
                continue;
            lines.push(view.visualLineAt(head));
        }
        return lines;
    }
    const foldState = StateField.define({
        create() {
            return Decoration$1.none;
        },
        update(folded, tr) {
            folded = folded.map(tr.changes);
            for (let e of tr.effects) {
                if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))
                    folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });
                else if (e.is(unfoldEffect)) {
                    folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
                        filterFrom: e.value.from, filterTo: e.value.to });
                }
            }
            // Clear folded ranges that cover the selection head
            if (tr.selection) {
                let onSelection = false, { head } = tr.selection.primary;
                folded.between(head, head, (a, b) => { if (a < head && b > head)
                    onSelection = true; });
                if (onSelection)
                    folded = folded.update({
                        filterFrom: head,
                        filterTo: head,
                        filter: (a, b) => b <= head || a >= head
                    });
            }
            return folded;
        },
        provide: [EditorView$1.decorations]
    });
    function foldInside(state, from, to) {
        var _a;
        let found = null;
        (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
            if (!found || found.from > from)
                found = ({ from, to });
        });
        return found;
    }
    function foldExists(folded, from, to) {
        let found = false;
        folded.between(from, from, (a, b) => { if (a == from && b == to)
            found = true; });
        return found;
    }
    function getFoldable(state, from, to) {
        return state.facet(EditorState.foldable).reduce((value, f) => value || f(state, from, to), null);
    }
    function maybeEnable(state) {
        return state.field(foldState, false) ? undefined : { append: codeFolding() };
    }
    /// Fold the lines that are selected, if possible.
    const foldCode = view => {
        for (let line of selectedLines(view)) {
            let range = getFoldable(view.state, line.from, line.to);
            if (range) {
                view.dispatch({ effects: foldEffect.of(range),
                    reconfigure: maybeEnable(view.state) });
                return true;
            }
        }
        return false;
    };
    /// Unfold folded ranges on selected lines.
    const unfoldCode = view => {
        if (!view.state.field(foldState, false))
            return false;
        let effects = [];
        for (let line of selectedLines(view)) {
            let folded = foldInside(view.state, line.from, line.to);
            if (folded)
                effects.push(unfoldEffect.of(folded));
        }
        if (effects.length)
            view.dispatch({ effects });
        return effects.length > 0;
    };
    /// Fold all top-level foldable ranges.
    const foldAll = view => {
        let { state } = view, effects = [];
        for (let pos = 0; pos < state.doc.length;) {
            let line = view.visualLineAt(pos), range = getFoldable(state, line.from, line.to);
            if (range)
                effects.push(foldEffect.of(range));
            pos = (range ? view.visualLineAt(range.to) : line).to + 1;
        }
        if (effects.length)
            view.dispatch({ effects, reconfigure: maybeEnable(view.state) });
        return !!effects.length;
    };
    /// Unfold all folded code.
    const unfoldAll = view => {
        let field = view.state.field(foldState, false);
        if (!field || !field.size)
            return false;
        let effects = [];
        field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
        view.dispatch({ effects });
        return true;
    };
    /// Default fold-related key bindings.
    ///
    ///  - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](#fold.foldCode).
    ///  - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](#fold.unfoldCode).
    ///  - Ctrl-Alt-[: [`foldAll`](#fold.foldAll).
    ///  - Ctrl-Alt-]: [`unfoldAll`](#fold.unfoldAll).
    const foldKeymap = [
        { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
        { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
        { key: "Ctrl-Alt-[", run: foldAll },
        { key: "Ctrl-Alt-]", run: unfoldAll }
    ];
    const defaultConfig = {
        placeholderDOM: null,
        placeholderText: "…"
    };
    const foldConfig = Facet.define({
        combine(values) { return combineConfig(values, defaultConfig); }
    });
    /// Create an extension that configures code folding.
    function codeFolding(config) {
        let result = [foldState, baseTheme$3];
        if (config)
            result.push(foldConfig.of(config));
        return result;
    }
    const foldWidget = Decoration$1.replace({ widget: new class extends WidgetType$1 {
            ignoreEvents() { return false; }
            toDOM(view) {
                let { state } = view, conf = state.facet(foldConfig);
                if (conf.placeholderDOM)
                    return conf.placeholderDOM();
                let element = document.createElement("span");
                element.textContent = conf.placeholderText;
                element.setAttribute("aria-label", state.phrase("folded code"));
                element.title = state.phrase("unfold");
                element.className = themeClass$1("foldPlaceholder");
                element.onclick = event => {
                    let line = view.visualLineAt(view.posAtDOM(event.target));
                    let folded = foldInside(view.state, line.from, line.to);
                    if (folded)
                        view.dispatch({ effects: unfoldEffect.of(folded) });
                    event.preventDefault();
                };
                return element;
            }
        } });
    const foldGutterDefaults = {
        openText: "⌄",
        closedText: "›"
    };
    class FoldMarker extends GutterMarker {
        constructor(config, open) {
            super();
            this.config = config;
            this.open = open;
        }
        eq(other) { return this.config == other.config && this.open == other.open; }
        toDOM(view) {
            let span = document.createElement("span");
            span.textContent = this.open ? this.config.openText : this.config.closedText;
            span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
            return span;
        }
    }
    /// Create an extension that registers a fold gutter, which shows a
    /// fold status indicator before lines which can be clicked to fold or
    /// unfold the line.
    function foldGutter(config = {}) {
        let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
        let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
        return [
            gutter({
                style: "foldGutter",
                lineMarker(view, line) {
                    // FIXME optimize this. At least don't run it for updates that
                    // don't change anything relevant
                    let folded = foldInside(view.state, line.from, line.to);
                    if (folded)
                        return canUnfold;
                    if (getFoldable(view.state, line.from, line.to))
                        return canFold;
                    return null;
                },
                initialSpacer() {
                    return new FoldMarker(fullConfig, false);
                },
                domEventHandlers: {
                    click: (view, line) => {
                        let folded = foldInside(view.state, line.from, line.to);
                        if (folded) {
                            view.dispatch({ effects: unfoldEffect.of(folded) });
                            return true;
                        }
                        let range = getFoldable(view.state, line.from, line.to);
                        if (range) {
                            view.dispatch({ effects: foldEffect.of(range) });
                            return true;
                        }
                        return false;
                    }
                }
            }),
            codeFolding()
        ];
    }
    const baseTheme$3 = EditorView$1.baseTheme({
        $foldPlaceholder: {
            backgroundColor: "#eee",
            border: "1px solid #ddd",
            color: "#888",
            borderRadius: ".2em",
            margin: "0 1px",
            padding: "0 1px",
            cursor: "pointer"
        },
        "$gutterElement.foldGutter": {
            padding: "0 1px",
            cursor: "pointer"
        }
    });

    /// A gutter marker represents a bit of information attached to a line
    /// in a specific gutter. Your own custom markers have to extend this
    /// class.
    class GutterMarker$1 extends RangeValue {
        /// @internal
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /// Render the DOM node for this marker, if any.
        toDOM(_view) { return null; }
        /// Create a range that places this marker at the given position.
        at(pos) { return new Range(pos, pos, this); }
    }
    GutterMarker$1.prototype.elementClass = "";
    GutterMarker$1.prototype.mapMode = MapMode.TrackBefore;
    const defaults$1 = {
        style: "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: () => RangeSet.empty,
        lineMarker: () => null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {}
    };
    const activeGutters$1 = Facet.define();
    /// Define an editor gutter.
    function gutter$1(config) {
        return [gutters$1(), activeGutters$1.of(Object.assign(Object.assign({}, defaults$1), config))];
    }
    const baseTheme$4 = EditorView$1.baseTheme({
        $gutters: {
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            left: 0
        },
        "$$light $gutters": {
            backgroundColor: "#f5f5f5",
            color: "#999",
            borderRight: "1px solid #ddd"
        },
        "$$dark $gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        $gutter: {
            display: "flex !important",
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            height: "100%",
            overflow: "hidden"
        },
        $gutterElement: {
            boxSizing: "border-box"
        },
        "$gutterElement.lineNumber": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        }
    });
    const unfixGutters$1 = Facet.define({
        combine: values => values.some(x => x)
    });
    /// The gutter-drawing plugin is automatically enabled when you add a
    /// gutter, but you can use this function to explicitly configure it.
    ///
    /// Unless `fixed` is explicitly set to `false`, the gutters are
    /// fixed, meaning they don't scroll along with the content
    /// horizontally.
    function gutters$1(config) {
        let result = [
            gutterView$1,
            baseTheme$4
        ];
        if (config && config.fixed === false)
            result.push(unfixGutters$1.of(true));
        return result;
    }
    const gutterView$1 = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.view = view;
            this.dom = document.createElement("div");
            this.dom.className = themeClass$1("gutters");
            this.dom.setAttribute("aria-hidden", "true");
            this.gutters = view.state.facet(activeGutters$1).map(conf => new SingleGutterView$1(view, conf));
            for (let gutter of this.gutters)
                this.dom.appendChild(gutter.dom);
            this.fixed = !view.state.facet(unfixGutters$1);
            if (this.fixed) {
                // FIXME IE11 fallback, which doesn't support position: sticky,
                // by using position: relative + event handlers that realign the
                // gutter (or just force fixed=false on IE11?)
                this.dom.style.position = "sticky";
            }
            view.scrollDOM.insertBefore(this.dom, view.contentDOM);
        }
        update(update) {
            if (!this.updateGutters(update))
                return;
            let contexts = this.gutters.map(gutter => new UpdateContext$1(gutter, this.view.viewport));
            this.view.viewportLines(line => {
                let text;
                if (Array.isArray(line.type)) {
                    for (let b of line.type)
                        if (b.type == BlockType$1.Text) {
                            text = b;
                            break;
                        }
                }
                else {
                    text = line.type == BlockType$1.Text ? line : undefined;
                }
                if (!text)
                    return;
                for (let cx of contexts)
                    cx.line(this.view, text);
            }, 0);
            for (let cx of contexts)
                cx.finish();
            this.dom.style.minHeight = this.view.contentHeight + "px";
            if (update.state.facet(unfixGutters$1) != !this.fixed) {
                this.fixed = !this.fixed;
                this.dom.style.position = this.fixed ? "sticky" : "";
            }
        }
        updateGutters(update) {
            let prev = update.prevState.facet(activeGutters$1), cur = update.state.facet(activeGutters$1);
            let change = update.docChanged || update.heightChanged || update.viewportChanged;
            if (prev == cur) {
                for (let gutter of this.gutters)
                    if (gutter.update(update))
                        change = true;
            }
            else {
                change = true;
                let gutters = [];
                for (let conf of cur) {
                    let known = prev.indexOf(conf);
                    if (known < 0) {
                        gutters.push(new SingleGutterView$1(this.view, conf));
                    }
                    else {
                        this.gutters[known].update(update);
                        gutters.push(this.gutters[known]);
                    }
                }
                for (let g of this.gutters)
                    g.dom.remove();
                for (let g of gutters)
                    this.dom.appendChild(g.dom);
                this.gutters = gutters;
            }
            return change;
        }
        destroy() {
            this.dom.remove();
        }
    }, {
        provide: PluginField$1.scrollMargins.from(value => {
            if (value.gutters.length == 0 || !value.fixed)
                return null;
            return value.view.textDirection == Direction$1.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
        })
    });
    class UpdateContext$1 {
        constructor(gutter, viewport) {
            this.gutter = gutter;
            this.localMarkers = [];
            this.i = 0;
            this.height = 0;
            this.cursor = RangeSet.iter(Array.isArray(gutter.markers) ? gutter.markers : [gutter.markers], viewport.from);
        }
        line(view, line) {
            if (this.localMarkers.length)
                this.localMarkers = [];
            while (this.cursor.value && this.cursor.from <= line.from) {
                if (this.cursor.from == line.from)
                    this.localMarkers.push(this.cursor.value);
                this.cursor.next();
            }
            let forLine = this.gutter.config.lineMarker(view, line, this.localMarkers);
            if (forLine)
                this.localMarkers.unshift(forLine);
            let gutter = this.gutter;
            if (this.localMarkers.length == 0 && !gutter.config.renderEmptyElements)
                return;
            let above = line.top - this.height;
            if (this.i == gutter.elements.length) {
                let newElt = new GutterElement$1(view, line.height, above, this.localMarkers, gutter.elementClass);
                gutter.elements.push(newElt);
                gutter.dom.appendChild(newElt.dom);
            }
            else {
                let markers = this.localMarkers, elt = gutter.elements[this.i];
                if (sameMarkers$1(markers, elt.markers)) {
                    markers = elt.markers;
                    this.localMarkers.length = 0;
                }
                elt.update(view, line.height, above, markers, gutter.elementClass);
            }
            this.height = line.bottom;
            this.i++;
        }
        finish() {
            let gutter = this.gutter;
            while (gutter.elements.length > this.i)
                gutter.dom.removeChild(gutter.elements.pop().dom);
        }
    }
    class SingleGutterView$1 {
        constructor(view, config) {
            this.view = view;
            this.config = config;
            this.elements = [];
            this.spacer = null;
            this.dom = document.createElement("div");
            this.dom.className = themeClass$1("gutter" + (this.config.style ? "." + this.config.style : ""));
            this.elementClass = themeClass$1("gutterElement" + (this.config.style ? "." + this.config.style : ""));
            for (let prop in config.domEventHandlers) {
                this.dom.addEventListener(prop, (event) => {
                    let line = view.visualLineAtHeight(event.clientY, view.contentDOM.getBoundingClientRect().top);
                    if (config.domEventHandlers[prop](view, line, event))
                        event.preventDefault();
                });
            }
            this.markers = config.markers(view.state);
            if (config.initialSpacer) {
                this.spacer = new GutterElement$1(view, 0, 0, [config.initialSpacer(view)], this.elementClass);
                this.dom.appendChild(this.spacer.dom);
                this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
            }
        }
        update(update) {
            let prevMarkers = this.markers;
            this.markers = this.config.markers(update.state);
            if (this.spacer && this.config.updateSpacer) {
                let updated = this.config.updateSpacer(this.spacer.markers[0], update);
                if (updated != this.spacer.markers[0])
                    this.spacer.update(update.view, 0, 0, [updated], this.elementClass);
            }
            return this.markers != prevMarkers;
        }
    }
    class GutterElement$1 {
        constructor(view, height, above, markers, eltClass) {
            this.height = -1;
            this.above = 0;
            this.dom = document.createElement("div");
            this.update(view, height, above, markers, eltClass);
        }
        update(view, height, above, markers, cssClass) {
            if (this.height != height)
                this.dom.style.height = (this.height = height) + "px";
            if (this.above != above)
                this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
            if (this.markers != markers) {
                this.markers = markers;
                for (let ch; ch = this.dom.lastChild;)
                    ch.remove();
                let cls = cssClass;
                for (let m of markers) {
                    let dom = m.toDOM(view);
                    if (dom)
                        this.dom.appendChild(dom);
                    let c = m.elementClass;
                    if (c)
                        cls += " " + c;
                }
                this.dom.className = cls;
            }
        }
    }
    function sameMarkers$1(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].compare(b[i]))
                return false;
        return true;
    }
    /// Facet used to provide markers to the line number gutter.
    const lineNumberMarkers$1 = Facet.define();
    const lineNumberConfig$1 = Facet.define({
        combine(values) {
            return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
                domEventHandlers(a, b) {
                    let result = Object.assign({}, a);
                    for (let event in b) {
                        let exists = result[event], add = b[event];
                        result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                    }
                    return result;
                }
            });
        }
    });
    class NumberMarker$1 extends GutterMarker$1 {
        constructor(number) {
            super();
            this.number = number;
        }
        eq(other) { return this.number == other.number; }
        toDOM(view) {
            let config = view.state.facet(lineNumberConfig$1);
            return document.createTextNode(config.formatNumber(this.number));
        }
    }
    const lineNumberGutter$1 = gutter$1({
        style: "lineNumber",
        markers(state) { return state.facet(lineNumberMarkers$1); },
        lineMarker(view, line, others) {
            if (others.length)
                return null;
            // FIXME try to make the line number queries cheaper?
            return new NumberMarker$1(view.state.doc.lineAt(line.from).number);
        },
        initialSpacer(view) {
            return new NumberMarker$1(maxLineNumber$1(view.state.doc.lines));
        },
        updateSpacer(spacer, update) {
            let max = maxLineNumber$1(update.view.state.doc.lines);
            return max == spacer.number ? spacer : new NumberMarker$1(max);
        }
    });
    /// Create a line number gutter extension. The order in which the
    /// gutters appear is determined by their extension priority.
    function lineNumbers(config = {}) {
        return [
            lineNumberConfig$1.of(config),
            lineNumberGutter$1
        ];
    }
    function maxLineNumber$1(lines) {
        let last = 9;
        while (last < lines)
            last = last * 10 + 9;
        return last;
    }

    const baseTheme$5 = EditorView$1.baseTheme({
        $matchingBracket: { color: "#0b0" },
        $nonmatchingBracket: { color: "#a22" }
    });
    const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
    const bracketMatchingConfig = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                afterCursor: true,
                brackets: DefaultBrackets,
                maxScanDistance: DefaultScanDist
            });
        }
    });
    const matchingMark = Decoration$1.mark({ class: themeClass$1("matchingBracket") }), nonmatchingMark = Decoration$1.mark({ class: themeClass$1("nonmatchingBracket") });
    const bracketMatchingState = StateField.define({
        create() { return Decoration$1.none; },
        update(deco, tr) {
            if (!tr.docChanged && !tr.selection)
                return deco;
            let decorations = [];
            let config = tr.state.facet(bracketMatchingConfig);
            for (let range of tr.state.selection.ranges) {
                if (!range.empty)
                    continue;
                let match = matchBrackets(tr.state, range.head, -1, config)
                    || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                    || (config.afterCursor &&
                        (matchBrackets(tr.state, range.head, 1, config) ||
                            (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
                if (!match)
                    continue;
                let mark = match.matched ? matchingMark : nonmatchingMark;
                decorations.push(mark.range(match.start.from, match.start.to));
                if (match.end)
                    decorations.push(mark.range(match.end.from, match.end.to));
            }
            return Decoration$1.set(decorations, true);
        },
        provide: [EditorView$1.decorations]
    });
    function matchingNodes(node, dir, brackets) {
        let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
        if (byProp)
            return byProp;
        if (node.name.length == 1) {
            let index = brackets.indexOf(node.name);
            if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
                return [brackets[index + dir]];
        }
        return null;
    }
    /// Find the matching bracket for the token at `pos`, scanning
    /// direction `dir`. Only the `brackets` and `maxScanDistance`
    /// properties are used from `config`, if given. Returns null if no
    /// bracket was found at `pos`, or a match result otherwise.
    function matchBrackets(state, pos, dir, config = {}) {
        let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
        let tree = state.tree, sub = tree.resolve(pos, dir), matches;
        if (matches = matchingNodes(sub.type, dir, brackets))
            return matchMarkedBrackets(state, pos, dir, sub, matches, brackets);
        else
            return matchPlainBrackets(state, pos, dir, tree, sub.type, maxScanDistance, brackets);
    }
    function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
        let parent = token.parent, firstToken = { from: token.from, to: token.to };
        let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor;
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
            do {
                if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                    if (depth == 0 && matching.indexOf(cursor.type.name) > -1) {
                        return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };
                    }
                    else if (matchingNodes(cursor.type, dir, brackets)) {
                        depth++;
                    }
                    else if (matchingNodes(cursor.type, -dir, brackets)) {
                        depth--;
                        if (depth == 0)
                            return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: false };
                    }
                }
            } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return { start: firstToken, matched: false };
    }
    function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
        let bracket = brackets.indexOf(startCh);
        if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
            return null;
        let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
        let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
        for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
            let text = iter.value;
            if (dir < 0)
                distance += text.length;
            let basePos = pos + distance * dir;
            for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
                let found = brackets.indexOf(text[pos]);
                if (found < 0 || tree.resolve(basePos + pos, 1).type != tokenType)
                    continue;
                if ((found % 2 == 0) == (dir > 0)) {
                    depth++;
                }
                else if (depth == 1) { // Closing
                    return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
                }
                else {
                    depth--;
                }
            }
            if (dir > 0)
                distance += text.length;
        }
        return iter.done ? { start: startToken, matched: false } : null;
    }

    function updateSel(sel, by) {
        return EditorSelection.create(sel.ranges.map(by), sel.primaryIndex);
    }
    function setSel(state, selection) {
        return state.update({ selection, scrollIntoView: true, annotations: Transaction.userEvent.of("keyboardselection") });
    }
    function moveSel({ state, dispatch }, how) {
        let selection = updateSel(state.selection, how);
        if (selection.eq(state.selection))
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    function rangeEnd(range, forward) {
        return EditorSelection.cursor(forward ? range.to : range.from);
    }
    function cursorByChar(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
    }
    /// Move the selection one character to the left (which is backward in
    /// left-to-right text, forward in right-to-left text).
    const cursorCharLeft = view => cursorByChar(view, view.textDirection != Direction$1.LTR);
    /// Move the selection one character to the right.
    const cursorCharRight = view => cursorByChar(view, view.textDirection == Direction$1.LTR);
    function cursorByGroup(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
    }
    /// Move the selection across one group of word or non-word (but also
    /// non-space) characters.
    const cursorGroupLeft = view => cursorByGroup(view, view.textDirection != Direction$1.LTR);
    /// Move the selection one group to the right.
    const cursorGroupRight = view => cursorByGroup(view, view.textDirection == Direction$1.LTR);
    /// Move the selection one group forward.
    const cursorGroupForward = view => cursorByGroup(view, true);
    /// Move the selection one group backward.
    const cursorGroupBackward = view => cursorByGroup(view, false);
    function interestingNode(state, node, bracketProp) {
        if (node.type.prop(bracketProp))
            return true;
        let len = node.to - node.from;
        return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
    }
    function moveBySyntax(state, start, forward) {
        let pos = state.tree.resolve(start.head);
        let bracketProp = forward ? NodeProp$1.closedBy : NodeProp$1.openedBy;
        // Scan forward through child nodes to see if there's an interesting
        // node ahead.
        for (let at = start.head;;) {
            let next = forward ? pos.childAfter(at) : pos.childBefore(at);
            if (!next)
                break;
            if (interestingNode(state, next, bracketProp))
                pos = next;
            else
                at = forward ? next.to : next.from;
        }
        let bracket = pos.type.prop(bracketProp), match, newPos;
        if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
            newPos = forward ? match.end.to : match.end.from;
        else
            newPos = forward ? pos.to : pos.from;
        return EditorSelection.cursor(newPos, forward ? -1 : 1);
    }
    /// Move the cursor over the next syntactic element to the left.
    const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, view.textDirection != Direction$1.LTR));
    /// Move the cursor over the next syntactic element to the right.
    const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, view.textDirection == Direction$1.LTR));
    function cursorByLine(view, forward) {
        return moveSel(view, range => range.empty ? view.moveVertically(range, forward) : rangeEnd(range, forward));
    }
    /// Move the selection one line up.
    const cursorLineUp = view => cursorByLine(view, false);
    /// Move the selection one line down.
    const cursorLineDown = view => cursorByLine(view, true);
    function cursorByPage(view, forward) {
        return moveSel(view, range => range.empty ? view.moveVertically(range, forward, view.dom.clientHeight) : rangeEnd(range, forward));
    }
    /// Move the selection one page up.
    const cursorPageUp = view => cursorByPage(view, false);
    /// Move the selection one page down.
    const cursorPageDown = view => cursorByPage(view, true);
    function moveByLineBoundary(view, start, forward) {
        let line = view.visualLineAt(start.head), moved = view.moveToLineBoundary(start, forward);
        if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
            moved = view.moveToLineBoundary(start, forward, false);
        if (!forward && moved.head == line.from && line.length) {
            let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
            if (space && start.head > line.from + space)
                moved = EditorSelection.cursor(line.from + space);
        }
        return moved;
    }
    /// Move the selection to the next line wrap point, or to the end of
    /// the line if there isn't one left on this line.
    const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
    /// Move the selection to previous line wrap point, or failing that to
    /// the start of the line.
    const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
    /// Move the selection to the start of the line.
    const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).from, 1));
    /// Move the selection to the end of the line.
    const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).to, -1));
    function toMatchingBracket(state, dispatch, extend) {
        let found = false, selection = updateSel(state.selection, range => {
            let matching = matchBrackets(state, range.head, -1)
                || matchBrackets(state, range.head, 1)
                || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
                || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
            if (!matching || !matching.end)
                return range;
            found = true;
            let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
            return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
        });
        if (!found)
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    /// Move the selection to the bracket matching the one it is currently
    /// on, if any.
    const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
    function extendSel(view, how) {
        let selection = updateSel(view.state.selection, range => {
            let head = how(range);
            return EditorSelection.range(range.anchor, head.head, head.goalColumn);
        });
        if (selection.eq(view.state.selection))
            return false;
        view.dispatch(setSel(view.state, selection));
        return true;
    }
    function selectByChar(view, forward) {
        return extendSel(view, range => view.moveByChar(range, forward));
    }
    /// Move the selection head one character to the left, while leaving
    /// the anchor in place.
    const selectCharLeft = view => selectByChar(view, view.textDirection != Direction$1.LTR);
    /// Move the selection head one character to the right.
    const selectCharRight = view => selectByChar(view, view.textDirection == Direction$1.LTR);
    function selectByGroup(view, forward) {
        return extendSel(view, range => view.moveByGroup(range, forward));
    }
    /// Move the selection head one [group](#commands.cursorGroupLeft) to
    /// the left.
    const selectGroupLeft = view => selectByGroup(view, view.textDirection != Direction$1.LTR);
    /// Move the selection head one group to the right.
    const selectGroupRight = view => selectByGroup(view, view.textDirection == Direction$1.LTR);
    /// Move the selection head one group forward.
    const selectGroupForward = view => selectByGroup(view, true);
    /// Move the selection head one group backward.
    const selectGroupBackward = view => selectByGroup(view, false);
    /// Move the selection head over the next syntactic element to the left.
    const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, view.textDirection != Direction$1.LTR));
    /// Move the selection head over the next syntactic element to the right.
    const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, view.textDirection == Direction$1.LTR));
    function selectByLine(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward));
    }
    /// Move the selection head one line up.
    const selectLineUp = view => selectByLine(view, false);
    /// Move the selection head one line down.
    const selectLineDown = view => selectByLine(view, true);
    function selectByPage(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward, view.dom.clientHeight));
    }
    /// Move the selection head one page up.
    const selectPageUp = view => selectByPage(view, false);
    /// Move the selection head one page down.
    const selectPageDown = view => selectByPage(view, true);
    /// Move the selection head to the next line boundary.
    const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
    /// Move the selection head to the previous line boundary.
    const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
    /// Move the selection head to the start of the line.
    const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).from));
    /// Move the selection head to the end of the line.
    const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).to));
    /// Move the selection to the start of the document.
    const cursorDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: 0 }));
        return true;
    };
    /// Move the selection to the end of the document.
    const cursorDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.doc.length }));
        return true;
    };
    /// Move the selection head to the start of the document.
    const selectDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.primary.anchor, head: 0 }));
        return true;
    };
    /// Move the selection head to the end of the document.
    const selectDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.primary.anchor, head: state.doc.length }));
        return true;
    };
    /// Select the entire document.
    const selectAll = ({ state, dispatch }) => {
        dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, annotations: Transaction.userEvent.of("keyboardselection") }));
        return true;
    };
    /// Expand the selection to cover entire lines.
    const selectLine = ({ state, dispatch }) => {
        let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
        dispatch(state.update({ selection: new EditorSelection(ranges), annotations: Transaction.userEvent.of("keyboardselection") }));
        return true;
    };
    /// Select the next syntactic construct that is larger than the
    /// selection. Note that this will only work insofar as the language
    /// [syntaxes](#state.EditorState^syntax) you use builds up a full
    /// syntax tree.
    const selectParentSyntax = ({ state, dispatch }) => {
        let selection = updateSel(state.selection, range => {
            var _a;
            let context = state.tree.resolve(range.head, 1);
            while (!((context.from < range.from && context.to >= range.to) ||
                (context.to > range.to && context.from <= range.from) ||
                !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
                context = context.parent;
            return EditorSelection.range(context.to, context.from);
        });
        dispatch(setSel(state, selection));
        return true;
    };
    /// Simplify the current selection. When multiple ranges are selected,
    /// reduce it to its primary range. Otherwise, if the selection is
    /// non-empty, convert it to a cursor selection.
    const simplifySelection = ({ state, dispatch }) => {
        let cur = state.selection, selection = null;
        if (cur.ranges.length > 1)
            selection = new EditorSelection([cur.primary]);
        else if (!cur.primary.empty)
            selection = new EditorSelection([EditorSelection.cursor(cur.primary.head)]);
        if (!selection)
            return false;
        dispatch(setSel(state, selection));
        return true;
    };
    function deleteBy(view, by) {
        let { state } = view, changes = state.changeByRange(range => {
            let { from, to } = range;
            if (from == to) {
                let towards = by(from);
                from = Math.min(from, towards);
                to = Math.max(to, towards);
            }
            return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
        });
        if (changes.changes.empty)
            return false;
        view.dispatch(changes, { scrollIntoView: true, annotations: Transaction.userEvent.of("delete") });
        return true;
    }
    const deleteByChar = (view, forward, codePoint) => deleteBy(view, pos => {
        let { state } = view, line = state.doc.lineAt(pos), before;
        if (!forward && pos > line.from && pos < line.from + 200 &&
            !/[^ \t]/.test(before = line.slice(0, pos - line.from))) {
            if (before[before.length - 1] == "\t")
                return pos - 1;
            let col = countColumn(before, 0, state.tabSize), drop = col % state.indentUnit || state.indentUnit;
            for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
                pos--;
            return pos;
        }
        let target;
        if (codePoint) {
            let next = line.slice(pos - line.from + (forward ? 0 : -2), pos - line.from + (forward ? 2 : 0));
            let size = next ? codePointSize(codePointAt(next, 0)) : 1;
            target = forward ? Math.min(state.doc.length, pos + size) : Math.max(0, pos - size);
        }
        else {
            target = line.findClusterBreak(pos - line.from, forward) + line.from;
        }
        if (target == pos && line.number != (forward ? state.doc.lines : 1))
            target += forward ? 1 : -1;
        return target;
    });
    /// Delete the selection, or, for cursor selections, the code point
    /// before the cursor.
    const deleteCodePointBackward = view => deleteByChar(view, false, true);
    /// Delete the selection, or, for cursor selections, the character
    /// before the cursor.
    const deleteCharBackward = view => deleteByChar(view, false, false);
    /// Delete the selection or the character after the cursor.
    const deleteCharForward = view => deleteByChar(view, true, false);
    const deleteByGroup = (view, forward) => deleteBy(view, pos => {
        let { state } = view, line = state.doc.lineAt(pos), categorize = state.charCategorizer(pos);
        for (let cat = null;;) {
            let next, nextChar;
            if (pos == (forward ? line.to : line.from)) {
                if (line.number == (forward ? state.doc.lines : 1))
                    break;
                line = state.doc.line(line.number + (forward ? 1 : -1));
                next = forward ? line.from : line.to;
                nextChar = "\n";
            }
            else {
                next = line.findClusterBreak(pos - line.from, forward) + line.from;
                nextChar = line.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
            }
            let nextCat = categorize(nextChar);
            if (cat != null && nextCat != cat)
                break;
            if (nextCat != CharCategory.Space)
                cat = nextCat;
            pos = next;
        }
        return pos;
    });
    /// Delete the selection or backward until the end of the next
    /// [group](#view.EditorView.moveByGroup).
    const deleteGroupBackward = view => deleteByGroup(view, false);
    /// Delete the selection or forward until the end of the next group.
    const deleteGroupForward = view => deleteByGroup(view, true);
    /// Delete the selection, or, if it is a cursor selection, delete to
    /// the end of the line. If the cursor is directly at the end of the
    /// line, delete the line break after it.
    const deleteToLineEnd = view => deleteBy(view, pos => {
        let lineEnd = view.visualLineAt(pos).to;
        if (pos < lineEnd)
            return lineEnd;
        return Math.max(view.state.doc.length, pos + 1);
    });
    /// Replace each selection range with a line break, leaving the cursor
    /// on the line before the break.
    const splitLine = ({ state, dispatch }) => {
        let changes = state.changeByRange(range => {
            return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
                range: EditorSelection.cursor(range.from) };
        });
        dispatch(state.update(changes, { scrollIntoView: true, annotations: Transaction.userEvent.of("input") }));
        return true;
    };
    /// Flip the characters before and after the cursor(s).
    const transposeChars = ({ state, dispatch }) => {
        let changes = state.changeByRange(range => {
            if (!range.empty || range.from == 0 || range.from == state.doc.length)
                return { range };
            let pos = range.from, line = state.doc.lineAt(pos);
            let from = pos == line.from ? pos - 1 : line.findClusterBreak(pos - line.from, false) + line.from;
            let to = pos == line.to ? pos + 1 : line.findClusterBreak(pos - line.from, true) + line.from;
            return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
                range: EditorSelection.cursor(to) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true }));
        return true;
    };
    function selectedLineBlocks(state) {
        let blocks = [], upto = -1;
        for (let range of state.selection.ranges) {
            let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
            if (upto == startLine.number)
                blocks[blocks.length - 1].to = endLine.to;
            else
                blocks.push({ from: startLine.from, to: endLine.to });
            upto = endLine.number;
        }
        return blocks;
    }
    function moveLine(state, dispatch, forward) {
        let changes = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward ? block.to == state.doc.length : block.from == 0)
                continue;
            let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
            if (forward)
                changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.slice() + state.lineBreak });
            else
                changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.slice() });
        }
        if (!changes.length)
            return false;
        dispatch(state.update({ changes, scrollIntoView: true }));
        return true;
    }
    /// Move the selected lines up one line.
    const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
    /// Move the selected lines down one line.
    const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
    function copyLine(state, dispatch, forward) {
        let changes = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward)
                changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
            else
                changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
        }
        dispatch(state.update({ changes, scrollIntoView: true }));
        return true;
    }
    /// Create a copy of the selected lines. Keep the selection in the top copy.
    const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
    /// Create a copy of the selected lines. Keep the selection in the bottom copy.
    const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
    /// Delete selected lines.
    const deleteLine = view => {
        let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
            if (from > 0)
                from--;
            else if (to < state.doc.length)
                to++;
            return { from, to };
        }));
        let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
        view.dispatch({ changes, selection, scrollIntoView: true });
        return true;
    };
    function getIndentation(cx, pos) {
        for (let f of cx.state.facet(EditorState.indentation)) {
            let result = f(cx, pos);
            if (result > -1)
                return result;
        }
        return -1;
    }
    function isBetweenBrackets(state, pos) {
        if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
            return { from: pos, to: pos };
        let context = state.tree.resolve(pos);
        let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
        if (before && after && before.to <= pos && after.from >= pos &&
            (closedBy = before.type.prop(NodeProp$1.closedBy)) && closedBy.indexOf(after.name) > -1)
            return { from: before.to, to: after.from };
        return null;
    }
    /// Replace the selection with a newline and indent the newly created
    /// line(s). If the current line consists only of whitespace, this
    /// will also delete that whitespace. When the cursor is between
    /// matching brackets, an additional newline will be inserted after
    /// the cursor.
    const insertNewlineAndIndent = ({ state, dispatch }) => {
        let changes = state.changeByRange(({ from, to }) => {
            let explode = from == to && isBetweenBrackets(state, from);
            let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
            let indent = getIndentation(cx, from);
            if (indent < 0)
                indent = /^\s*/.exec(state.doc.lineAt(from).slice(0, 50))[0].length;
            let line = state.doc.lineAt(from);
            while (to < line.to && /\s/.test(line.slice(to - line.from, to + 1 - line.from)))
                to++;
            if (explode)
                ({ from, to } = explode);
            else if (from > line.from && from < line.from + 100 && !/\S/.test(line.slice(0, from)))
                from = line.from;
            let insert = ["", state.indentString(indent)];
            if (explode)
                insert.push(state.indentString(cx.lineIndent(line)));
            return { changes: { from, to, insert: Text.of(insert) },
                range: EditorSelection.cursor(from + 1 + indent) };
        });
        dispatch(state.update(changes, { scrollIntoView: true }));
        return true;
    };
    function changeBySelectedLine(state, f) {
        let atLine = -1;
        return state.changeByRange(range => {
            let changes = [];
            for (let line = state.doc.lineAt(range.from);;) {
                if (line.number > atLine) {
                    f(line, changes, range);
                    atLine = line.number;
                }
                if (range.to <= line.to)
                    break;
                line = state.doc.lineAt(line.to + 1);
            }
            let changeSet = state.changes(changes);
            return { changes,
                range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
        });
    }
    /// Auto-indent the selected lines. This uses the [indentation
    /// facet](#state.EditorState^indentation) as source for auto-indent
    /// information.
    const indentSelection = ({ state, dispatch }) => {
        let updated = Object.create(null);
        let context = new IndentContext(state, { overrideIndentation: start => {
                let found = updated[start];
                return found == null ? -1 : found;
            } });
        let changes = changeBySelectedLine(state, (line, changes, range) => {
            let indent = getIndentation(context, line.from);
            if (indent < 0)
                return;
            let cur = /^\s*/.exec(line.slice(0, Math.min(line.length, 200)))[0];
            let norm = state.indentString(indent);
            if (cur != norm || range.from < line.from + cur.length) {
                updated[line.from] = indent;
                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
        });
        if (!changes.changes.empty)
            dispatch(state.update(changes));
        return true;
    };
    /// Add a [unit](#state.EditorState^indentUnit) of indentation to all
    /// selected lines.
    const indentMore = ({ state, dispatch }) => {
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            changes.push({ from: line.from, insert: state.facet(EditorState.indentUnit) });
        })));
        return true;
    };
    /// Remove a [unit](#state.EditorState^indentUnit) of indentation from
    /// all selected lines.
    const indentLess = ({ state, dispatch }) => {
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            let lineStart = line.slice(0, Math.min(line.length, 200));
            let space = /^\s*/.exec(lineStart)[0];
            if (!space)
                return;
            let col = countColumn(space, 0, state.tabSize), insert = state.indentString(Math.max(0, col - state.indentUnit)), keep = 0;
            while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
                keep++;
            changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
        })));
        return true;
    };
    /// Array of key bindings containing the Emacs-style bindings that are
    /// available on macOS by default.
    ///
    ///  - Ctrl-b: [`cursorCharLeft`](#commands.cursorCharLeft) ([`selectCharLeft`](#commands.selectCharLeft) with Shift)
    ///  - Ctrl-f: [`cursorCharRight`](#commands.cursorCharRight) ([`selectCharRight`](#commands.selectCharRight) with Shift)
    ///  - Ctrl-p: [`cursorLineUp`](#commands.cursorLineUp) ([`selectLineUp`](#commands.selectLineUp) with Shift)
    ///  - Ctrl-n: [`cursorLineDown`](#commands.cursorLineDown) ([`selectLineDown`](#commands.selectLineDown) with Shift)
    ///  - Ctrl-a: [`cursorLineStart`](#commands.cursorLineStart) ([`selectLineStart`](#commands.selectLineStart) with Shift)
    ///  - Ctrl-e: [`cursorLineEnd`](#commands.cursorLineEnd) ([`selectLineEnd`](#commands.selectLineEnd) with Shift)
    ///  - Ctrl-d: [`deleteCharForward`](#commands.deleteCharForward)
    ///  - Ctrl-h: [`deleteCharBackward`](#commands.deleteCharBackward)
    ///  - Ctrl-k: [`deleteToLineEnd`](#commands.deleteToLineEnd)
    ///  - Alt-d: [`deleteGroupForward`](#commands.deleteGroupForward)
    ///  - Ctrl-Alt-h: [`deleteGroupBackward`](#commands.deleteGroupBackward)
    ///  - Ctrl-o: [`splitLine`](#commands.splitLine)
    ///  - Ctrl-t: [`transposeChars`](#commands.transposeChars)
    ///  - Alt-f: [`cursorGroupForward`](#commands.cursorGroupForward) ([`selectGroupForward`](#commands.selectGroupForward) with Shift)
    ///  - Alt-b: [`cursorGroupBackward`](#commands.cursorGroupBackward) ([`selectGroupBackward`](#commands.selectGroupBackward) with Shift)
    ///  - Alt-<: [`cursorDocStart`](#commands.cursorDocStart)
    ///  - Alt->: [`cursorDocEnd`](#commands.cursorDocEnd)
    ///  - Ctrl-v: [`cursorPageDown`](#commands.cursorPageDown)
    ///  - Alt-v: [`cursorPageUp`](#commands.cursorPageUp)
    const emacsStyleKeymap = [
        { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft },
        { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
        { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
        { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
        { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
        { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
        { key: "Ctrl-d", run: deleteCharForward },
        { key: "Ctrl-h", run: deleteCharBackward },
        { key: "Ctrl-k", run: deleteToLineEnd },
        { key: "Alt-d", run: deleteGroupForward },
        { key: "Ctrl-Alt-h", run: deleteGroupBackward },
        { key: "Ctrl-o", run: splitLine },
        { key: "Ctrl-t", run: transposeChars },
        { key: "Alt-f", run: cursorGroupForward, shift: selectGroupForward },
        { key: "Alt-b", run: cursorGroupBackward, shift: selectGroupBackward },
        { key: "Alt-<", run: cursorDocStart },
        { key: "Alt->", run: cursorDocEnd },
        { key: "Ctrl-v", run: cursorPageDown },
        { key: "Alt-v", run: cursorPageUp },
    ];
    /// An array of key bindings closely sticking to platform-standard or
    /// widely used bindings. (This includes the bindings from
    /// [`emacsStyleKeymap`](#commands.emacsStyleKeymap), with their `key`
    /// property changed to `mac`.)
    ///
    ///  - ArrowLeft: [`cursorCharLeft`](#commands.cursorCharLeft) ([`selectCharLeft`](#commands.selectCharLeft) with Shift)
    ///  - ArrowRight: [`cursorCharRight`](#commands.cursorCharRight) ([`selectCharRight`](#commands.selectCharRight) with Shift)
    ///  - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](#commands.cursorGroupLeft) ([`selectGroupLeft`](#commands.selectGroupLeft) with Shift)
    ///  - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](#commands.cursorGroupRight) ([`selectGroupRight`](#commands.selectGroupRight) with Shift)
    ///  - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](#commands.cursorLineStart) ([`selectLineStart`](#commands.selectLineStart) with Shift)
    ///  - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](#commands.cursorLineEnd) ([`selectLineEnd`](#commands.selectLineEnd) with Shift)
    ///  - ArrowUp: [`cursorLineUp`](#commands.cursorLineUp) ([`selectLineUp`](#commands.selectLineUp) with Shift)
    ///  - ArrowDown: [`cursorLineDown`](#commands.cursorLineDown) ([`selectLineDown`](#commands.selectLineDown) with Shift)
    ///  - Cmd-ArrowUp (on macOS): [`cursorDocStart`](#commands.cursorDocStart) ([`selectDocStart`](#commands.selectDocStart) with Shift)
    ///  - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](#commands.cursorDocEnd) ([`selectDocEnd`](#commands.selectDocEnd) with Shift)
    ///  - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](#commands.cursorPageUp) ([`selectPageUp`](#commands.selectPageUp) with Shift)
    ///  - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](#commands.cursorPageDown) ([`selectPageDown`](#commands.selectPageDown) with Shift)
    ///  - PageUp: [`cursorPageUp`](#commands.cursorPageUp) ([`selectPageUp`](#commands.selectPageUp) with Shift)
    ///  - PageDown: [`cursorPageDown`](#commands.cursorPageDown) ([`selectPageDown`](#commands.selectPageDown) with Shift)
    ///  - Home: [`cursorLineBoundaryBackward`](#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](#commands.selectLineBoundaryBackward) with Shift)
    ///  - End: [`cursorLineBoundaryForward`](#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](#commands.selectLineBoundaryForward) with Shift)
    ///  - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](#commands.cursorDocStart) ([`selectDocStart`](#commands.selectDocStart) with Shift)
    ///  - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](#commands.cursorDocEnd) ([`selectDocEnd`](#commands.selectDocEnd) with Shift)
    ///  - Enter: [`insertNewlineAndIndent`](#commands.insertNewlineAndIndent)
    ///  - Ctrl-a (Cmd-a on macOS): [`selectAll`](#commands.selectAll)
    ///  - Backspace: [`deleteCodePointBackward`](#commands.deleteCodePointBackward)
    ///  - Delete: [`deleteCharForward`](#commands.deleteCharForward)
    ///  - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](#commands.deleteGroupBackward)
    ///  - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](#commands.deleteGroupForward)
    const standardKeymap = [
        { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft },
        { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
        { mac: "Cmd-ArrowLeft", run: cursorLineStart, shift: selectLineStart },
        { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight },
        { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
        { mac: "Cmd-ArrowRight", run: cursorLineEnd, shift: selectLineEnd },
        { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp },
        { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
        { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
        { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown },
        { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
        { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
        { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
        { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
        { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
        { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
        { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
        { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
        { key: "Enter", run: insertNewlineAndIndent },
        { key: "Mod-a", run: selectAll },
        { key: "Backspace", run: deleteCodePointBackward },
        { key: "Delete", run: deleteCharForward },
        { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
        { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
    ].concat(emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
    /// The default keymap. Includes all bindings from
    /// [`standardKeymap`](#commands.standardKeymap) plus the following:
    ///
    /// - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](#commands.selectSyntaxLeft) with Shift)
    /// - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](#commands.cursorSyntaxRight) ([`selectSyntaxRight`](#commands.selectSyntaxRight) with Shift)
    /// - Alt-ArrowUp: [`moveLineUp`](#commands.moveLineUp)
    /// - Alt-ArrowDown: [`moveLineDown`](#commands.moveLineDown)
    /// - Shift-Alt-ArrowUp: [`copyLineUp`](#commands.copyLineUp)
    /// - Shift-Alt-ArrowDown: [`copyLineDown`](#commands.copyLineDown)
    /// - Escape: [`simplifySelection`](#commands.simplifySelection)
    /// - Ctrl-l (Cmd-l on macOS): [`selectLine`](#commands.selectLine)
    /// - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](#commands.selectParentSyntax)
    /// - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](#commands.indentLess)
    /// - Ctrl-] (Cmd-] on macOS): [`indentMore`](#commands.indentMore)
    /// - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](#commands.indentSelection)
    /// - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](#commands.deleteLine)
    /// - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](#commands.cursorMatchingBracket)
    const defaultKeymap = [
        { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
        { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
        { key: "Alt-ArrowUp", run: moveLineUp },
        { key: "Shift-Alt-ArrowUp", run: copyLineUp },
        { key: "Alt-ArrowDown", run: moveLineDown },
        { key: "Shift-Alt-ArrowDown", run: copyLineDown },
        { key: "Escape", run: simplifySelection },
        { key: "Mod-l", run: selectLine },
        { key: "Mod-i", run: selectParentSyntax },
        { key: "Mod-[", run: indentLess },
        { key: "Mod-]", run: indentMore },
        { key: "Mod-Alt-\\", run: indentSelection },
        { key: "Shift-Mod-k", run: deleteLine },
        { key: "Shift-Mod-\\", run: cursorMatchingBracket }
    ].concat(standardKeymap);

    const baseTheme$6 = EditorView$1.baseTheme({
        $matchingBracket: { color: "#0b0" },
        $nonmatchingBracket: { color: "#a22" }
    });
    const DefaultScanDist$1 = 10000, DefaultBrackets$1 = "()[]{}";
    const bracketMatchingConfig$1 = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                afterCursor: true,
                brackets: DefaultBrackets$1,
                maxScanDistance: DefaultScanDist$1
            });
        }
    });
    const matchingMark$1 = Decoration$1.mark({ class: themeClass$1("matchingBracket") }), nonmatchingMark$1 = Decoration$1.mark({ class: themeClass$1("nonmatchingBracket") });
    const bracketMatchingState$1 = StateField.define({
        create() { return Decoration$1.none; },
        update(deco, tr) {
            if (!tr.docChanged && !tr.selection)
                return deco;
            let decorations = [];
            let config = tr.state.facet(bracketMatchingConfig$1);
            for (let range of tr.state.selection.ranges) {
                if (!range.empty)
                    continue;
                let match = matchBrackets$1(tr.state, range.head, -1, config)
                    || (range.head > 0 && matchBrackets$1(tr.state, range.head - 1, 1, config))
                    || (config.afterCursor &&
                        (matchBrackets$1(tr.state, range.head, 1, config) ||
                            (range.head < tr.state.doc.length && matchBrackets$1(tr.state, range.head + 1, -1, config))));
                if (!match)
                    continue;
                let mark = match.matched ? matchingMark$1 : nonmatchingMark$1;
                decorations.push(mark.range(match.start.from, match.start.to));
                if (match.end)
                    decorations.push(mark.range(match.end.from, match.end.to));
            }
            return Decoration$1.set(decorations, true);
        },
        provide: [EditorView$1.decorations]
    });
    const bracketMatchingUnique = [
        bracketMatchingState$1,
        baseTheme$6
    ];
    /// Create an extension that enables bracket matching. Whenever the
    /// cursor is next to a bracket, that bracket and the one it matches
    /// are highlighted. Or, when no matching bracket is found, another
    /// highlighting style is used to indicate this.
    function bracketMatching(config = {}) {
        return [bracketMatchingConfig$1.of(config), bracketMatchingUnique];
    }
    function matchingNodes$1(node, dir, brackets) {
        let byProp = node.prop(dir < 0 ? NodeProp$1.openedBy : NodeProp$1.closedBy);
        if (byProp)
            return byProp;
        if (node.name.length == 1) {
            let index = brackets.indexOf(node.name);
            if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
                return [brackets[index + dir]];
        }
        return null;
    }
    /// Find the matching bracket for the token at `pos`, scanning
    /// direction `dir`. Only the `brackets` and `maxScanDistance`
    /// properties are used from `config`, if given. Returns null if no
    /// bracket was found at `pos`, or a match result otherwise.
    function matchBrackets$1(state, pos, dir, config = {}) {
        let maxScanDistance = config.maxScanDistance || DefaultScanDist$1, brackets = config.brackets || DefaultBrackets$1;
        let tree = state.tree, sub = tree.resolve(pos, dir), matches;
        if (matches = matchingNodes$1(sub.type, dir, brackets))
            return matchMarkedBrackets$1(state, pos, dir, sub, matches, brackets);
        else
            return matchPlainBrackets$1(state, pos, dir, tree, sub.type, maxScanDistance, brackets);
    }
    function matchMarkedBrackets$1(_state, _pos, dir, token, matching, brackets) {
        let parent = token.parent, firstToken = { from: token.from, to: token.to };
        let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor;
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
            do {
                if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                    if (depth == 0 && matching.indexOf(cursor.type.name) > -1) {
                        return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };
                    }
                    else if (matchingNodes$1(cursor.type, dir, brackets)) {
                        depth++;
                    }
                    else if (matchingNodes$1(cursor.type, -dir, brackets)) {
                        depth--;
                        if (depth == 0)
                            return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: false };
                    }
                }
            } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return { start: firstToken, matched: false };
    }
    function matchPlainBrackets$1(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
        let bracket = brackets.indexOf(startCh);
        if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
            return null;
        let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
        let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
        for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
            let text = iter.value;
            if (dir < 0)
                distance += text.length;
            let basePos = pos + distance * dir;
            for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
                let found = brackets.indexOf(text[pos]);
                if (found < 0 || tree.resolve(basePos + pos, 1).type != tokenType)
                    continue;
                if ((found % 2 == 0) == (dir > 0)) {
                    depth++;
                }
                else if (depth == 1) { // Closing
                    return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
                }
                else {
                    depth--;
                }
            }
            if (dir > 0)
                distance += text.length;
        }
        return iter.done ? { start: startToken, matched: false } : null;
    }

    const defaults$2 = {
        brackets: ["(", "[", "{", "'", '"'],
        before: ")]}'\":;>"
    };
    const closeBracketEffect = StateEffect.define({
        map(value, mapping) {
            let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
            return mapped == null ? undefined : mapped;
        }
    });
    const skipBracketEffect = StateEffect.define({
        map(value, mapping) { return mapping.mapPos(value); }
    });
    const closedBracket = new class extends RangeValue {
    };
    closedBracket.startSide = 1;
    closedBracket.endSide = -1;
    const bracketState = StateField.define({
        create() { return RangeSet.empty; },
        update(value, tr) {
            if (tr.selection) {
                let lineStart = tr.state.doc.lineAt(tr.selection.primary.head).from;
                let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.primary.head).from;
                if (lineStart != tr.changes.mapPos(prevLineStart, -1))
                    value = RangeSet.empty;
            }
            value = value.map(tr.changes);
            for (let effect of tr.effects) {
                if (effect.is(closeBracketEffect))
                    value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
                else if (effect.is(skipBracketEffect))
                    value = value.update({ filter: from => from != effect.value });
            }
            return value;
        }
    });
    /// Extension to enable bracket-closing behavior. When a closeable
    /// bracket is typed, its closing bracket is immediately inserted
    /// after the cursor. When closing a bracket directly in front of that
    /// closing bracket, the cursor moves over the existing bracket.
    function closeBrackets() {
        return [EditorView$1.inputHandler.of(handleInput), bracketState];
    }
    const definedClosing = "()[]{}<>";
    function closing(ch) {
        for (let i = 0; i < definedClosing.length; i += 2)
            if (definedClosing.charCodeAt(i) == ch)
                return definedClosing.charAt(i + 1);
        return fromCodePoint(ch < 128 ? ch : ch + 1);
    }
    function config(state, pos) {
        return state.languageDataAt("closeBrackets", pos)[0] || defaults$2;
    }
    function handleInput(view, from, to, insert) {
        if (view.composing)
            return false;
        let sel = view.state.selection.primary;
        if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
            from != sel.from || to != sel.to)
            return false;
        let tr = handleInsertion(view.state, insert);
        if (!tr)
            return false;
        view.dispatch(tr);
        return true;
    }
    /// Command that implements deleting a pair of matching brackets when
    /// the cursor is between them.
    const deleteBracketPair = ({ state, dispatch }) => {
        let conf = config(state, state.selection.primary.head);
        let tokens = conf.brackets || defaults$2.brackets;
        let dont = null, changes = state.changeByRange(range => {
            if (range.empty) {
                let before = prevChar(state.doc, range.head);
                for (let token of tokens) {
                    if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
                        return { changes: { from: range.head - token.length, to: range.head + token.length },
                            range: EditorSelection.cursor(range.head - token.length),
                            annotations: Transaction.userEvent.of("delete") };
                }
            }
            return { range: dont = range };
        });
        if (!dont)
            dispatch(state.update(changes, { scrollIntoView: true }));
        return !dont;
    };
    /// Close-brackets related key bindings. Binds Backspace to
    /// [`deleteBracketPair`](#closebrackets.deleteBracketPair).
    const closeBracketsKeymap = [
        { key: "Backspace", run: deleteBracketPair }
    ];
    /// Implements the extension's behavior on text insertion. @internal
    function handleInsertion(state, ch) {
        let conf = config(state, state.selection.primary.head);
        let tokens = conf.brackets || defaults$2.brackets;
        for (let tok of tokens) {
            let closed = closing(codePointAt(tok, 0));
            if (ch == tok)
                return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1)
                    : handleOpen(state, tok, closed, conf.before || defaults$2.before);
            if (ch == closed && closedBracketAt(state, state.selection.primary.from))
                return handleClose(state, tok, closed);
        }
        return null;
    }
    function closedBracketAt(state, pos) {
        let found = false;
        state.field(bracketState).between(0, state.doc.length, from => {
            if (from == pos)
                found = true;
        });
        return found;
    }
    function nextChar(doc, pos) {
        let next = doc.sliceString(pos, pos + 2);
        return next.slice(0, codePointSize(codePointAt(next, 0)));
    }
    function prevChar(doc, pos) {
        let prev = doc.sliceString(pos - 2, pos);
        return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
    }
    function handleOpen(state, open, close, closeBefore) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                    effects: closeBracketEffect.of(range.to + open.length),
                    range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
            let next = nextChar(state.doc, range.head);
            if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
                return { changes: { insert: open + close, from: range.head },
                    effects: closeBracketEffect.of(range.head + open.length),
                    range: EditorSelection.cursor(range.head + open.length) };
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            annotations: Transaction.userEvent.of("input")
        });
    }
    function handleClose(state, _open, close) {
        let dont = null, moved = state.selection.ranges.map(range => {
            if (range.empty && nextChar(state.doc, range.head) == close)
                return EditorSelection.cursor(range.head + close.length);
            return dont = range;
        });
        return dont ? null : state.update({
            selection: EditorSelection.create(moved, state.selection.primaryIndex),
            scrollIntoView: true,
            effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))
        });
    }
    // Handles cases where the open and close token are the same, and
    // possibly triple quotes (as in `"""abc"""`-style quoting).
    function handleSame(state, token, allowTriple) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                    effects: closeBracketEffect.of(range.to + token.length),
                    range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
            let pos = range.head, next = nextChar(state.doc, pos);
            if (next == token) {
                if (nodeStart(state, pos)) {
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
                }
                else if (closedBracketAt(state, pos)) {
                    let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                    return { range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
                        effects: skipBracketEffect.of(pos) };
                }
            }
            else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
                nodeStart(state, pos - 2 * token.length)) {
                return { changes: { insert: token + token + token + token, from: pos },
                    effects: closeBracketEffect.of(pos + token.length),
                    range: EditorSelection.cursor(pos + token.length) };
            }
            else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
                let prev = state.sliceDoc(pos - 1, pos);
                if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word)
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
            }
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            annotations: Transaction.userEvent.of("input")
        });
    }
    function nodeStart(state, pos) {
        let tree = state.tree.resolve(pos + 1);
        return tree.parent && tree.from == pos;
    }

    const panelConfig = Facet.define({
        combine(configs) {
            let topContainer, bottomContainer;
            for (let c of configs) {
                topContainer = topContainer || c.topContainer;
                bottomContainer = bottomContainer || c.bottomContainer;
            }
            return { topContainer, bottomContainer };
        }
    });
    /// Enables the panel-managing extension.
    function panels(config) {
        let ext = [panelPlugin, baseTheme$7];
        if (config)
            ext.push(panelConfig.of(config));
        return ext;
    }
    /// Opening a panel is done by providing an object describing the
    /// panel through this facet.
    const showPanel = Facet.define();
    /// Get the active panel created by the given constructor, if any.
    /// This can be useful when you need access to your panels' DOM
    /// structure.
    function getPanel(view, panel) {
        let plugin = view.plugin(panelPlugin);
        let index = view.state.facet(showPanel).indexOf(panel);
        return plugin && index > -1 ? plugin.panels[index] : null;
    }
    const panelPlugin = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.specs = view.state.facet(showPanel);
            this.panels = this.specs.map(spec => spec(view));
            let conf = view.state.facet(panelConfig);
            this.top = new PanelGroup(view, true, conf.topContainer);
            this.bottom = new PanelGroup(view, false, conf.bottomContainer);
            this.top.sync(this.panels.filter(p => p.top));
            this.bottom.sync(this.panels.filter(p => !p.top));
            for (let p of this.panels) {
                p.dom.className += " " + panelClass(p);
                if (p.mount)
                    p.mount();
            }
        }
        update(update) {
            let conf = update.state.facet(panelConfig);
            if (this.top.container != conf.topContainer) {
                this.top.sync([]);
                this.top = new PanelGroup(update.view, true, conf.topContainer);
            }
            if (this.bottom.container != conf.bottomContainer) {
                this.bottom.sync([]);
                this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
            }
            this.top.syncClasses();
            this.bottom.syncClasses();
            let specs = update.state.facet(showPanel);
            if (specs != this.specs) {
                let panels = [], top = [], bottom = [], mount = [];
                for (let spec of specs) {
                    let known = this.specs.indexOf(spec), panel;
                    if (known < 0) {
                        panel = spec(update.view);
                        mount.push(panel);
                    }
                    else {
                        panel = this.panels[known];
                        if (panel.update)
                            panel.update(update);
                    }
                    panels.push(panel);
                    (panel.top ? top : bottom).push(panel);
                }
                this.specs = specs;
                this.panels = panels;
                this.top.sync(top);
                this.bottom.sync(bottom);
                for (let p of mount) {
                    p.dom.className += " " + panelClass(p);
                    if (p.mount)
                        p.mount();
                }
            }
            else {
                for (let p of this.panels)
                    if (p.update)
                        p.update(update);
            }
        }
        destroy() {
            this.top.sync([]);
            this.bottom.sync([]);
        }
    }, {
        provide: PluginField$1.scrollMargins.from(value => ({ top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() }))
    });
    function panelClass(panel) {
        return themeClass$1(panel.style ? `panel.${panel.style}` : "panel");
    }
    class PanelGroup {
        constructor(view, top, container) {
            this.view = view;
            this.top = top;
            this.container = container;
            this.dom = undefined;
            this.classes = "";
            this.panels = [];
            this.syncClasses();
        }
        sync(panels) {
            this.panels = panels;
            this.syncDOM();
        }
        syncDOM() {
            if (this.panels.length == 0) {
                if (this.dom) {
                    this.dom.remove();
                    this.dom = undefined;
                }
                return;
            }
            if (!this.dom) {
                this.dom = document.createElement("div");
                this.dom.className = themeClass$1(this.top ? "panels.top" : "panels.bottom");
                this.dom.style[this.top ? "top" : "bottom"] = "0";
                let parent = this.container || this.view.dom;
                parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
            }
            let curDOM = this.dom.firstChild;
            for (let panel of this.panels) {
                if (panel.dom.parentNode == this.dom) {
                    while (curDOM != panel.dom)
                        curDOM = rm$2(curDOM);
                    curDOM = curDOM.nextSibling;
                }
                else {
                    this.dom.insertBefore(panel.dom, curDOM);
                }
            }
            while (curDOM)
                curDOM = rm$2(curDOM);
        }
        scrollMargin() {
            return !this.dom || this.container ? 0
                : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - this.view.scrollDOM.getBoundingClientRect().top
                    : this.view.scrollDOM.getBoundingClientRect().bottom - this.dom.getBoundingClientRect().top);
        }
        syncClasses() {
            if (!this.container || this.classes == this.view.themeClasses)
                return;
            for (let cls of this.classes.split(" "))
                if (cls)
                    this.container.classList.remove(cls);
            for (let cls of (this.classes = this.view.themeClasses).split(" "))
                if (cls)
                    this.container.classList.add(cls);
        }
    }
    function rm$2(node) {
        let next = node.nextSibling;
        node.remove();
        return next;
    }
    const baseTheme$7 = EditorView$1.baseTheme({
        $panels: {
            boxSizing: "border-box",
            position: "sticky",
            left: 0,
            right: 0
        },
        "$$light $panels": {
            backgroundColor: "#f5f5f5",
            color: "black"
        },
        "$$light $panels.top": {
            borderBottom: "1px solid #ddd"
        },
        "$$light $panels.bottom": {
            borderTop: "1px solid #ddd"
        },
        "$$dark $panels": {
            backgroundColor: "#333338",
            color: "white"
        }
    });

    const basicNormalize = typeof String.prototype.normalize == "function" ? x => x.normalize("NFKD") : x => x;
    /// A search cursor provides an iterator over text matches in a
    /// document.
    class SearchCursor {
        /// Create a text cursor. The query is the search string, `from` to
        /// `to` provides the region to search.
        ///
        /// When `normalize` is given, it will be called, on both the query
        /// string and the content it is matched against, before comparing.
        /// You can, for example, create a case-insensitive search by
        /// passing `s => s.toLowerCase()`.
        ///
        /// Text is always normalized with
        /// [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
        /// (when supported).
        constructor(text, query, from = 0, to = text.length, normalize) {
            /// The current match (only holds a meaningful value after
            /// [`next`](#search.SearchCursor.next) has been called and when
            /// `done` is false).
            this.value = { from: 0, to: 0 };
            /// Whether the end of the iterated region has been reached.
            this.done = false;
            this.matches = [];
            this.buffer = "";
            this.bufferPos = 0;
            this.iter = text.iterRange(from, to);
            this.bufferStart = from;
            this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
            this.query = this.normalize(query);
        }
        peek() {
            if (this.bufferPos == this.buffer.length) {
                this.bufferStart += this.buffer.length;
                this.iter.next();
                if (this.iter.done)
                    return -1;
                this.bufferPos = 0;
                this.buffer = this.iter.value;
            }
            return this.buffer.charCodeAt(this.bufferPos);
        }
        /// Look for the next match. Updates the iterator's
        /// [`value`](#search.SearchCursor.value) and
        /// [`done`](#search.SearchCursor.done) properties. Should be called
        /// at least once before using the cursor.
        next() {
            for (;;) {
                let next = this.peek();
                if (next < 0) {
                    this.done = true;
                    return this;
                }
                let str = String.fromCharCode(next), start = this.bufferStart + this.bufferPos;
                this.bufferPos++;
                for (;;) {
                    let peek = this.peek();
                    if (peek < 0xDC00 || peek >= 0xE000)
                        break;
                    this.bufferPos++;
                    str += String.fromCharCode(peek);
                }
                let norm = this.normalize(str);
                for (let i = 0, pos = start;; i++) {
                    let code = norm.charCodeAt(i);
                    let match = this.match(code, pos);
                    if (match) {
                        this.value = match;
                        return this;
                    }
                    if (i == norm.length - 1)
                        break;
                    if (pos == start && i < str.length && str.charCodeAt(i) == code)
                        pos++;
                }
            }
        }
        match(code, pos) {
            let match = null;
            for (let i = 0; i < this.matches.length; i += 2) {
                let index = this.matches[i], keep = false;
                if (this.query.charCodeAt(index) == code) {
                    if (index == this.query.length - 1) {
                        match = { from: this.matches[i + 1], to: pos + 1 };
                    }
                    else {
                        this.matches[i]++;
                        keep = true;
                    }
                }
                if (!keep) {
                    this.matches.splice(i, 2);
                    i -= 2;
                }
            }
            if (this.query.charCodeAt(0) == code) {
                if (this.query.length == 1)
                    match = { from: pos, to: pos + 1 };
                else
                    this.matches.push(1, pos);
            }
            return match;
        }
    }

    class Query {
        constructor(search, replace, caseInsensitive) {
            this.search = search;
            this.replace = replace;
            this.caseInsensitive = caseInsensitive;
        }
        eq(other) {
            return this.search == other.search && this.replace == other.replace && this.caseInsensitive == other.caseInsensitive;
        }
        cursor(doc, from = 0, to = doc.length) {
            return new SearchCursor(doc, this.search, from, to, this.caseInsensitive ? x => x.toLowerCase() : undefined);
        }
        get valid() { return !!this.search; }
    }
    const setQuery = StateEffect.define();
    const togglePanel = StateEffect.define();
    const searchState = StateField.define({
        create() {
            return new SearchState(new Query("", "", false), []);
        },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setQuery))
                    value = new SearchState(effect.value, value.panel);
                else if (effect.is(togglePanel))
                    value = new SearchState(value.query, effect.value ? [createSearchPanel] : []);
            }
            return value;
        },
        provide: [showPanel.nFrom(s => s.panel)]
    });
    class SearchState {
        constructor(query, panel) {
            this.query = query;
            this.panel = panel;
        }
    }
    const matchMark = Decoration$1.mark({ class: themeClass$1("searchMatch") }), selectedMatchMark = Decoration$1.mark({ class: themeClass$1("searchMatch.selected") });
    const searchHighlighter = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.view = view;
            this.decorations = this.highlight(view.state.field(searchState));
        }
        update(update) {
            let state = update.state.field(searchState);
            if (state != update.prevState.field(searchState) || update.docChanged || update.selectionSet)
                this.decorations = this.highlight(state);
        }
        highlight({ query, panel }) {
            if (!panel.length || !query.valid)
                return Decoration$1.none;
            let state = this.view.state, viewport = this.view.viewport;
            let cursor = query.cursor(state.doc, Math.max(0, viewport.from - query.search.length), Math.min(viewport.to + query.search.length, state.doc.length));
            let builder = new RangeSetBuilder();
            while (!cursor.next().done) {
                let { from, to } = cursor.value;
                let selected = state.selection.ranges.some(r => r.from == from && r.to == to);
                builder.add(from, to, selected ? selectedMatchMark : matchMark);
            }
            return builder.finish();
        }
    }, {
        decorations: v => v.decorations
    });
    function searchCommand(f) {
        return view => {
            let state = view.state.field(searchState, false);
            return state && state.query.valid ? f(view, state) : openSearchPanel(view);
        };
    }
    function findNextMatch(doc, from, query) {
        let cursor = query.cursor(doc, from).next();
        if (cursor.done) {
            cursor = query.cursor(doc, 0, from + query.search.length - 1).next();
            if (cursor.done)
                return null;
        }
        return cursor.value;
    }
    /// Open the search panel if it isn't already open, and move the
    /// selection to the first match after the current primary selection.
    /// Will wrap around to the start of the document when it reaches the
    /// end.
    const findNext = searchCommand((view, state) => {
        let { from, to } = view.state.selection.primary;
        let next = findNextMatch(view.state.doc, view.state.selection.primary.from + 1, state.query);
        if (!next || next.from == from && next.to == to)
            return false;
        view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
        maybeAnnounceMatch(view);
        return true;
    });
    const FindPrevChunkSize = 10000;
    // Searching in reverse is, rather than implementing inverted search
    // cursor, done by scanning chunk after chunk forward.
    function findPrevInRange(query, doc, from, to) {
        for (let pos = to;;) {
            let start = Math.max(from, pos - FindPrevChunkSize - query.search.length);
            let cursor = query.cursor(doc, start, pos), range = null;
            while (!cursor.next().done)
                range = cursor.value;
            if (range)
                return range;
            if (start == from)
                return null;
            pos -= FindPrevChunkSize;
        }
    }
    /// Move the selection to the previous instance of the search query,
    /// before the current primary selection. Will wrap past the start
    /// of the document to start searching at the end again.
    const findPrevious = searchCommand((view, { query }) => {
        let { state } = view;
        let range = findPrevInRange(query, state.doc, 0, state.selection.primary.to - 1) ||
            findPrevInRange(query, state.doc, state.selection.primary.from + 1, state.doc.length);
        if (!range)
            return false;
        view.dispatch({ selection: { anchor: range.from, head: range.to }, scrollIntoView: true });
        maybeAnnounceMatch(view);
        return true;
    });
    /// Select all instances of the search query.
    const selectMatches = searchCommand((view, { query }) => {
        let cursor = query.cursor(view.state.doc), ranges = [];
        while (!cursor.next().done)
            ranges.push(EditorSelection.range(cursor.value.from, cursor.value.to));
        if (!ranges.length)
            return false;
        view.dispatch({ selection: EditorSelection.create(ranges) });
        return true;
    });
    /// Select all instances of the currently selected text.
    const selectSelectionMatches = ({ state, dispatch }) => {
        let sel = state.selection;
        if (sel.ranges.length > 1 || sel.primary.empty)
            return false;
        let { from, to } = sel.primary;
        let ranges = [], primary = 0;
        for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
            if (ranges.length > 1000)
                return false;
            if (cur.value.from == from)
                primary = ranges.length;
            ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
        }
        dispatch(state.update({ selection: new EditorSelection(ranges, primary) }));
        return true;
    };
    /// Replace the current match of the search query.
    const replaceNext = searchCommand((view, { query }) => {
        let { state } = view, next = findNextMatch(state.doc, state.selection.primary.from, query);
        if (!next)
            return false;
        let { from, to } = state.selection.primary, changes = [], selection;
        if (next.from == from && next.to == to) {
            changes.push({ from: next.from, to: next.to, insert: query.replace });
            next = findNextMatch(state.doc, next.to, query);
        }
        if (next) {
            let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - query.replace.length;
            selection = { anchor: next.from - off, head: next.to - off };
        }
        view.dispatch({ changes, selection, scrollIntoView: !!selection });
        if (next)
            maybeAnnounceMatch(view);
        return true;
    });
    /// Replace all instances of the search query with the given
    /// replacement.
    const replaceAll = searchCommand((view, { query }) => {
        let cursor = query.cursor(view.state.doc), changes = [];
        while (!cursor.next().done) {
            let { from, to } = cursor.value;
            changes.push({ from, to, insert: query.replace });
        }
        if (!changes.length)
            return false;
        view.dispatch({ changes });
        return true;
    });
    function createSearchPanel(view) {
        let { query } = view.state.field(searchState);
        return {
            dom: buildPanel({
                view,
                query,
                updateQuery(q) {
                    if (!query.eq(q)) {
                        query = q;
                        view.dispatch({ effects: setQuery.of(query) });
                    }
                }
            }),
            mount() {
                this.dom.querySelector("[name=search]").select();
            },
            pos: 80,
            style: "search"
        };
    }
    /// Make sure the search panel is open and focused.
    const openSearchPanel = view => {
        let state = view.state.field(searchState, false);
        if (state && state.panel.length) {
            let panel = getPanel(view, createSearchPanel);
            if (!panel)
                return false;
            panel.dom.querySelector("[name=search]").focus();
        }
        else {
            view.dispatch({ effects: togglePanel.of(true),
                reconfigure: state ? undefined : { append: searchExtensions } });
        }
        return true;
    };
    /// Close the search panel.
    const closeSearchPanel = view => {
        let state = view.state.field(searchState, false);
        if (!state || !state.panel.length)
            return false;
        let panel = getPanel(view, createSearchPanel);
        if (panel && panel.dom.contains(view.root.activeElement))
            view.focus();
        view.dispatch({ effects: togglePanel.of(false) });
        return true;
    };
    /// Default search-related key bindings.
    ///
    ///  * Mod-f: [`openSearchPanel`](#search.openSearchPanel)
    ///  * F3, Mod-g: [`findNext`](#search.findNext)
    ///  * Shift-F3, Shift-Mod-g: [`findPrevious`](#search.findPrevious)
    const searchKeymap = [
        { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
        { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel" },
        { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel" },
        { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
        { key: "Mod-Shift-l", run: selectSelectionMatches }
    ];
    function elt(name, props = null, children = []) {
        let e = document.createElement(name);
        if (props)
            for (let prop in props) {
                let value = props[prop];
                if (typeof value == "string")
                    e.setAttribute(prop, value);
                else
                    e[prop] = value;
            }
        for (let child of children)
            e.appendChild(typeof child == "string" ? document.createTextNode(child) : child);
        return e;
    }
    // FIXME sync when search state changes independently
    function buildPanel(conf) {
        function p(phrase) { return conf.view.state.phrase(phrase); }
        let searchField = elt("input", {
            value: conf.query.search,
            placeholder: p("Find"),
            "aria-label": p("Find"),
            class: themeClass$1("textfield"),
            name: "search",
            onchange: update,
            onkeyup: update
        });
        let replaceField = elt("input", {
            value: conf.query.replace,
            placeholder: p("Replace"),
            "aria-label": p("Replace"),
            class: themeClass$1("textfield"),
            name: "replace",
            onchange: update,
            onkeyup: update
        });
        let caseField = elt("input", {
            type: "checkbox",
            name: "case",
            checked: !conf.query.caseInsensitive,
            onchange: update
        });
        function update() {
            conf.updateQuery(new Query(searchField.value, replaceField.value, !caseField.checked));
        }
        function keydown(e) {
            if (runScopeHandlers(conf.view, e, "search-panel")) {
                e.preventDefault();
            }
            else if (e.keyCode == 13 && e.target == searchField) {
                e.preventDefault();
                (e.shiftKey ? findPrevious : findNext)(conf.view);
            }
            else if (e.keyCode == 13 && e.target == replaceField) {
                e.preventDefault();
                replaceNext(conf.view);
            }
        }
        function button(name, onclick, content) {
            return elt("button", { class: themeClass$1("button"), name, onclick }, content);
        }
        let panel = elt("div", { onkeydown: keydown }, [
            searchField,
            button("next", () => findNext(conf.view), [p("next")]),
            button("prev", () => findPrevious(conf.view), [p("previous")]),
            button("select", () => selectMatches(conf.view), [p("all")]),
            elt("label", null, [caseField, "match case"]),
            elt("br"),
            replaceField,
            button("replace", () => replaceNext(conf.view), [p("replace")]),
            button("replaceAll", () => replaceAll(conf.view), [p("replace all")]),
            elt("button", { name: "close", onclick: () => closeSearchPanel(conf.view), "aria-label": p("close") }, ["×"]),
            elt("div", { style: "position: absolute; top: -10000px", "aria-live": "polite" })
        ]);
        return panel;
    }
    const AnnounceMargin = 30;
    const Break = /[\s\.,:;?!]/;
    // FIXME this is a kludge
    function maybeAnnounceMatch(view) {
        let { from, to } = view.state.selection.primary;
        let lineStart = view.state.doc.lineAt(from).from, lineEnd = view.state.doc.lineAt(to).to;
        let start = Math.max(lineStart, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
        let text = view.state.sliceDoc(start, end);
        if (start != lineStart) {
            for (let i = 0; i < AnnounceMargin; i++)
                if (!Break.test(text[i + 1]) && Break.test(text[i])) {
                    text = text.slice(i);
                    break;
                }
        }
        if (end != lineEnd) {
            for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
                if (!Break.test(text[i - 1]) && Break.test(text[i])) {
                    text = text.slice(0, i);
                    break;
                }
        }
        let panel = getPanel(view, createSearchPanel);
        if (!panel || !panel.dom.contains(view.root.activeElement))
            return;
        let live = panel.dom.querySelector("div[aria-live]");
        live.textContent = view.state.phrase("current match") + ". " + text;
    }
    const baseTheme$8 = EditorView$1.baseTheme({
        "$panel.search": {
            padding: "2px 6px 4px",
            position: "relative",
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "4px",
                backgroundColor: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            },
            "& input, & button": {
                margin: ".2em .5em .2em 0"
            },
            "& label": {
                fontSize: "80%"
            }
        },
        "$$light $searchMatch": { backgroundColor: "#ffff0054" },
        "$$dark $searchMatch": { backgroundColor: "#00ffff8a" },
        "$$light $searchMatch.selected": { backgroundColor: "#ff6a0054" },
        "$$dark $searchMatch.selected": { backgroundColor: "#ff00ff8a" }
    });
    const searchExtensions = [
        searchState,
        precedence(searchHighlighter, "override"),
        panels(),
        baseTheme$8
    ];

    const Outside = "-10000px";
    const tooltipPlugin = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.view = view;
            this.inView = true;
            this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
            this.tooltips = view.state.facet(showTooltip);
            this.tooltipViews = this.tooltips.map(tp => this.createTooltip(tp));
        }
        update(update) {
            let tooltips = update.state.facet(showTooltip);
            if (tooltips == this.tooltips) {
                for (let t of this.tooltipViews)
                    if (t.update)
                        t.update(update);
            }
            else {
                let views = [];
                for (let i = 0; i < tooltips.length; i++) {
                    let tip = tooltips[i], known = -1;
                    for (let i = 0; i < this.tooltips.length; i++)
                        if (this.tooltips[i].create == tip.create)
                            known = i;
                    if (known < 0) {
                        views[i] = this.createTooltip(tip);
                    }
                    else {
                        let tooltipView = views[i] = this.tooltipViews[known];
                        if (tooltipView.update)
                            tooltipView.update(update);
                    }
                }
                for (let t of this.tooltipViews)
                    if (views.indexOf(t) < 0)
                        t.dom.remove();
                this.tooltips = tooltips;
                this.tooltipViews = views;
                this.maybeMeasure();
            }
        }
        createTooltip(tooltip) {
            let tooltipView = tooltip.create(this.view);
            tooltipView.dom.className = themeClass$1("tooltip" + (tooltip.style ? "." + tooltip.style : ""));
            this.view.dom.appendChild(tooltipView.dom);
            if (tooltipView.mount)
                tooltipView.mount(this.view);
            return tooltipView;
        }
        destroy() {
            for (let { dom } of this.tooltipViews)
                dom.remove();
        }
        readMeasure() {
            return {
                editor: this.view.dom.getBoundingClientRect(),
                pos: this.tooltips.map(t => this.view.coordsAtPos(t.pos)),
                size: this.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
                innerWidth: window.innerWidth,
                innerHeight: window.innerHeight
            };
        }
        writeMeasure(measured) {
            let { editor } = measured;
            for (let i = 0; i < this.tooltipViews.length; i++) {
                let tooltip = this.tooltips[i], tView = this.tooltipViews[i], { dom } = tView;
                let pos = measured.pos[i], size = measured.size[i];
                // Hide tooltips that are outside of the editor.
                if (!pos || pos.bottom <= editor.top || pos.top >= editor.bottom || pos.right <= editor.left || pos.left >= editor.right) {
                    dom.style.top = Outside;
                    continue;
                }
                let width = size.right - size.left, height = size.bottom - size.top;
                let left = this.view.textDirection == Direction$1.LTR ? Math.min(pos.left, measured.innerWidth - width)
                    : Math.max(0, pos.left - width);
                let above = !!tooltip.above;
                if (!tooltip.strictSide &&
                    (above ? pos.top - (size.bottom - size.top) < 0 : pos.bottom + (size.bottom - size.top) > measured.innerHeight))
                    above = !above;
                dom.style.top = (above ? pos.top - height : pos.bottom) + "px";
                dom.style.left = left + "px";
                dom.classList.toggle("cm-tooltip-above", above);
                dom.classList.toggle("cm-tooltip-below", !above);
                if (tView.positioned)
                    tView.positioned();
            }
        }
        maybeMeasure() {
            if (this.tooltips.length) {
                if (this.view.inView || this.inView)
                    this.view.requestMeasure(this.measureReq);
                this.inView = this.view.inView;
            }
        }
    }, {
        eventHandlers: {
            scroll() { this.maybeMeasure(); }
        }
    });
    const baseTheme$9 = EditorView$1.baseTheme({
        $tooltip: {
            position: "fixed",
            border: "1px solid #ddd",
            backgroundColor: "#f5f5f5",
            zIndex: 100
        }
    });
    /// Supporting extension for displaying tooltips. Allows
    /// [`showTooltip`](#tooltip.showTooltip) to be used to define
    /// tooltips.
    function tooltips() {
        return [tooltipPlugin, baseTheme$9];
    }
    /// Behavior by which an extension can provide a tooltip to be shown.
    const showTooltip = Facet.define();
    const HoverTime = 750, HoverMaxDist = 10;
    class HoverPlugin {
        constructor(view, source, field, setHover) {
            this.view = view;
            this.source = source;
            this.field = field;
            this.setHover = setHover;
            this.lastMouseMove = null;
            this.hoverTimeout = -1;
            this.mouseInside = false;
            this.checkHover = this.checkHover.bind(this);
            view.dom.addEventListener("mouseenter", this.mouseenter = this.mouseenter.bind(this));
            view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
            view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
        }
        get active() {
            return this.view.state.field(this.field);
        }
        checkHover() {
            this.hoverTimeout = -1;
            if (!this.mouseInside || this.active)
                return;
            let now = Date.now(), lastMove = this.lastMouseMove;
            if (now - lastMove.timeStamp < HoverTime) {
                this.hoverTimeout = setTimeout(this.checkHover, HoverTime - (now - lastMove.timeStamp));
                return;
            }
            let pos = this.view.contentDOM.contains(lastMove.target)
                ? this.view.posAtCoords({ x: lastMove.clientX, y: lastMove.clientY }) : -1;
            let open = pos == null ? null : this.source(this.view, (from, to) => {
                return from <= pos && to >= pos && (from == to || isOverRange(this.view, from, to, lastMove.clientX, lastMove.clientY));
            });
            if (open)
                this.view.dispatch({ effects: this.setHover.of(open) });
        }
        mousemove(event) {
            var _a;
            this.lastMouseMove = event;
            if (this.hoverTimeout < 0)
                this.hoverTimeout = setTimeout(this.checkHover, HoverTime);
            let tooltip = this.active;
            if (tooltip && !isInTooltip(event.target)) {
                let { pos } = tooltip, end = (_a = tooltip.end) !== null && _a !== void 0 ? _a : pos;
                if ((pos == end ? this.view.posAtCoords({ x: event.clientX, y: event.clientY }) != pos
                    : !isOverRange(this.view, pos, end, event.clientX, event.clientY, HoverMaxDist)))
                    this.view.dispatch({ effects: this.setHover.of(null) });
            }
        }
        mouseenter() {
            this.mouseInside = true;
        }
        mouseleave() {
            this.mouseInside = false;
            if (this.active)
                this.view.dispatch({ effects: this.setHover.of(null) });
        }
        destroy() {
            clearTimeout(this.hoverTimeout);
            this.view.dom.removeEventListener("mouseenter", this.mouseenter);
            this.view.dom.removeEventListener("mouseleave", this.mouseleave);
            this.view.dom.removeEventListener("mousemove", this.mousemove);
        }
    }
    function isInTooltip(elt) {
        for (let cur = elt; cur; cur = cur.parentNode)
            if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip"))
                return true;
        return false;
    }
    function isOverRange(view, from, to, x, y, margin = 0) {
        let range = document.createRange();
        let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);
        range.setEnd(toDOM.node, toDOM.offset);
        range.setStart(fromDOM.node, fromDOM.offset);
        let rects = range.getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
            if (dist <= margin)
                return true;
        }
        return false;
    }
    /// Enable a hover tooltip, which shows up when the pointer hovers
    /// over ranges of text. The callback should, for each hoverable
    /// range, call its `check` argument to see if that range is being
    /// hovered over, and return a tooltip description when it is.
    function hoverTooltip(source, options = {}) {
        const setHover = StateEffect.define();
        const hoverState = StateField.define({
            create() { return null; },
            update(value, tr) {
                if (value && (options.hideOnChange && (tr.docChanged || tr.selection)))
                    return null;
                for (let effect of tr.effects)
                    if (effect.is(setHover))
                        return effect.value;
                if (value && tr.docChanged) {
                    let newPos = tr.changes.mapPos(value.pos, -1, MapMode.TrackDel);
                    if (newPos == null)
                        return null;
                    let copy = Object.assign(Object.create(null), value);
                    copy.pos = newPos;
                    if (value.end != null)
                        copy.end = tr.changes.mapPos(value.end);
                    return copy;
                }
                return value;
            },
            provide: [showTooltip.nFrom(v => v ? [v] : [])]
        });
        return [
            hoverState,
            ViewPlugin$1.define(view => new HoverPlugin(view, source, hoverState, setHover)),
            tooltips()
        ];
    }

    /// An instance of this is passed to completion source functions.
    class CompletionContext {
        /// Create a new completion context. (Mostly useful for testing
        /// completion sources—in the editor, the extension will create
        /// these for you.)
        constructor(
        /// The editor state that the completion happens in.
        state, 
        /// The position at which the completion happens.
        pos, 
        /// Indicates whether completion was activated explicitly, or
        /// implicitly by typing. The usual way to respond to this is to
        /// only return completions when either there is part of a
        /// completable entity at the cursor, or explicit is true.
        explicit) {
            this.state = state;
            this.pos = pos;
            this.explicit = explicit;
            /// @internal
            this.abortListeners = [];
        }
        /// Get the extent, content, and (if there is a token) type of the
        /// token before `this.pos`.
        tokenBefore(types) {
            let token = this.state.tree.resolve(this.pos, -1);
            while (token && types.indexOf(token.name) < 0)
                token = token.parent;
            return token ? { from: token.from, to: this.pos,
                text: this.state.sliceDoc(token.from, this.pos),
                type: token.type } : null;
        }
        /// Get the match of the given expression directly before the
        /// cursor.
        matchBefore(expr) {
            let line = this.state.doc.lineAt(this.pos);
            let start = Math.max(line.from, this.pos - 250);
            let str = line.slice(start - line.from, this.pos - line.from);
            let found = str.search(ensureAnchor(expr, false));
            return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
        }
        /// Yields true when the query has been aborted. Can be useful in
        /// asynchronous queries to avoid doing work that will be ignored.
        get aborted() { return this.abortListeners == null; }
        /// Allows you to register abort handlers, which will be called when
        /// the query is
        /// [aborted](#autocomplete.CompletionContext.aborted).
        addEventListener(_type, listener) {
            if (this.abortListeners)
                this.abortListeners.push(listener);
        }
    }
    class Option {
        constructor(completion, source, match) {
            this.completion = completion;
            this.source = source;
            this.match = match;
        }
    }
    function cur(state) { return state.selection.primary.head; }
    // Make sure the given regexp has a $ at its end and, if `start` is
    // true, a ^ at its start.
    function ensureAnchor(expr, start) {
        var _a;
        let { source } = expr;
        let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
        if (!addStart && !addEnd)
            return expr;
        return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
    }
    function applyCompletion(view, option) {
        let apply = option.completion.apply || option.completion.label;
        let result = option.source;
        if (typeof apply == "string") {
            view.dispatch({
                changes: { from: result.from, to: result.to, insert: apply },
                selection: { anchor: result.from + apply.length }
            });
        }
        else {
            apply(view, option.completion, result.from, result.to);
        }
    }

    // Scores are counted from 0 (great match) down to negative numbers,
    // assigning specific penalty values for specific shortcomings.
    var Penalty;
    (function (Penalty) {
        Penalty[Penalty["Gap"] = -1100] = "Gap";
        Penalty[Penalty["NotStart"] = -700] = "NotStart";
        Penalty[Penalty["CaseFold"] = -200] = "CaseFold";
        Penalty[Penalty["ByWord"] = -100] = "ByWord"; // The match is by-word, meaning each char in the pattern matches the start of a word in the string
    })(Penalty || (Penalty = {}));
    var Tp;
    (function (Tp) {
        Tp[Tp["NonWord"] = 0] = "NonWord";
        Tp[Tp["Upper"] = 1] = "Upper";
        Tp[Tp["Lower"] = 2] = "Lower";
    })(Tp || (Tp = {}));
    // A pattern matcher for fuzzy completion matching. Create an instance
    // once for a pattern, and then use that to match any number of
    // completions.
    class FuzzyMatcher {
        constructor(pattern) {
            this.pattern = pattern;
            this.chars = [];
            this.folded = [];
            // Buffers reused by calls to `match` to track matched character
            // positions.
            this.any = [];
            this.precise = [];
            this.byWord = [];
            for (let p = 0; p < pattern.length;) {
                let char = codePointAt(pattern, p), size = codePointSize(char);
                this.chars.push(char);
                let part = pattern.slice(p, p + size), upper = part.toUpperCase();
                this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
                p += size;
            }
            this.astral = pattern.length != this.chars.length;
        }
        // Matches a given word (completion) against the pattern (input).
        // Will return null for no match, and otherwise an array that starts
        // with the match score, followed by any number of `from, to` pairs
        // indicating the matched parts of `word`.
        //
        // The score is a number that is more negative the worse the match
        // is. See `Penalty` above.
        match(word) {
            if (this.pattern.length == 0)
                return [0];
            if (word.length < this.pattern.length)
                return null;
            let { chars, folded, any, precise, byWord } = this;
            // For single-character queries, only match when they occur right
            // at the start
            if (chars.length == 1) {
                let first = codePointAt(word, 0);
                return first == chars[0] ? [0, 0, codePointSize(first)]
                    : first == folded[0] ? [Penalty.CaseFold, 0, codePointSize(first)] : null;
            }
            let direct = word.indexOf(this.pattern);
            if (direct == 0)
                return [0, 0, this.pattern.length];
            let len = chars.length, anyTo = 0;
            if (direct < 0) {
                for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                    let next = codePointAt(word, i);
                    if (next == chars[anyTo] || next == folded[anyTo])
                        any[anyTo++] = i;
                    i += codePointSize(next);
                }
                // No match, exit immediately
                if (anyTo < len)
                    return null;
            }
            let preciseTo = 0;
            let byWordTo = 0, byWordFolded = false;
            let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
            for (let i = 0, e = Math.min(word.length, 200), prevType = Tp.NonWord; i < e && byWordTo < len;) {
                let next = codePointAt(word, i);
                if (direct < 0) {
                    if (preciseTo < len && next == chars[preciseTo])
                        precise[preciseTo++] = i;
                    if (adjacentTo < len) {
                        if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                            if (adjacentTo == 0)
                                adjacentStart = i;
                            adjacentEnd = i;
                            adjacentTo++;
                        }
                        else {
                            adjacentTo = 0;
                        }
                    }
                }
                let ch, type = next < 0xff
                    ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? Tp.Lower : next >= 65 && next <= 90 ? Tp.Upper : Tp.NonWord)
                    : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? Tp.Upper : ch != ch.toUpperCase() ? Tp.Lower : Tp.NonWord);
                if (type == Tp.Upper || prevType == Tp.NonWord && type != Tp.NonWord &&
                    (this.chars[byWordTo] == next || (this.folded[byWordTo] == next && (byWordFolded = true))))
                    byWord[byWordTo++] = i;
                prevType = type;
                i += codePointSize(next);
            }
            if (byWordTo == len && byWord[0] == 0)
                return this.result(Penalty.ByWord + (byWordFolded ? Penalty.CaseFold : 0), byWord, word);
            if (adjacentTo == len && adjacentStart == 0)
                return [Penalty.CaseFold, 0, adjacentEnd];
            if (direct > -1)
                return [Penalty.NotStart, direct, direct + this.pattern.length];
            if (adjacentTo == len)
                return [Penalty.CaseFold + Penalty.NotStart, adjacentStart, adjacentEnd];
            if (byWordTo == len)
                return this.result(Penalty.ByWord + (byWordFolded ? Penalty.CaseFold : 0) + Penalty.NotStart, byWord, word);
            return chars.length == 2 ? null : this.result((any[0] ? Penalty.NotStart : 0) + Penalty.CaseFold + Penalty.Gap, any, word);
        }
        result(score, positions, word) {
            let result = [score], i = 1;
            for (let pos of positions) {
                let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
                if (i > 1 && result[i - 1] == pos)
                    result[i - 1] = to;
                else {
                    result[i++] = pos;
                    result[i++] = to;
                }
            }
            return result;
        }
    }

    const completionConfig = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                activateOnTyping: true,
                override: null,
                maxRenderedOptions: 100
            });
        }
    });

    const MaxInfoWidth = 300;
    const baseTheme$a = EditorView$1.baseTheme({
        "$tooltip.autocomplete": {
            "& > ul": {
                fontFamily: "monospace",
                overflowY: "auto",
                whiteSpace: "nowrap",
                maxHeight: "10em",
                listStyle: "none",
                margin: 0,
                padding: 0,
                "& > li": {
                    cursor: "pointer",
                    padding: "1px 1em 1px 3px",
                    lineHeight: 1.2
                },
                "& > li[aria-selected]": {
                    background_fallback: "#bdf",
                    backgroundColor: "Highlight",
                    color_fallback: "white",
                    color: "HighlightText"
                }
            }
        },
        "$completionListIncompleteTop:before, $completionListIncompleteBottom:after": {
            content: '"···"',
            opacity: 0.5,
            display: "block",
            textAlign: "center"
        },
        "$tooltip.completionInfo": {
            position: "absolute",
            padding: "3px 9px",
            width: "max-content",
            maxWidth: MaxInfoWidth + "px",
        },
        "$tooltip.completionInfo.left": { right: "100%" },
        "$tooltip.completionInfo.right": { left: "100%" },
        "$$light $snippetField": { backgroundColor: "#ddd" },
        "$$dark $snippetField": { backgroundColor: "#333" },
        "$snippetFieldPosition": {
            verticalAlign: "text-top",
            width: 0,
            height: "1.15em",
            margin: "0 -0.7px -.7em",
            borderLeft: "1.4px dotted #888"
        },
        $completionMatchedText: {
            textDecoration: "underline"
        },
        $completionDetail: {
            marginLeft: "0.5em",
            fontStyle: "italic"
        },
        $completionIcon: {
            fontSize: "90%",
            width: ".8em",
            display: "inline-block",
            textAlign: "center",
            paddingRight: ".6em",
            opacity: "0.6"
        },
        "$completionIcon.function, $completionIcon.method": {
            "&:after": { content: "'ƒ'" }
        },
        "$completionIcon.class": {
            "&:after": { content: "'○'" }
        },
        "$completionIcon.interface": {
            "&:after": { content: "'◌'" }
        },
        "$completionIcon.variable": {
            "&:after": { content: "'𝑥'" }
        },
        "$completionIcon.constant": {
            "&:after": { content: "'𝐶'" }
        },
        "$completionIcon.type": {
            "&:after": { content: "'𝑡'" }
        },
        "$completionIcon.enum": {
            "&:after": { content: "'∪'" }
        },
        "$completionIcon.property": {
            "&:after": { content: "'□'" }
        },
        "$completionIcon.keyword": {
            "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
        },
        "$completionIcon.namespace": {
            "&:after": { content: "'▢'" }
        },
        "$completionIcon.text": {
            "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
        }
    });

    function createListBox(options, id, range) {
        const ul = document.createElement("ul");
        ul.id = id;
        ul.setAttribute("role", "listbox");
        ul.setAttribute("aria-expanded", "true");
        for (let i = range.from; i < range.to; i++) {
            let { completion, match } = options[i];
            const li = ul.appendChild(document.createElement("li"));
            li.id = id + "-" + i;
            let icon = li.appendChild(document.createElement("div"));
            icon.className = themeClass$1("completionIcon" + (completion.type ? "." + completion.type : ""));
            icon.setAttribute("aria-hidden", "true");
            let labelElt = li.appendChild(document.createElement("span"));
            labelElt.className = themeClass$1("completionLabel");
            let { label, detail } = completion, off = 0;
            for (let j = 1; j < match.length;) {
                let from = match[j++], to = match[j++];
                if (from > off)
                    labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                let span = labelElt.appendChild(document.createElement("span"));
                span.appendChild(document.createTextNode(label.slice(from, to)));
                span.className = themeClass$1("completionMatchedText");
                off = to;
            }
            if (off < label.length)
                labelElt.appendChild(document.createTextNode(label.slice(off)));
            if (detail) {
                let detailElt = li.appendChild(document.createElement("span"));
                detailElt.className = themeClass$1("completionDetail");
                detailElt.textContent = detail;
            }
            li.setAttribute("role", "option");
        }
        if (range.from)
            ul.classList.add(themeClass$1("completionListIncompleteTop"));
        if (range.to < options.length)
            ul.classList.add(themeClass$1("completionListIncompleteBottom"));
        return ul;
    }
    function createInfoDialog(option) {
        let dom = document.createElement("div");
        dom.className = themeClass$1("tooltip.completionInfo");
        let { info } = option.completion;
        if (typeof info == "string")
            dom.textContent = info;
        else
            dom.appendChild(info(option.completion));
        return dom;
    }
    function rangeAroundSelected(total, selected, max) {
        if (total <= max)
            return { from: 0, to: total };
        if (selected <= (total >> 1)) {
            let off = Math.floor(selected / max);
            return { from: off * max, to: (off + 1) * max };
        }
        let off = Math.floor((total - selected) / max);
        return { from: total - (off + 1) * max, to: total - off * max };
    }
    class CompletionTooltip {
        constructor(view, stateField) {
            this.view = view;
            this.stateField = stateField;
            this.info = null;
            this.placeInfo = {
                read: () => this.measureInfo(),
                write: (pos) => this.positionInfo(pos),
                key: this
            };
            let cState = view.state.field(stateField);
            let { options, selected } = cState.open;
            let config = view.state.facet(completionConfig);
            this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
            this.dom = document.createElement("div");
            this.dom.addEventListener("mousedown", (e) => {
                for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                    if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                        applyCompletion(view, options[+match[1]]);
                        e.preventDefault();
                        return;
                    }
                }
            });
            this.list = this.dom.appendChild(createListBox(options, cState.id, this.range));
            this.list.addEventListener("scroll", () => {
                if (this.info)
                    this.view.requestMeasure(this.placeInfo);
            });
        }
        mount() { this.updateSel(); }
        update(update) {
            if (update.state.field(this.stateField) != update.prevState.field(this.stateField))
                this.updateSel();
        }
        positioned() {
            if (this.info)
                this.view.requestMeasure(this.placeInfo);
        }
        updateSel() {
            let cState = this.view.state.field(this.stateField), open = cState.open;
            if (open.selected < this.range.from || open.selected >= this.range.to) {
                this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
                this.list.remove();
                this.list = this.dom.appendChild(createListBox(open.options, cState.id, this.range));
                this.list.addEventListener("scroll", () => {
                    if (this.info)
                        this.view.requestMeasure(this.placeInfo);
                });
            }
            if (this.updateSelectedOption(open.selected)) {
                if (this.info) {
                    this.info.remove();
                    this.info = null;
                }
                let option = open.options[open.selected];
                if (option.completion.info) {
                    this.info = this.dom.appendChild(createInfoDialog(option));
                    this.view.requestMeasure(this.placeInfo);
                }
            }
        }
        updateSelectedOption(selected) {
            let set = null;
            for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
                if (i == selected) {
                    if (!opt.hasAttribute("aria-selected")) {
                        opt.setAttribute("aria-selected", "true");
                        set = opt;
                    }
                }
                else {
                    if (opt.hasAttribute("aria-selected"))
                        opt.removeAttribute("aria-selected");
                }
            }
            if (set)
                scrollIntoView(this.list, set);
            return set;
        }
        measureInfo() {
            let sel = this.dom.querySelector("[aria-selected]");
            if (!sel)
                return null;
            let rect = this.dom.getBoundingClientRect();
            let top = sel.getBoundingClientRect().top - rect.top;
            if (top < 0 || top > this.list.clientHeight - 10)
                return null;
            let left = this.view.textDirection == Direction$1.RTL;
            let spaceLeft = rect.left, spaceRight = innerWidth - rect.right;
            if (left && spaceLeft < Math.min(MaxInfoWidth, spaceRight))
                left = false;
            else if (!left && spaceRight < Math.min(MaxInfoWidth, spaceLeft))
                left = true;
            return { top, left };
        }
        positionInfo(pos) {
            if (this.info && pos) {
                this.info.style.top = pos.top + "px";
                this.info.classList.toggle("cm-tooltip-completionInfo-left", pos.left);
                this.info.classList.toggle("cm-tooltip-completionInfo-right", !pos.left);
            }
        }
    }
    // We allocate a new function instance every time the completion
    // changes to force redrawing/repositioning of the tooltip
    function completionTooltip(stateField) {
        return (view) => new CompletionTooltip(view, stateField);
    }
    function scrollIntoView(container, element) {
        let parent = container.getBoundingClientRect();
        let self = element.getBoundingClientRect();
        if (self.top < parent.top)
            container.scrollTop -= parent.top - self.top;
        else if (self.bottom > parent.bottom)
            container.scrollTop += self.bottom - parent.bottom;
    }

    const MaxOptions = 300;
    function sortOptions(active, state) {
        let options = [];
        for (let a of active)
            if (a.hasResult()) {
                let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;
                for (let option of a.result.options)
                    if (match = matcher.match(option.label)) {
                        if (option.boost != null)
                            match[0] += option.boost;
                        options.push(new Option(option, a, match));
                    }
            }
        options.sort(cmpOption);
        return options.length > MaxOptions ? options.slice(0, MaxOptions) : options;
    }
    class CompletionDialog {
        constructor(options, attrs, tooltip, timestamp, selected) {
            this.options = options;
            this.attrs = attrs;
            this.tooltip = tooltip;
            this.timestamp = timestamp;
            this.selected = selected;
        }
        setSelected(selected, id) {
            return selected == this.selected || selected >= this.options.length ? this
                : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);
        }
        static build(active, state, id, prev) {
            let options = sortOptions(active, state);
            if (!options.length)
                return null;
            let selected = 0;
            if (prev) {
                let selectedValue = prev.options[prev.selected].completion;
                for (let i = 0; i < options.length && !selected; i++) {
                    if (options[i].completion == selectedValue)
                        selected = i;
                }
            }
            return new CompletionDialog(options, makeAttrs(id, selected), [{
                    pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
                    style: "autocomplete",
                    create: completionTooltip(completionState)
                }], prev ? prev.timestamp : Date.now(), selected);
        }
        map(changes) {
            return new CompletionDialog(this.options, this.attrs, [Object.assign(Object.assign({}, this.tooltip[0]), { pos: changes.mapPos(this.tooltip[0].pos) })], this.timestamp, this.selected);
        }
    }
    class CompletionState {
        constructor(active, id, open) {
            this.active = active;
            this.id = id;
            this.open = open;
        }
        static start() {
            return new CompletionState(none$9, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
        }
        update(tr) {
            let { state } = tr, conf = state.facet(completionConfig);
            let sources = conf.override || state.languageDataAt("autocomplete", cur(state));
            let active = sources.map(source => {
                let value = this.active.find(s => s.source == source) || new ActiveSource(source, State$1.Inactive, false);
                return value.update(tr, conf);
            });
            if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
                active = this.active;
            let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
                !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open)
                : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
            for (let effect of tr.effects)
                if (effect.is(setSelectedEffect))
                    open = open && open.setSelected(effect.value, this.id);
            return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
        }
        get tooltip() { return this.open ? this.open.tooltip : none$9; }
        get attrs() { return this.open ? this.open.attrs : baseAttrs; }
    }
    function sameResults(a, b) {
        if (a == b)
            return true;
        for (let iA = 0, iB = 0;;) {
            while (iA < a.length && !a[iA].hasResult)
                iA++;
            while (iB < b.length && !b[iB].hasResult)
                iB++;
            let endA = iA == a.length, endB = iB == b.length;
            if (endA || endB)
                return endA == endB;
            if (a[iA++].result != b[iB++].result)
                return false;
        }
    }
    function makeAttrs(id, selected) {
        return {
            "aria-autocomplete": "list",
            "aria-activedescendant": id + "-" + selected,
            "aria-owns": id
        };
    }
    const baseAttrs = { "aria-autocomplete": "list" }, none$9 = [];
    function cmpOption(a, b) {
        let dScore = b.match[0] - a.match[0];
        if (dScore)
            return dScore;
        let lA = a.completion.label, lB = b.completion.label;
        return lA < lB ? -1 : lA == lB ? 0 : 1;
    }
    var State$1;
    (function (State) {
        State[State["Inactive"] = 0] = "Inactive";
        State[State["Pending"] = 1] = "Pending";
        State[State["Result"] = 2] = "Result";
    })(State$1 || (State$1 = {}));
    class ActiveSource {
        constructor(source, state, explicit) {
            this.source = source;
            this.state = state;
            this.explicit = explicit;
        }
        hasResult() { return false; }
        update(tr, conf) {
            let event = tr.annotation(Transaction.userEvent), value = this;
            if (event == "input" || event == "delete")
                value = value.handleUserEvent(tr, event, conf);
            else if (tr.docChanged)
                value = value.handleChange(tr);
            else if (tr.selection && value.state != State$1.Inactive)
                value = new ActiveSource(value.source, State$1.Inactive, false);
            for (let effect of tr.effects) {
                if (effect.is(startCompletionEffect))
                    value = new ActiveSource(value.source, State$1.Pending, effect.value);
                else if (effect.is(closeCompletionEffect))
                    value = new ActiveSource(value.source, State$1.Inactive, false);
                else if (effect.is(setActiveEffect))
                    for (let active of effect.value)
                        if (active.source == value.source)
                            value = active;
            }
            return value;
        }
        handleUserEvent(_tr, type, conf) {
            return type == "delete" || !conf.activateOnTyping ? this : new ActiveSource(this.source, State$1.Pending, false);
        }
        handleChange(tr) {
            return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, State$1.Inactive, false) : this;
        }
    }
    class ActiveResult extends ActiveSource {
        constructor(source, explicit, result, from, to, span) {
            super(source, State$1.Result, explicit);
            this.result = result;
            this.from = from;
            this.to = to;
            this.span = span;
        }
        hasResult() { return true; }
        handleUserEvent(tr, type, conf) {
            let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
            let pos = cur(tr.state);
            if ((this.explicit ? pos < from : pos <= from) || pos > to)
                return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? State$1.Pending : State$1.Inactive, false);
            if (this.span && (from == to || this.span.test(tr.state.sliceDoc(from, to))))
                return new ActiveResult(this.source, this.explicit, this.result, from, to, this.span);
            return new ActiveSource(this.source, State$1.Pending, this.explicit);
        }
        handleChange(tr) {
            return tr.changes.touchesRange(this.from, this.to)
                ? new ActiveSource(this.source, State$1.Inactive, false)
                : new ActiveResult(this.source, this.explicit, this.result, tr.changes.mapPos(this.from), tr.changes.mapPos(this.to, 1), this.span);
        }
        map(mapping) {
            return new ActiveResult(this.source, this.explicit, this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1), this.span);
        }
    }
    const startCompletionEffect = StateEffect.define();
    const closeCompletionEffect = StateEffect.define();
    const setActiveEffect = StateEffect.define({
        map(sources, mapping) { return sources.map(s => s.hasResult() && !mapping.empty ? s.map(mapping) : s); }
    });
    const setSelectedEffect = StateEffect.define();
    const completionState = StateField.define({
        create() { return CompletionState.start(); },
        update(value, tr) { return value.update(tr); },
        provide: [
            showTooltip.nFrom(state => state.tooltip),
            EditorView$1.contentAttributes.from(state => state.attrs)
        ]
    });

    const CompletionInteractMargin = 75;
    /// Returns a command that moves the completion selection forward or
    /// backward by the given amount.
    function moveCompletionSelection(forward, by = "option") {
        return (view) => {
            let cState = view.state.field(completionState, false);
            if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
                return false;
            let step = 1, tooltip;
            if (by == "page" && (tooltip = view.dom.querySelector(".cm-tooltip-autocomplete")))
                step = Math.max(2, Math.floor(tooltip.offsetHeight / tooltip.firstChild.offsetHeight));
            let selected = cState.open.selected + step * (forward ? 1 : -1), { length } = cState.open.options;
            if (selected < 0)
                selected = by == "page" ? 0 : length - 1;
            else if (selected >= length)
                selected = by == "page" ? length - 1 : 0;
            view.dispatch({ effects: setSelectedEffect.of(selected) });
            return true;
        };
    }
    /// Accept the current completion.
    const acceptCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
            return false;
        applyCompletion(view, cState.open.options[cState.open.selected]);
        return true;
    };
    /// Explicitly start autocompletion.
    const startCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState)
            return false;
        view.dispatch({ effects: startCompletionEffect.of(true) });
        return true;
    };
    /// Close the currently active completion.
    const closeCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState || !cState.active.some(a => a.state != State.Inactive))
            return false;
        view.dispatch({ effects: closeCompletionEffect.of(null) });
        return true;
    };
    class RunningQuery {
        constructor(source, context) {
            this.source = source;
            this.context = context;
            this.time = Date.now();
            this.updates = [];
            // Note that 'undefined' means 'not done yet', whereas 'null' means
            // 'query returned null'.
            this.done = undefined;
        }
    }
    const DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;
    var CompositionState;
    (function (CompositionState) {
        CompositionState[CompositionState["None"] = 0] = "None";
        CompositionState[CompositionState["Started"] = 1] = "Started";
        CompositionState[CompositionState["Changed"] = 2] = "Changed";
        CompositionState[CompositionState["ChangedAndMoved"] = 3] = "ChangedAndMoved";
    })(CompositionState || (CompositionState = {}));
    const completionPlugin = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.view = view;
            this.debounceUpdate = -1;
            this.running = [];
            this.debounceAccept = -1;
            this.composing = CompositionState.None;
            for (let active of view.state.field(completionState).active)
                if (active.state == State.Pending)
                    this.startQuery(active);
        }
        update(update) {
            let cState = update.state.field(completionState);
            if (!update.selectionSet && !update.docChanged && update.prevState.field(completionState) == cState)
                return;
            let doesReset = update.transactions.some(tr => {
                let event = tr.annotation(Transaction.userEvent);
                return (tr.selection || tr.docChanged) && event != "input" && event != "delete";
            });
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (doesReset ||
                    query.updates.length + update.transactions.length > MaxUpdateCount && query.time - Date.now() > MinAbortTime) {
                    for (let handler of query.context.abortListeners) {
                        try {
                            handler();
                        }
                        catch (e) {
                            logException$1(this.view.state, e);
                        }
                    }
                    query.context.abortListeners = null;
                    this.running.splice(i--, 1);
                }
                else {
                    query.updates.push(...update.transactions);
                }
            }
            if (this.debounceUpdate > -1)
                clearTimeout(this.debounceUpdate);
            this.debounceUpdate = cState.active.some(a => a.state == State.Pending && !this.running.some(q => q.source == a.source))
                ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
            if (this.composing != CompositionState.None)
                for (let tr of update.transactions) {
                    if (tr.annotation(Transaction.userEvent) == "input")
                        this.composing = CompositionState.Changed;
                    else if (this.composing == CompositionState.Changed && tr.selection)
                        this.composing = CompositionState.ChangedAndMoved;
                }
        }
        startUpdate() {
            this.debounceUpdate = -1;
            let { state } = this.view, cState = state.field(completionState);
            for (let active of cState.active) {
                if (active.state == State.Pending && !this.running.some(r => r.source == active.source))
                    this.startQuery(active);
            }
        }
        startQuery(active) {
            let { state } = this.view, pos = cur(state);
            let context = new CompletionContext(state, pos, active.explicit);
            let pending = new RunningQuery(active.source, context);
            this.running.push(pending);
            Promise.resolve(active.source(context)).then(result => {
                if (!pending.context.aborted) {
                    pending.done = result || null;
                    this.scheduleAccept();
                }
            }, err => {
                this.view.dispatch({ effects: closeCompletionEffect.of(null) });
                logException$1(this.view.state, err);
            });
        }
        scheduleAccept() {
            if (this.running.every(q => q.done !== undefined))
                this.accept();
            else if (this.debounceAccept < 0)
                this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
        }
        // For each finished query in this.running, try to create a result
        // or, if appropriate, restart the query.
        accept() {
            var _a;
            if (this.debounceAccept > -1)
                clearTimeout(this.debounceAccept);
            this.debounceAccept = -1;
            let updated = [];
            let conf = this.view.state.facet(completionConfig);
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (query.done === undefined)
                    continue;
                this.running.splice(i--, 1);
                if (query.done) {
                    let active = new ActiveResult(query.source, query.context.explicit, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state), query.done.span ? ensureAnchor(query.done.span, true) : null);
                    // Replay the transactions that happened since the start of
                    // the request and see if that preserves the result
                    for (let tr of query.updates)
                        active = active.update(tr, conf);
                    if (active.hasResult()) {
                        updated.push(active);
                        continue;
                    }
                }
                let current = this.view.state.field(completionState).active.find(a => a.source == query.source);
                if (current && current.state == State.Pending) {
                    if (query.done == null) {
                        // Explicitly failed. Should clear the pending status if it
                        // hasn't been re-set in the meantime.
                        let active = new ActiveSource(query.source, State.Inactive, false);
                        for (let tr of query.updates)
                            active = active.update(tr, conf);
                        if (active.state != State.Pending)
                            updated.push(active);
                    }
                    else {
                        // Cleared by subsequent transactions. Restart.
                        this.startQuery(current);
                    }
                }
            }
            if (updated.length)
                this.view.dispatch({ effects: setActiveEffect.of(updated) });
        }
    }, {
        eventHandlers: {
            compositionstart() {
                this.composing = CompositionState.Started;
            },
            compositionend() {
                if (this.composing == CompositionState.ChangedAndMoved)
                    this.view.dispatch({ effects: startCompletionEffect.of(false) });
                this.composing = CompositionState.None;
            }
        } // See https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/949
    });

    let fieldMarker = Decoration$1.widget({ widget: new class extends WidgetType$1 {
            toDOM() {
                let span = document.createElement("span");
                span.className = themeClass$1("snippetFieldPosition");
                return span;
            }
            ignoreEvent() { return false; }
        } });
    let fieldRange = Decoration$1.mark({ class: themeClass$1("snippetField") });
    class ActiveSnippet {
        constructor(ranges, active) {
            this.ranges = ranges;
            this.active = active;
            this.deco = Decoration$1.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
        }
        map(changes) {
            return new ActiveSnippet(this.ranges.map(r => r.map(changes)), this.active);
        }
        selectionInsideField(sel) {
            return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
        }
    }
    const setActive = StateEffect.define({
        map(value, changes) { return value && value.map(changes); }
    });
    const moveToField = StateEffect.define();
    const snippetState = StateField.define({
        create() { return null; },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setActive))
                    return effect.value;
                if (effect.is(moveToField) && value)
                    return new ActiveSnippet(value.ranges, effect.value);
            }
            if (value && tr.docChanged)
                value = value.map(tr.changes);
            if (value && tr.selection && !value.selectionInsideField(tr.selection))
                value = null;
            return value;
        },
        provide: [EditorView$1.decorations.from(val => val ? val.deco : Decoration$1.none)]
    });
    function fieldSelection(ranges, field) {
        return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
    }
    function moveField(dir) {
        return ({ state, dispatch }) => {
            let active = state.field(snippetState, false);
            if (!active || dir < 0 && active.active == 0)
                return false;
            let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
            dispatch(state.update({
                selection: fieldSelection(active.ranges, next),
                effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
            }));
            return true;
        };
    }
    const clearSnippet = ({ state, dispatch }) => {
        let active = state.field(snippetState, false);
        if (!active)
            return false;
        dispatch(state.update({ effects: setActive.of(null) }));
        return true;
    };
    const snippetKeymap = precedence(keymap$1([
        { key: "Tab", run: moveField(1), shift: moveField(-1) },
        { key: "Escape", run: clearSnippet }
    ]), "override");

    /// Returns an extension that enables autocompletion.
    function autocompletion(config = {}) {
        return [
            completionState,
            completionConfig.of(config),
            completionPlugin,
            baseTheme$a,
            tooltips(),
            precedence(keymap$1([
                { key: "ArrowDown", run: moveCompletionSelection(true) },
                { key: "ArrowUp", run: moveCompletionSelection(false) },
                { key: "PageDown", run: moveCompletionSelection(true, "page") },
                { key: "PageUp", run: moveCompletionSelection(false, "page") },
                { key: "Enter", run: acceptCompletion }
            ]), "override")
        ];
    }
    /// Basic keybindings for autocompletion.
    ///
    ///  - Ctrl-Space (Cmd-Space on macOS): [`startCompletion`](#autocomplete.startCompletion)
    ///  - Escape: [`closeCompletion`](#autocomplete.closeCompletion)
    const completionKeymap = [
        { key: "Mod-Space", run: startCompletion },
        { key: "Escape", run: closeCompletion }
    ];

    /// Comments or uncomments the current `SelectionRange` using line-comments.
    /// The line-comment token is defined on a language basis.
    const toggleLineComment = target => {
        return dispatch(toggleLineCommentWithOption(CommentOption.Toggle), target);
    };
    /// Comments or uncomments the current `SelectionRange` using block-comments.
    /// The block-comment tokens are defined on a language basis.
    const toggleBlockComment = target => {
        return dispatch(toggleBlockCommentWithOption(CommentOption.Toggle), target);
    };
    /// Default key bindings for this package.
    ///
    ///  - Ctrl-/ (Cmd-/ on macOS): [\`toggleLineComment\`](#comment.toggleLineComment).
    ///  - Shift-Alt-a: [\`toggleBlockComment\`](#comment.toggleBlockComment).
    const commentKeymap = [
        { key: "Mod-/", run: toggleLineComment },
        { key: "Alt-A", run: toggleBlockComment }
    ];
    function dispatch(cmd, target) {
        const tr = cmd(target.state);
        if (!tr)
            return false;
        target.dispatch(tr);
        return true;
    }
    var CommentOption;
    (function (CommentOption) {
        CommentOption[CommentOption["Toggle"] = 0] = "Toggle";
        CommentOption[CommentOption["OnlyComment"] = 1] = "OnlyComment";
        CommentOption[CommentOption["OnlyUncomment"] = 2] = "OnlyUncomment";
    })(CommentOption || (CommentOption = {}));
    function getConfig(state, pos = state.selection.primary.head) {
        return state.languageDataAt("commentTokens", pos)[0] || {};
    }
    const toggleBlockCommentWithOption = (option) => (state) => {
        const config = getConfig(state);
        return config.block ? new BlockCommenter(config.block.open, config.block.close).toggle(option, state) : null;
    };
    const toggleLineCommentWithOption = (option) => (state) => {
        const config = getConfig(state);
        return config.line ? new LineCommenter(config.line).toggle(option, state) : null;
    };
    // This class performs toggle, comment and uncomment
    // of block comments in languages that support them.
    // The `open` and `close` arguments refer to the open and close
    // tokens of which this `BlockCommenter` is made up.
    class BlockCommenter {
        constructor(open, close, margin = " ") {
            this.open = open;
            this.close = close;
            this.margin = margin;
        }
        toggle(option, state) {
            const selectionCommented = this.isSelectionCommented(state);
            if (selectionCommented !== null) {
                if (option !== CommentOption.OnlyComment) {
                    return state.update({
                        changes: selectionCommented.map(({ open, close }) => [
                            { from: open.pos - this.open.length, to: open.pos + open.margin },
                            { from: close.pos - close.margin, to: close.pos + this.close.length }
                        ])
                    });
                }
            }
            else {
                if (option !== CommentOption.OnlyUncomment) {
                    return state.update(state.changeByRange(range => {
                        const shift = (this.open + this.margin).length;
                        return {
                            changes: [{ from: range.from, insert: this.open + this.margin },
                                { from: range.to, insert: this.margin + this.close }],
                            range: EditorSelection.range(range.anchor + shift, range.head + shift)
                        };
                    }));
                }
            }
            return null;
        }
        /// Determines whether all selection ranges in `state` are block-commented.
        isSelectionCommented(state) {
            let result = [];
            for (const range of state.selection.ranges) {
                const x = this.isRangeCommented(state, range);
                if (x === null)
                    return null;
                result.push(x);
            }
            return result;
        }
        /// Determines if the `range` is block-commented in the given `state`.
        /// The `range` must be a valid range in `state`.
        isRangeCommented(state, range) {
            let textBefore = state.sliceDoc(range.from - SearchMargin, range.from);
            let textAfter = state.sliceDoc(range.to, range.to + SearchMargin);
            let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
            let beforeOff = textBefore.length - spaceBefore;
            if (textBefore.slice(beforeOff - this.open.length, beforeOff) == this.open &&
                textAfter.slice(spaceAfter, spaceAfter + this.close.length) == this.close) {
                return { open: { pos: range.from - spaceBefore, margin: spaceBefore && 1 },
                    close: { pos: range.to + spaceAfter, margin: spaceAfter && 1 } };
            }
            let startText, endText;
            if (range.to - range.from <= 2 * SearchMargin) {
                startText = endText = state.sliceDoc(range.from, range.to);
            }
            else {
                startText = state.sliceDoc(range.from, range.from + SearchMargin);
                endText = state.sliceDoc(range.to - SearchMargin, range.to);
            }
            let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
            let endOff = endText.length - endSpace - this.close.length;
            if (startText.slice(startSpace, startSpace + this.open.length) == this.open &&
                endText.slice(endOff, endOff + this.close.length) == this.close) {
                return { open: { pos: range.from + startSpace + this.open.length,
                        margin: /\s/.test(startText.charAt(startSpace + this.open.length)) ? 1 : 0 },
                    close: { pos: range.to - endSpace - this.close.length,
                        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
            }
            return null;
        }
    }
    const SearchMargin = 50;
    // This class performs toggle, comment and uncomment
    // of line comments in languages that support them.
    // The `lineCommentToken` argument refer to the token of
    // which this `LineCommenter` is made up.
    class LineCommenter {
        constructor(lineCommentToken, margin = " ") {
            this.lineCommentToken = lineCommentToken;
            this.margin = margin;
        }
        toggle(option, state) {
            const linesAcrossSelection = [];
            const linesAcrossRange = {};
            for (let i = 0; i < state.selection.ranges.length; i++) {
                const lines = getLinesInRange(state.doc, state.selection.ranges[i]);
                linesAcrossSelection.push(...lines);
                linesAcrossRange[i] = lines;
            }
            const column = this.isRangeCommented(state, linesAcrossSelection);
            if (column.isRangeLineSkipped) {
                if (option != CommentOption.OnlyComment) {
                    let changes = [];
                    for (let i = 0; i < state.selection.ranges.length; i++) {
                        const lines = linesAcrossRange[i];
                        for (const line of lines) {
                            if (lines.length > 1 && column.isLineSkipped[line.number])
                                continue;
                            const pos = line.from + column.minCol;
                            const posAfter = column.minCol + this.lineCommentToken.length;
                            const marginLen = line.slice(posAfter, posAfter + 1) == " " ? 1 : 0;
                            changes.push({ from: pos, to: pos + this.lineCommentToken.length + marginLen });
                        }
                    }
                    return state.update({ changes });
                }
            }
            else {
                if (option != CommentOption.OnlyUncomment) {
                    let changes = [];
                    for (let i = 0; i < state.selection.ranges.length; i++) {
                        const lines = linesAcrossRange[i];
                        for (const line of lines) {
                            if (lines.length <= 1 || !column.isLineSkipped[line.number])
                                changes.push({ from: line.from + column.minCol, insert: this.lineCommentToken + this.margin });
                        }
                    }
                    return state.update({ changes });
                }
            }
            return null;
        }
        isRangeCommented(_state, lines) {
            let minCol = Infinity;
            let isRangeLineDiscarded = true;
            const isLineSkipped = [];
            for (const line of lines) {
                const str = line.slice(0, Math.min(line.length, SearchMargin));
                const col = /^\s*/.exec(str)[0].length;
                if ((lines.length == 1 || col < str.length) && col < minCol) {
                    minCol = col;
                }
                if (isRangeLineDiscarded && (lines.length == 1 || col < str.length) &&
                    str.slice(col, col + this.lineCommentToken.length) != this.lineCommentToken) {
                    isRangeLineDiscarded = false;
                }
                isLineSkipped[line.number] = col == str.length;
            }
            return { minCol: minCol, isRangeLineSkipped: isRangeLineDiscarded, isLineSkipped: isLineSkipped };
        }
    }
    // Computes the lines spanned by `range`.
    /// @internal
    function getLinesInRange(doc, range) {
        let line = doc.lineAt(range.from);
        const lines = [];
        while (line.from + line.length < range.to ||
            (line.from <= range.to && range.to <= line.to)) {
            lines.push(line);
            if (line.number + 1 <= doc.lines) {
                line = doc.line(line.number + 1);
            }
            else {
                break;
            }
        }
        return lines;
    }

    // Don't compute precise column positions for line offsets above this
    // (since it could get expensive). Assume offset==column for them.
    const MaxOff = 2000;
    function rectangleFor(state, a, b) {
        let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
        let ranges = [];
        if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
            let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
            for (let i = startLine; i <= endLine; i++) {
                let line = state.doc.line(i);
                if (line.length <= endOff)
                    ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
            }
        }
        else {
            let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
            for (let i = startLine; i <= endLine; i++) {
                let line = state.doc.line(i), str = line.length > MaxOff ? line.slice(0, 2 * endCol) : line.slice();
                let start = findColumn(str, 0, startCol, state.tabSize), end = findColumn(str, 0, endCol, state.tabSize);
                if (!start.leftOver)
                    ranges.push(EditorSelection.range(line.from + start.offset, line.from + end.offset));
            }
        }
        return ranges;
    }
    function absoluteColumn(view, x) {
        let ref = view.coordsAtPos(view.viewport.from);
        return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
    }
    function getPos(view, event) {
        let offset = view.posAtCoords({ x: event.clientX, y: event.clientY });
        if (offset == null)
            return null;
        let line = view.state.doc.lineAt(offset), off = offset - line.from;
        let col = off > MaxOff ? -1
            : off == line.length ? absoluteColumn(view, event.clientX)
                : countColumn(line.slice(0, offset - line.from), 0, view.state.tabSize);
        return { line: line.number, col, off };
    }
    function rectangleSelectionStyle(view, event) {
        let start = getPos(view, event), startSel = view.state.selection;
        if (!start)
            return null;
        return {
            update(update) {
                if (update.docChanged) {
                    let newStart = update.changes.mapPos(update.prevState.doc.line(start.line).from);
                    let newLine = update.state.doc.lineAt(newStart);
                    start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, _extend, multiple) {
                let cur = getPos(view, event);
                if (!cur)
                    return startSel;
                let ranges = rectangleFor(view.state, start, cur);
                if (!ranges.length)
                    return startSel;
                if (multiple)
                    return EditorSelection.create(ranges.concat(startSel.ranges));
                else
                    return EditorSelection.create(ranges);
            }
        };
    }
    /// Create an extension that enables rectangular selections. By
    /// default, it will rect to left mouse drag with the alt key held
    /// down. When such a selection occurs, the text within the rectangle
    /// that was dragged over will be selected, as one selection
    /// [range](#state.SelectionRange) per line. You can pass a custom
    /// predicate function, which takes a `mousedown` event and returns
    /// true if it should be used for rectangular selection.
    function rectangularSelection(eventFilter) {
        let filter = eventFilter || (e => e.altKey && e.button == 0);
        return EditorView$1.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
    }

    const extTag = typeof Symbol == "undefined" ? "__goto-line" : Symbol("goto-line");
    function createLineDialog(view) {
        let dom = document.createElement("form");
        dom.innerHTML = `<label>${view.state.phrase("Go to line:")} <input class=${themeClass$1("textfield")} name=line></label>
<button class=${themeClass$1("button")} type=submit>${view.state.phrase("go")}</button>`;
        let input = dom.querySelector("input");
        function go() {
            let n = parseInt(input.value, 10);
            view.dispatch({
                reconfigure: { [extTag]: [baseTheme$b] },
                selection: !isNaN(n) && n > 0 && n <= view.state.doc.lines ? EditorSelection.cursor(view.state.doc.line(n).from) : undefined,
                scrollIntoView: true
            });
            view.focus();
        }
        dom.addEventListener("keydown", event => {
            if (event.keyCode == 27) { // Escape
                event.preventDefault();
                view.dispatch({ reconfigure: { append: [baseTheme$b] } });
                view.focus();
            }
            else if (event.keyCode == 13) { // Enter
                event.preventDefault();
                go();
            }
        });
        dom.addEventListener("submit", go);
        return { dom, style: "gotoLine", pos: -10 };
    }
    /// Command that shows a dialog asking the user for a line number, and
    /// when a valid number is provided, moves the cursor to that line.
    ///
    /// The dialog can be styled with the `panel.gotoLine` theme
    /// selector.
    const gotoLine = view => {
        let panel = getPanel(view, createLineDialog);
        if (!panel) {
            view.dispatch({ reconfigure: { append: [panels(), showPanel.of(createLineDialog), baseTheme$b] } });
            panel = getPanel(view, createLineDialog);
        }
        if (panel)
            panel.dom.querySelector("input").focus();
        return true;
    };
    const baseTheme$b = EditorView$1.baseTheme({
        "$panel.gotoLine": {
            padding: "2px 6px 4px",
            "& label": { fontSize: "80%" }
        }
    });
    /// Keymap that binds Alt-g to [`gotoLine`](#goto-line.gotoLine).
    const gotoLineKeymap = [
        { key: "Alt-g", run: gotoLine }
    ];

    const basicNormalize$1 = typeof String.prototype.normalize == "function" ? x => x.normalize("NFKD") : x => x;
    /// A search cursor provides an iterator over text matches in a
    /// document.
    class SearchCursor$1 {
        /// Create a text cursor. The query is the search string, `from` to
        /// `to` provides the region to search.
        ///
        /// When `normalize` is given, it will be called, on both the query
        /// string and the content it is matched against, before comparing.
        /// You can, for example, create a case-insensitive search by
        /// passing `s => s.toLowerCase()`.
        ///
        /// Text is always normalized with
        /// [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
        /// (when supported).
        constructor(text, query, from = 0, to = text.length, normalize) {
            /// The current match (only holds a meaningful value after
            /// [`next`](#search.SearchCursor.next) has been called and when
            /// `done` is false).
            this.value = { from: 0, to: 0 };
            /// Whether the end of the iterated region has been reached.
            this.done = false;
            this.matches = [];
            this.buffer = "";
            this.bufferPos = 0;
            this.iter = text.iterRange(from, to);
            this.bufferStart = from;
            this.normalize = normalize ? x => normalize(basicNormalize$1(x)) : basicNormalize$1;
            this.query = this.normalize(query);
        }
        peek() {
            if (this.bufferPos == this.buffer.length) {
                this.bufferStart += this.buffer.length;
                this.iter.next();
                if (this.iter.done)
                    return -1;
                this.bufferPos = 0;
                this.buffer = this.iter.value;
            }
            return this.buffer.charCodeAt(this.bufferPos);
        }
        /// Look for the next match. Updates the iterator's
        /// [`value`](#search.SearchCursor.value) and
        /// [`done`](#search.SearchCursor.done) properties. Should be called
        /// at least once before using the cursor.
        next() {
            for (;;) {
                let next = this.peek();
                if (next < 0) {
                    this.done = true;
                    return this;
                }
                let str = String.fromCharCode(next), start = this.bufferStart + this.bufferPos;
                this.bufferPos++;
                for (;;) {
                    let peek = this.peek();
                    if (peek < 0xDC00 || peek >= 0xE000)
                        break;
                    this.bufferPos++;
                    str += String.fromCharCode(peek);
                }
                let norm = this.normalize(str);
                for (let i = 0, pos = start;; i++) {
                    let code = norm.charCodeAt(i);
                    let match = this.match(code, pos);
                    if (match) {
                        this.value = match;
                        return this;
                    }
                    if (i == norm.length - 1)
                        break;
                    if (pos == start && i < str.length && str.charCodeAt(i) == code)
                        pos++;
                }
            }
        }
        match(code, pos) {
            let match = null;
            for (let i = 0; i < this.matches.length; i += 2) {
                let index = this.matches[i], keep = false;
                if (this.query.charCodeAt(index) == code) {
                    if (index == this.query.length - 1) {
                        match = { from: this.matches[i + 1], to: pos + 1 };
                    }
                    else {
                        this.matches[i]++;
                        keep = true;
                    }
                }
                if (!keep) {
                    this.matches.splice(i, 2);
                    i -= 2;
                }
            }
            if (this.query.charCodeAt(0) == code) {
                if (this.query.length == 1)
                    match = { from: pos, to: pos + 1 };
                else
                    this.matches.push(1, pos);
            }
            return match;
        }
    }

    class Query$1 {
        constructor(search, replace, caseInsensitive) {
            this.search = search;
            this.replace = replace;
            this.caseInsensitive = caseInsensitive;
        }
        eq(other) {
            return this.search == other.search && this.replace == other.replace && this.caseInsensitive == other.caseInsensitive;
        }
        cursor(doc, from = 0, to = doc.length) {
            return new SearchCursor$1(doc, this.search, from, to, this.caseInsensitive ? x => x.toLowerCase() : undefined);
        }
        get valid() { return !!this.search; }
    }
    const setQuery$1 = StateEffect.define();
    const togglePanel$1 = StateEffect.define();
    const searchState$1 = StateField.define({
        create() {
            return new SearchState$1(new Query$1("", "", false), []);
        },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setQuery$1))
                    value = new SearchState$1(effect.value, value.panel);
                else if (effect.is(togglePanel$1))
                    value = new SearchState$1(value.query, effect.value ? [createSearchPanel$1] : []);
            }
            return value;
        },
        provide: [showPanel.nFrom(s => s.panel)]
    });
    class SearchState$1 {
        constructor(query, panel) {
            this.query = query;
            this.panel = panel;
        }
    }
    const matchMark$1 = Decoration$1.mark({ class: themeClass$1("searchMatch") }), selectedMatchMark$1 = Decoration$1.mark({ class: themeClass$1("searchMatch.selected") });
    const searchHighlighter$1 = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.view = view;
            this.decorations = this.highlight(view.state.field(searchState$1));
        }
        update(update) {
            let state = update.state.field(searchState$1);
            if (state != update.prevState.field(searchState$1) || update.docChanged || update.selectionSet)
                this.decorations = this.highlight(state);
        }
        highlight({ query, panel }) {
            if (!panel.length || !query.valid)
                return Decoration$1.none;
            let state = this.view.state, viewport = this.view.viewport;
            let cursor = query.cursor(state.doc, Math.max(0, viewport.from - query.search.length), Math.min(viewport.to + query.search.length, state.doc.length));
            let builder = new RangeSetBuilder();
            while (!cursor.next().done) {
                let { from, to } = cursor.value;
                let selected = state.selection.ranges.some(r => r.from == from && r.to == to);
                builder.add(from, to, selected ? selectedMatchMark$1 : matchMark$1);
            }
            return builder.finish();
        }
    }, {
        decorations: v => v.decorations
    });
    function searchCommand$1(f) {
        return view => {
            let state = view.state.field(searchState$1, false);
            return state && state.query.valid ? f(view, state) : openSearchPanel$1(view);
        };
    }
    function findNextMatch$1(doc, from, query) {
        let cursor = query.cursor(doc, from).next();
        if (cursor.done) {
            cursor = query.cursor(doc, 0, from + query.search.length - 1).next();
            if (cursor.done)
                return null;
        }
        return cursor.value;
    }
    /// Open the search panel if it isn't already open, and move the
    /// selection to the first match after the current primary selection.
    /// Will wrap around to the start of the document when it reaches the
    /// end.
    const findNext$1 = searchCommand$1((view, state) => {
        let { from, to } = view.state.selection.primary;
        let next = findNextMatch$1(view.state.doc, view.state.selection.primary.from + 1, state.query);
        if (!next || next.from == from && next.to == to)
            return false;
        view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
        maybeAnnounceMatch$1(view);
        return true;
    });
    const FindPrevChunkSize$1 = 10000;
    // Searching in reverse is, rather than implementing inverted search
    // cursor, done by scanning chunk after chunk forward.
    function findPrevInRange$1(query, doc, from, to) {
        for (let pos = to;;) {
            let start = Math.max(from, pos - FindPrevChunkSize$1 - query.search.length);
            let cursor = query.cursor(doc, start, pos), range = null;
            while (!cursor.next().done)
                range = cursor.value;
            if (range)
                return range;
            if (start == from)
                return null;
            pos -= FindPrevChunkSize$1;
        }
    }
    /// Move the selection to the previous instance of the search query,
    /// before the current primary selection. Will wrap past the start
    /// of the document to start searching at the end again.
    const findPrevious$1 = searchCommand$1((view, { query }) => {
        let { state } = view;
        let range = findPrevInRange$1(query, state.doc, 0, state.selection.primary.to - 1) ||
            findPrevInRange$1(query, state.doc, state.selection.primary.from + 1, state.doc.length);
        if (!range)
            return false;
        view.dispatch({ selection: { anchor: range.from, head: range.to }, scrollIntoView: true });
        maybeAnnounceMatch$1(view);
        return true;
    });
    /// Select all instances of the search query.
    const selectMatches$1 = searchCommand$1((view, { query }) => {
        let cursor = query.cursor(view.state.doc), ranges = [];
        while (!cursor.next().done)
            ranges.push(EditorSelection.range(cursor.value.from, cursor.value.to));
        if (!ranges.length)
            return false;
        view.dispatch({ selection: EditorSelection.create(ranges) });
        return true;
    });
    /// Replace the current match of the search query.
    const replaceNext$1 = searchCommand$1((view, { query }) => {
        let { state } = view, next = findNextMatch$1(state.doc, state.selection.primary.from, query);
        if (!next)
            return false;
        let { from, to } = state.selection.primary, changes = [], selection;
        if (next.from == from && next.to == to) {
            changes.push({ from: next.from, to: next.to, insert: query.replace });
            next = findNextMatch$1(state.doc, next.to, query);
        }
        if (next) {
            let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - query.replace.length;
            selection = { anchor: next.from - off, head: next.to - off };
        }
        view.dispatch({ changes, selection, scrollIntoView: !!selection });
        if (next)
            maybeAnnounceMatch$1(view);
        return true;
    });
    /// Replace all instances of the search query with the given
    /// replacement.
    const replaceAll$1 = searchCommand$1((view, { query }) => {
        let cursor = query.cursor(view.state.doc), changes = [];
        while (!cursor.next().done) {
            let { from, to } = cursor.value;
            changes.push({ from, to, insert: query.replace });
        }
        if (!changes.length)
            return false;
        view.dispatch({ changes });
        return true;
    });
    function createSearchPanel$1(view) {
        let { query } = view.state.field(searchState$1);
        return {
            dom: buildPanel$1({
                view,
                query,
                updateQuery(q) {
                    if (!query.eq(q)) {
                        query = q;
                        view.dispatch({ effects: setQuery$1.of(query) });
                    }
                }
            }),
            mount() {
                this.dom.querySelector("[name=search]").select();
            },
            pos: 80,
            style: "search"
        };
    }
    /// Make sure the search panel is open and focused.
    const openSearchPanel$1 = view => {
        let state = view.state.field(searchState$1, false);
        if (state && state.panel.length) {
            let panel = getPanel(view, createSearchPanel$1);
            if (!panel)
                return false;
            panel.dom.querySelector("[name=search]").focus();
        }
        else {
            view.dispatch({ effects: togglePanel$1.of(true),
                reconfigure: state ? undefined : { append: searchExtensions$1 } });
        }
        return true;
    };
    /// Close the search panel.
    const closeSearchPanel$1 = view => {
        let state = view.state.field(searchState$1, false);
        if (!state || !state.panel.length)
            return false;
        let panel = getPanel(view, createSearchPanel$1);
        if (panel && panel.dom.contains(view.root.activeElement))
            view.focus();
        view.dispatch({ effects: togglePanel$1.of(false) });
        return true;
    };
    function elt$1(name, props = null, children = []) {
        let e = document.createElement(name);
        if (props)
            for (let prop in props) {
                let value = props[prop];
                if (typeof value == "string")
                    e.setAttribute(prop, value);
                else
                    e[prop] = value;
            }
        for (let child of children)
            e.appendChild(typeof child == "string" ? document.createTextNode(child) : child);
        return e;
    }
    // FIXME sync when search state changes independently
    function buildPanel$1(conf) {
        function p(phrase) { return conf.view.state.phrase(phrase); }
        let searchField = elt$1("input", {
            value: conf.query.search,
            placeholder: p("Find"),
            "aria-label": p("Find"),
            class: themeClass$1("textfield"),
            name: "search",
            onchange: update,
            onkeyup: update
        });
        let replaceField = elt$1("input", {
            value: conf.query.replace,
            placeholder: p("Replace"),
            "aria-label": p("Replace"),
            class: themeClass$1("textfield"),
            name: "replace",
            onchange: update,
            onkeyup: update
        });
        let caseField = elt$1("input", {
            type: "checkbox",
            name: "case",
            checked: !conf.query.caseInsensitive,
            onchange: update
        });
        function update() {
            conf.updateQuery(new Query$1(searchField.value, replaceField.value, !caseField.checked));
        }
        function keydown(e) {
            if (runScopeHandlers(conf.view, e, "search-panel")) {
                e.preventDefault();
            }
            else if (e.keyCode == 13 && e.target == searchField) {
                e.preventDefault();
                (e.shiftKey ? findPrevious$1 : findNext$1)(conf.view);
            }
            else if (e.keyCode == 13 && e.target == replaceField) {
                e.preventDefault();
                replaceNext$1(conf.view);
            }
        }
        function button(name, onclick, content) {
            return elt$1("button", { class: themeClass$1("button"), name, onclick }, content);
        }
        let panel = elt$1("div", { onkeydown: keydown }, [
            searchField,
            button("next", () => findNext$1(conf.view), [p("next")]),
            button("prev", () => findPrevious$1(conf.view), [p("previous")]),
            button("select", () => selectMatches$1(conf.view), [p("all")]),
            elt$1("label", null, [caseField, "match case"]),
            elt$1("br"),
            replaceField,
            button("replace", () => replaceNext$1(conf.view), [p("replace")]),
            button("replaceAll", () => replaceAll$1(conf.view), [p("replace all")]),
            elt$1("button", { name: "close", onclick: () => closeSearchPanel$1(conf.view), "aria-label": p("close") }, ["×"]),
            elt$1("div", { style: "position: absolute; top: -10000px", "aria-live": "polite" })
        ]);
        return panel;
    }
    const AnnounceMargin$1 = 30;
    const Break$1 = /[\s\.,:;?!]/;
    // FIXME this is a kludge
    function maybeAnnounceMatch$1(view) {
        let { from, to } = view.state.selection.primary;
        let lineStart = view.state.doc.lineAt(from).from, lineEnd = view.state.doc.lineAt(to).to;
        let start = Math.max(lineStart, from - AnnounceMargin$1), end = Math.min(lineEnd, to + AnnounceMargin$1);
        let text = view.state.sliceDoc(start, end);
        if (start != lineStart) {
            for (let i = 0; i < AnnounceMargin$1; i++)
                if (!Break$1.test(text[i + 1]) && Break$1.test(text[i])) {
                    text = text.slice(i);
                    break;
                }
        }
        if (end != lineEnd) {
            for (let i = text.length - 1; i > text.length - AnnounceMargin$1; i--)
                if (!Break$1.test(text[i - 1]) && Break$1.test(text[i])) {
                    text = text.slice(0, i);
                    break;
                }
        }
        let panel = getPanel(view, createSearchPanel$1);
        if (!panel || !panel.dom.contains(view.root.activeElement))
            return;
        let live = panel.dom.querySelector("div[aria-live]");
        live.textContent = view.state.phrase("current match") + ". " + text;
    }
    const baseTheme$c = EditorView$1.baseTheme({
        "$panel.search": {
            padding: "2px 6px 4px",
            position: "relative",
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "4px",
                backgroundColor: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            },
            "& input, & button": {
                margin: ".2em .5em .2em 0"
            },
            "& label": {
                fontSize: "80%"
            }
        },
        "$$light $searchMatch": { backgroundColor: "#ffff0054" },
        "$$dark $searchMatch": { backgroundColor: "#00ffff8a" },
        "$$light $searchMatch.selected": { backgroundColor: "#ff6a0054" },
        "$$dark $searchMatch.selected": { backgroundColor: "#ff00ff8a" }
    });
    const searchExtensions$1 = [
        searchState$1,
        precedence(searchHighlighter$1, "override"),
        panels(),
        baseTheme$c
    ];

    /// Mark lines that have a cursor on them with the \`$activeLine\`
    /// theme class.
    function highlightActiveLine() {
        return [defaultTheme, activeLineHighlighter];
    }
    const lineDeco = Decoration$1.line({ attributes: { class: themeClass$1("activeLine") } });
    const activeLineHighlighter = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.docChanged || update.selectionSet)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let lastLineStart = -1, deco = [];
            for (let r of view.state.selection.ranges) {
                if (!r.empty)
                    continue;
                let line = view.visualLineAt(r.head);
                if (line.from > lastLineStart) {
                    deco.push(lineDeco.range(line.from));
                    lastLineStart = line.from;
                }
            }
            return Decoration$1.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });
    const defaultHighlightOptions = {
        highlightWordAroundCursor: false,
        minSelectionLength: 1,
        maxMatches: 100
    };
    const highlightConfig = Facet.define({
        combine(options) {
            return combineConfig(options, defaultHighlightOptions, {
                highlightWordAroundCursor: (a, b) => a || b,
                minSelectionLength: Math.min,
                maxMatches: Math.min
            });
        }
    });
    /// This extension highlights text that matches the selection. It uses
    /// the `$selectionMatch` theme class for the highlighting. When
    /// `highlightWordAroundCursor` is enabled, the word at the cursor
    /// itself will be highlighted with `selectionMatch.main`.
    function highlightSelectionMatches(options) {
        let ext = [defaultTheme, matchHighlighter];
        if (options)
            ext.push(highlightConfig.of(options));
        return ext;
    }
    function wordAt(doc, pos, check) {
        let line = doc.lineAt(pos);
        let from = pos - line.from, to = pos - line.from;
        while (from > 0) {
            let prev = line.findClusterBreak(from, false);
            if (check(line.slice(prev, from)) != CharCategory.Word)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = line.findClusterBreak(to, true);
            if (check(line.slice(to, next)) != CharCategory.Word)
                break;
            to = next;
        }
        return from == to ? null : line.slice(from, to);
    }
    const matchDeco = Decoration$1.mark({ class: themeClass$1("selectionMatch") });
    const mainMatchDeco = Decoration$1.mark({ class: themeClass$1("selectionMatch.main") });
    const matchHighlighter = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.selectionSet || update.docChanged || update.viewportChanged)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let conf = view.state.facet(highlightConfig);
            let { state } = view, sel = state.selection;
            if (sel.ranges.length > 1)
                return Decoration$1.none;
            let range = sel.primary, query, check = null;
            if (range.empty) {
                if (!conf.highlightWordAroundCursor)
                    return Decoration$1.none;
                check = state.charCategorizer(range.head);
                query = wordAt(state.doc, range.head, check);
                if (!query)
                    return Decoration$1.none;
            }
            else {
                let len = range.to - range.from;
                if (len < conf.minSelectionLength || len > 200)
                    return Decoration$1.none;
                query = state.sliceDoc(range.from, range.to).trim();
                if (!query)
                    return Decoration$1.none;
            }
            let deco = [];
            for (let part of view.visibleRanges) {
                let cursor = new SearchCursor$1(state.doc, query, part.from, part.to);
                while (!cursor.next().done) {
                    let { from, to } = cursor.value;
                    if (!check || ((from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
                        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word))) {
                        if (check && from <= range.from && to >= range.to)
                            deco.push(mainMatchDeco.range(from, to));
                        else if (from >= range.to || to <= range.from)
                            deco.push(matchDeco.range(from, to));
                        if (deco.length > conf.maxMatches)
                            return Decoration$1.none;
                    }
                }
            }
            return Decoration$1.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });
    const defaultTheme = EditorView$1.baseTheme({
        "$$light $activeLine": { backgroundColor: "#f3f9ff" },
        "$$dark $activeLine": { backgroundColor: "#223039" },
        "$selectionMatch": { backgroundColor: "#99ff7780" },
        "$searchMatch $selectionMatch": { backgroundColor: "transparent" }
    });

    let nextTagID = 0;
    /// Highlighting tags are markers that denote a highlighting category.
    /// They are [associated](#highlight.styleTags) with parts of a syntax
    /// tree by a language mode, and then mapped to an actual CSS style by
    /// a [highlight style](#highlight.highlightStyle).
    ///
    /// CodeMirror uses a mostly-closed set of tags for generic
    /// highlighters, so that the list of things that a theme must style
    /// is clear and bounded (as opposed to traditional open string-based
    /// systems, which make it hard for highlighting themes to cover all
    /// the tokens produced by the various languages).
    ///
    /// It _is_ possible to [define](#highlight.Tag^define) your own
    /// highlighting tags for system-internal use (where you control both
    /// the language package and the highlighter), but such tags will not
    /// be picked up by other highlighters (though you can derive them
    /// from standard tags to allow the highlighters to fall back to
    /// those).
    class Tag {
        /// @internal
        constructor(
        /// The set of tags that match this tag, starting with this one
        /// itself, sorted in order of decreasing specificity. @internal
        set, 
        /// The base unmodified tag that this one is based on, if it's
        /// modified @internal
        base, 
        /// The modifiers applied to this.base @internal
        modified) {
            this.set = set;
            this.base = base;
            this.modified = modified;
            /// @internal
            this.id = nextTagID++;
        }
        /// Define a new tag. If `parent` is given, the tag is treated as a
        /// sub-tag of that parent, and [highlight
        /// styles](#highlight.highlightStyle) that don't mention this tag
        /// will try to fall back to the parent tag (or grandparent tag,
        /// etc).
        static define(parent) {
            if (parent === null || parent === void 0 ? void 0 : parent.base)
                throw new Error("Can not derive from a modified tag");
            let tag = new Tag([], null, []);
            tag.set.push(tag);
            if (parent)
                for (let t of parent.set)
                    tag.set.push(t);
            return tag;
        }
        /// Define a tag _modifier_, which is a function that, given a tag,
        /// will return a tag that is a subtag of the original. Applying the
        /// same modifier to a twice tag will return the same value (`m1(t1)
        /// == m1(t1)`) and applying multiple modifiers will, regardless or
        /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
        ///
        /// When multiple modifiers are applied to a given base tag, each
        /// smaller set of modifiers is registered as a parent, so that for
        /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        /// `m1(m3(t1)`, and so on.
        static defineModifier() {
            let mod = new Modifier;
            return (tag) => {
                if (tag.modified.indexOf(mod) > -1)
                    return tag;
                return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
            };
        }
    }
    let nextModifierID = 0;
    class Modifier {
        constructor() {
            this.instances = [];
            this.id = nextModifierID++;
        }
        static get(base, mods) {
            if (!mods.length)
                return base;
            let exists = mods[0].instances.find(t => t.base == base && sameArray$2(mods, t.modified));
            if (exists)
                return exists;
            let set = [], tag = new Tag(set, base, mods);
            for (let m of mods)
                m.instances.push(tag);
            let configs = permute(mods);
            for (let parent of base.set)
                for (let config of configs)
                    set.push(Modifier.get(parent, config));
            return tag;
        }
    }
    function sameArray$2(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
    }
    function permute(array) {
        let result = [array];
        for (let i = 0; i < array.length; i++) {
            for (let a of permute(array.slice(0, i).concat(array.slice(i + 1))))
                result.push(a);
        }
        return result;
    }
    const ruleNodeProp = new NodeProp$1();
    const highlightStyleProp = Facet.define({
        combine(stylings) { return stylings.length ? stylings[0] : null; }
    });
    /// Create a highlighter style that associates the given styles to the
    /// given tags. The spec's property names must be
    /// [tags](#highlight.Tag) or lists of tags (which can be concatenated
    /// with `+`). The values should be
    /// [`style-mod`](https://github.com/marijnh/style-mod#documentation)
    /// style objects that define the CSS for that tag.
    ///
    /// The CSS rules created for a highlighter will be emitted in the
    /// order of the spec's properties. That means that for elements that
    /// have multiple tags associated with them, styles defined further
    /// down in the list will have a higher CSS precedence than styles
    /// defined earlier.
    function highlightStyle(...specs) {
        let styling = new Styling(specs);
        return [
            highlightStyleProp.of(styling),
            EditorView$1.styleModule.of(styling.module)
        ];
    }
    var Mode;
    (function (Mode) {
        Mode[Mode["Opaque"] = 0] = "Opaque";
        Mode[Mode["Inherit"] = 1] = "Inherit";
        Mode[Mode["Normal"] = 2] = "Normal";
    })(Mode || (Mode = {}));
    class Styling {
        constructor(spec) {
            this.map = Object.create(null);
            let modSpec = Object.create(null);
            for (let style of spec) {
                let cls = StyleModule.newName();
                modSpec["." + cls] = Object.assign({}, style, { tag: null });
                let tags = style.tag;
                if (!Array.isArray(tags))
                    tags = [tags];
                for (let tag of tags)
                    this.map[tag.id] = cls;
            }
            this.module = new StyleModule(modSpec);
        }
        match(tag) {
            for (let t of tag.set) {
                let match = this.map[t.id];
                if (match) {
                    if (t != tag)
                        this.map[tag.id] = match;
                    return match;
                }
            }
            return this.map[tag.id] = null;
        }
    }
    const t = Tag.define;
    const comment = t(), name = t(), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
    /// The default set of highlighting [tags](#highlight.Tag^define) used
    /// by regular language packages and themes.
    ///
    /// This collection is heavily biasted towards programming language,
    /// and necessarily incomplete. A full ontology of syntactic
    /// constructs would fill a stack of books, and be impractical to
    /// write themes for. So try to make do with this set, possibly
    /// encoding more information with flags. If all else fails, [open an
    /// issue](https://github.com/codemirror/codemirror.next) to propose a
    /// new type, or [define](#highlight.Tag^define) a custom tag for your
    /// use case.
    ///
    /// Note that it is not obligatory to always attach the most specific
    /// tag possible to an element—if your grammar can't easily
    /// distinguish a certain type of element, it is okay to style it as
    /// its more general variant.
    /// 
    /// For tags that extend some parent tag, the documentation links to
    /// the parent.
    const tags = {
        /// A comment.
        comment,
        /// A line [comment](#highlight.tags.comment).
        lineComment: t(comment),
        /// A block [comment](#highlight.tags.comment).
        blockComment: t(comment),
        /// A documentation [comment](#highlight.tags.comment).
        docComment: t(comment),
        /// Any kind of identifier.
        name,
        /// The [name](#highlight.tags.name) of a variable.
        variableName: t(name),
        /// A type or tag [name](#highlight.tags.name).
        typeName: t(name),
        /// A property, field, or attribute [name](#highlight.tags.name).
        propertyName: t(name),
        /// The [name](#highlight.tags.name) of a class.
        className: t(name),
        /// A label [name](#highlight.tags.name).
        labelName: t(name),
        /// A namespace [name](#highlight.tags.name).
        namespace: t(name),
        /// The [name](#highlight.tags.name) of a macro.
        macroName: t(name),
        /// A literal value.
        literal,
        /// A string [literal](#highlight.tags.literal).
        string,
        /// A documentation [string](#highlight.tags.string).
        docString: t(string),
        /// A character literal (subtag of [string](#highlight.tags.string)).
        character: t(string),
        /// A number [literal](#highlight.tags.literal).
        number,
        /// An integer [number](#highlight.tags.number) literal.
        integer: t(number),
        /// A floating-point [number](#highlight.tags.number) literal.
        float: t(number),
        /// A boolean [literal](#highlight.tags.literal).
        bool: t(literal),
        /// Regular expression [literal](#highlight.tags.literal).
        regexp: t(literal),
        /// An escape [literal](#highlight.tags.literal), for example a
        /// backslash escape in a string.
        escape: t(literal),
        /// A color [literal](#highlight.tags.literal).
        color: t(literal),
        /// A language keyword.
        keyword,
        /// The [keyword](#highlight.tags.keyword) for the self or this
        /// object.
        self: t(keyword),
        /// The [keyword](#highlight.tags.keyword) for null.
        null: t(keyword),
        /// A [keyword](#highlight.tags.keyword) denoting some atomic value.
        atom: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that represents a unit.
        unit: t(keyword),
        /// A modifier [keyword](#highlight.tags.keyword).
        modifier: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that acts as an operator.
        operatorKeyword: t(keyword),
        /// A control-flow related [keyword](#highlight.tags.keyword).
        controlKeyword: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that defines something.
        definitionKeyword: t(keyword),
        /// An operator.
        operator,
        /// An [operator](#highlight.tags.operator) that defines something.
        derefOperator: t(operator),
        /// Arithmetic-related [operator](#highlight.tags.operator).
        arithmeticOperator: t(operator),
        /// Logical [operator](#highlight.tags.operator).
        logicOperator: t(operator),
        /// Bit [operator](#highlight.tags.operator).
        bitwiseOperator: t(operator),
        /// Comparison [operator](#highlight.tags.operator).
        compareOperator: t(operator),
        /// [Operator](#highlight.tags.operator) that updates its operand.
        updateOperator: t(operator),
        /// [Operator](#highlight.tags.operator) that defines something.
        definitionOperator: t(operator),
        /// Type-related [operator](#highlight.tags.operator).
        typeOperator: t(operator),
        /// Control-flow [operator](#highlight.tags.operator).
        controlOperator: t(operator),
        /// Program or markup punctuation.
        punctuation,
        /// [Punctuation](#highlight.tags.punctuation) that separates
        /// things.
        separator: t(punctuation),
        /// Bracket-style [punctuation](#highlight.tags.punctuation).
        bracket,
        /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
        /// tokens).
        angleBracket: t(bracket),
        /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
        /// tokens).
        squareBracket: t(bracket),
        /// Parentheses (usually `(` and `)` tokens). Subtag of
        /// [bracket](#highlight.tags.bracket)).
        paren: t(bracket),
        /// Braces (usually `{` and `}` tokens). Subtag of
        /// [bracket](#highlight.tags.bracket)).
        brace: t(bracket),
        /// Content, for example plain text in XML or markup documents.
        content,
        /// [Content](#highlight.tags.content) that represents a heading.
        heading,
        /// A level 1 [heading](#highlight.tags.heading).
        heading1: t(heading),
        /// A level 2 [heading](#highlight.tags.heading).
        heading2: t(heading),
        /// A level 3 [heading](#highlight.tags.heading).
        heading3: t(heading),
        /// A level 4 [heading](#highlight.tags.heading).
        heading4: t(heading),
        /// A level 5 [heading](#highlight.tags.heading).
        heading5: t(heading),
        /// A level 6 [heading](#highlight.tags.heading).
        heading6: t(heading),
        /// [Content](#highlight.tags.content) that represents a list or
        /// list marker.
        list: t(content),
        /// [Content](#highlight.tags.content) that represents a quote.
        quote: t(content),
        /// [Content](#highlight.tags.content) that is emphasized.
        emphasis: t(content),
        /// [Content](#highlight.tags.content) that is styled strong.
        strong: t(content),
        /// [Content](#highlight.tags.content) that is part of a link.
        link: t(content),
        /// [Content](#highlight.tags.content) that is styled as code or
        /// monospace.
        monospace: t(content),
        /// Inserted content in a change-tracking format.
        inserted: t(),
        /// Deleted content.
        deleted: t(),
        /// Changed content.
        changed: t(),
        /// An invalid or unsyntactic element.
        invalid: t(),
        /// Metadata or meta-instruction.
        meta,
        /// [Metadata](#higlight.tags.meta) that applies to the entire
        /// document.
        documentMeta: t(meta),
        /// [Metadata](#higlight.tags.meta) that annotates or adds
        /// attributes to a given syntactic element.
        annotation: t(meta),
        /// Processing instruction or preprocessor directive. Subtag of
        /// [meta](#highlight.tags.meta)).
        processingInstruction: t(meta),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates that a
        /// given element is being defined. Expected to be used with the
        /// various [name](#higlight.tags.name) tags.
        definition: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates that
        /// something is constant. Mostly expected to be used with
        /// [variable names](#highlight.tags.variableName).
        constant: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) used to indicate that a
        /// [variable name](#highlight.tags.variableName) is being called or
        /// being defined as a function.
        function: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that can be applied to
        /// [names](#highlight.tags.name) to indicate that they belong to
        /// the standard environment.
        standard: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates a given
        /// [names](#highlight.tags.name) is local to some scope.
        local: Tag.defineModifier(),
        /// A generic variant [modifier](#highlight.Tag^defineModifier) that
        /// can be used to tag language-specific alternative variants of
        /// some common tag. It is recommended for themes to define special
        /// forms of at least the [string](#highlight.tags.string) and
        /// [variable name](#highlight.tags.variableName) tags, since those
        /// come up a lot.
        special: Tag.defineModifier()
    };
    /// A default highlight style (works well with light themes).
    const defaultHighlightStyle = precedence(highlightStyle({ tag: tags.deleted,
        textDecoration: "line-through" }, { tag: [tags.inserted, tags.heading, tags.link],
        textDecoration: "underline" }, { tag: tags.emphasis,
        fontStyle: "italic" }, { tag: tags.keyword,
        color: "#708" }, { tag: [tags.atom, tags.bool],
        color: "#219" }, { tag: tags.number,
        color: "#164" }, { tag: tags.string,
        color: "#a11" }, { tag: [tags.regexp, tags.escape, tags.special(tags.string)],
        color: "#e40" }, { tag: tags.definition(tags.variableName),
        color: "#00f" }, { tag: tags.typeName,
        color: "#085" }, { tag: tags.className,
        color: "#167" }, { tag: tags.special(tags.variableName),
        color: "#256" }, { tag: tags.definition(tags.propertyName),
        color: "#00c" }, { tag: tags.comment,
        color: "#940" }, { tag: tags.meta,
        color: "#555" }, { tag: tags.invalid,
        color: "#f00" }), "fallback");

    class SelectedDiagnostic {
        constructor(from, to, diagnostic) {
            this.from = from;
            this.to = to;
            this.diagnostic = diagnostic;
        }
    }
    class LintState {
        constructor(diagnostics, panel, selected) {
            this.diagnostics = diagnostics;
            this.panel = panel;
            this.selected = selected;
        }
    }
    function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
        let found = null;
        diagnostics.between(after, diagnostics.length, (from, to, { spec }) => {
            if (diagnostic && spec.diagnostic != diagnostic)
                return;
            found = new SelectedDiagnostic(from, to, spec.diagnostic);
            return false;
        });
        return found;
    }
    function maybeEnableLint(state) {
        return state.field(lintState, false) ? undefined : { append: [
                lintState,
                EditorView$1.decorations.compute([lintState], state => {
                    let { selected, panel } = state.field(lintState);
                    return !selected || !panel || selected.from == selected.to ? Decoration$1.none : Decoration$1.set([
                        activeMark.range(selected.from, selected.to)
                    ]);
                }),
                panels(),
                hoverTooltip(lintTooltip),
                baseTheme$d
            ] };
    }
    const setDiagnosticsEffect = StateEffect.define();
    const togglePanel$2 = StateEffect.define();
    const movePanelSelection = StateEffect.define();
    const lintState = StateField.define({
        create() {
            return new LintState(Decoration$1.none, null, null);
        },
        update(value, tr) {
            if (tr.docChanged) {
                let mapped = value.diagnostics.map(tr.changes), selected = null;
                if (value.selected) {
                    let selPos = tr.changes.mapPos(value.selected.from, 1);
                    selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
                }
                value = new LintState(mapped, value.panel, selected);
            }
            for (let effect of tr.effects) {
                if (effect.is(setDiagnosticsEffect)) {
                    let ranges = Decoration$1.set(effect.value.map((d) => {
                        return d.from < d.to
                            ? Decoration$1.mark({
                                attributes: { class: themeClass$1("lintRange." + d.severity) },
                                diagnostic: d
                            }).range(d.from, d.to)
                            : Decoration$1.widget({
                                widget: new DiagnosticWidget(d),
                                diagnostic: d
                            }).range(d.from);
                    }));
                    value = new LintState(ranges, value.panel, findDiagnostic(ranges));
                }
                else if (effect.is(togglePanel$2)) {
                    value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
                }
                else if (effect.is(movePanelSelection)) {
                    value = new LintState(value.diagnostics, value.panel, effect.value);
                }
            }
            return value;
        },
        provide: [showPanel.nFrom(s => s.panel ? [s.panel] : []),
            EditorView$1.decorations.from(s => s.diagnostics)]
    });
    const activeMark = Decoration$1.mark({ class: themeClass$1("lintRange.active") });
    function lintTooltip(view, check) {
        let { diagnostics } = view.state.field(lintState);
        let found = [], stackStart = 2e8, stackEnd = 0;
        diagnostics.between(0, view.state.doc.length, (start, end, { spec }) => {
            if (check(start, end)) {
                found.push(spec.diagnostic);
                stackStart = Math.min(start, stackStart);
                stackEnd = Math.max(end, stackEnd);
            }
        });
        if (!found.length)
            return null;
        return {
            pos: stackStart,
            end: stackEnd,
            above: view.state.doc.lineAt(stackStart).to < stackEnd,
            style: "lint",
            create() {
                let dom = document.createElement("ul");
                for (let d of found)
                    dom.appendChild(renderDiagnostic(view, d));
                return { dom };
            }
        };
    }
    /// Command to open and focus the lint panel.
    const openLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            view.dispatch({ effects: togglePanel$2.of(true),
                reconfigure: maybeEnableLint(view.state) });
        let panel = getPanel(view, LintPanel.open);
        if (panel)
            panel.dom.querySelector(".cm-panel-lint ul").focus();
        return true;
    };
    /// Command to close the lint panel, when open.
    const closeLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            return false;
        view.dispatch({ effects: togglePanel$2.of(false) });
        return true;
    };
    /// Move the selection to the next diagnostic.
    const nextDiagnostic = (view) => {
        let field = view.state.field(lintState, false);
        if (!field)
            return false;
        let sel = view.state.selection.primary, next = field.diagnostics.iter(sel.to + 1);
        if (!next.value) {
            next = field.diagnostics.iter(0);
            if (!next.value || next.from == sel.from && next.to == sel.to)
                return false;
        }
        view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
        return true;
    };
    /// A set of default key bindings for the lint functionality.
    ///
    /// - Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](#lint.openLintPanel)
    /// - F8: [\`nextDiagnostic\`](#lint.nextDiagnostic)
    const lintKeymap = [
        { key: "Mod-Shift-m", run: openLintPanel },
        { key: "F8", run: nextDiagnostic }
    ];
    function renderDiagnostic(view, diagnostic) {
        let dom = document.createElement("li");
        dom.textContent = diagnostic.message;
        dom.className = themeClass$1("diagnostic." + diagnostic.severity);
        if (diagnostic.actions)
            for (let action of diagnostic.actions) {
                let button = dom.appendChild(document.createElement("button"));
                button.className = themeClass$1("diagnosticAction");
                button.textContent = action.name;
                button.onclick = button.onmousedown = e => {
                    e.preventDefault();
                    let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
                    if (found)
                        action.apply(view, found.from, found.to);
                };
            }
        // FIXME render source?
        return dom;
    }
    class DiagnosticWidget extends WidgetType$1 {
        constructor(diagnostic) {
            super();
            this.diagnostic = diagnostic;
        }
        eq(other) { return other.diagnostic == this.diagnostic; }
        toDOM() {
            let elt = document.createElement("span");
            elt.className = themeClass$1("lintPoint." + this.diagnostic.severity);
            return elt;
        }
    }
    class PanelItem {
        constructor(view, diagnostic) {
            this.diagnostic = diagnostic;
            this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
            this.dom = renderDiagnostic(view, diagnostic);
            this.dom.setAttribute("role", "option");
        }
    }
    class LintPanel {
        constructor(view) {
            this.view = view;
            this.items = [];
            this.dom = document.createElement("div");
            this.list = this.dom.appendChild(document.createElement("ul"));
            this.list.tabIndex = 0;
            this.list.setAttribute("role", "listbox");
            this.list.setAttribute("aria-label", this.view.state.phrase("Diagnostics"));
            this.list.addEventListener("keydown", event => {
                if (event.keyCode == 27) { // Escape
                    event.preventDefault();
                    closeLintPanel(this.view);
                    this.view.focus();
                }
                else if (event.keyCode == 38) { // ArrowUp
                    event.preventDefault();
                    this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
                }
                else if (event.keyCode == 40) { // ArrowDown
                    event.preventDefault();
                    this.moveSelection((this.selectedIndex + 1) % this.items.length);
                }
                else if (event.keyCode == 36) { // Home
                    event.preventDefault();
                    this.moveSelection(0);
                }
                else if (event.keyCode == 35) { // End
                    event.preventDefault();
                    this.moveSelection(this.items.length - 1);
                }
                else if (event.keyCode == 13) {
                    event.preventDefault();
                    this.view.focus();
                } // FIXME PageDown/PageUp
            });
            this.list.addEventListener("click", event => {
                for (let i = 0; i < this.items.length; i++) {
                    if (this.items[i].dom.contains(event.target))
                        this.moveSelection(i);
                }
            });
            let close = this.dom.appendChild(document.createElement("button"));
            close.setAttribute("name", "close");
            close.setAttribute("aria-label", this.view.state.phrase("close"));
            close.textContent = "×";
            close.addEventListener("click", () => closeLintPanel(this.view));
            this.update();
        }
        get selectedIndex() {
            let selected = this.view.state.field(lintState).selected;
            if (!selected)
                return -1;
            for (let i = 0; i < this.items.length; i++)
                if (this.items[i].diagnostic == selected.diagnostic)
                    return i;
            return -1;
        }
        update() {
            let { diagnostics, selected } = this.view.state.field(lintState);
            let i = 0, needsSync = false, newSelectedItem = null;
            diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
                let found = -1, item;
                for (let j = i; j < this.items.length; j++)
                    if (this.items[j].diagnostic == spec.diagnostic) {
                        found = j;
                        break;
                    }
                if (found < 0) {
                    item = new PanelItem(this.view, spec.diagnostic);
                    this.items.splice(i, 0, item);
                    needsSync = true;
                }
                else {
                    item = this.items[found];
                    if (found > i) {
                        this.items.splice(i, found - i);
                        needsSync = true;
                    }
                }
                if (selected && item.diagnostic == selected.diagnostic) {
                    if (!item.dom.hasAttribute("aria-selected")) {
                        item.dom.setAttribute("aria-selected", "true");
                        newSelectedItem = item;
                    }
                }
                else if (item.dom.hasAttribute("aria-selected")) {
                    item.dom.removeAttribute("aria-selected");
                }
                i++;
            });
            while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
                needsSync = true;
                this.items.pop();
            }
            if (this.items.length == 0) {
                this.items.push(new PanelItem(this.view, {
                    from: -1, to: -1,
                    severity: "info",
                    message: this.view.state.phrase("No diagnostics")
                }));
                needsSync = true;
            }
            if (newSelectedItem) {
                this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
                this.view.requestMeasure({
                    key: this,
                    read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
                    write: ({ sel, panel }) => {
                        if (sel.top < panel.top)
                            this.list.scrollTop -= panel.top - sel.top;
                        else if (sel.bottom > panel.bottom)
                            this.list.scrollTop += sel.bottom - panel.bottom;
                    }
                });
            }
            else if (!this.items.length) {
                this.list.removeAttribute("aria-activedescendant");
            }
            if (needsSync)
                this.sync();
        }
        sync() {
            let domPos = this.list.firstChild;
            function rm() {
                let prev = domPos;
                domPos = prev.nextSibling;
                prev.remove();
            }
            for (let item of this.items) {
                if (item.dom.parentNode == this.list) {
                    while (domPos != item.dom)
                        rm();
                    domPos = item.dom.nextSibling;
                }
                else {
                    this.list.insertBefore(item.dom, domPos);
                }
            }
            while (domPos)
                rm();
            if (!this.list.firstChild)
                this.list.appendChild(renderDiagnostic(this.view, {
                    severity: "info",
                    message: this.view.state.phrase("No diagnostics")
                }));
        }
        moveSelection(selectedIndex) {
            // FIXME make actions accessible
            if (this.items.length == 0)
                return;
            let field = this.view.state.field(lintState);
            let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
            if (!selection)
                return;
            this.view.dispatch({
                selection: { anchor: selection.from, head: selection.to },
                scrollIntoView: true,
                effects: movePanelSelection.of(selection)
            });
        }
        get style() { return "lint"; }
        static open(view) { return new LintPanel(view); }
    }
    function underline(color) {
        if (typeof btoa != "function")
            return "none";
        let svg = `<svg xmlns="http://www.w3.org/2000/svg" width="6" height="3">
    <path d="m0 3 l2 -2 l1 0 l2 2 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>
  </svg>`;
        return `url('data:image/svg+xml;base64,${btoa(svg)}')`;
    }
    const baseTheme$d = EditorView$1.baseTheme({
        $diagnostic: {
            padding: "3px 6px 3px 8px",
            marginLeft: "-1px",
            display: "block"
        },
        "$diagnostic.error": { borderLeft: "5px solid #d11" },
        "$diagnostic.warning": { borderLeft: "5px solid orange" },
        "$diagnostic.info": { borderLeft: "5px solid #999" },
        $diagnosticAction: {
            font: "inherit",
            border: "none",
            padding: "2px 4px",
            backgroundColor: "#444",
            color: "white",
            borderRadius: "3px",
            marginLeft: "8px"
        },
        $lintRange: {
            backgroundPosition: "left bottom",
            backgroundRepeat: "repeat-x"
        },
        "$lintRange.error": { backgroundImage: underline("#d11") },
        "$lintRange.warning": { backgroundImage: underline("orange") },
        "$lintRange.info": { backgroundImage: underline("#999") },
        "$lintRange.active": { backgroundColor: "#ffdd9980" },
        $lintPoint: {
            position: "relative",
            "&:after": {
                content: '""',
                position: "absolute",
                bottom: 0,
                left: "-2px",
                borderLeft: "3px solid transparent",
                borderRight: "3px solid transparent",
                borderBottom: "4px solid #d11"
            }
        },
        "$lintPoint.warning": {
            "&:after": { borderBottomColor: "orange" }
        },
        "$lintPoint.info": {
            "&:after": { borderBottomColor: "#999" }
        },
        "$panel.lint": {
            position: "relative",
            "& ul": {
                maxHeight: "100px",
                overflowY: "auto",
                "& [aria-selected]": {
                    backgroundColor: "#ddd"
                },
                "&:focus [aria-selected]": {
                    background_fallback: "#bdf",
                    backgroundColor: "Highlight",
                    color_fallback: "white",
                    color: "HighlightText"
                },
                padding: 0,
                margin: 0
            },
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "2px",
                background: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            }
        },
        "$tooltip.lint": {
            padding: 0,
            margin: 0
        }
    });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /// A parse stack. These are used internally by the parser to track
    /// parsing progress. They also provide some properties and methods
    /// that external code such as a tokenizer can use to get information
    /// about the parse state.
    var Stack = /** @class */ (function () {
        /// @internal
        function Stack(
        /// A group of values that the stack will share with all
        /// split instances
        ///@internal
        cx, 
        /// Holds state, pos, value stack pos (15 bits array index, 15 bits
        /// buffer index) triplets for all but the top state
        /// @internal
        stack, 
        /// The current parse state @internal
        state, 
        // The position at which the next reduce should take place. This
        // can be less than `this.pos` when skipped expressions have been
        // added to the stack (which should be moved outside of the next
        // reduction)
        /// @internal
        reducePos, 
        /// The input position up to which this stack has parsed.
        pos, 
        /// The dynamic score of the stack, including dynamic precedence
        /// and error-recovery penalties
        /// @internal
        score, 
        // The output buffer. Holds (type, start, end, size) quads
        // representing nodes created by the parser, where `size` is
        // amount of buffer array entries covered by this node.
        /// @internal
        buffer, 
        // The base offset of the buffer. When stacks are split, the split
        // instance shared the buffer history with its parent up to
        // `bufferBase`, which is the absolute offset (including the
        // offset of previous splits) into the buffer at which this stack
        // starts writing.
        /// @internal
        bufferBase, 
        // A parent stack from which this was split off, if any. This is
        // set up so that it always points to a stack that has some
        // additional buffer content, never to a stack with an equal
        // `bufferBase`.
        /// @internal
        parent) {
            this.cx = cx;
            this.stack = stack;
            this.state = state;
            this.reducePos = reducePos;
            this.pos = pos;
            this.score = score;
            this.buffer = buffer;
            this.bufferBase = bufferBase;
            this.parent = parent;
        }
        /// @internal
        Stack.prototype.toString = function () {
            return "[" + this.stack.filter(function (_, i) { return i % 3 == 0; }).concat(this.state) + "]@" + this.pos + (this.score ? "!" + this.score : "");
        };
        // Start an empty stack
        /// @internal
        Stack.start = function (cx, state, pos) {
            if (pos === void 0) { pos = 0; }
            return new Stack(cx, [], state, pos, pos, 0, [], 0, null);
        };
        // Push a state onto the stack, tracking its start position as well
        // as the buffer base at that point.
        /// @internal
        Stack.prototype.pushState = function (state, start) {
            this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
            this.state = state;
        };
        // Apply a reduce action
        /// @internal
        Stack.prototype.reduce = function (action) {
            var depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;
            var parser = this.cx.parser;
            var dPrec = parser.dynamicPrecedence(type);
            if (dPrec)
                this.score += dPrec;
            if (depth == 0) {
                // Zero-depth reductions are a special case—they add stuff to
                // the stack without popping anything off.
                if (type < parser.minRepeatTerm)
                    this.storeNode(type, this.reducePos, this.reducePos, 4, true);
                this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
                return;
            }
            // Find the base index into `this.stack`, content after which will
            // be dropped. Note that with `StayFlag` reductions we need to
            // consume two extra frames (the dummy parent node for the skipped
            // expression and the state that we'll be staying in, which should
            // be moved to `this.state`).
            var base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);
            var start = this.stack[base - 2];
            var bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
            // Store normal terms or `R -> R R` repeat reductions
            if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {
                var pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
                this.storeNode(type, start, pos, count + 4, true);
            }
            if (action & 262144 /* StayFlag */) {
                this.state = this.stack[base];
            }
            else {
                var baseStateID = this.stack[base - 3];
                this.state = parser.getGoto(baseStateID, type, true);
            }
            while (this.stack.length > base)
                this.stack.pop();
        };
        // Shift a value into the buffer
        /// @internal
        Stack.prototype.storeNode = function (term, start, end, size, isReduce) {
            if (size === void 0) { size = 4; }
            if (isReduce === void 0) { isReduce = false; }
            if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes
                var cur = this, top = this.buffer.length;
                if (top == 0 && cur.parent) {
                    top = cur.bufferBase - cur.parent.bufferBase;
                    cur = cur.parent;
                }
                if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {
                    if (start == end)
                        return;
                    if (cur.buffer[top - 2] >= start) {
                        cur.buffer[top - 2] = end;
                        return;
                    }
                }
            }
            if (!isReduce || this.pos == end) { // Simple case, just append
                this.buffer.push(term, start, end, size);
            }
            else { // There may be skipped nodes that have to be moved forward
                var index = this.buffer.length;
                if (index > 0 && this.buffer[index - 4] != 0 /* Err */)
                    while (index > 0 && this.buffer[index - 2] > end) {
                        // Move this record forward
                        this.buffer[index] = this.buffer[index - 4];
                        this.buffer[index + 1] = this.buffer[index - 3];
                        this.buffer[index + 2] = this.buffer[index - 2];
                        this.buffer[index + 3] = this.buffer[index - 1];
                        index -= 4;
                        if (size > 4)
                            size -= 4;
                    }
                this.buffer[index] = term;
                this.buffer[index + 1] = start;
                this.buffer[index + 2] = end;
                this.buffer[index + 3] = size;
            }
        };
        // Apply a shift action
        /// @internal
        Stack.prototype.shift = function (action, next, nextEnd) {
            if (action & 131072 /* GotoFlag */) {
                this.pushState(action & 65535 /* ValueMask */, this.pos);
            }
            else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift
                var start = this.pos, nextState = action, parser = this.cx.parser;
                if (nextEnd > this.pos || next <= parser.maxNode) {
                    this.pos = nextEnd;
                    if (!parser.stateFlag(nextState, 1 /* Skipped */))
                        this.reducePos = nextEnd;
                }
                this.pushState(nextState, start);
                if (next <= parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
            }
            else { // Shift-and-stay, which means this is a skipped token
                if (next <= this.cx.parser.maxNode)
                    this.buffer.push(next, this.pos, nextEnd, 4);
                this.pos = nextEnd;
            }
        };
        // Apply an action
        /// @internal
        Stack.prototype.apply = function (action, next, nextEnd) {
            if (action & 65536 /* ReduceFlag */)
                this.reduce(action);
            else
                this.shift(action, next, nextEnd);
        };
        // Add a prebuilt node into the buffer. This may be a reused node or
        // the result of running a nested parser.
        /// @internal
        Stack.prototype.useNode = function (value, next) {
            var index = this.cx.reused.length - 1;
            if (index < 0 || this.cx.reused[index] != value) {
                this.cx.reused.push(value);
                index++;
            }
            var start = this.pos;
            this.reducePos = this.pos = start + value.length;
            this.pushState(next, start);
            this.buffer.push(index, start, this.reducePos, -1 /* size < 0 means this is a reused value */);
        };
        // Split the stack. Due to the buffer sharing and the fact
        // that `this.stack` tends to stay quite shallow, this isn't very
        // expensive.
        /// @internal
        Stack.prototype.split = function () {
            var parent = this;
            var off = parent.buffer.length;
            // Because the top of the buffer (after this.pos) may be mutated
            // to reorder reductions and skipped tokens, and shared buffers
            // should be immutable, this copies any outstanding skipped tokens
            // to the new buffer, and puts the base pointer before them.
            while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
                off -= 4;
            var buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
            // Make sure parent points to an actual parent with content, if there is such a parent.
            while (parent && base == parent.bufferBase)
                parent = parent.parent;
            return new Stack(this.cx, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, parent);
        };
        // Try to recover from an error by 'deleting' (ignoring) one token.
        /// @internal
        Stack.prototype.recoverByDelete = function (next, nextEnd) {
            var isNode = next <= this.cx.parser.maxNode;
            if (isNode)
                this.storeNode(next, this.pos, nextEnd);
            this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
            this.pos = this.reducePos = nextEnd;
            this.score -= 200 /* Token */;
        };
        /// Check if the given term would be able to be shifted (optionally
        /// after some reductions) on this stack. This can be useful for
        /// external tokenizers that want to make sure they only provide a
        /// given token when it applies.
        Stack.prototype.canShift = function (term) {
            for (var sim = new SimulatedStack(this);;) {
                var action = this.cx.parser.stateSlot(sim.top, 4 /* DefaultReduce */) || this.cx.parser.hasAction(sim.top, term);
                if ((action & 65536 /* ReduceFlag */) == 0)
                    return true;
                if (action == 0)
                    return false;
                sim.reduce(action);
            }
        };
        Object.defineProperty(Stack.prototype, "ruleStart", {
            /// Find the start position of the rule that is currently being parsed.
            get: function () {
                for (var state = this.state, base = this.stack.length;;) {
                    var force = this.cx.parser.stateSlot(state, 5 /* ForcedReduce */);
                    if (!(force & 65536 /* ReduceFlag */))
                        return 0;
                    base -= 3 * (force >> 19 /* ReduceDepthShift */);
                    if ((force & 65535 /* ValueMask */) < this.cx.parser.minRepeatTerm)
                        return this.stack[base + 1];
                    state = this.stack[base];
                }
            },
            enumerable: true,
            configurable: true
        });
        /// Find the start position of an instance of any of the given term
        /// types, or return `null` when none of them are found.
        ///
        /// **Note:** this is only reliable when there is at least some
        /// state that unambiguously matches the given rule on the stack.
        /// I.e. if you have a grammar like this, where the difference
        /// between `a` and `b` is only apparent at the third token:
        ///
        ///     a { b | c }
        ///     b { "x" "y" "x" }
        ///     c { "x" "y" "z" }
        ///
        /// Then a parse state after `"x"` will not reliably tell you that
        /// `b` is on the stack. You _can_ pass `[b, c]` to reliably check
        /// for either of those two rules (assuming that `a` isn't part of
        /// some rule that includes other things starting with `"x"`).
        ///
        /// When `before` is given, this keeps scanning up the stack until
        /// it finds a match that starts before that position.
        Stack.prototype.startOf = function (types, before) {
            var state = this.state, frame = this.stack.length, parser = this.cx.parser;
            for (;;) {
                var force = parser.stateSlot(state, 5 /* ForcedReduce */);
                var depth = force >> 19 /* ReduceDepthShift */, term = force & 65535 /* ValueMask */;
                if (types.indexOf(term) > -1) {
                    var base = frame - (3 * (force >> 19 /* ReduceDepthShift */)), pos = this.stack[base + 1];
                    if (before == null || before > pos)
                        return pos;
                }
                if (frame == 0)
                    return null;
                if (depth == 0) {
                    frame -= 3;
                    state = this.stack[frame];
                }
                else {
                    frame -= 3 * (depth - 1);
                    state = parser.getGoto(this.stack[frame - 3], term, true);
                }
            }
        };
        // Apply up to Recover.MaxNext recovery actions that conceptually
        // inserts some missing token or rule.
        /// @internal
        Stack.prototype.recoverByInsert = function (next) {
            var _this = this;
            if (this.stack.length >= 300 /* MaxInsertStackDepth */)
                return [];
            var nextStates = this.cx.parser.nextStates(this.state);
            if (nextStates.length > 4 /* MaxNext */ || this.stack.length >= 120 /* DampenInsertStackDepth */) {
                var best = nextStates.filter(function (s) { return s != _this.state && _this.cx.parser.hasAction(s, next); });
                if (this.stack.length < 120 /* DampenInsertStackDepth */)
                    for (var i = 0; best.length < 4 /* MaxNext */ && i < nextStates.length; i++)
                        if (best.indexOf(nextStates[i]) < 0)
                            best.push(nextStates[i]);
                nextStates = best;
            }
            var result = [];
            for (var i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i++) {
                if (nextStates[i] == this.state)
                    continue;
                var stack = this.split();
                stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
                stack.pushState(nextStates[i], this.pos);
                stack.score -= 200 /* Token */;
                result.push(stack);
            }
            return result;
        };
        // Force a reduce, if possible. Return false if that can't
        // be done.
        /// @internal
        Stack.prototype.forceReduce = function () {
            var reduce = this.cx.parser.stateSlot(this.state, 5 /* ForcedReduce */);
            if ((reduce & 65536 /* ReduceFlag */) == 0)
                return false;
            if (!this.cx.parser.validAction(this.state, reduce)) {
                this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
                this.score -= 100 /* Reduce */;
            }
            this.reduce(reduce);
            return true;
        };
        /// @internal
        Stack.prototype.forceAll = function () {
            while (!this.cx.parser.stateFlag(this.state, 2 /* Accepting */) && this.forceReduce()) { }
            return this;
        };
        Object.defineProperty(Stack.prototype, "deadEnd", {
            /// Check whether this state has no further actions (assumed to be a direct descendant of the
            /// top state, since any other states must be able to continue
            /// somehow). @internal
            get: function () {
                if (this.stack.length != 3)
                    return false;
                var parser = this.cx.parser;
                return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&
                    !parser.stateSlot(this.state, 4 /* DefaultReduce */);
            },
            enumerable: true,
            configurable: true
        });
        /// Restart the stack (put it back in its start state). Only safe
        /// when this.stack.length == 3 (state is directly below the top
        /// state). @internal
        Stack.prototype.restart = function () {
            this.state = this.stack[0];
            this.stack.length = 0;
        };
        /// @internal
        Stack.prototype.sameState = function (other) {
            if (this.state != other.state || this.stack.length != other.stack.length)
                return false;
            for (var i = 0; i < this.stack.length; i += 3)
                if (this.stack[i] != other.stack[i])
                    return false;
            return true;
        };
        // Convert the stack's buffer to a syntax tree.
        /// @internal
        Stack.prototype.toTree = function () {
            return Tree$1.build({ buffer: StackBufferCursor.create(this),
                group: this.cx.parser.group,
                topID: this.cx.topTerm,
                maxBufferLength: this.cx.maxBufferLength,
                reused: this.cx.reused,
                minRepeatType: this.cx.parser.minRepeatTerm });
        };
        Object.defineProperty(Stack.prototype, "parser", {
            /// Get the parser used by this stack.
            get: function () { return this.cx.parser; },
            enumerable: true,
            configurable: true
        });
        /// Test whether a given dialect (by numeric ID, as exported from
        /// the terms file) is enabled.
        Stack.prototype.dialectEnabled = function (dialectID) { return this.cx.dialect.flags[dialectID]; };
        return Stack;
    }());
    var Recover;
    (function (Recover) {
        Recover[Recover["Token"] = 200] = "Token";
        Recover[Recover["Reduce"] = 100] = "Reduce";
        Recover[Recover["MaxNext"] = 4] = "MaxNext";
        Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
        Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
    })(Recover || (Recover = {}));
    // Used to cheaply run some reductions to scan ahead without mutating
    // an entire stack
    var SimulatedStack = /** @class */ (function () {
        function SimulatedStack(stack) {
            this.stack = stack;
            this.top = stack.state;
            this.rest = stack.stack;
            this.offset = this.rest.length;
        }
        SimulatedStack.prototype.reduce = function (action) {
            var term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;
            if (depth == 0) {
                if (this.rest == this.stack.stack)
                    this.rest = this.rest.slice();
                this.rest.push(this.top, 0, 0);
                this.offset += 3;
            }
            else {
                this.offset -= (depth - 1) * 3;
            }
            var goto = this.stack.cx.parser.getGoto(this.rest[this.offset - 3], term, true);
            this.top = goto;
        };
        return SimulatedStack;
    }());
    // This is given to `Tree.build` to build a buffer, and encapsulates
    // the parent-stack-walking necessary to read the nodes.
    var StackBufferCursor = /** @class */ (function () {
        function StackBufferCursor(stack, pos, index) {
            this.stack = stack;
            this.pos = pos;
            this.index = index;
            this.buffer = stack.buffer;
            if (this.index == 0)
                this.maybeNext();
        }
        StackBufferCursor.create = function (stack) {
            return new StackBufferCursor(stack, stack.bufferBase + stack.buffer.length, stack.buffer.length);
        };
        StackBufferCursor.prototype.maybeNext = function () {
            var next = this.stack.parent;
            if (next != null) {
                this.index = this.stack.bufferBase - next.bufferBase;
                this.stack = next;
                this.buffer = next.buffer;
            }
        };
        Object.defineProperty(StackBufferCursor.prototype, "id", {
            get: function () { return this.buffer[this.index - 4]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StackBufferCursor.prototype, "start", {
            get: function () { return this.buffer[this.index - 3]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StackBufferCursor.prototype, "end", {
            get: function () { return this.buffer[this.index - 2]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StackBufferCursor.prototype, "size", {
            get: function () { return this.buffer[this.index - 1]; },
            enumerable: true,
            configurable: true
        });
        StackBufferCursor.prototype.next = function () {
            this.index -= 4;
            this.pos -= 4;
            if (this.index == 0)
                this.maybeNext();
        };
        StackBufferCursor.prototype.fork = function () {
            return new StackBufferCursor(this.stack, this.pos, this.index);
        };
        return StackBufferCursor;
    }());

    /// Tokenizers write the tokens they read into instances of this class.
    var Token = /** @class */ (function () {
        function Token() {
            /// The start of the token. This is set by the parser, and should not
            /// be mutated by the tokenizer.
            this.start = -1;
            /// This starts at -1, and should be updated to a term id when a
            /// matching token is found.
            this.value = -1;
            /// When setting `.value`, you should also set `.end` to the end
            /// position of the token. (You'll usually want to use the `accept`
            /// method.)
            this.end = -1;
        }
        /// Accept a token, setting `value` and `end` to the given values.
        Token.prototype.accept = function (value, end) {
            this.value = value;
            this.end = end;
        };
        return Token;
    }());
    /// An `InputStream` that is backed by a single, flat string.
    var StringStream = /** @class */ (function () {
        function StringStream(string, length) {
            if (length === void 0) { length = string.length; }
            this.string = string;
            this.length = length;
        }
        StringStream.prototype.get = function (pos) {
            return pos < 0 || pos >= this.length ? -1 : this.string.charCodeAt(pos);
        };
        StringStream.prototype.read = function (from, to) { return this.string.slice(from, Math.min(this.length, to)); };
        StringStream.prototype.clip = function (at) { return new StringStream(this.string, at); };
        return StringStream;
    }());
    /// @internal
    var TokenGroup = /** @class */ (function () {
        function TokenGroup(data, id) {
            this.data = data;
            this.id = id;
        }
        TokenGroup.prototype.token = function (input, token, stack) { readToken(this.data, input, token, stack, this.id); };
        return TokenGroup;
    }());
    TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    /// Exports that are used for `@external tokens` in the grammar should
    /// export an instance of this class.
    var ExternalTokenizer = /** @class */ (function () {
        /// Create a tokenizer. The first argument is the function that,
        /// given an input stream and a token object,
        /// [fills](#lezer.Token.accept) the token object if it recognizes a
        /// token. `token.start` should be used as the start position to
        /// scan from.
        function ExternalTokenizer(
        /// @internal
        token, options) {
            if (options === void 0) { options = {}; }
            this.token = token;
            this.contextual = !!options.contextual;
            this.fallback = !!options.fallback;
            this.extend = !!options.extend;
        }
        return ExternalTokenizer;
    }());
    // Tokenizer data is stored a big uint16 array containing, for each
    // state:
    //
    //  - A group bitmask, indicating what token groups are reachable from
    //    this state, so that paths that can only lead to tokens not in
    //    any of the current groups can be cut off early.
    //
    //  - The position of the end of the state's sequence of accepting
    //    tokens
    //
    //  - The number of outgoing edges for the state
    //
    //  - The accepting tokens, as (token id, group mask) pairs
    //
    //  - The outgoing edges, as (start character, end character, state
    //    index) triples, with end character being exclusive
    //
    // This function interprets that data, running through a stream as
    // long as new states with the a matching group mask can be reached,
    // and updating `token` when it matches a token.
    function readToken(data, input, token, stack, group) {
        var state = 0, groupMask = 1 << group, dialect = stack.cx.dialect;
        scan: for (var pos = token.start;;) {
            if ((groupMask & data[state]) == 0)
                break;
            var accEnd = data[state + 1];
            // Check whether this state can lead to a token in the current group
            // Accept tokens in this state, possibly overwriting
            // lower-precedence / shorter tokens
            for (var i = state + 3; i < accEnd; i += 2)
                if ((data[i + 1] & groupMask) > 0) {
                    var term = data[i];
                    if (dialect.allows(term) &&
                        (token.value == -1 || token.value == term || stack.cx.parser.overrides(term, token.value))) {
                        token.accept(term, pos);
                        break;
                    }
                }
            var next = input.get(pos++);
            // Do a binary search on the state's edges
            for (var low = 0, high = data[state + 2]; low < high;) {
                var mid = (low + high) >> 1;
                var index = accEnd + mid + (mid << 1);
                var from = data[index], to = data[index + 1];
                if (next < from)
                    high = mid;
                else if (next >= to)
                    low = mid + 1;
                else {
                    state = data[index + 2];
                    continue scan;
                }
            }
            break;
        }
    }

    // See lezer-generator/src/encode.ts for comments about the encoding
    // used here
    function decodeArray(input, Type) {
        if (Type === void 0) { Type = Uint16Array; }
        if (typeof input != "string")
            return input;
        var array = null;
        for (var pos = 0, out = 0; pos < input.length;) {
            var value = 0;
            for (;;) {
                var next = input.charCodeAt(pos++), stop = false;
                if (next == 126 /* BigValCode */) {
                    value = 65535 /* BigVal */;
                    break;
                }
                if (next >= 92 /* Gap2 */)
                    next--;
                if (next >= 34 /* Gap1 */)
                    next--;
                var digit = next - 32 /* Start */;
                if (digit >= 46 /* Base */) {
                    digit -= 46 /* Base */;
                    stop = true;
                }
                value += digit;
                if (stop)
                    break;
                value *= 46 /* Base */;
            }
            if (array)
                array[out++] = value;
            else
                array = new Type(value);
        }
        return array;
    }

    // Environment variable used to control console output
    var verbose = typeof process != "undefined" && /\bparse\b/.test(process.env.LOG);
    var stackIDs = null;
    var CacheCursor = /** @class */ (function () {
        function CacheCursor(tree) {
            this.start = [0];
            this.index = [0];
            this.nextStart = 0;
            this.trees = [tree];
        }
        // `pos` must be >= any previously given `pos` for this cursor
        CacheCursor.prototype.nodeAt = function (pos) {
            if (pos < this.nextStart)
                return null;
            for (;;) {
                var last = this.trees.length - 1;
                if (last < 0) { // End of tree
                    this.nextStart = 1e9;
                    return null;
                }
                var top = this.trees[last], index = this.index[last];
                if (index == top.children.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                    continue;
                }
                var next = top.children[index];
                var start = this.start[last] + top.positions[index];
                if (start >= pos)
                    return start == pos ? next : null;
                if (next instanceof TreeBuffer$1) {
                    this.index[last]++;
                    this.nextStart = start + next.length;
                }
                else {
                    this.index[last]++;
                    if (start + next.length >= pos) { // Enter this node
                        this.trees.push(next);
                        this.start.push(start);
                        this.index.push(0);
                    }
                }
            }
        };
        return CacheCursor;
    }());
    var CachedToken = /** @class */ (function (_super) {
        __extends(CachedToken, _super);
        function CachedToken() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.extended = -1;
            _this.mask = 0;
            return _this;
        }
        CachedToken.prototype.clear = function (start) {
            this.start = start;
            this.value = this.extended = -1;
        };
        return CachedToken;
    }(Token));
    var dummyToken = new Token;
    var TokenCache = /** @class */ (function () {
        function TokenCache(parser) {
            this.tokens = [];
            this.mainToken = dummyToken;
            this.actions = [];
            this.tokens = parser.tokenizers.map(function (_) { return new CachedToken; });
        }
        TokenCache.prototype.getActions = function (stack, input) {
            var actionIndex = 0;
            var main = null;
            var parser = stack.cx.parser, tokenizers = parser.tokenizers;
            var mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
            for (var i = 0; i < tokenizers.length; i++) {
                if (((1 << i) & mask) == 0)
                    continue;
                var tokenizer = tokenizers[i], token = this.tokens[i];
                if (main && !tokenizer.fallback)
                    continue;
                if (tokenizer.contextual || token.start != stack.pos || token.mask != mask) {
                    this.updateCachedToken(token, tokenizer, stack, input);
                    token.mask = mask;
                }
                if (token.value != 0 /* Err */) {
                    var startIndex = actionIndex;
                    if (token.extended > -1)
                        actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                    actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                    if (!tokenizer.extend) {
                        main = token;
                        if (actionIndex > startIndex)
                            break;
                    }
                }
            }
            while (this.actions.length > actionIndex)
                this.actions.pop();
            if (!main) {
                main = dummyToken;
                main.start = stack.pos;
                if (stack.pos == input.length)
                    main.accept(stack.cx.parser.eofTerm, stack.pos);
                else
                    main.accept(0 /* Err */, stack.pos + 1);
            }
            this.mainToken = main;
            return this.actions;
        };
        TokenCache.prototype.updateCachedToken = function (token, tokenizer, stack, input) {
            token.clear(stack.pos);
            tokenizer.token(input, token, stack);
            if (token.value > -1) {
                var parser = stack.cx.parser;
                for (var i = 0; i < parser.specialized.length; i++)
                    if (parser.specialized[i] == token.value) {
                        var result = parser.specializers[i](input.read(token.start, token.end), stack);
                        if (result >= 0 && stack.cx.dialect.allows(result >> 1)) {
                            if ((result & 1) == 0 /* Specialize */)
                                token.value = result >> 1;
                            else
                                token.extended = result >> 1;
                            break;
                        }
                    }
            }
            else if (stack.pos == input.length) {
                token.accept(stack.cx.parser.eofTerm, stack.pos);
            }
            else {
                token.accept(0 /* Err */, stack.pos + 1);
            }
        };
        TokenCache.prototype.putAction = function (action, token, end, index) {
            // Don't add duplicate actions
            for (var i = 0; i < index; i += 3)
                if (this.actions[i] == action)
                    return index;
            this.actions[index++] = action;
            this.actions[index++] = token;
            this.actions[index++] = end;
            return index;
        };
        TokenCache.prototype.addActions = function (stack, token, end, index) {
            var state = stack.state, parser = stack.cx.parser, data = parser.data;
            for (var set = 0; set < 2; set++) {
                for (var i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {
                    if (data[i] == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */) {
                            i = pair(data, i + 2);
                        }
                        else {
                            if (index == 0 && data[i + 1] == 2 /* Other */)
                                index = this.putAction(pair(data, i + 1), token, end, index);
                            break;
                        }
                    }
                    if (data[i] == token)
                        index = this.putAction(pair(data, i + 1), token, end, index);
                }
            }
            return index;
        };
        return TokenCache;
    }());
    var StackContext = /** @class */ (function () {
        function StackContext(parser, maxBufferLength, input, topTerm, dialect, parent, wrapType // Set to -2 when a stack descending from this nesting event finishes
        ) {
            if (parent === void 0) { parent = null; }
            if (wrapType === void 0) { wrapType = -1; }
            this.parser = parser;
            this.maxBufferLength = maxBufferLength;
            this.input = input;
            this.topTerm = topTerm;
            this.dialect = dialect;
            this.parent = parent;
            this.wrapType = wrapType;
            this.reused = [];
            this.tokens = new TokenCache(parser);
        }
        return StackContext;
    }());
    var recoverDist = 5, maxRemainingPerStep = 3, minBufferLengthPrune = 200, forceReduceLimit = 10;
    /// A parse context can be used for step-by-step parsing. After
    /// creating it, you repeatedly call `.advance()` until it returns a
    /// tree to indicate it has reached the end of the parse.
    var ParseContext = /** @class */ (function () {
        /// @internal
        function ParseContext(parser, input, options) {
            if (options === void 0) { options = {}; }
            // The position to which the parse has advanced.
            this.pos = 0;
            this.recovering = 0;
            this.tokenCount = 0;
            this.nextStackID = 0x2654;
            var _a = options.cache, cache = _a === void 0 ? undefined : _a, _b = options.strict, strict = _b === void 0 ? false : _b, _c = options.bufferLength, bufferLength = _c === void 0 ? DefaultBufferLength$1 : _c, _d = options.top, top = _d === void 0 ? undefined : _d, dialect = options.dialect;
            var topInfo = top ? parser.topRules[top] : parser.defaultTop;
            if (!topInfo)
                throw new RangeError("Invalid top rule name " + top);
            this.stacks = [Stack.start(new StackContext(parser, bufferLength, input, topInfo[1], parser.parseDialect(dialect)), topInfo[0])];
            this.strict = strict;
            this.cache = cache ? new CacheCursor(cache) : null;
        }
        /// @internal
        ParseContext.prototype.putStack = function (stack) {
            this.stacks.push(stack);
            if (this.pos < 0 || stack.pos < this.pos)
                this.pos = stack.pos;
        };
        /// @internal
        ParseContext.prototype.putStackDedup = function (stack) {
            for (var i = 0; i < this.stacks.length; i++) {
                var other = this.stacks[i];
                if (other.pos == stack.pos && other.sameState(stack)) {
                    if (this.stacks[i].score < stack.score)
                        this.stacks[i] = stack;
                    return;
                }
            }
            this.putStack(stack);
        };
        /// Move the parser forward. This will process all parse stacks at
        /// `this.pos` and try to advance them to a further position. If no
        /// stack for such a position is found, it'll start error-recovery.
        ///
        /// When the parse is finished, this will return a syntax tree. When
        /// not, it returns `null`.
        ParseContext.prototype.advance = function () {
            var stacks = this.stacks, pos = this.pos;
            // This will now hold stacks beyond `pos`.
            this.stacks = [];
            // Will be reset to the next position by `putStack`.
            this.pos = -1;
            var stopped = null, stoppedTokens = null;
            // Keep advancing any stacks at `pos` until they either move
            // forward or can't be advanced. Gather stacks that can't be
            // advanced further in `stopped`.
            for (var i = 0; i < stacks.length; i++) {
                var stack = stacks[i];
                for (;;) {
                    if (stack.pos > pos) {
                        this.putStack(stack);
                    }
                    else {
                        var result = this.advanceStack(stack, stacks);
                        if (result) {
                            stack = result;
                            continue;
                        }
                        else {
                            if (!stopped) {
                                stopped = [];
                                stoppedTokens = [];
                            }
                            stopped.push(stack);
                            var tok = stack.cx.tokens.mainToken;
                            stoppedTokens.push(tok.value, tok.end);
                        }
                    }
                    break;
                }
            }
            if (!this.stacks.length) {
                var finished = stopped && findFinished(stopped);
                if (finished)
                    return finished.toTree();
                if (this.strict) {
                    if (verbose && stopped)
                        console.log("Stuck with token " + stopped[0].cx.parser.getName(stopped[0].cx.tokens.mainToken.value));
                    throw new SyntaxError("No parse at " + pos);
                }
                if (!this.recovering)
                    this.recovering = recoverDist;
            }
            if (this.recovering && stopped) {
                var finished = this.runRecovery(stopped, stoppedTokens);
                if (finished)
                    return finished.forceAll().toTree();
            }
            if (this.recovering) {
                var maxRemaining = this.recovering == 1 ? 1 : this.recovering * maxRemainingPerStep;
                if (this.stacks.length > maxRemaining) {
                    this.stacks.sort(function (a, b) { return b.score - a.score; });
                    this.stacks.length = maxRemaining;
                }
                if (this.stacks.some(function (s) { return s.reducePos > pos; }))
                    this.recovering--;
            }
            else if (this.stacks.length > 1) {
                // Prune stacks that are in the same state, or that have been
                // running without splitting for a while, to avoid getting stuck
                // with multiple successful stacks running endlessly on.
                outer: for (var i = 0; i < this.stacks.length - 1; i++) {
                    var stack = this.stacks[i];
                    for (var j = i + 1; j < this.stacks.length; j++) {
                        var other = this.stacks[j];
                        if (stack.sameState(other) ||
                            stack.buffer.length > minBufferLengthPrune && other.buffer.length > minBufferLengthPrune) {
                            if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                                this.stacks.splice(j--, 1);
                            }
                            else {
                                this.stacks.splice(i--, 1);
                                continue outer;
                            }
                        }
                    }
                }
            }
            this.tokenCount++;
            return null;
        };
        // Returns an updated version of the given stack, or null if the
        // stack can't advance normally. When `split` is given, stacks split
        // off by ambiguous operations will be pushed to that, or given to
        // `putStack` if they move `pos` forward.
        ParseContext.prototype.advanceStack = function (stack, split) {
            var start = stack.pos, _a = stack.cx, input = _a.input, parser = _a.parser;
            var base = verbose ? this.stackID(stack) + " -> " : "";
            if (this.cache) {
                for (var cached = this.cache.nodeAt(start); cached;) {
                    var match = parser.group.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                    if (match > -1 && cached.length) {
                        stack.useNode(cached, match);
                        if (verbose)
                            console.log(base + this.stackID(stack) + (" (via reuse of " + parser.getName(cached.type.id) + ")"));
                        return stack;
                    }
                    if (!(cached instanceof Tree$1) || cached.children.length == 0 || cached.positions[0] > 0)
                        break;
                    var inner = cached.children[0];
                    if (inner instanceof Tree$1)
                        cached = inner;
                    else
                        break;
                }
            }
            var nest = parser.startNested(stack.state);
            maybeNest: if (nest > -1) {
                var _b = parser.nested[nest], grammar = _b.grammar, endToken = _b.end, placeholder = _b.placeholder;
                var filterEnd = undefined, parseNode = null, nested = void 0, top = void 0, dialect = void 0, wrapType = undefined;
                if (typeof grammar == "function") {
                    var query = grammar(input, stack);
                    if (query.stay)
                        break maybeNest;
                    (parseNode = query.parseNode, nested = query.parser, top = query.top, dialect = query.dialect, filterEnd = query.filterEnd, wrapType = query.wrapType);
                }
                else {
                    nested = grammar;
                }
                var end = this.scanForNestEnd(stack, endToken, filterEnd);
                var clippedInput = stack.cx.input.clip(end);
                if (parseNode || !nested) {
                    var node = parseNode ? parseNode(clippedInput, stack.pos) : Tree$1.empty;
                    if (node.length != end - stack.pos)
                        node = new Tree$1(node.type, node.children, node.positions, end - stack.pos);
                    if (wrapType != null)
                        node = new Tree$1(parser.group.types[wrapType], [node], [0], node.length);
                    stack.useNode(node, parser.getGoto(stack.state, placeholder, true));
                    return stack;
                }
                else {
                    var topInfo = top ? nested.topRules[top] : nested.defaultTop;
                    var newStack = Stack.start(new StackContext(nested, stack.cx.maxBufferLength, clippedInput, topInfo[1], nested.parseDialect(dialect), stack, wrapType), topInfo[0], stack.pos);
                    if (verbose)
                        console.log(base + this.stackID(newStack) + " (nested)");
                    return newStack;
                }
            }
            var defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
            if (defaultReduce > 0) {
                stack.reduce(defaultReduce);
                if (verbose)
                    console.log(base + this.stackID(stack) + (" (via always-reduce " + parser.getName(defaultReduce & 65535 /* ValueMask */) + ")"));
                return stack;
            }
            var actions = stack.cx.tokens.getActions(stack, input);
            for (var i = 0; i < actions.length;) {
                var action = actions[i++], term = actions[i++], end = actions[i++];
                var last = i == actions.length || !split;
                var localStack = last ? stack : stack.split();
                localStack.apply(action, term, end);
                if (verbose)
                    console.log(base + this.stackID(localStack) + (" (via " + ((action & 65536 /* ReduceFlag */) == 0 ? "shift"
                        : "reduce of " + parser.getName(action & 65535 /* ValueMask */)) + " for " + parser.getName(term) + " @ " + start + (localStack == stack ? "" : ", split") + ")"));
                if (last)
                    return localStack;
                else if (localStack.pos > start)
                    this.putStack(localStack);
                else
                    split.push(localStack);
            }
            if (stack.cx.parent && stack.pos == input.length)
                return this.finishNested(stack);
            return null;
        };
        // Advance a given stack forward as far as it will go. Returns the
        // (possibly updated) stack if it got stuck, or null if it moved
        // forward and was given to `putStackDedup`.
        ParseContext.prototype.advanceFully = function (stack) {
            var pos = stack.pos;
            for (;;) {
                var result = this.advanceStack(stack, null);
                if (!result)
                    return stack;
                if (result.pos > pos) {
                    this.putStackDedup(result);
                    return null;
                }
                stack = result;
            }
        };
        ParseContext.prototype.runRecovery = function (stacks, tokens) {
            var finished = null, restarted = false;
            for (var i = 0; i < stacks.length; i++) {
                var stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
                var base = verbose ? this.stackID(stack) + " -> " : "";
                if (stack.deadEnd) {
                    if (restarted)
                        continue;
                    restarted = true;
                    stack.restart();
                    if (verbose)
                        console.log(base + this.stackID(stack) + " (restarted)");
                    var stopped = this.advanceFully(stack);
                    if (stopped)
                        stack = stopped;
                    else
                        continue;
                }
                var force = stack.split(), forceBase = base;
                for (var j = 0; force.forceReduce() && j < forceReduceLimit; j++) {
                    if (verbose)
                        console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                    var stopped = this.advanceFully(force);
                    if (!stopped)
                        break;
                    force = stopped;
                    if (verbose)
                        forceBase = this.stackID(stopped) + " -> ";
                }
                for (var _i = 0, _a = stack.recoverByInsert(token); _i < _a.length; _i++) {
                    var insert = _a[_i];
                    if (verbose)
                        console.log(base + this.stackID(insert) + " (via recover-insert)");
                    this.advanceFully(insert);
                }
                if (stack.cx.input.length > stack.pos) {
                    if (tokenEnd == stack.pos) {
                        tokenEnd++;
                        token = 0 /* Err */;
                    }
                    stack.recoverByDelete(token, tokenEnd);
                    if (verbose)
                        console.log(base + this.stackID(stack) + (" (via recover-delete " + stack.cx.parser.getName(token) + ")"));
                    this.putStackDedup(stack);
                }
                else if (!stack.cx.parent && (!finished || finished.score < stack.score)) {
                    finished = stack;
                }
            }
            return finished;
        };
        /// Force the parse to finish, generating a tree containing the nodes
        /// parsed so far.
        ParseContext.prototype.forceFinish = function () {
            return this.stacks[0].split().forceAll().toTree();
        };
        Object.defineProperty(ParseContext.prototype, "badness", {
            /// A value that indicates how successful the parse is so far, as
            /// the number of error-recovery steps taken divided by the number
            /// of tokens parsed. Could be used to decide to abort a parse when
            /// the input doesn't appear to match the grammar at all.
            get: function () {
                if (!this.stacks.length)
                    return 0;
                return -(this.stacks[0].score / (200 /* Token */ * this.tokenCount));
            },
            enumerable: true,
            configurable: true
        });
        ParseContext.prototype.scanForNestEnd = function (stack, endToken, filter) {
            var input = stack.cx.input;
            for (var pos = stack.pos; pos < input.length; pos++) {
                dummyToken.start = pos;
                dummyToken.value = -1;
                endToken.token(input, dummyToken, stack);
                if (dummyToken.value > -1 && (!filter || filter(input.read(pos, dummyToken.end))))
                    return pos;
            }
            return input.length;
        };
        ParseContext.prototype.finishNested = function (stack) {
            if (stack.cx.wrapType == -2)
                return null; // Another nested stack already finished
            var parent = stack.cx.parent, tree = stack.forceAll().toTree();
            var parentParser = parent.cx.parser, info = parentParser.nested[parentParser.startNested(parent.state)];
            tree = new Tree$1(tree.type, tree.children, tree.positions.map(function (p) { return p - parent.pos; }), stack.pos - parent.pos);
            if (stack.cx.wrapType > -1)
                tree = new Tree$1(parentParser.group.types[stack.cx.wrapType], [tree], [0], tree.length);
            stack.cx.wrapType = -2;
            parent.useNode(tree, parentParser.getGoto(parent.state, info.placeholder, true));
            if (verbose)
                console.log(this.stackID(parent) + (" (via unnest " + (stack.cx.wrapType > -1 ? parentParser.getName(stack.cx.wrapType) : tree.type.name) + ")"));
            return parent;
        };
        ParseContext.prototype.stackID = function (stack) {
            var id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
            if (!id)
                stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
            return id + stack;
        };
        return ParseContext;
    }());
    var Dialect = /** @class */ (function () {
        function Dialect(source, flags, disabled) {
            this.source = source;
            this.flags = flags;
            this.disabled = disabled;
        }
        Dialect.prototype.allows = function (term) { return !this.disabled || this.disabled[term] == 0; };
        return Dialect;
    }());
    /// A parser holds the parse tables for a given grammar, as generated
    /// by `lezer-generator`.
    var Parser = /** @class */ (function () {
        /// @internal
        function Parser(spec) {
            var _this = this;
            this.nextStateCache = [];
            this.cachedDialect = null;
            if (spec.version != 12 /* Version */)
                throw new RangeError("Parser version (" + spec.version + ") doesn't match runtime version (" + 12 /* Version */ + ")");
            var tokenArray = decodeArray(spec.tokenData);
            var nodeNames = spec.nodeNames.split(" ");
            this.minRepeatTerm = nodeNames.length;
            for (var i = 0; i < spec.repeatNodeCount; i++)
                nodeNames.push("");
            var nodeProps = [];
            for (var i = 0; i < nodeNames.length; i++)
                nodeProps.push(noProps);
            function setProp(nodeID, prop, value) {
                if (nodeProps[nodeID] == noProps)
                    nodeProps[nodeID] = Object.create(null);
                prop.set(nodeProps[nodeID], prop.deserialize(String(value)));
            }
            if (spec.nodeProps)
                for (var _i = 0, _a = spec.nodeProps; _i < _a.length; _i++) {
                    var propSpec = _a[_i];
                    var prop = propSpec[0];
                    for (var i = 1; i < propSpec.length;) {
                        var next = propSpec[i++];
                        if (next >= 0) {
                            setProp(next, prop, propSpec[i++]);
                        }
                        else {
                            var value = propSpec[i + -next];
                            for (var j = -next; j > 0; j--)
                                setProp(propSpec[i++], prop, value);
                            i++;
                        }
                    }
                }
            this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);
            this.specializers = [];
            if (spec.specialized)
                for (var i = 0; i < spec.specialized.length; i++) {
                    this.specialized[i] = spec.specialized[i].term;
                    this.specializers[i] = spec.specialized[i].get;
                }
            this.states = decodeArray(spec.states, Uint32Array);
            this.data = decodeArray(spec.stateData);
            this.goto = decodeArray(spec.goto);
            var topTerms = Object.keys(spec.topRules).map(function (r) { return spec.topRules[r][1]; });
            this.group = new NodeGroup$1(nodeNames.map(function (name, i) {
                var flags = (i >= _this.minRepeatTerm ? 8 /* Repeated */ : 0) |
                    (topTerms.indexOf(i) > -1 ? 1 /* Top */ : 0) |
                    (i == 0 ? 4 /* Error */ : 0) |
                    (spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1 ? 2 /* Skipped */ : 0);
                return new NodeType$1(name, nodeProps[i], i, flags);
            }));
            this.maxTerm = spec.maxTerm;
            this.tokenizers = spec.tokenizers.map(function (value) { return typeof value == "number" ? new TokenGroup(tokenArray, value) : value; });
            this.topRules = spec.topRules;
            this.nested = (spec.nested || []).map(function (_a) {
                var name = _a[0], grammar = _a[1], endToken = _a[2], placeholder = _a[3];
                return { name: name, grammar: grammar, end: new TokenGroup(decodeArray(endToken), 0), placeholder: placeholder };
            });
            this.dialects = spec.dialects || {};
            this.dynamicPrecedences = spec.dynamicPrecedences || null;
            this.tokenPrecTable = spec.tokenPrec;
            this.termNames = spec.termNames || null;
            this.maxNode = this.group.types.length - 1;
            for (var i = 0, l = this.states.length / 6 /* Size */; i < l; i++)
                this.nextStateCache[i] = null;
        }
        /// Parse a given string or stream.
        Parser.prototype.parse = function (input, options) {
            if (typeof input == "string")
                input = new StringStream(input);
            var cx = new ParseContext(this, input, options);
            for (;;) {
                var done = cx.advance();
                if (done)
                    return done;
            }
        };
        /// Create a `ParseContext`.
        Parser.prototype.startParse = function (input, options) {
            if (typeof input == "string")
                input = new StringStream(input);
            return new ParseContext(this, input, options);
        };
        /// Get a goto table entry @internal
        Parser.prototype.getGoto = function (state, term, loose) {
            if (loose === void 0) { loose = false; }
            var table = this.goto;
            if (term >= table[0])
                return -1;
            for (var pos = table[term + 1];;) {
                var groupTag = table[pos++], last = groupTag & 1;
                var target = table[pos++];
                if (last && loose)
                    return target;
                for (var end = pos + (groupTag >> 1); pos < end; pos++)
                    if (table[pos] == state)
                        return target;
                if (last)
                    return -1;
            }
        };
        /// Check if this state has an action for a given terminal @internal
        Parser.prototype.hasAction = function (state, terminal) {
            var data = this.data;
            for (var set = 0; set < 2; set++) {
                for (var i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next = void 0;; i += 3) {
                    if ((next = data[i]) == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */)
                            next = data[i = pair(data, i + 2)];
                        else if (data[i + 1] == 2 /* Other */)
                            return pair(data, i + 2);
                        else
                            break;
                    }
                    if (next == terminal || next == 0 /* Err */)
                        return pair(data, i + 1);
                }
            }
            return 0;
        };
        /// @internal
        Parser.prototype.stateSlot = function (state, slot) {
            return this.states[(state * 6 /* Size */) + slot];
        };
        /// @internal
        Parser.prototype.stateFlag = function (state, flag) {
            return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
        };
        /// @internal
        Parser.prototype.startNested = function (state) {
            var flags = this.stateSlot(state, 0 /* Flags */);
            return flags & 4 /* StartNest */ ? flags >> 10 /* NestShift */ : -1;
        };
        /// @internal
        Parser.prototype.validAction = function (state, action) {
            if (action == this.stateSlot(state, 4 /* DefaultReduce */))
                return true;
            for (var i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair(this.data, i + 2);
                    else
                        return false;
                }
                if (action == pair(this.data, i + 1))
                    return true;
            }
        };
        /// Get the states that can follow this one through shift actions or
        /// goto jumps. @internal
        Parser.prototype.nextStates = function (state) {
            var cached = this.nextStateCache[state];
            if (cached)
                return cached;
            var result = [];
            for (var i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair(this.data, i + 2);
                    else
                        break;
                }
                if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0 && result.indexOf(this.data[i + 1]) < 0)
                    result.push(this.data[i + 1]);
            }
            var table = this.goto, max = table[0];
            for (var term = 0; term < max; term++) {
                for (var pos = table[term + 1];;) {
                    var groupTag = table[pos++], target = table[pos++];
                    for (var end = pos + (groupTag >> 1); pos < end; pos++)
                        if (table[pos] == state && result.indexOf(target) < 0)
                            result.push(target);
                    if (groupTag & 1)
                        break;
                }
            }
            return this.nextStateCache[state] = result;
        };
        /// @internal
        Parser.prototype.overrides = function (token, prev) {
            var iPrev = findOffset(this.data, this.tokenPrecTable, prev);
            return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
        };
        /// Create a new `Parser` instance with different values for (some
        /// of) the nested grammars. This can be used to, for example, swap
        /// in a different language for a nested grammar or fill in a nested
        /// grammar that was left blank by the original grammar.
        Parser.prototype.withNested = function (spec) {
            return this.copy({ nested: this.nested.map(function (obj) {
                    if (!Object.prototype.hasOwnProperty.call(spec, obj.name))
                        return obj;
                    return { name: obj.name, grammar: spec[obj.name], end: obj.end, placeholder: obj.placeholder };
                }) });
        };
        /// Create a new `Parser` instance whose node types have the given
        /// props added. You should use [`NodeProp.add`](#tree.NodeProp.add)
        /// to create the arguments to this method.
        Parser.prototype.withProps = function () {
            var _a;
            var props = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                props[_i] = arguments[_i];
            }
            return this.copy({ group: (_a = this.group).extend.apply(_a, props) });
        };
        /// Replace the given external tokenizer with another one, returning
        /// a new parser object.
        Parser.prototype.withTokenizer = function (from, to) {
            return this.copy({ tokenizers: this.tokenizers.map(function (t) { return t == from ? to : t; }) });
        };
        Parser.prototype.copy = function (props) {
            // Hideous reflection-based kludge to make it easy to create a
            // slightly modified copy of a parser.
            var obj = Object.create(Parser.prototype);
            for (var _i = 0, _a = Object.keys(this); _i < _a.length; _i++) {
                var key = _a[_i];
                obj[key] = key in props ? props[key] : this[key];
            }
            return obj;
        };
        /// Returns the name associated with a given term. This will only
        /// work for all terms when the parser was generated with the
        /// `--names` option. By default, only the names of tagged terms are
        /// stored.
        Parser.prototype.getName = function (term) {
            return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.group.types[term].name || term);
        };
        Object.defineProperty(Parser.prototype, "eofTerm", {
            /// The eof term id is always allocated directly after the node
            /// types. @internal
            get: function () { return this.maxNode + 1; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Parser.prototype, "hasNested", {
            /// Tells you whether this grammar has any nested grammars.
            get: function () { return this.nested.length > 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Parser.prototype, "defaultTop", {
            /// @internal
            get: function () { return this.topRules[Object.keys(this.topRules)[0]]; },
            enumerable: true,
            configurable: true
        });
        /// @internal
        Parser.prototype.dynamicPrecedence = function (term) {
            var prec = this.dynamicPrecedences;
            return prec == null ? 0 : prec[term] || 0;
        };
        Object.defineProperty(Parser.prototype, "topType", {
            /// The node type produced by the default top rule.
            get: function () { return this.group.types[this.defaultTop[1]]; },
            enumerable: true,
            configurable: true
        });
        /// @internal
        Parser.prototype.parseDialect = function (dialect) {
            if (this.cachedDialect && this.cachedDialect.source == dialect)
                return this.cachedDialect;
            var values = Object.keys(this.dialects), flags = values.map(function () { return false; });
            if (dialect)
                for (var _i = 0, _a = dialect.split(" "); _i < _a.length; _i++) {
                    var part = _a[_i];
                    var id = values.indexOf(part);
                    if (id >= 0)
                        flags[id] = true;
                }
            var disabled = null;
            for (var i = 0; i < values.length; i++)
                if (!flags[i]) {
                    for (var j = this.dialects[values[i]], id = void 0; (id = this.data[j++]) != 65535 /* End */;)
                        (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
                }
            return this.cachedDialect = new Dialect(dialect, flags, disabled);
        };
        /// (used by the output of the parser generator) @internal
        Parser.deserialize = function (spec) {
            return new Parser(spec);
        };
        return Parser;
    }());
    function pair(data, off) { return data[off] | (data[off + 1] << 16); }
    Parser.TokenGroup = TokenGroup;
    var noProps = Object.create(null);
    function findOffset(data, start, term) {
        for (var i = start, next = void 0; (next = data[i]) != 65535 /* End */; i++)
            if (next == term)
                return i - start;
        return -1;
    }
    function findFinished(stacks) {
        var best = null;
        for (var _i = 0, stacks_1 = stacks; _i < stacks_1.length; _i++) {
            var stack = stacks_1[_i];
            if (stack.pos == stack.cx.input.length &&
                stack.cx.parser.stateFlag(stack.state, 2 /* Accepting */) &&
                (!best || best.score < stack.score))
                best = stack;
        }
        return best;
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const 
      rawStringStart = 305,
      rawStringContent = 306,
      rawStringEnd = 307,
      templateArgsEndFallback = 1,
      MacroName = 2;

    const R = 82, L = 76, u = 117, U = 85,
          a = 97, z = 122, A = 65, Z = 90, Underscore = 95,
          Zero = 48,
          Quote = 34,
          ParenL = 40, ParenR = 41,
          Space = 32, Newline = 10,
          GreaterThan = 62;

    const rawString = new ExternalTokenizer((input, token) => {
      let pos = token.start, next = input.get(pos++);
      // Raw string literals can start with: R, LR, uR, UR, u8R
      if (next == L || next == U) {
        next = input.get(pos++);
      } else if (next == u) {
        next = input.get(pos++);
        if (next == Zero + 8) next = input.get(pos++);
      }
      if (next != R) return
      next = input.get(pos++);
      if (next != Quote) return
      next = input.get(pos++);

      while (next != ParenL) {
        if (next == Space || next <= 13 || next == ParenR) return
        next = input.get(pos++);
      }

      return token.accept(rawStringStart, pos)
    });

    const rawStringContinue = new ExternalTokenizer((input, token, stack) => {
      let pos = token.start, next = input.get(pos++), markerString = null;
      for (;;) {
        if (next < 0) {
          if (pos > token.start + 1) token.accept(rawStringContent, pos - 1);
          return
        } else if (next == ParenR) {
          if (!markerString) {
            let ruleStart = stack.ruleStart;
            let match = /"(\S*?)\(/.exec(input.read(ruleStart, Math.min(token.start, ruleStart + 100)));
            markerString = match[1] + '"';
          }
          if (input.read(pos, pos + markerString.length) == markerString) {
            token.accept(rawStringEnd, pos + markerString.length);
            return
          }
        } else if (next == Newline) {
          token.accept(rawStringContent, pos);
          return
        }
        next = input.get(pos++);
      }
    }, {contextual: true});

    const fallback = new ExternalTokenizer((input, token) => {
      let pos = token.start, next = input.get(pos);
      if (next == GreaterThan) {
        // Provide a template-args-closing token when the next characters
        // are ">>", in which case the regular tokenizer will only see a
        // bit shift op.
        if (input.get(pos + 1) == GreaterThan)
          token.accept(templateArgsEndFallback, pos + 1);
      } else {
        // Notice all-uppercase identifiers
        let sawLetter = false;
        for (;; next = input.get(++pos)) {
          if (next >= A && next <= Z) sawLetter = true;
          else if (next >= a && next <= z) return
          else if (next != Underscore && !(next >= Zero && next <= Zero + 9)) break
        }
        if (sawLetter && pos >= token.start + 2) token.accept(MacroName, pos);
      }
    }, {extend: true});

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier = {__proto__:null,bool:32, char:32, int:32, float:32, double:32, void:32, size_t:32, ssize_t:32, intptr_t:32, uintptr_t:32, charptr_t:32, int8_t:32, int16_t:32, int32_t:32, int64_t:32, uint8_t:32, uint16_t:32, uint32_t:32, uint64_t:32, char8_t:32, char16_t:32, char32_t:32, char64_t:32, const:66, volatile:68, restrict:70, _Atomic:72, mutable:74, constexpr:76, struct:80, __declspec:84, final:88, override:88, public:92, private:92, protected:92, virtual:154, extern:156, static:158, register:160, inline:162, __attribute__:166, __based:172, __restrict:174, __uptr:174, __sptr:174, _unaligned:174, __unaligned:174, noexcept:188, throw:192, template:248, typename:254, class:256, using:266, __cdecl:274, __clrcall:274, __stdcall:274, __fastcall:274, __thiscall:274, __vectorcall:274, case:284, default:286, if:298, else:304, switch:308, do:312, while:314, for:322, return:326, break:330, continue:334, goto:338, typedef:342, try:356, catch:360, namespace:366, static_assert:372, explicit:382, delete:392, operator:400, friend:420, union:422, enum:430, signed:434, unsigned:434, long:434, short:434, decltype:446, auto:448, sizeof:480, TRUE:742, true:742, FALSE:744, false:744, NULL:488, new:494, nullptr:508, this:510};
    const spec_ = {__proto__:null,"<":137};
    const spec_templateArgsEnd = {__proto__:null,">":141};
    const spec_scopedIdentifier = {__proto__:null,operator:398, new:492, delete:500};
    const parser = Parser.deserialize({
      version: 12,
      states: "$BhQ!QQ]OOP&tO[OOO'fO`O'#CcO+PQ[O'#CfO+ZQ[O'#FdO-SQtO'#CvO-ZQ[O'#CvO.yQ[O'#J_O/QQ[O'#CuO/]Q^O'#DxO/eO!bO'#DyO/mQ#xO'#DaOOQS'#IV'#IVO/xQ[O'#J|O1iQ[O'#I[OOQS'#I['#I[O4nQ[O'#JpO7oQ[O'#JpO9vQ]O'#EZO:WQ[O'#EZO:]Q[OOO:eQ]O'#EhO<xQ]O'#EiO=VQ[O'#EiO?qQ[O'#JtO?{Q[O'#JtO@VQ]O'#HrOOQS'#Jt'#JtOAvQ[O'#JtOC{Q[O'#JtODYQ[O'#FWODzQ[O'#FbOOQT'#Fd'#FdO,lQ[O'#FdOOQT'#KQ'#KQOOQT'#KP'#KPOEPQ]O'#JUOFzQ[O'#KTOGXQ[O'#KTOOQT'#Ga'#GaOG|Q[O'#KVOOQT'#Gi'#GiOOQT'#Gm'#GmOOQT'#KO'#KOOOQT'#Ik'#IkQ!QQ]OOOHXQ]O'#F[OOQS'#Ir'#IrOH`Q[O'#G|OOQS'#J_'#J_OKwQ[O'#J_OLeQ[O'#JUONbQ]O'#H`ONbQ]O'#HcOOQS'#Hh'#HhOOQS'#Hi'#HiO!!^Q[O'#HqOOQS'#JU'#JUO!$bQ[O'#J_OOQT'#J^'#J^O!$iQ[O'#DVO!$nQ[O'#JqOOQS'#Jq'#JqO!&}Q[O'#EQO!'SQ[O'#ETO!'XQ[O'#G[O!'dQ[O'#FfO!'lQ[O'#FkO!'qQ]O'#FmO!'lQ[O'#FqO!*ZQ[O'#FrO!*`Q]O'#FtO!*jQ[O'#FvO!*oQ[O'#FxO!*tQ[O'#FzO!*yQ[O'#F|O!,QQ]O'#F_O!-kQ[O'#F_O!-pQ[O'#GTO!-uQ]O'#GXO!-|Q[O'#GYO!.UQ[O'#G]O!0WQ[O'#G`O!0eQ[O'#GbO!1YQ[O'#GjO4nQ[O'#FYO!1pQ[O'#DTO!2UQ[O'#GyO!2jQ[O'#GzO!2{Q[O'#HQO!3aQ[O'#HRO!4UQ[O'#HSO!4ZQ]O'#HeO!4eQ[O'#HkO!5]Q]O'#HoP!6v{&jO'#CaP!.P{&jO'#CaP!7R{,UO'#CaP!.P{&jO'#CaP!7W{&jO'#CaP!7]OWO'#IPPOOO)CDr)CDrOOOO'#IR'#IRO!7hO`O,58}OOQT,58},58}O!,QQ]O,59TOOQS,59V,59VONbQ]O,5<POOQT,5<O,5<OO!7sQ[O,59XONbQ]O,5=uOOQT'#H]'#H]OOQT'#H^'#H^OOQT'#H_'#H_ONbQ]O,5=vONbQ]O,5=vONbQ]O,5=vONbQ]O,5=vONbQ]O,5=vONbQ]O,5=vONbQ]O,5=vONbQ]O,5=vONbQ]O,5=vO!:XQ]O,5=}OOQS,5>_,5>_O!;UQ]O'#CgO!>nQ[O'#CxOOQS,59b,59bOOQS,59a,59aOOQS,5;U,5;UO!1YQ[O,5=UO!4eQ[O,5>VO!@cQ]O,5>ZO!@jQtO,59bO!@xQ]O'#EwOOQS,5>R,5>RONbQ]O,59UOOQU'#IY'#IYO!AYQ^O,5:dOOQT,5:d,5:dO!AbOpO,5:eO!AgQtO'#DbO!AxQtO'#JeO!BWQtO,59{O!DYQ[O'#CrO!ExQtO'#CvO!E}Q[O'#CuO!IbQ[O'#J_OOQS-E<T-E<TO!IiQ[O,5@hODYQ[O,5;rO!IpQ[O'#J_O4nQ[O,5;tOOQS-E<Y-E<YO!IzQ[O,5@[O!IzQ[O,5@[OOQT,5@h,5@hO!MzQ[O'#CfO# rQ[O,5=tO#!`QtO'#CvO#!qQ[O'#EjO#!vQ[O'#HgO##OQ[O'#CuOOQT'#IS'#ISO##ZQ[O,5:uO##qQ[O,5:uO#$mQ[O,5:uO#$zQ[O'#CsO!'SQ[O'#CkOOQS'#I]'#I]O##qQ[O,5:uO#&WQ[O,5:vO#([Q]O,5;RO#(fQ[O'#EXO#*WQ[O,5<[O#+YQ[O'#J_O!*yQ[O'#C|O#+aQ[O,5;SO#+lQ[O,5<[O#+qQ[O'#C|O#,kQ[O,5>OO#-RQ[O,5;TO#-`QtO'#CvO##qQ[O'#EZO=VQ[O'#EhO#-kQ[O'#JtO!.PQ[O'#EnO#.`Q[O'#CsOOQS,5;X,5;XO#0zQ]O'#CzO#2iQ[O'#KaO#4dQ[O'#JwO#4kQ[O'#JUO#5OQ[O,5;YO#5TQ]O'#FpONbQ]O'#HYO#7jQ]O,5>^O@VQ]O'#HrO#7tQ[O,5>^O#7wQ[O,5>^OOQS,5>^,5>^O#7|Q[O'#GdOOQT,5@o,5@oO#8UQ[O,5@oO#8^Q[O'#GfO#8fQ[O,5;tO#8zQ[O'#J}O#9SQ[O,5;rO!'qQ]O,5;|OOQT'#Io'#IoO#9XQ]O,5<yO#;_QtO'#CvO#;mQ[O'#EjOAvQ[O,5@oOOQS'#Ip'#IpOOQS-E<n-E<nOGXQ[O,5@oO#8UQ[O,5@qO#;rQ[O,5@qOOQT,5@q,5@qOOQT,5@r,5@rO#;}Q]O,5@rOOQT-E<i-E<iO#=kQ]O,5;vOOQT,5;v,5;vOOQS-E<p-E<pOOQS,5=h,5=hOOQS,59_,59_O#=rQ[O,5=zO#?rQ[O'#JUO#A^Q[O,5=}O#AzQ[O'#EbO#CiQ[O'#EcO#CvQ[O'#EcO#DOQ]O'#EdO#DYQ[O'#EeO#DvQ[O'#EfOOQS'#Jv'#JvO#E^Q[O,5>]OOQS,5>],5>]O!.PQ[O,59qO#EiQ[O,5;wO!'SQ[O,5:lOOQS,5:o,5:oO#EvQ[O,5;pO#FOQ[O,5<vO#FTQ[O,5<vO#IXQ]O'#FhO!'qQ]O,5<QO!'lQ[O,5<QO!-pQ[O,5<VO#I`Q[O,5<XO!'qQ]O,5<]O#IeQ]O,5<^O#LdQ[O,5<`OOQT,5<`,5<`O#LkQ[O,5<`OOQT,5<b,5<bOOQT,5<d,5<dOOQS'#Fc'#FcO#LpQ[O,5<fO!*yQ[O,5<hO#LuQ[O,5<hO#NeQ[O,5;yO#NlQ]O,5;yO$!qQ[O,5<oO$$WQ[O,5<sOOQT,5<s,5<sOOQS'#Cf'#CfO$$_Q]O'#F^OOQT,5<t,5<tO$$fQ[O,5<tONbQ]O,5<wO$&OQ[O'#J_O$&VQ[O'#JpO$&vQ[O,5<zO$(rQ[O'#E}O=VQ[O,5<zO$(|Q[O,5;gONbQ]O,5<|O$)mQ[O,5=UODYQ[O,5;tOOQS'#J`'#J`O$-WQ[O'#J`O$-hQ[O'#DZO$-sQ[O'#D^O$0yQ[O,59oOOQS,59o,59oO$1dQ[O,59oO$1iQ[O,59oO$1qQ[O,59oO$3sQ[O,5=eOOQS,5=e,5=eO$1dQ[O,5=eO$1iQ[O,5=eO$4^Q[O,5=eO$4oQ[O'#HOO$6bQ[O,5=fOOQS,5=f,5=fO$7[Q[O,5=fO$9gQ[O,5=lOOQS,5=l,5=lO$1dQ[O,5=lO$1iQ[O,5=lO$9qQ[O,5=lOOQS,5=m,5=mONbQ]O,5=nO$;^Q[O,5>PO#5TQ]O'#FpOOQS,5>P,5>PO$<TQ[O,5>PO$<YQ[O,5>VO!4hQ[O,5>VO$>]Q[O,5>ZO$@jQ]O,5>ZP$@q{&jO,58{P$@v{&jO,58{P$AO{,UO,58{POOO,58{,58{POOO,5>k,5>kP$AWOWO,5>kOOOO-E<P-E<POOQT1G.i1G.iO$A`Q[O1G.oO$AgQ[O1G1kOOQS1G1k1G1kO$AqQ[O'#CnO$C}QtO'#CvO$DYQ[O'#CqO$D_Q[O1G.sO#.`Q[O'#CpOOQS1G.s1G.sO$FbQ[O1G3aO$HcQ[O1G3bO$J^Q[O1G3bO$LeQ[O1G3bO$LlQ[O1G3bO$NmQ[O1G3bO$NtQ[O1G3bO%!oQ[O1G3bO%!|Q[O1G3bO%#ZQ[O1G3bO%$lQ[O1G3bO%%cQ[O'#JTO%%mQ[O'#JTO%%uQ[O,59RO$)mQ[O1G2pO%'zQ[O1G3qO!4hQ[O1G3qO%(RQ[O1G3uO%(rQ]O1G3uOOQS1G.|1G.|OOQS1G.{1G.{OOQS1G0p1G0pO!1YQ[O1G2pO%(yQ[O'#JyO@VQ]O'#HrO%)TQ[O'#EzOOQS'#Ig'#IgO%)YQ[O'#ExO%)eQ[O'#JyO%)mQ[O,5;cO%)rQ[O1G.pOOQU-E<W-E<WOOQT1G0O1G0OOOQT1G0P1G0PO%*iQ#xO'#IWO%*nQtO,59|O%-PQ#yO'#DdO%-WQ#xO'#IZO%-]QtO,5@PO%-]QtO,5@POOQS1G/g1G/gO%-hQtO1G/gO%/jQ[O'#CxO!ExQtO,59bOOQT1G6S1G6SO#8fQ[O1G1`O%1VQ[O1G1^ODYQ[O1G1`O%2SQ[O1G5vO%3cQtO,59bOOQT-E<Q-E<QO%4PQ[O1G0aO##ZQ[O1G0aOOQS-E<Z-E<ZO##qQ[O1G0aOOQS'#I^'#I^O%5eQ[O1G0bO%6gQ[O'#EaOOQS'#I_'#I_O%4^Q[O1G0bO%6wQ[O'#E]O%8[Q[O'#E_O%8aQ[O1G0mO%8hQ]O1G0mOOQS1G0m1G0mO%8rQ]O1G0mO#EoQ[O'#EYO%9hQ[O'#EYO%:RQ[O'#JsO%:ZQ[O,5:sOOQS1G1v1G1vO%:`Q[O,59hOOQS1G0n1G0nO%:`Q[O,59hO%;YQ[O,59hO%;tQ]O1G3jO%;{Q[O'#J`O%<SQ[O'#JwO%<[Q[O'#KZO%<iQ[O'#J]O%<wQ[O'#J[O%=SQ[O,59fONbQ]O'#IuO%=[Q[O,5@{O!.PQ[O'#IcO%=dQ[O,5@cOOQS1G0t1G0tOOQS1G3x1G3xONbQ]O1G3xO%=lQ[O'#GeO%=tQ[O'#KUOOQS,5=O,5=OOOQT1G6Z1G6ZO%>PQ[O,5=QO%>UQ[O,5=RO%>ZQ]O'#EXO%E]Q]O'#F[O%;tQ]O,5;sOOQS,5;s,5;sODYQ[O'#IjO%EmQ[O,5@iOOQT1G1`1G1`OOQT1G1^1G1^OOQT1G1h1G1hOOQT-E<m-E<mO#8UQ[O1G6ZOAvQ[O1G6ZO#8UQ[O1G6]OOQT1G6]1G6]OOQT1G6^1G6^O#;}Q]O1G6^O%EuQ[O1G6^O%E|Q]O,5=ROOQT1G1b1G1bOOQS'#Ia'#IaO%FTQ[O,5:|O%GfQ[O,5:|OOQS'#Ib'#IbO%GmQ[O,5:}OOQS,5:},5:}O%GmQ[O,5:}O%HkQ]O,5;OO%HuQ[O,5;OO%HkQ]O,5;OOOQS,5;O,5;OO%H|Q]O,5;OO%ITQ[O,5;PO%IwQ[O,5;QOOQS1G3w1G3wO%JOQ[O1G/]O/xQ[O'#FWOOQT1G1c1G1cO%JTQ[O1G0WO!*yQ[O1G1[OOQT1G2b1G2bO%JYQ[O1G2bO%J_Q[O,5<SO#EoQ[O'#FWODYQ[O'#FWO%JfQ[O,5<SONbQ]O,5<SO%JnQ[O,5<SO%JsQ]O1G1lO!'qQ]O1G1lOOQT1G1q1G1qO& pQ[O1G1sOOQT1G1w1G1wO& uQ[O1G1xO& |Q[O1G2YO&!nQ]O1G1xO&!uQ[O1G1xOOQT1G1z1G1zOOQT1G2Q1G2QO#LuQ[O1G2SOOQS'#Ct'#CtO&!zQ[O'#GOO&#oQ[O'#GOO&#tQ[O'#KRO#LuQ[O'#GROOQS'#KS'#KSO&$SQ[O1G2SO&$XQ]O1G1eODYQ[O'#FWOOQT'#Il'#IlO&$XQ]O1G1eO&&^Q[O'#FrOOQT'#In'#InO&&cQ]O1G2ZO&+cQ[O'#GVOOQT1G2_1G2_OOQT,5;x,5;xO&+hQ]O,5;xOOQT1G2`1G2`O&+oQ[O1G2cOOQT1G2f1G2fOOQS'#J{'#J{O&+yQ[O'#JzO&,UQ[O,5;iO&,^Q[O'#FOO&,qQ[O'#FOO&-UQ[O'#FTO&-ZQ[O1G2fO&-fQ[O'#J_OGXQ[O'#KTO#8UQ[O'#KVOOQT'#Gn'#GnOOQT'#Go'#GoO&-pQ[O'#FUO&-UQ[O'#E{OOQT1G1R1G1RO&-uQ[O1G2hO&-|Q[O1G2pO&._Q[O1G1`O&.jQ[O'#JaOOQS,59u,59uO&.uQ[O'#JaO&.}Q[O'#D`O&/zQ[O'#JtO&0sQ[O'#D`OGXQ[O'#KTOOQS'#Gq'#GqOOQS'#Gs'#GsOOQS'#Gt'#GtOOQS'#Jc'#JcOOQS'#IU'#IUO&0}Q[O,59xOOQS,59x,59xO&2dQ[O'#D`O&3vQ[O'#GuO&4sQ[O'#GxOOQS1G/Z1G/ZO$1dQ[O1G/ZO$1iQ[O1G/ZO&6iQ[O1G/ZOOQS1G3P1G3PO$1dQ[O1G3PO$1iQ[O1G3PO&8sQ[O1G3PO&9^Q[O'#HPO&9iQ[O'#KYO&9qQ[O,5=jO&9vQ[O'#KXOOQS1G3Q1G3QO&:UQ[O1G3QO&<bQ[O1G3QOOQS1G3W1G3WO$1dQ[O1G3WO$1iQ[O1G3WO&>iQ[O1G3WO&>sQ[O1G3YO&>zQ[O,5@xO!.PQ[O1G3kONbQ]O'#HnOOQS1G3q1G3qO&?PQ[O1G3qO&?WQ]O1G3uPOOO1G.g1G.gP&@w{&jO1G.gP&@|Q[O'#KcP&AX{,UO1G.gPOOO1G4V1G4VONbQ]O7+$ZO&A^Q[O'#CxOOQS,59],59]O&AiQtO,59bOOQS,59[,59[OOQS7+({7+({O%;tQ]O'#IvO&AtQ[O,5?oOOQS1G.m1G.mO&A|Q[O7+([OOQS7+)]7+)]O&D_Q[O7+)]O&DfQ[O7+)]O&?WQ]O7+)aO$)mQ[O7+([O&DmQ]O'#IhO&EQQ[O,5@eO&EYQ[O,5;eOOQS'#Cn'#CnOOQS,5;f,5;fONbQ]O'#EyOOQS-E<e-E<eO%;tQ]O,5;dOOQS1G0}1G0}OOQS,5>r,5>rOOQS-E<U-E<UOOQT'#Dj'#DjOOQT'#Dl'#DlOOQT'#Do'#DoO&EaQ#yO'#JfO&EhQ7aO'#JfO&EoQ#yO'#JfOOQT'#Jf'#JfOOQT'#IX'#IXO&EvQ#yO,5:OOOQS,5:O,5:OO&E}QtO,5>uOOQS-E<X-E<XO&F]QtO1G5kOOQS7+%R7+%ROOQT7+&z7+&zOOQT7+&x7+&xO&._Q[O7+&zO&FyQ[O7+%{O##ZQ[O7+%{OOQS-E<[-E<[O&HXQ[O7+%|O&HzQ[O,5:{O&JQQ[O,5:{OOQS-E<]-E<]O&JuQ]O,5:wO&J|Q[O,5:yOOQS7+&X7+&XO&KTQ[O7+&XO&K[Q]O7+&XO&LTQ[O,5:tO&MlQ[O'#EbO&N_Q[O,5:tO#DOQ]O'#EdO&NfQ[O'#EeO'!OQ[O'#EfO'!fQ[O,5:tONbQ]O,5;ZO'!pQ[O'#EqOOQS,5;[,5;[O'#RQ[O'#IdO'#]Q[O,5@_OOQS1G0_1G0_O'#eQ[O1G/SO'$_Q[O1G/SO'$yQ[O7+)UOOQS7+)X7+)XOOQS,5=q,5=qO#.eQ]O'#ItO'%jQ[O,5?vOOQS1G/Q1G/QO'%uQ[O,5?aOOQS-E<s-E<sOOQS,5>},5>}OOQS-E<a-E<aO'&PQ[O7+)dO'&UQ[O,5=PO#7|Q[O'#IqO'&dQ[O,5@pOOQT1G2l1G2lOOQT1G2m1G2mO'&oQ[O'#JyO@VQ]O'#HrO'&|Q[O1G1_OOQS1G1_1G1_O''WQ[O,5?UOOQS,5?U,5?UOOQS-E<h-E<hOOQT7++u7++uO#8UQ[O7++uOOQT7++w7++wO''lQ[O7++xOOQT7++x7++xOOQS-E<_-E<_O'([Q[O1G0hOOQS-E<`-E<`OOQS1G0i1G0iO')WQ[O1G0iO')eQ[O1G0jO')lQ]O1G0jOOQS1G0j1G0jO')vQ]O1G0jOOQS1G0k1G0kOOQS7+$w7+$wOOQS7+%r7+%rO')}Q[O7+&vOOQT7+'|7+'|OOQT1G1n1G1nODYQ[O,5;rO'*eQ[O,5<TO'*lQ[O1G1nO'*sQ[O1G1nO!'qQ]O7+'WO'*xQ]O7+'WONbQ]O'#FpO'/uQ[O7+'_O'/zQ]O7+'dO'0RQ[O7+'tO'0]Q[O7+'dO'0dQ]O7+'dO'0kQ[O7+'nO'0pQ[O,5<jO&!zQ[O,5<jO'1bQ[O,5<jO&!zQ[O,5<jOOQS,5<k,5<kO'1sQ]O,5<lO#LuQ[O'#ImO'1}Q[O,5@mO'2VQ[O,5<mOOQT7+'n7+'nO'2bQ]O7+'PO'0UQ[O'#J}OOQT-E<j-E<jO#IeQ]O,5<^OOQT-E<l-E<lO!-pQ[O,5<qOOQT1G1d1G1dO'4gQ[O7+'}O'4lQ]O7+'}O$'RQ[O'#IiO'4tQ[O,5@fOOQS1G1T1G1TO'5PQ[O,5;jO'5jQ[O,5;mO'6_Q[O,5;nO'6mQ[O,5;jO'8pQ[O,5;oOOQT7+(Q7+(QO#EyQ[O,5;pOOQS7+(S7+(SO'8xQ[O'#ITO'9TQ[O,5?{O'9TQ[O,5?{O'9]Q[O,5?{O'9hQ[O,59zO'9rQ[O,59zOOQS,5=^,5=^O':iQ[O'#ESO';jQ[O'#ESO'<QQ[O,59zO'<[Q[O'#EtO'<vQ[O'#EuOOQS'#Jr'#JrO'=bQ[O'#JrONbQ]O'#EvOOQS,59z,59zO'>PQ[O,59zO%;tQ]O,59zO'>UQ[O,5@oOOQS-E<S-E<SOOQS1G/d1G/dO'>]Q[O'#J`O'>gQ[O'#J`OOQS,5=a,5=aO'>tQ[O,5=aO!2{Q[O,5=aO!1pQ[O,5=aO!2UQ[O,5=aOOQS,5=d,5=dOOQS7+$u7+$uO$1dQ[O7+$uO$1iQ[O7+$uOOQS7+(k7+(kO$1dQ[O7+(kO$1iQ[O7+(kONbQ]O,5=kO'>yQ[O'#IsO'?UQ[O,5@tOOQS1G3U1G3UO'?^Q[O,5@sOOQS,5@s,5@sOOQS7+(l7+(lO'BrQ[O7+(lOOQS7+(r7+(rO$1dQ[O7+(rO$1iQ[O7+(rOOQS7+(t7+(tO'G[Q]O1G6dO'HXQ[O7+)VO'H^Q[O,5>YO'HeQ[O7+)aPOOO7+$R7+$RP'IUQ[O'#KdP'I^Q[O,5@}P'Ic{&jO7+$RO'IhQ[O<<GuOOQS1G.w1G.wO'JXQ[O,5?bOOQS,5?b,5?bOOQS-E<t-E<tOOQS<<Lw<<LwO'JcQ[O<<LwO'LfQ[O<<L{O'MVQ[O<<KvO'MhQ[O,5?SOOQS,5?S,5?SOOQS-E<f-E<fOOQS1G1P1G1PO'MrQ[O,5;eO'MyQ[O1G1OOOQS1G1O1G1OOOQT,5@Q,5@QO'NTQ#yO,5@QO'N[Q7aO,5@QO'NcQ#yO,5@QOOQT-E<V-E<VOOQS1G/j1G/jO'NjQ#yO'#DzOOQS1G4a1G4aOOQT<<Jf<<JfO( SQ[O<<IgOOQS'#Ec'#EcO(!kQ[O1G0gO(!uQ[O1G0gO(#YQ[O1G0cOOQS1G0c1G0cO(#aQ[O'#JuO(#iQ[O1G0eOOQS<<Is<<IsO($PQ[O1G0`O($WQ[O'#EfO($hQ[O1G0`O($oQ[O'#ISOOQS,5;^,5;^ONbQ]O1G0uO(&PQ[O1G0uOOQS,5;],5;]OOQS,5?O,5?OOOQS-E<b-E<bO(&aQ[O7+$nO(&{Q[O'#K]O('YQ[O'#K[OOQS,5?`,5?`OOQS-E<r-E<rOOQS<<MO<<MOOOQS1G2k1G2kOOQS,5?],5?]OOQS-E<o-E<oO&DmQ]O,5<POOQT<= a<= aOOQT<= d<= dOOQS7+&T7+&TOOQS7+&U7+&UO('hQ[O7+&UO('oQ]O7+&UOOQT<<Jb<<JbO%;tQ]O1G1oO('vQ[O1G1oOOQT7+'Y7+'YOOQT<<Jr<<JrO!'qQ]O<<JrOOQT<<Jy<<JyO((RQ[O<<KOO((YQ]O<<KOO%;tQ]O<<K`O((aQ[O<<KOO!'qQ]O<<KOO((hQ[O<<KOOOQT<<KY<<KYO((mQ[O1G2UO'0pQ[O1G2UO&!zQ[O1G2UO()OQ[O1G2WO()VQ]O1G2WOOQS1G2W1G2WO()aQ]O1G2WO()hQ[O,5?XOOQS-E<k-E<kOOQS1G2X1G2XOOQT1G2]1G2]OOQT<<Ki<<KiO()vQ]O<<KiO(*RQ[O<<KiOOQS,5?T,5?TOOQS-E<g-E<gO'5jQ[O1G1XOOQS1G1X1G1XOOQS1G1Y1G1YO(*WQ[O'#FOOOQS1G1Z1G1ZO(*lQ[O,5>oO&.uQ[O,5>oOOQS-E<R-E<RO(*wQ[O1G5gO(*wQ[O1G5gO(+PQ[O1G/fOOQS1G/f1G/fO(+ZQ[O1G/fO%;tQ]O1G/fO(+`Q[O1G/fO(+jQ[O,5:nO':iQ[O,5:nO(,QQ[O,5:nO':iQ[O,5:nO(-^Q[O,5:rO(-tQ]O,5;_O'<vQ[O'#IfO(.OQ[O1G/fO(.aQ]O1G/fOOQS1G2v1G2vO(.hQ[O,5;`O(.sQ[O,5;aO(/[Q[O,5;bO(/cQ[O1G/fOOQS1G2x1G2xOOQS1G2{1G2{O(1TQ[O1G2{O(1bQ[O1G2{O(1iQ[O1G2{OOQS<<Ha<<HaO$1dQ[O<<HaOOQS<<LV<<LVO$1dQ[O<<LVO(1pQ[O1G3VOOQS,5?_,5?_OOQS-E<q-E<qOOQS<<LW<<LWOOQS<<L^<<L^O$1dQ[O<<L^OOQS<<Lq<<LqO(1zQ[O1G3tP(3}Q[O'#IwP(4VQ[O,5AOPO{O1G6i1G6iPOOO<<Gm<<GmOOQSANBcANBcOOQT1G5l1G5lO(4_Q#yO,5:fOOQS,5:f,5:fO(4}Q[O7+&ROOQS7+%}7+%}O!*yQ[O'#I`O(5zQ[O,5@aOOQS7+&P7+&PO(6SQ[O7+&aOOQS,5=r,5=rO(6dQ[O1G1kOOQS<<Ip<<IpO(6nQ[O7+'ZOOQTAN@^AN@^O(6{Q]OAN@jO(7SQ[OAN@jO!'qQ]OAN@jO(7ZQ[OAN@jO(7`Q[OAN@zO(7gQ[OAN@zOOQTAN@jAN@jO(7lQ[O7+'pO'0pQ[O7+'pOOQS7+'r7+'rO(7}Q[O7+'rO(8UQ]O7+'rO(8]Q[OANATOOQS7+&s7+&sO(8bQ[O,5;jOOQS1G4Z1G4ZO(8pQ[O1G4ZO(8{Q[O7++RO(9TQ[O7+%QOOQS7+%Q7+%QO(9fQ[O7+%QO(.aQ]O7+%QOOQS7+(b7+(bO(9kQ[O7+%QO(9rQ[O7+%QO%;tQ]O7+%QO(9|Q[O1G0YO(+jQ[O1G0YO':iQ[O1G0YOOQS'#Ie'#IeO(;YQ[O1G0^O(;pQ[O1G0yO(;wQ]O1G0yOOQS1G0y1G0yO(<RQ]O1G0yO(<YQ[O,5?QOOQS-E<d-E<dOOQS1G0z1G0zOOQS7+(g7+(gOOQSAN={AN={OOQSANAqANAqOOQSANAxANAxOOQS7+)`7+)`POQS,5?c,5?cPOQS-E<u-E<uOOQS1G0Q1G0QOOQS,5>z,5>zOOQS-E<^-E<^O(<qQ[OG26UO!'qQ]OG26UO(<xQ[OG26UOOQTG26UG26UO!'qQ]OG26fO(<}Q[O<<K[OOQS<<K^<<K^OOQTG26oG26oOOQS7+)u7+)uOOQS<<Hl<<HlO(=`Q[O<<HlO%;tQ]O<<HlO(=eQ[O<<HlO(=lQ[O<<HlO(.aQ]O<<HlOOQS<<K|<<K|O(=}Q[O7+%tO(+jQ[O7+%tOOQS-E<c-E<cOOQS7+&e7+&eO(>fQ[O7+&eO(>mQ]O7+&eO!'qQ]OLD+pOOQTLD+pLD+pOOQTLD,QLD,QOOQSAN>WAN>WO(>tQ[OAN>WO(>{Q[OAN>WO%;tQ]OAN>WO(?QQ[O<<I`OOQS<<JP<<JPOOQT!$( [!$( [OOQSG23rG23rO(?iQ[OG23rO(?pQ[OG23rOOQSLD)^LD)^O(?uQ[O'#CfO'qQ[O'#CfO!1pQ[O'#DTO!1pQ[O'#DTO!2UQ[O'#GyO!2UQ[O'#GyO(ArQ[O'#GzO(BTQ[O'#GzO(BfQ[O'#GzO!2{Q[O'#HQO'5jQ[O'#HRO&JQQ[O'#HRO(BwQ[O'#HRO(ClQ[O'#HRO(DaQ[O'#HkO(FOQ]O'#HoO!,QQ]O,5=vO!,QQ]O,5=vO!,QQ]O,5=vO!,QQ]O,5=vO!,QQ]O,5=vO!,QQ]O,5=vO!,QQ]O,5=vO!,QQ]O,5=vO!,QQ]O,5=vO(FVQ]O,5=}O(HpQ[O'#CxO(KQQ[O'#CxO(KyQ[O'#CxO(LZQ[O'#CxO(NbQ[O'#CxO(NoQ[O'#CxO)!bQ[O'#CxO)$XQ[O'#CxO(DaQ[O,5>VO)$dQ]O,5>ZO)$kQtO,59bO)$yQtO,59bO)%XQtO,59bO!,QQ]O,59UO)%gQ[O'#CfO)'kQ[O'#CfO)'uQ[O'#CfO)*WQ[O'#CfO),}Q[O'#CfO)-_Q[O'#CfO).[Q[O'#CfO)1bQ[O'#CfO)1oQ[O'#CfO)1yQ[O,5=tO,qQtO'#CvO)2TQtO'#CvO)2fQtO'#CvO)2wQtO'#CvO)3YQ[O'#CuO)3eQ[O,5:uO)3{Q[O,5:uO)3{Q[O,5:uO)4fQtO'#CvO)4qQtO'#CvO)4|QtO'#CvO)5XQtO'#CvO)3{Q[O'#EZO)5dQ[O'#EZODYQ[O'#EiO)6kQ[O'#EiO#2pQ[O'#JwO!,QQ]O'#HYO)7]QtO'#CvO)7kQtO'#CvO)7yQ[O'#CuO)8OQ[O'#CuO)9nQ[O'#JUO)9uQ[O,5=}O):tQ[O'#EbO)<PQ[O'#EfO)>|Q[O,59oO)@tQ[O,59oO)AUQ[O,59oO)A]Q[O,59oO$1qQ[O,59oO$1qQ[O,59oO)DVQ[O,5=eO)E}Q[O,5=eO)F_Q[O,5=eO)FfQ[O,5=eO$4^Q[O,5=eO$4^Q[O,5=eO)GoQ[O,5=fO$7[Q[O,5=fO$7[Q[O,5=fO$7[Q[O,5=fO)HxQ[O,5=lO)KcQ[O,5=lO)KsQ[O,5=lO$9qQ[O,5=lO)KzQ[O,5>PO(BwQ[O,5>VO)L_Q[O,5>ZO)LlQ[O'#CnO)NbQ[O1G3bO* yQ[O1G3bO*#nQ[O1G3bO*#uQ[O1G3bO*%dQ[O1G3bO*%kQ[O1G3bO*'SQ[O1G3bO*'aQ[O1G3bO*'nQ[O1G3bO*)PQ[O1G3bO(BwQ[O1G3qO*)dQ[O1G3uO*)qQ[O1G.pO**UQtO,59bO**aQtO,59bO**lQtO,59bO**wQtO,59bO*+SQtO,59bO*+_QtO,59bO*+jQtO,59bO)3eQ[O1G0aO*+uQ[O1G0aO)3{Q[O1G0aO)5dQ[O1G0aO*,]Q[O'#EaO*,sQ[O1G0bO*-}Q]O1G3jO*.UQ[O,5:|O*/OQ[O,5:|O*/{Q[O,5;QO*2YQ[O'#J_O*4ZQ[O1G/ZO*6RQ[O1G/ZO*6cQ[O1G/ZO*6jQ[O1G/ZO*9dQ[O1G3PO*;[Q[O1G3PO*;lQ[O1G3PO*;sQ[O1G3PO*<|Q[O1G3QO*?lQ[O1G3WO*BVQ[O1G3WO*BgQ[O1G3WO*BnQ]O1G3uO!,QQ]O7+$ZO*D_Q[O'#CxO*DmQtO,59bO*BnQ]O7+)aO)3eQ[O7+%{O*+uQ[O7+%{O*EvQ[O7+%|O*FWQ[O,5:{O!4hQ[O,5:{O*FeQ[O'#EbO*FuQ[O7+)UO*GSQ[O1G0hO*HPQ]O1G6dO*HjQ[O7+)aO*HwQ[O<<GuO*IUQ[O<<L{O*IcQ[O1G0gO*ItQ[O1G0gO*JdQ[O'#EfO*KTQ[O,5:rO*K_Q[O,5;aO*KjQ[O7+&RO*K{Q[O1G0YO*LWQ[O1G0^O*LbQ[O7+%tO*LmQ[O<<I`O!1YQ[O'#JpO'9rQ[O'#JpO*LxQ[O'#EZO)8TQ[O'#JUO!,QQ]O'#H`O!,QQ]O'#HcO!1pQ[O'#DTO!2UQ[O'#GyO!2{Q[O'#HQO*L}Q]O'#HeO*MXQ[O'#CvO*M^Q[O'#EjO*McQ[O'#EjO*MhQ[O'#CuO*MmQ[O'#CuO*MrQ[O'#CvO*MwQ[O'#CvO*M|Q[O'#CuO*NXQ[O'#CuO*NdQ[O'#CuO*+uQ[O,5:uO)5dQ[O,5:uO)5dQ[O,5:uO+ pQ[O,5:vO+!QQ[O'#J_O+!nQ[O'#J_O+!xQ[O,5>OO+!}Q[O,5;TO#5TQ]O'#FpO+#XQ[O'#J_O$1qQ[O,59oO$4^Q[O,5=eO$9qQ[O,5=lO+#lQ]O,5>ZO+#sQ[O1G.oO+#zQtO'#CvO+$VQ[O'#CqO+$[Q]O1G3uO+$cQ[O1G0aO+$mQ[O1G0bO+$tQ[O,5@xO+$yQ[O7+%{O'<[Q[O'#EuO+%TQ[O<<IgO+%_Q[O,5:nO+%uQ[O,5:nO+&`Q[O,5:nO+%uQ[O,5:nO+%_Q[O1G0YO+%uQ[O1G0YO+%_Q[O7+%tO!1pQ[O'#DTO!1pQ[O'#DTO!1pQ[O'#DTO!1pQ[O'#DTO!2UQ[O'#GyO!2UQ[O'#GyO!2UQ[O'#GyO!2UQ[O'#GyO+&kQ[O'#GzO!2{Q[O'#HQO!2{Q[O'#HQO!2{Q[O'#HQO+&|Q[O'#HRO!4hQ[O'#HRO+'qQ[O'#HRO+(fQ[O,5:uO+(|Q[O,5:uO+(|Q[O,5:uO+(|Q[O'#EZO& |Q[O'#EiO$1qQ[O,59oO$1qQ[O,59oO$1qQ[O,59oO$1qQ[O,59oO$4^Q[O,5=eO$4^Q[O,5=eO$4^Q[O,5=eO$4^Q[O,5=eO$7[Q[O,5=fO$9qQ[O,5=lO$9qQ[O,5=lO$9qQ[O,5=lO+(fQ[O1G0aO+(|Q[O1G0aO+)gQ[O'#EaO!*yQ[O'#EaO+)}Q[O'#EaO+*_Q[O1G0bO+(fQ[O7+%{O++cQ[O7+%|O+&|Q[O,5:{O'5jQ[O,5:{O+'qQ[O,5:{O++jQ[O'#EZO!,QQ]O,59TO++oQ[O,5:uO++yQ[O'#EcO+,aQ[O'#EfO#5TQ]O'#FpO+,nQ[O,5:|O+-_Q[O,5:}O+-_Q[O,5:}O+.fQ[O,5;QO+.wQ[O1G0hO+/YQ[O1G0iO+%uQ[O'#ESO+/pQ[O'#ESO+/uQ[O,5:{O+0kQ[O1G0gO+0uQ[O1G0gO+1YQ[O7+&RO+1aQ[O'#EZO+1fQ[O,5:vO+1mQ[O1G0bO+1tQ[O,5:uO+1{Q[O,5;TO+2SQ[O'#EbO+2sQ[O1G0aO+2zQ[O,5:|O+3]Q[O7+%{O+3dQ[O<<Ig",
      stateData: "+4[~O'rOSROSSOSQPQUPQ&jPQ&lPQ&mPQ&nPQ&oPQ&pPQ&qPQ&rPQ~O)XOS~O[eO`![OckOkTOq!]Or!]Os!]Ot!]Ou!]Ov!]Ox!xOz!^O!R!OO!YjO![!VO!]!UO!k!ZO!ovO!p!_O!q!`O!r!`O!s!`O!u!aO!x!bO#S!qO#`kO#p!tO#s!|O#t!{O#y!cO#}!wO$S!nO$T!oO$Z!dO$`!eO$b!fO$c!gO$g!hO$i!iO$k!jO$m!kO$o!lO$q!mO$x!pO$}!rO%Q!sO%V!uO%[#QO%`!vO%k!yO%o!zO%q!PO%w!}O%x!RO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'vRO(WZO(ZbO(]gO(^fO(_pO(`YO)R!WO)S!XO~OQ#WOU#RO&j#SO&l#TO&m#UO&n#UO&o#VO&p#VO&q#TO&r#TO~OW#YO't#YO'u#[O~O[YX[hXchXkfXoYXohXqhXrhXshXthXuhXvhXzhX!PYX!RhX!YYX!YhX![YX!]YX!_YX!aYX!bYX!dYX!eYX!fYX!hYX!iYX!jYX!phX!qhX!rhX!shX!uhX!xhX#`hX'vhX'yYX'z$VX'{YX'|YX(UYX(ZYX(ZhX([YX(]YX(]hX(^YX(^hX(_YX(lYX~O(_hX!XYX~P'qO[#qO!P#_O!Y#bO![#oO!]#fO!_#gO!a#iO!b#jO!d#lO!e#mO!f#mO!h#mO!i#nO'y#]O'{#aO'|#aO(U#pO(Z#cO([#dO(]#dO(^#eO(_#`O~Oc#uO#`#uO&`#wO&d#xO'}#rO~O%_#vO~P,qOk#yO~O!R#zO[(RXc(RXq(RXr(RXs(RXt(RXu(RXv(RXz(RX!Y(RX!p(RX!q(RX!r(RX!s(RX!u(RX!x(RX#`(RX'v(RX(Z(RX(](RX(^(RX(_(RX~Ok#yO~P-`Ok#yO!j#|O(l#|O~O'n#}O'o$PO~OW$QO(a$QO~O!V$RO(U(XP(c(XP~O`!ROk$VOq!]Or!]Os!]Ot!]Ou!]Ov!]Ox!xOz!^O!p!`O!q!`O!r!`O!s!`O!u!aO#s!|O#t!{O#}$^O%k!yO%o!zO%q!PO%w!}O%x!RO'v$UO(WZO~O['dX`'OXc'dXk'OXk'dXq'OXq'dXr'OXr'dXs'OXs'dXt'OXt'dXu'OXu'dXv'OXv'dXx'OXz'OX!Y'dX!o'dX!p'OX!p'dX!q'OX!q'dX!r'OX!r'dX!s'OX!s'dX!u'OX!u'dX!x'dX#`'dX#s'OX#t'OX%V'dX%`'dX%k'OX%o'OX%q'OX%w'OX%x'OX'v'OX'v'dX(Z'dX(]'dX(^'dX~O`!ROk$VOq!]Or!]Os!]Ot!]Ou!]Ov!]Ox!xOz!^O!p!`O!q!`O!r!`O!s!`O!u!aO#s!|O#t!{O%k!yO%o!zO%q!PO%w!}O%x!RO'v$UO~Oq!]Or!]Os!]Ot!]Ou!]Ov!]Oz!^O!p!`O!q!`O!r!`O!s!`O!u!aO[(dXc(dXk(dX!Y(dX!x(dX#`(dX'v(dX(Z(dX(](dX(^(dX~O(_$bO~P6XO[eOckOq!]Or!]Os!]Ot!]Ou!]Ov!]O!YjO![!VO!]!UO!k!ZO!x!bO#`kO%[#QO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO(ZbO(]gO(^fO(`YO)R!WO)S!XO~O`$nOk$eO!y$oO'v$cO~P7vO(Z$pO~O[$sO!Y$rO~O`![Ok8_Ox7]O#s7eO#t7dO%k7_O%o7aO%q!PO%w!}O%x!RO'v8TO~P7vO[eOckO!YjO![!VO!]!UO!k!ZO!x!bO#`kO%[#QO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO(ZbO(]gO(^fO(`YO)R!WO)S!XO~O`$nOk$eO'v$cO~P;[O[%OOckOk$|O!Y%QO!x!bO#`kO'v$cO(Z$}O(]gO(^gO~Oo%TO['xX[(hX!P'xX!Y'xX!Y(hX!['xX!]'xX!_'xX!a'xX!b'xX!d'xX!e'xX!f'xX!h'xX!i'xX'y'xX'{'xX'|'xX(U'xX(Z'xX(['xX(]'xX(^'xX(_'xX{'xX{(hX!X'xX~O!j#|O(l#|O~P=wO!j'xX(l'xX~P=wO[%YO`$nOk$eO!Y%]O!Z%`O![!VO!]!UO!k!ZO%[#QO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v$cO(Z%ZO(^%[O(`YO(l%^O)R!WO)S!XO~O!R!OO'z%aO(l%dO[(hX!Y(hX~O['xX!P'xX!Y'xX!['xX!]'xX!_'xX!a'xX!b'xX!d'xX!e'xX!f'xX!h'xX!i'xX'y'xX'{'xX'|'xX(U'xX(Z'xX(['xX(]'xX(^'xX(_'xX!j'xX(l'xX{'xX!X'xX~O[(hX!Y(hX{(hX~PBXO[%OOckOk8gO!Y%QO!x!bO#`kO'v8UO(Z8kO(]8mO(^8mO~O'z%hO~O'mXO'sQO!Z'xX'z'xXP'xX!g'xX~PBXO[%OOckOq!]Or!]Os!]Ot!]Ou!]Ov!]O!Y%QO!p!`O!q!`O!r!`O!s!`O!u!aO!x!bO#`kO%V!uO%`!vO(Z$}O(]gO(^gO~Ok%kO!o%pO'v$cO~PEgO[%OOckOk%kO!Y%QO!x!bO#`kO%`!vO'v$cO(Z$}O(]gO(^gO~O!R!OO(_%tO(l%uO~O!X%xO~P!QO`%zO%q!PO[%pXc%pXk%pXq%pXr%pXs%pXt%pXu%pXv%pXz%pX!Y%pX!p%pX!q%pX!r%pX!s%pX!u%pX!x%pX#`%pX'v%pX(Z%pX(]%pX(^%pX(_%pX{%pX!P%pX!R%pX![%pX!]%pX!_%pX!a%pX!b%pX!d%pX!e%pX!f%pX!h%pX!i%pX'y%pX'{%pX'|%pX(U%pX([%pX!j%pX(l%pXP%pX!g%pX!Z%pX'z%pX!X%pX|%pX#Q%pX#S%pX~Oo%TOk(RX{(RXP(RX!P(RX!g(RX(U(RX(l(RX~P-`O!j#|O(l#|O['xX!P'xX!Y'xX!['xX!]'xX!_'xX!a'xX!b'xX!d'xX!e'xX!f'xX!h'xX!i'xX'y'xX'{'xX'|'xX(U'xX(Z'xX(['xX(]'xX(^'xX(_'xX{'xX!Z'xX!X'xXP'xX!g'xX~O[%YO`$nOk$eO!Y%]O![!VO!]!UO!k!ZO%[#QO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v$cO(Z%ZO(^%ZO(`YO)R!WO)S!XO~O[&TO!Y&SO(Z&PO(]&UO(^&UO~O!R!OO~P! {O[(RXc(RXk(RXq(RXr(RXs(RXt(RXu(RXv(RXz(RX!Y(RX!p(RX!q(RX!r(RX!s(RX!u(RX!x(RX#`(RX'v(RX(Z(RX(](RX(^(RX(_(RX{(RXP(RX!P(RX!g(RX(U(RX(l(RX~O[#qO~P!!eO[&YO~O'sQO[(eX`(eXc(eXk(eXq(eXr(eXs(eXt(eXu(eXv(eXx(eXz(eX!Y(eX!o(eX!p(eX!q(eX!r(eX!s(eX!u(eX!x(eX#`(eX#s(eX#t(eX%V(eX%`(eX%k(eX%o(eX%q(eX%w(eX%x(eX'v(eX(Z(eX(](eX(^(eX~O[&[O~O[#qO~Ok8hO$}&`O'v8VO~O[&aOv&cO~O[&aO~O[%YO`$nOk$eO!R!OO!Y%]O![!VO!]!UO!k!ZO#S!qO$S!nO$T!oO$Z!dO$`!eO$b!fO$c!gO$g!hO$i!iO$k!jO$m!kO$o!lO$x!pO%[#QO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v7ZO(Z%ZO(^%ZO(_pO(`YO)R!WO)S!XO~O[&gO~O!R#zO(_&iO~PNbO(_&kO~O(_&lO~O'v&mO~O`!ROk$VOq!]Or!]Os!]Ot!]Ou!]Ov!]Ox7]O#s7eO#t7dO%k7_O%o7aO%q!PO%w!}O%x!RO'v$UO~O[;iO`$nOk8`O!Y%]O![;QO!];PO!k!ZO%[7jO&T;PO&U;PO&Y;UO&^!ZO&a7iO&h!ZO&i!ZO'mXO'sQO'v$cO(Z8pO(^8pO(`YO)R!WO)S!XO~O'z&rO~O!R!OO~O(_&uO~PNbO!R&wO'v&vO~O[&zO~O[%OO`!ROckOq!]Or!]Os!]Ot!]Ou!]Ov!]Ox!xOz!^O!Y%QO!p!`O!q!`O!r!`O!s!`O!u!aO!x!bO#`kO#s!|O#t!{O%k!yO%o!zO%q!PO%w!}O%x!RO(Z$}O(]gO(^gO~Ok8jOo'OO'v8WO~P!.ZO['ROc%UXk%UX!Y%UX!x%UX#`%UX%`%UX'v%UX(Z%UX(]%UX(^%UX~Oz!^O!p!`O!q!`O!r!`O!s!`O!u!aO~P!*yOk$VOz!^O|']O!R'XO'v$UO'z'WO~Ok$VOz!^O|'bO!R'XO'v$UO'z'WO~Ok$VOx'gO!R'dO#t'gO'v$UO~Ok$VOz!^O|'kO!R'XO'v$UO'z'WO~O`!ROk$VOx!xO#s!|O#t!{O%k!yO%o!zO%q!PO%w!}O%x!RO'v$UO~O['nO~O['pO(U'rO~PNeO[#qO`!ROk$VOx<RO#s<_O#t<[O%k<VO%o<YO%q!PO%w!}O%x!RO'v$UO~O[%YO`$nOk$eO!Y'vO![!VO!]!UO!k!ZO%[#QO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v$cO(Z%ZO(^%ZO(`YO)R!WO)S!XO~OX'wO'sQO'v&vO~O&k'wO~O)U'zO~O[#qO'r'|O'l&sX~OW#YO't#YO'u(OO~Oc(XOk(TO'v(SO~O`$nO!k!ZO&^!ZO&h!ZO&i!ZO'mXO'sQO'v$cO(`YO)R!WO)S!XO[&Va!Y&Va![&Va!]&Va!_&Va!a&Va!b&Va!d&Va!e&Va!f&Va!h&Va!i&Va'y&Va'{&Va'|&Va(U&Va(Z&Va([&Va(]&Va(^&Va!j&Va(l&Va~Ok$eO%[#QO&T!UO&U!UO&Y#OO&a#PO!P&Va(_&Va{&Va!Z&Va!X&VaP&Va!g&Va~P!8OO!R#zO{'wP~PNbO[mX[#_XcmXklXomXo#_XqmXrmXsmXtmXumXvmXzmX!P#_X!RmX!YmX!Y#_X![#_X!]#_X!_#_X!a#_X!b#_X!d#_X!e#_X!f#_X!h#_X!i#_X!jlX!pmX!qmX!rmX!smX!umX!xmX#`mX'vmX'y#_X'{#_X'|#_X(U#_X(ZmX(Z#_X([#_X(]mX(]#_X(^mX(^#_X(llX{mX{#_X~O(_mX(_#_X!X#_X~P!;`O[%YO`$nOk$eO![!VO!]!UO!k!ZO%[#QO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v$cO(Z%ZO(^%ZO(`YO)R!WO)S!XO~O!Y(lO~P!>{Oc(oO#`(oO%_(pO'}#rO~O!R#zO!Y(rO'{(sO!X(mP~P!>{O'n#}O'o(zO~O(b({O~Ok(|O[!UX!P!UX(U!UX(c!UX~O[)OO!P)PO(U(XX(c(XX~O(U)TO(c)SO~O[hXchXkfXohXqhXrhXshXthXuhXvhXzhX!YhX!phX!qhX!rhX!shX!uhX!xhX#`hX'vhX(ZhX(]hX(^hX!RhX!PhX(UhX(lhX{hX~O(_hX|hX'zhX![hX!]hX!_hX!ahX!bhX!dhX!ehX!fhX!hhX!ihX'yhX'{hX'|hX([hX!jhX!ZhXPhX!ghX!XhX#QhX#ShX~P!B`O'})UO~Ok)VO~O[(RXc(RXq(RXr(RXs(RXt(RXu(RXv(RXz(RX!Y(RX!p(RX!q(RX!r(RX!s(RX!u(RX!x(RX#`(RX'v(RX(Z(RX(](RX(^(RX(_(RX!P(RX!R(RX![(RX!](RX!_(RX!a(RX!b(RX!d(RX!e(RX!f(RX!h(RX!i(RX'y(RX'{(RX'|(RX(U(RX([(RX!j(RX(l(RX{(RX!Z(RX'z(RXP(RX!g(RX!X(RX|(RX#Q(RX#S(RX~Ok)VO~P!FSO(_)WO~P6XOo%TOk(RX~P!FSOq!]Or!]Os!]Ot!]Ou!]Ov!]Oz!^O!p!`O!q!`O!r!`O!s!`O!u!aO[(dac(dak(da!Y(da!x(da#`(da'v(da(Z(da(](da(^(da{(da!P(da(U(da(l(daP(da!g(da!R(da'z(da(_(da~O[YXkfXoYXohX!PYX!RhX!YYX![YX!]YX!_YX!aYX!bYX!dYX!eYX!fYX!hYX!iYX!jYX'yYX'{YX'|YX(UYX(ZYX([YX(]YX(^YX(_YX(lYX{YX~O!ZYX'zYX!XYXPYX!gYX~P!K}O[#qO!Y#bO'{#aO'|#aO!]%|a!_%|a!a%|a!b%|a!d%|a!e%|a!f%|a!h%|a!i%|a!j%|a'y%|a(U%|a(Z%|a([%|a(]%|a(^%|a(l%|a~O![#oO!P%|a(_%|a{%|a!Z%|a!X%|aP%|a!g%|a~P!N_Oc#uO#`#uO&`#wO&d#xO'}7uO~Ok)]O~Ok)]O!R#zO~Ok)]O!j#|O(l#|O~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O~P=VOq!]Or!]Os!]Ot!]Ou!]Ov!]O!y$oO~P=VO[$sO!Y$rO(_!}a!P!}a(l!}a~O{!}aP!}a!g!}a~P#$[Oo%TO!R#zO~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O|)fO!u!aO#Q)hO#S)iO[#Oa!R#Oa!Y#Oa(l#Oa(_#Oa!P#Oa~O'|)eO'z#Oa~P#%SO[%YO`$nOk$eOq!]Or!]Os!]Ot!]Ou!]Ov!]O!Y%]O![!VO!]!UO!k!ZO%[#QO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v$cO(^%ZO(`YO)R!WO)S!XO~O!Z)lO(Z)mO~P#&bO(U)pO(WZO{(gP~P4nO[#qO!P#_O!Y#bO![#oO!]#fO!_#gO!a#iO!b#jO!d#lO!e#mO!f#mO!h#mO!i#nO'y#]O'{#aO'|#aO(U#pO(Z#cO([#dO(]#dO(^#eO~O{)rO~P#(sO!R#zO[(RXq(RXr(RXs(RXt(RXu(RXv(RX{(RX!Y(RX(Z(RX(](RX(^(RX~Ok9pO~P#*_O[$sO{)tO!Y$rO~O{)rO~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O{pXPpX!PpX!gpX(UpX(_pX~P! {O{)wO~O[$sO!Y$rO(_#]a!P#]a(l#]a~O{#]aP#]a!g#]a~P#,pOc#uO#`#uO'}7uO~Oo%TO[(hX!Y(hX!P(hX!R(hX(_(hX(l(hX{(hX'z(hXP(hX!g(hX~Oo%TO~O[%YO`![Ok8aOq!]Or!]Os!]Ot!]Ou!]Ov!]Ox7]O!Y%]O![!VO!]!UO!k!ZO#s7eO#t7dO%[#QO%k7_O%o7aO%q!PO%w!}O%x!RO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v8XO(Z%ZO(^%ZO(`YO)R!WO)S!XO~OP(OP!g(OP~P#.eO[#qO!P*OO!Y#bO![#oO!]#fO!_#gO!a#iO!b#jO!d#lO!e#mO!f#mO!h#mO!i#nO'y#]O'{#aO'|#aO(U#pO(Z#cO([#dO(]#dO(^#eO~O!Z)TX~P#1UOo%TO!P*QO!j#|O(l#|O['xX!Y'xX!Z'xX!Z(kX!['xX!]'xX!_'xX!a'xX!b'xX!d'xX!e'xX!f'xX!h'xX!i'xX'y'xX'{'xX'|'xX(U'xX(Z'xX(['xX(]'xX(^'xX~O!P'xX~P#2pOo%TO!Z'xX'z'xXP'xX!g'xX~PBXO!Z*SO~O[%YO`![Ok8_Oq!]Or!]Os!]Ot!]Ou!]Ov!]Ox7]O!Y%]O![!VO!]!UO!k!ZO#s7eO#t7dO%[#QO%k7_O%o7aO%q!PO%w!}O%x!RO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v8TO(Z%ZO(^%ZO(`YO)R!WO)S!XO~O!P*UO!Z*TO~PNbO!P*UO!Z*TO~Ok;pO'v9bO~O!R!OO(l%dO~O$T*ZO%[*[O~O[*]O!P*aO!R*^O!Y$rO(l*_O(_(qX~O!P*aO(_(qX~O(_*dO~O'mXO'sQO[%Ra!P%Ra!Y%Ra![%Ra!]%Ra!_%Ra!a%Ra!b%Ra!d%Ra!e%Ra!f%Ra!h%Ra!i%Ra'y%Ra'{%Ra'|%Ra(U%Ra(Z%Ra([%Ra(]%Ra(^%Ra(_%Ra!j%Ra(l%Ra{%Ra!Z%Ra'z%Ra!X%RaP%Ra!g%Ra~Oc#uO#`#uO%_#vO'}7uO~Ok8PO~O!R!OO(_*kO(l*lO~O[%YO`$nOk$eO!Y%]O![!VO!]!UO!k!ZO$T*ZO%[*nO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v$cO(Z%ZO(^%ZO(`YO)R!WO)S!XO~O!X*oO~P!QO[#qO!Y#bO'{#aO'|#aO!P&Sa![&Sa!]&Sa!_&Sa!a&Sa!b&Sa!d&Sa!e&Sa!f&Sa!h&Sa!i&Sa'y&Sa(U&Sa(Z&Sa([&Sa(]&Sa(^&Sa(_&Sa!j&Sa(l&Sa{&Sa!Z&Sa'z&Sa!X&SaP&Sa!g&Sa~Oo%TO~PLeO[#qO!Y#bO'{#aO'|#aO!]&Va!_&Va!a&Va!b&Va!d&Va!e&Va!f&Va!h&Va!i&Va'y&Va(U&Va(Z&Va([&Va(]&Va(^&Va!j&Va(l&Va~O![#oO!P&Va(_&Va{&Va!Z&Va!X&VaP&Va!g&Va~P#?yOq!]Or!]Os!]Ot!]Ou!]Ov!]O{#UXP#UX!P#UX!g#UX(U#UX(_#UX~P! {Oq!]Or!]Os!]Ot!]Ou!]Ov!]O#Q)hO#S)iO[#VX!Y#VX(_#VX~O'|9{O!R#VX(l#VX~P#BtO[$sO!Y*wO~O!Z*zO(Z*{O~P#&bO[&TO!Y&SO(U)pO(WZO(Z&PO(]&UO(^&UO{(gP~P4nO{#YXP#YX!P#YX!g#YX(U#YX(_#YX~P! {O!R!OO[(jX!Y(jX~O!R&wO#}!wO(WZO~P4nOo%TO(l+TO~O(_+UO~Ok8hO'v8VO~O[%YO`![Ok8bOq!]Or!]Os!]Ot!]Ou!]Ov!]Ox!xOz!^O!Y%]O![!VO!]!UO!k!ZO!p!`O!q!`O!r!`O!s!`O!u!aO#s!|O#t!{O%[#QO%k!yO%o!zO%q!PO%w!}O%x!RO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO(WZO(Z%ZO(^%ZO(_pO(`YO)R!WO)S!XO~O'v8ZO~P#F]O$c+aO~O[%YO`![Ok8bOq!]Or!]Os!]Ot!]Ou!]Ov!]Ox!xOz!^O!Y%]O![!VO!]!UO!k!ZO!p!`O!q!`O!r!`O!s!`O!u!aO#s!|O#t!{O%[#QO%k!yO%o!zO%q!PO%w!}O%x!RO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v8TO(WZO(Z%ZO(^%ZO(_+eO(`YO)R!WO)S!XO~O(_+gO~P#(sO(_+gO~O(_+hO~O[+nO!x!bO'v+jO(Z+kO~O[#qO!Y#bO![7tO!]7kO!_7lO!a7nO!b7oO!d7qO!e7rO!f7rO!h7rO!i7sO'y=OO'{#aO'|#aO(U#pO(Z#cO([#dO(]#dO(^#eO~O'z+qO~P#MTO!R!OO$Z!dO$`!eO$b!fO$c!gO$g+uO$i!iO$k!jO$m!kO$o!lO$q!mO'v7[Oc$Ra!o$Ra!x$Ra#S$Ra#`$Ra#p$Ra#y$Ra#}$Ra$S$Ra$T$Ra$x$Ra$}$Ra%Q$Ra%V$Ra%`$Ra'l$Ra(]$Ra!X$Ra$^$Ra~P#F]O$z+xO~O[#qO!Y#bO![#oO!]#fO!_#gO!a#iO!b#jO!d#lO!e#mO!f#mO!h#mO!i#nO'y#]O'{#aO'|#aO(U#pO(Z#cO([#dO(]#dO(^#eO~O(_+yO~P$!vO!X+zO~P!QO!R&wO~O[(RXc(RXq(RXr(RXs(RXt(RXu(RXv(RXz(RX!Y(RX!p(RX!q(RX!r(RX!s(RX!u(RX!x(RX#`(RX'v(RX(Z(RX(](RX(^(RX~Ok9sO~P$$kO{(dX!P(dX(U(dX(l(dXP(dX!g(dX!R(dX'z(dX(_(dX~P6XO[$sO!Y$rO(_,OO~O`!ROk$VOq!]Or!]Os!]Ot!]Ou!]Ov!]Ox!xOz!^O!p!`O!q!`O!r!`O!s!`O!u!aO#p,UO#s,SO#t,TO%k!yO%o!zO%q!PO%w!}O%x!RO'v$UO(WZO~OP(nP!g(nP~P$'ROk8qO!o,XO#p,^O#y,]O#}!wO%V!uO%`!vO'v8]O(WZO~P!.ZO[&TO!Y&SO(Z=fO(]=RO(^=RO~O[(SXq(SXr(SXs(SXt(SXu(SXv(SXz(SX|(SX!R(SX!Y(SX!p(SX!q(SX!r(SX!s(SX!u(SX!x(SX'v(SX'z(SX(Z(SX(](SX(^(SX(_(SX{(SX!P(SX(U(SX![(SX!](SX!_(SX!a(SX!b(SX!d(SX!e(SX!f(SX!h(SX!i(SX'y(SX'{(SX'|(SX([(SX!j(SX(l(SXP(SX!g(SX!Z(SX!X(SX#Q(SX#S(SX~Oo%TOc(SXk(SX#`(SX~P$*OOk$VO!O,eO'v$UO~O`!ROk8rOx;ROz!^O!O,sO!X,pO!o,qO#p,^O#s7hO#t;TO#y!cO$q!mO%Q!sO%j,rO%k;SO%o7cO%q!PO%w!}O%x!RO'v8[O(WZO~PEgO|,vO!R'XO'z'WO[wacwakwaqwarwaswatwauwavwazwa!Ywa!pwa!qwa!rwa!swa!uwa!xwa#`wa'vwa(Zwa(]wa(^wa~O(_wa{wa!Pwa(Uwa(lwaPwa!gwa~P$/YO!R'XO~O!R'XO'z'WO~Ok$VO|,vO!R'XO'v$UO'z'WO~O|,zO!R'XO'z'WO[%mac%mak%maq%mar%mas%mat%mau%mav%maz%ma!Y%ma!p%ma!q%ma!r%ma!s%ma!u%ma!x%ma#`%ma'v%ma(Z%ma(]%ma(^%ma~O(_%ma{%ma!P%ma(U%ma(l%maP%ma!g%ma~P$2SOk$VO|,zO!R'XO'v$UO'z'WO~O'v&vO!X(|P~O'z-PO[%naq%nar%nas%nat%nau%nav%na!Y%na(Z%na(]%na(^%na(_%na{%na!P%na(U%na(l%naP%na!g%na|%na#Q%na#S%na'|%na~O!R'dOc%nak%naz%na!p%na!q%na!r%na!s%na!u%na!x%na#`%na'v%na~P$4wOk$VO!R'dO'v$UO~O|-VO'z'WO[%tak%taq%tar%tas%tat%tau%tav%taz%ta!Y%ta!p%ta!q%ta!r%ta!s%ta!u%ta!x%ta#`%ta'v%ta(Z%ta(]%ta(^%ta(_%ta{%ta!P%ta(U%ta(l%taP%ta!g%ta~O!R'XOc%ta~P$7gOk$VO|-VO!R'XO'v$UO'z'WO~O[#qO!Y#bO'{#aO'|#aO(Z#cO!a&Xa!b&Xa!d&Xa!e&Xa!f&Xa!h&Xa'y&Xa(U&Xa([&Xa(]&Xa(^&Xa!j&Xa(l&Xa~O![#oO!]#fO!_#gO!i#nO!P&Xa(_&Xa{&Xa!Z&Xa!X&XaP&Xa!g&Xa~P$:SO[-ZO~O[#qO!R#zO!Y-[O!P&_a![&_a!]&_a!_&_a!a&_a!b&_a!d&_a!e&_a!f&_a!h&_a!i&_a'y&_a'{&_a'|&_a(U&_a(Z&_a([&_a(]&_a(^&_a(_&_a!j&_a(l&_a{&_a!Z&_a'z&_a!X&_aP&_a!g&_a~O!P&ca(_&ca!j&ca(l&ca{&ca!Z&ca!X&caP&ca!g&ca~P$!vO[%YO`$nOk$eO!Y%]O![!VO!]!UO!k!ZO%[#QO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v$cO(Z%ZO(^%[O(`YO(l%^O)R!WO)S!XO~O!Z-_O~P$>|O)U-`O~O[#qO)U-`O~O[-bO&k-aO~O[#qO'l&sa~O'z-eO~P#MTO(_$Xi{$Xi~P#(sO[bXkfXobXohX!PbX!YbX![bX!]bX!_bX!abX!bbX!dbX!ebX!fbX!hbX!ibX!jbX'ybX'{bX'|bX(UbX(ZbX([bX(]bX(^bX(_bX(lbX{bX!ZbX'zbX!RbX!XbXPbX!gbX~Oc-gO#`-gO'}-fO~Ok-hO~Oo%TO[ai!Pai!Yai![ai!]ai!_ai!aai!bai!dai!eai!fai!hai!iai!jai'yai'{ai'|ai(Uai(Zai([ai(]ai(^ai(_ai(lai{ai!Zai'zai!XaiPai!gai~O!Z-jO~P$!vO[#qO!Y#bO![#oO!_#gO'{#aO'|#aO(Z#cO!P&Oi!a&Oi!b&Oi!d&Oi!e&Oi!f&Oi!h&Oi!i&Oi'y&Oi(U&Oi([&Oi(]&Oi(^&Oi(_&Oi!j&Oi(l&Oi{&Oi!Z&Oi!X&OiP&Oi!g&Oi~O!]&Oi~P$FiO[#qO!Y#bO![#oO'{#aO'|#aO!P&Oi!a&Oi!b&Oi!d&Oi!e&Oi!f&Oi!h&Oi!i&Oi'y&Oi(U&Oi([&Oi(]&Oi(^&Oi(_&Oi!j&Oi(l&Oi{&Oi!Z&Oi!X&OiP&Oi!g&Oi~O!]&Oi!_&Oi(Z&Oi~P$HjO[#qO!Y#bO![#oO!]#fO!_#gO!b#jO!d#lO!e#mO!f#mO!h#mO!i#nO'{#aO'|#aO(Z#cO(^#eO!P&Oi'y&Oi(U&Oi([&Oi(]&Oi(_&Oi!j&Oi(l&Oi{&Oi!Z&Oi!X&OiP&Oi!g&Oi~O!a#iO~P$JkO!a&Oi~P$JkO[#qO!Y#bO![#oO!]#fO!_#gO!d#lO!e#mO!f#mO!h#mO!i#nO'{#aO'|#aO(Z#cO!P&Oi!a&Oi!b&Oi'y&Oi(U&Oi([&Oi(]&Oi(_&Oi!j&Oi(l&Oi{&Oi!Z&Oi!X&OiP&Oi!g&Oi~O(^#eO~P$LsO(^&Oi~P$LsO[#qO!Y#bO![#oO!]#fO!_#gO!i#nO'{#aO'|#aO(Z#cO!P&Oi!a&Oi!b&Oi!d&Oi'y&Oi(U&Oi([&Oi(]&Oi(^&Oi(_&Oi!j&Oi(l&Oi{&Oi!Z&Oi!X&OiP&Oi!g&Oi~O!e#mO!f#mO!h#mO~P$N{O!e&Oi!f&Oi!h&Oi~P$N{O!]#fO~P$FiO[#qO!Y#bO![#oO!]#fO!_#gO!a#iO!b#jO!d#lO!e#mO!f#mO!h#mO!i#nO'{#aO'|#aO(Z#cO([#dO(]#dO(^#eO~O!P&Oi'y&Oi(U&Oi(_&Oi!j&Oi(l&Oi{&Oi!Z&Oi!X&OiP&Oi!g&Oi~P%#bO!P-kO{'wX~P$!vO!P-kO{'wX~O{-mO~O[#qO!R#zO!P&_i![&_i!]&_i!_&_i!a&_i!b&_i!d&_i!e&_i!f&_i!h&_i!i&_i'y&_i'{&_i'|&_i(U&_i(Z&_i([&_i(]&_i(^&_i(_&_i!j&_i(l&_i{&_i!Z&_i'z&_i!X&_iP&_i!g&_i~O!Y-[O~P%%zO!P&ci(_&ci!j&ci(l&ci{&ci!Z&ci!X&ciP&ci!g&ci~P$!vO!Z-rO~P$>|O!P-tO!X(mX~P$!vO'v-wO~O!Y-yO'{(sO(l-{O~O!P-tO!X(mX~O!X-|O~O(U#pO!P^i'y^i(_^i!j^i(l^i{^i!Z^i!X^iP^i!g^i~P%#bO!V-}O~Ok(|O[!Ua!P!Ua(U!Ua(c!Ua~O[.UOk.VO!P.VO!R.SO!V.VO!Y.TO![.VO!].VO!_.VO!a.VO!b.VO!d.VO!e.VO!f.VO!h.VO!i.VO!j.VO!k.VO'mXO'sQO'z.VO'{.VO'|.VO(U.VO(Z.PO([.QO(].QO(^.RO(_.VO(`YO~O{.YO~P%+PO!V$RO~O!P)PO(U(Xa(c(Xa~O(c.^O~O[mXcmXklXomXqmXrmXsmXtmXumXvmXzmX!YmX!pmX!qmX!rmX!smX!umX!xmX#`mX'vmX(ZmX(]mX(^mX!RmX!PmX(UmX{mXPmX!gmX~O(_mX|mX'zmX![mX!]mX!_mX!amX!bmX!dmX!emX!fmX!hmX!imX'ymX'{mX'|mX([mX!jmX(lmX!ZmX!XmX#QmX#SmX~P%-mO(_.`O~Oq!]Or!]Os!]Ot!]Ou!]Ov!]Oz!^O!p!`O!q!`O!r!`O!s!`O!u!aO~O[(dic(dik(di!Y(di!x(di#`(di'v(di(Z(di(](di(^(di{(di!P(di(U(di(l(diP(di!g(di!R(di'z(di(_(di~P%1[Oc(oO#`(oO'}7uO~O[$sO!Y$rO(_!}i!P!}i(l!}i~O{!}iP!}i!g!}i~P%3nOq!]Or!]Os!]Ot!]Ou!]Ov!]O|)fO#Q)hO#S)iO'|)eO[#Oi!R#Oi!Y#Oi'z#Oi(l#Oi(_#Oi!P#Oi~O!u!aO~P%4^O`!ROk$VOq!]Or!]Os!]Ot!]Ou!]Ov!]O#t<]O%q!PO%w!}O%x!RO'v$UO~Ox7^O#s7fO%k7`O%o7bO~P%5lO[.iOq#PXr#PXs#PXt#PXu#PXv#PX|#PX!R#PX!Y#PX#Q#PX#S#PX'z#PX'|#PX(l#PX{#PX!P#PX(_#PXP#PX!g#PX(U#PX~O[.jO~O!Z.kO~P$!vO!Z.kO(Z.mO~P#&bO!Z.kO~PNbO[.rOckOk8gO!Y.qO!x!bO#`kO'v$cO(U.vO(Z.oO~O(].sO(^.sO(l.uO{!|X!P!|XP!|X!g!|X~P%8yO!P.xO{(gX~O{.zO~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O{paPpa!Ppa!gpa(Upa(_pa~P! {O[$sO!Y*wO{paPpa!Ppa!gpa(Upa(_pa~O!R#zO~PNbOk)VO~P$*OO!P*QO!Z(kX~OP(}X!P(}X!g(}X~P$!vO(U/POP(PX!P(PX!g(PX~O!P/QOP(OX!g(OX~OP/SO!g/SO~O!P*OO!Z)Ta~O!P*QO!Z(ka~O[#qO!R#zO~O!P/ZO!R(xX(l(xX~O(_/]O~O(_/^O~O[%YO`![Ok8aOx!xO!R#zO!Y%]O![!VO!]!UO!k!ZO#s!|O#t!{O%[#QO%k!yO%o!zO%q!PO%w!}O%x!RO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v8YO(U)pO(WZO(Z%ZO(^%ZO(`YO)R!WO)S!XO{'wP{(gP~P%1[O[eO`![OckOkTOq!]Or!]Os!]Ot!]Ou!]Ov!]Ox!xOz!^O![!VO!]!UO!k!ZO!ovO!p!_O!q!`O!r!`O!s!`O!u!aO!x!bO#S!qO#`kO#p!tO#s!|O#t!{O#y!cO#}!wO$S!nO$T!oO$Z!dO$`!eO$b!fO$c!gO$g!hO$i!iO$k!jO$m!kO$o!lO$q!mO$x!pO$}!rO%Q!sO%V!uO%[#QO%`!vO%k!yO%o!zO%q!PO%w!}O%x!RO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'vRO(WZO(ZbO(]gO(^fO(_pO(`YO)R!WO)S!XO~O!R*^O!X%xO!Y/`O'{(sO~P%@oO!P*aO(_(qa~O(_/jO~P$!vO(_/^O~P!5]Oq!]Or!]Os!]Ot!]Ou!]Ov!]O{#Ua!P#UaP#Ua!g#Ua(U#Ua(_#Ua~P! {O[$sO!Y*wO{#Ua!P#UaP#Ua!g#Ua(_#Ua~O(U#Ua~P%F}Oq!]Or!]Os!]Ot!]Ou!]Ov!]O#Q)hO#S)iO'|9{O[#Va!R#Va!Y#Va(_#Va(l#Va~O!Z/rO(Z/sO~P#&bO!Z/rO~P$!vO!Z/rO~PNbO[$sO{/tO!Y*wO~O[$sO!Y*wO{#Ya!P#YaP#Ya!g#Ya(_#Ya~O(U#Ya~P%I`O{/uO~O{/vO~O(_/xO~O{/yO~P+ZO{/yO(_#`O~O{/yO~O$^0OO[$Yi`$Yic$Yik$Yiq$Yir$Yis$Yit$Yiu$Yiv$Yix$Yiz$Yi!R$Yi!Y$Yi![$Yi!]$Yi!k$Yi!o$Yi!p$Yi!q$Yi!r$Yi!s$Yi!u$Yi!x$Yi#S$Yi#`$Yi#p$Yi#s$Yi#t$Yi#y$Yi#}$Yi$S$Yi$T$Yi$Z$Yi$`$Yi$b$Yi$c$Yi$g$Yi$i$Yi$k$Yi$m$Yi$o$Yi$q$Yi$x$Yi$}$Yi%Q$Yi%V$Yi%[$Yi%`$Yi%k$Yi%o$Yi%q$Yi%w$Yi%x$Yi&T$Yi&U$Yi&Y$Yi&^$Yi&a$Yi&h$Yi&i$Yi'l$Yi'm$Yi's$Yi'v$Yi(W$Yi(Z$Yi(]$Yi(^$Yi(_$Yi(`$Yi)R$Yi)S$Yi!X$Yi~O[0QO~O(_0SO~P#(sO[%OOckOk8gO!Y%QO!x!bO#`kO'v8UO(Z<dO(]<eO(^<eO~O(_0VO~PNbO(_0SO~O[+nOq!]Or!]Os!]Ot!]Ou!]Ov!]O!x!bO!y$oO'v+jO(Z+kO~O(Z0[O~O[$sO!P0_O!Y0^O(_(uX~O(_0bO~O!R!OO$Z!dO$`!eO$b!fO$c!gO$g+uO$i!iO$k!jO$m!kO$o!lO$q!mO'v7[Oc$Ri!o$Ri!x$Ri#S$Ri#`$Ri#p$Ri#y$Ri#}$Ri$S$Ri$T$Ri$x$Ri$}$Ri%Q$Ri%V$Ri%`$Ri'l$Ri(]$Ri!X$Ri$^$Ri~P#F]O[0fO~O$z+xO[$wi`$wic$wik$wiq$wir$wis$wit$wiu$wiv$wix$wiz$wi!R$wi!Y$wi![$wi!]$wi!k$wi!o$wi!p$wi!q$wi!r$wi!s$wi!u$wi!x$wi#S$wi#`$wi#p$wi#s$wi#t$wi#y$wi#}$wi$S$wi$T$wi$Z$wi$`$wi$b$wi$c$wi$g$wi$i$wi$k$wi$m$wi$o$wi$q$wi$x$wi$}$wi%Q$wi%V$wi%[$wi%`$wi%k$wi%o$wi%q$wi%w$wi%x$wi&T$wi&U$wi&Y$wi&^$wi&a$wi&h$wi&i$wi'l$wi'm$wi's$wi'v$wi(W$wi(Z$wi(]$wi(^$wi(_$wi(`$wi)R$wi)S$wi!X$wi$^$wi~O[$sO~O!X0iO~P!QO{0jO!P0kO~P$!vO!P0lOP(nX!g(nX~OP0nO!g0nO~O(U0qO(l0pOP#rX!P#rX!g#rX~P!3aO(U0qO(l0pOP#rX!P#rX!g#rX~P!2{Oo'OO~O[$sO!Y$rO(_0tO~Ok8RO(_(RX~P$$kO'v+jO~O{0vO~P$!vO[$sO!Y*wO!R%^i(_%^i(l%^i~O[$sO!R!OO!Y$rO~O!P0wO(U0yO!R(TX~Ok$VO'v$UO~O`!ROk$VOx;RO!o0|O#s7hO#t;TO%k;SO%o7cO%q!PO%w!}O%x!RO'v$UO(WZO~P%1[O(_0}O~PAvO[1ROk(TO!R#zO!x!bO#`1TO'v(SO'z1VO(Z1OO(]1SO(^1SO~O(_1WO(l1YO~P&0RO`!ROk8rOx;ROz!^O!O,sO!X1]O!o,qO#p,^O#s7hO#t;TO#y!cO$q!mO%Q!sO%j,rO%k;SO%o7cO%q!PO%w!}O%x!RO'v8[O(WZO~PEgO[%OO`!ROckOk8rOx;RO!Y%QO!x!bO#`kO#s7hO#t;TO%`!vO%k;SO%o7cO%q!PO%w!}O%x!RO'v8[O(Z$}O(]gO(^gO~P%1[O`!ROk$VOx1cO#s!|O#t1bO#}!wO%k1dO%o!zO%q!PO%w!}O%x!RO'v$UO(WZO~P%1[O'z1eO~O|1hO[wikwiqwirwiswitwiuwivwizwi!Ywi!pwi!qwi!rwi!swi!uwi!xwi#`wi'vwi(Zwi(]wi(^wi(_wi(Uwi(lwi~O!R'XO'z'WOcwi{wi!PwiPwi!gwi~P&4xO|1kO[%mik%miq%mir%mis%mit%miu%miv%miz%mi!Y%mi!p%mi!q%mi!r%mi!s%mi!u%mi!x%mi#`%mi'v%mi(Z%mi(]%mi(^%mi(_%mi(U%mi(l%mi~O!R'XO'z'WOc%mi{%mi!P%miP%mi!g%mi~P&7SO(l1lO!P%sX!X%sX~O!P1mO!X(|X~O!X1oO~O`1qOk$VO%q!PO'v$UO~O!R'dO[%nic%nik%niq%nir%nis%nit%niu%niv%niz%ni!Y%ni!p%ni!q%ni!r%ni!s%ni!u%ni!x%ni#`%ni'v%ni(Z%ni(]%ni(^%ni(_%ni{%ni!P%ni(U%ni(l%niP%ni!g%ni|%ni#Q%ni#S%ni'|%ni~O'z-PO~P&:UO|1vO'z'WO[%tik%tiq%tir%tis%tit%tiu%tiv%tiz%ti!Y%ti!p%ti!q%ti!r%ti!s%ti!u%ti!x%ti#`%ti'v%ti(Z%ti(]%ti(^%ti(_%ti{%ti!P%ti(U%ti(l%tiP%ti!g%ti~O!R'XOc%ti~P&<iO{1wO~P$!vO{1xO~O!Y&_i~P%%zO`$nOk$eO![!VO!]!UO!k!ZO%[#QO&T!UO&U!UO&Y#OO&^!ZO&a#PO&h!ZO&i!ZO'mXO'sQO'v$cO(`YO)R!WO)S!XO[&fa!R&fa!Y&fa(Z&fa(]&fa(^&fa~O)U1|O~O'v&vO(U1}O{)WP~O&k2PO~OklXomXo%{X~Oc2RO#`2RO'}-fO~O!P-kO{'wa~O[$sO!Y*wO!R%^q(_%^q(l%^q~O[#qO!R#zO!P&_q![&_q!]&_q!_&_q!a&_q!b&_q!d&_q!e&_q!f&_q!h&_q!i&_q'y&_q'{&_q'|&_q(U&_q(Z&_q([&_q(]&_q(^&_q(_&_q!j&_q(l&_q{&_q!Z&_q'z&_q!X&_qP&_q!g&_q~O!Y&_q~P&B_O!Y-[O~P&B_O!R#zO!Y(rO'{(sO!P'[X!X'[X~P!>{O!P-tO!X(ma~O!Z2^O~P#1UO!X2bO~P%+PO!Z2bO~P%+PO{2bO~P%+PO{2gO~P%+PO[2hO!P&}a(U&}a(c&}a~O!P)PO(U(Xi(c(Xi~O[$sO!Y$rO(_!}q!P!}q(l!}q~O{!}qP!}q!g!}q~P&FhOq!]Or!]Os!]Ot!]Ou!]Ov!]O|)fO#Q)hO#S)iO[#Oq!R#Oq!Y#Oq(l#Oq(_#Oq!P#Oq~O'|)eO'z#Oq~P&GWO[&TO!Y&SO{#Ta!P#Ta(_#TaP#Ta!g#Ta~O(Z8wO(]8xO(^8xOq#Tar#Tas#Tat#Tau#Tav#Ta|#Ta!R#Ta#Q#Ta#S#Ta'z#Ta'|#Ta(l#Ta~P&HcO`!ROk$VOx7^O#s7fO#t<]O%k7`O%o7bO%q!PO%w!}O%x!RO'v$UO~O{2pO~PNbO{(iP~P!*yO!Z2sO~P$!vO!Z2sO~PNbO[.rOckOk$|O!Y.qO!x!bO#`kO'v$cO(Z:jO(]2uO(^2uO~O{!|a!P!|aP!|a!g!|a~P&KcO[.rOckOq!]Or!]Os!]Ot!]Ou!]Ov!]O!Y.qO!x!bO!y$oO#`kO'v$cO{#UX!P#UXP#UX!g#UX~Ok8gO(Z.oO(]:sO(^:sO~P&LeO[$sO{!|a!P!|aP!|a!g!|a~O!Y*wO~P&M|O[.rO`!ROckOk8iOx!xO!Y.qO!x!bO#`kO#s!|O#t!{O%k!yO%o!zO%q!PO%w!}O%x!RO'v8WO(U)pO(WZO(Z:jO(]2uO(^2uO{(gP~P%1[O(]:sO(^:sO{#YX!P#YXP#YX!g#YX~P%8yO!Y$rO(l2yO~P&M|O'v&vO{#eX!P#eXP#eX!g#eX~O(U2|O(WZO~P4nO!P.xO{(ga~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O{piPpi!Ppi!gpi(Upi(_pi~P! {O[$sO!Y*wO{piPpi!Ppi!gpi(Upi(_pi~O!P&Wq(_&Wq!j&Wq(l&Wq{&Wq!Z&Wq!X&WqP&Wq!g&Wq~P$!vO!P/QOP(Oa!g(Oa~O!P'ia!Z'ia~P$!vO!Z3TO~O(U3UO!P%Xa!R%Xa(l%Xa~O!P/ZO!R(xa(l(xa~O!P3XO(_#`O!X(mX~P$!vO!P#{i(_#{i~P$!vO[*]O!R#zO!Y$rO(l*_O!P'^a(_'^a~O(_3ZO~P$!vO[$sO!Y*wO{#Ui!P#UiP#Ui!g#Ui(_#Ui~O(U#Ui~P''sOq!]Or!]Os!]Ot!]Ou!]Ov!]O#Q)hO#S)iO[#Vi!Y#Vi(_#Vi~O'|9{O!R#Vi(l#Vi~P'(cO!Z3]O~P$!vO!Z3]O(Z3_O~P#&bO!Z3]O~PNbO(_3`O~O[*]O!P*aO!R#zO!Y$rO(_(qX~O(l3aO~P'*SO{3cO~P#(sO{3cO~O$^3eO[$Yq`$Yqc$Yqk$Yqq$Yqr$Yqs$Yqt$Yqu$Yqv$Yqx$Yqz$Yq!R$Yq!Y$Yq![$Yq!]$Yq!k$Yq!o$Yq!p$Yq!q$Yq!r$Yq!s$Yq!u$Yq!x$Yq#S$Yq#`$Yq#p$Yq#s$Yq#t$Yq#y$Yq#}$Yq$S$Yq$T$Yq$Z$Yq$`$Yq$b$Yq$c$Yq$g$Yq$i$Yq$k$Yq$m$Yq$o$Yq$q$Yq$x$Yq$}$Yq%Q$Yq%V$Yq%[$Yq%`$Yq%k$Yq%o$Yq%q$Yq%w$Yq%x$Yq&T$Yq&U$Yq&Y$Yq&^$Yq&a$Yq&h$Yq&i$Yq'l$Yq'm$Yq's$Yq'v$Yq(W$Yq(Z$Yq(]$Yq(^$Yq(_$Yq(`$Yq)R$Yq)S$Yq!X$Yq~O(_3fO~O(_3hO~PNbO'z3iO(l*_O~P'*SO(_3hO~P$!vO{3kO~PNbO(_3mO~O[+nOq!]Or!]Os!]Ot!]Ou!]Ov!]O!x!bO'v+jO(Z+kO~O[$sO!Y0^O!P$ra(_$ra{$ra~O!Z3sO(Z3tO~P#&bO!P0_O(_(ua~O[$sO{3wO!Y0^O~O!R!OO$Z!dO$`!eO$b!fO$c!gO$g+uO$i!iO$k!jO$m!kO$o!lO$q!mO'v7[Oc$Rq!o$Rq!x$Rq#S$Rq#`$Rq#p$Rq#y$Rq#}$Rq$S$Rq$T$Rq$x$Rq$}$Rq%Q$Rq%V$Rq%`$Rq'l$Rq(]$Rq!X$Rq$^$Rq~P#F]O(_3yO~O'mXO'sQO~O!P0lOP(na!g(na~Oo%TO(l4OOP#rak(RX!P#ra!g#ra(U(RX~P$$kO`!ROk$VOx7]O#s7eO#t7dO%k7_O%o7aO%q!PO%w!}O%x!RO'v$UO~O'v+jOP#va!P#va!g#va~Oo%TO(l4OOP#ra[(SXc(SXk(SXq(SXr(SXs(SXt(SXu(SXv(SXz(SX|(SX!P#ra!R(SX!Y(SX!g#ra!p(SX!q(SX!r(SX!s(SX!u(SX!x(SX#`(SX'v(SX'z(SX(U(SX(Z(SX(](SX(^(SX~O#s4RO#t4RO~Ok$VO!O4UO'v$UO~O!P0wO!R(Ta~O!P0wO(U4XO!R(Ta~O(_4ZO(l4]O~P&0RO`!ROk$VOx;RO#s7hO#t;TO%k;SO%o7cO%q!PO%w!}O%x!RO'v$UO~P%1[O[1ROk(TOq!]Or!]Os!]Ot!]Ou!]Ov!]O!x!bO!y$oO#`1TO'v(SO(Z1OO(]1SO(^1SO~O(Z4bO~O[$sO!P4eO!R*^O!Y4dO'z1VO~O(_4ZO(l4gO~P';oO[1ROk(TO!x!bO#`1TO'v(SO(Z=ZO(];wO(^;wO~O[1ROk(TO!x!bO#`1TO'v(SO(Z1OO(]1SO(^1SO~Oo%TO[(fX!P(fX!R(fX!Y(fX'z(fX(_(fX(l(fX{(fX~O(_4ZO~O(_4mO~PAvOk)VO(_(SX~P$$kOo%TOk(RX(_(SX~P$$kO(_4nO~O'v&vO!P'gX!X'gX~O!P1mO!X(|a~Oo%TO[({ac({ak({aq({ar({as({at({au({av({az({a!R({a!Y({a!p({a!q({a!r({a!s({a!u({a!x({a#`({a'v({a(Z({a(]({a(^({a(_({a{({a!P({a![({a!]({a!_({a!a({a!b({a!d({a!e({a!f({a!h({a!i({a'y({a'{({a'|({a(U({a([({a!j({a(l({aP({a!g({a!Z({a'z({a!X({a|({a#Q({a#S({a~O!R'dO[%nqc%nqk%nqq%nqr%nqs%nqt%nqu%nqv%nqz%nq!Y%nq!p%nq!q%nq!r%nq!s%nq!u%nq!x%nq#`%nq'v%nq(Z%nq(]%nq(^%nq(_%nq{%nq!P%nq(U%nq(l%nqP%nq!g%nq|%nq#Q%nq#S%nq'|%nq~O`$nO!R#zO!k!ZO&^!ZO&h!ZO&i!ZO'mXO'sQO'v$cO(`YO)R!WO)S!XO[)Qi!Y)Qi![)Qi!])Qi!_)Qi!a)Qi!b)Qi!d)Qi!e)Qi!f)Qi!h)Qi!i)Qi'y)Qi'{)Qi'|)Qi(U)Qi(Z)Qi([)Qi(])Qi(^)Qi!j)Qi(l)Qi~Ok$eO%[#QO&T!UO&U!UO&Y#OO&a#PO!P)Qi(_)Qi{)Qi!Z)Qi!X)QiP)Qi!g)Qi~P'EOO{4|O~O!Z4}O~P$!vO!P&cq(_&cq!j&cq(l&cq{&cq!Z&cq!X&cqP&cq!g&cq~P$!vO!P5OO{)WX~O{5QO~O)U5RO~O!P]y(_]y!j]y(l]y{]y!Z]y!X]yP]y!g]y~P$!vO{'ja!P'ja~P$!vO[#qO!R#zO!P&_y!Y&_y![&_y!]&_y!_&_y!a&_y!b&_y!d&_y!e&_y!f&_y!h&_y!i&_y'y&_y'{&_y'|&_y(U&_y(Z&_y([&_y(]&_y(^&_y(_&_y!j&_y(l&_y{&_y!Z&_y'z&_y!X&_yP&_y!g&_y~O!P&cy(_&cy!j&cy(l&cy{&cy!Z&cy!X&cyP&cy!g&cy~P$!vO[$sO!Y*wO!R%^y(_%^y(l%^y~O!P'[a!X'[a~P$!vO!Z2^O~P$!vO!P#li!X#li~P$!vO!X5TO~P%+PO!Z5TO~P%+PO{5TO~P%+PO{5VO~P%+PO[$sO!Y$rO(_!}y!P!}y(l!}y~O{!}yP!}y!g!}y~P'NqOq#Tir#Tis#Tit#Tiu#Tiv#Ti|#Ti!R#Ti#Q#Ti#S#Ti'z#Ti'|#Ti(l#Ti{#Ti!P#Ti(_#TiP#Ti!g#Ti~O[$sO!Y*wO~P( aO[&TO!Y&SO(Z8wO(]8xO(^8xO~P( aO{5XO~P$!vO!P5YO{(iX~O{5[O~O[$sO{!|i!P!|iP!|i!g!|i~O!Y*wO~P(#nO{#YX!P#YXP#YX!g#YX~P&KcO!Y$rO~P(#nO['TXc&vXk&vXq'TXr'TXs'TXt'TXu'TXv'TX{'TX!P'TX!Y'TX!x&vX#`&vX'v&vX(Z'TX(]'TX(^'TXP'TX!g'TX~O{#ci!P#ciP#ci!g#ci~P$!vO[$sO!Y*wO{pqPpq!Ppq!gpq(Upq(_pq~OP)PX!P)PX!g)PX~P$!vO(U5^OP)OX!P)OX!g)OX~O!Z5`O~P$!vO!Z5`O~PNbO{$]i!P#{a(_#{a~O(_5cO~P$!vO{5eO~PNbO{5eO~P#(sO{5eO~O[$sO!Y0^O!P$ri(_$ri{$ri~O!Z5lO~P$!vO!Z5lO(Z5nO~P#&bO!Z5lO~PNbO[$sO!Y0^O!P'aa(_'aa~O{5oO'mXO'sQO~O{5oO~O'v+jO(U0qO(l0pOP#rX!P#rX!g#rX~O(U5rO!P&wa!R&wa~O!P0wO!R(Ti~O(_5vO(l5xO~P';oO(_5vO~O(_5vO(l5|O~P&0ROq!]Or!]Os!]Ot!]Ou!]Ov!]O~P'<vO[$sO!Y4dO!P!va!R!va'z!va(_!va(l!va~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O|6QO#Q)hO#S)iO[!za!Y!za~O'|)eO!P!za!R!za'z!za(_!za(l!za~P(,iO!Z6UO(Z6VO~P#&bO!P4eO!R#zO'z1VO(_5vO(l5|O~O!R#zO~P#;}O[$sO{6YO!Y4dO~O[$sO!Y4dO!P#ia!R#ia'z#ia(_#ia(l#ia~O(_#ja~P$!vO(_5vO~P$!vO|-VO'z'WO[%tak%taq%tar%tas%tat%tau%tav%taz%ta!Y%ta!p%ta!q%ta!r%ta!s%ta!u%ta!x%ta#`%ta'v%ta(Z%ta(]%ta(^%ta~O!R'XO(_6ZOc%ta~P(/jO(_6ZO~P$/YO(_6ZO~P$2SO!P%si!X%si~P$!vO!Y-[O[&bi!P&bi!R&bi![&bi!]&bi!_&bi!a&bi!b&bi!d&bi!e&bi!f&bi!h&bi!i&bi'y&bi'{&bi'|&bi(U&bi(Z&bi([&bi(]&bi(^&bi(_&bi!j&bi(l&bi{&bi!Z&bi'z&bi!X&biP&bi!g&bi~O'v&vO(U6`O~O!P5OO{)Wa~O{6bO~P%+PO[$sO!Y*wO{#Tq!P#Tq(_#TqP#Tq!g#Tq~Oq#Tqr#Tqs#Tqt#Tqu#Tqv#Tq|#Tq!R#Tq#Q#Tq#S#Tq'z#Tq'|#Tq(l#Tq~P(4fO!P5YO{(ia~O{#cq!P#cqP#cq!g#cq~P$!vO!X'[a(_$Xi~P#(sO{$]q!P#{i(_#{i~P$!vO{6fO~PNbO{6fO~P#(sO{6fO~O{6iO~P$!vO{6iO~O[$sO!Y0^O!P$rq(_$rq{$rq~O!Z6kO~P$!vO!Z6kO~PNbO(_6lO~O(l4OOP#ra!P#ra!g#ra~O(U6mO!P&wi!R&wi~O!P0wO!R(Tq~O!P4eO!R#zO'z1VO(_6nO(l6pO~O(_6nO~O(_6nO~P$!vO(_6nO(l6sO~P';oO[$sO!Y4dO!P!vi!R!vi'z!vi(_!vi(l!vi~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O|6QO#Q)hO#S)iO[!zi!Y!zi~O'|)eO!P!zi!R!zi'z!zi(_!zi(l!zi~P(:eO!Z6xO~P$!vO!Z6xO(Z6zO~P#&bO!Z6xO~PNbO[$sO!Y4dO!P'Ya!R'Ya'z'Ya(_'Ya(l'Ya~O{6{O~P#(sO{6{O~O[$sO!Y0^O!P$ry(_$ry{$ry~O(_7OO~O(_7OO~P$!vO!P4eO!R#zO'z1VO(_7OO(l7RO~O[$sO!Y4dO!P!vq!R!vq'z!vq(_!vq(l!vq~O!Z7TO~P$!vO!Z7TO~PNbO(_7VO~P$!vO(_7VO~O[$sO!Y4dO!P!vy!R!vy'z!vy(_!vy(l!vy~O(_7YO~P$!vO(_7YO~O[YXkfXoYXohX!PYX!RhX!YYX![YX!]YX!_YX!aYX!bYX!dYX!eYX!fYX!hYX!iYX!jYX'yYX'z$VX'{YX'|YX(UYX(ZYX([YX(]YX(^YX(_YX(lYX~Ok$VOx9WO!R'dO#t9WO'v$UO~Ok$VOx9XO!R'dO#t9XO'v$UO~Ok$VOx9YO!R'dO#t9YO'v$UO~O`!ROk$VOx<SO#s7gO#t<[O%k<WO%o7bO%q!PO%w!}O%x!RO'v$UO~O`!ROk$VOx;RO#s7hO#t;TO%k;SO%o7cO%q!PO%w!}O%x!RO'v$UO~O[#qO~P(BwO[;iO`$nOk8`O![;QO!];PO!k!ZO%[7jO&T;PO&U;PO&Y;UO&^!ZO&a7iO&h!ZO&i!ZO'mXO'sQO'v$cO(Z8pO(^8pO(`YO)R!WO)S!XO~O!Y;nO~P(DhOk8`O%[7jO&T;PO&U;PO&Y;UO&a7iO'z&Va~P!8OO[#_XklXomXo#_X!P#_X!RmX!Y#_X![#_X!]#_X!_#_X!a#_X!b#_X!d#_X!e#_X!f#_X!h#_X!i#_X!jlX'y#_X'{#_X'|#_X(U#_X(Z#_X([#_X(]#_X(^#_X(llX{#_XP#_X!g#_X~O(_#_X!Z#_X'z#_X!X#_X~P(FpO[mX[#_XcmXklXomXo#_XqmXrmXsmXtmXumXvmXzmX!YmX!Y#_X!pmX!qmX!rmX!smX!umX!xmX#`mX'vmX(ZmX(]mX(^mX{mX{#_X!PmX(UmX~O(_mX(lmX~P(IQO[#_XklXomXo#_X!P#_X!Y#_X{#_XP#_X!g#_X~O!R#_X(_#_X(l#_X'z#_X~P(K[OPmXP#_X!PmX!gmX!g#_X(UmX~P!;`O[mX[#_XklXomXo#_XqmXrmXsmXtmXumXvmXzmX!RmX!Y#_X!pmX!qmX!rmX!smX!umX!xmX#`mX'vmX(ZmX(]mX(^mX~O'zmX(_mX(lmX~P(LqOcmX{#_X!P#_X!YmX![#_X!]#_X!_#_X!a#_X!b#_X!d#_X!e#_X!f#_X!h#_X!i#_X!jlX'y#_X'{#_X'|#_X(U#_X(Z#_X([#_X(]#_X(^#_X(_#_X(llX~P(LqO[mX[#_XcmXklXomXo#_XqmXrmXsmXtmXumXvmXzmX!YmX!Y#_X!pmX!qmX!rmX!smX!umX!xmX#`mX'vmX(ZmX(]mX(^mX(_#_X~OklXomX(_#_X~O!Y;rO~P(DhOc(oO#`(oO%_(pO'}7uO~Oc(oO#`(oO%_(pO'}7yO~Oc(oO#`(oO%_(pO'}7vO~O[hXqhXrhXshXthXuhXvhX{hX!YhX(ZhX(]hX(^hXchXzhX!phX!qhX!rhX!shX!uhX!xhX#`hX'vhX~P!K}O[YXkfXoYXohX!PYX!YYX(_YX(lYX~O!RYX'zYX~P)'POkfXohX(_YX(lhX~O[YX[hXchXkfXoYXohXqhXrhXshXthXuhXvhXzhX!YYX!YhX!phX!qhX!rhX!shX!uhX!xhX#`hX'vhX(ZhX(]hX(^hX{YX{hX!PhX(UhX(lhX~O(_YX~P)(TO[YX[hXkfXoYXohXqhXrhXshXthXuhXvhX!PYX!PhX!RhX!YYX!YhX![YX!]YX!_YX!aYX!bYX!dYX!eYX!fYX!hYX!iYX!jYX'yYX'{YX'|YX(UYX(UhX(ZYX(ZhX([YX(]YX(]hX(^YX(^hX(lYX~OPYXPhX!gYX!ghX~P)*_OchXzhX{YX{hX!phX!qhX!rhX!shX!uhX!xhX#`hX'vhX(lhX~P)*_O[hXchXqhXrhXshXthXuhXvhXzhX!YhX!phX!qhX!rhX!shX!uhX!xhX#`hX'vhX(ZhX(]hX(^hX~P!K}O[YX[hXkfXoYXohXqhXrhXshXthXuhXvhXzhX!YYX!phX!qhX!rhX!shX!uhX!xhX#`hX'vhX(ZhX(]hX(^hX(_hX~O!RhX'zhX(lhX~P)/qOchX!YhX~P)/qO![7tO'z%|a~P!N_Oc#uO#`#uO&`7}O&d8OO'}7uO~Oc#uO#`#uO&`#wO&d#xO'}7xO~Oc#uO#`#uO&`#wO&d#xO'}7zO~Ok)]O!j8SO(l8SO~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O~PDYOq!]Or!]Os!]Ot!]Ou!]Ov!]O!y$oO~PDYOc#uO#`#uO'}7wO~Oc#uO#`#uO'}7|O~Oc#uO#`#uO'}7vO~Oc#uO#`#uO'}7{O~O[%OOckOk8gOq!]Or!]Os!]Ot!]Ou!]Ov!]O!Y%QO!x!bO!y$oO#`kO'v$cO(Z8lO(]8nO(^8nO~O[%OOckOk8gO!Y%QO!x!bO#`kO'v$cO(Z8lO(]8nO(^8nO~Oc#uO#`#uO%_#vO'}7vO~Oc#uO#`#uO%_#vO'}7yO~Ok8RO~Ok8QO~O!j8SO(l8SO['xX!Y'xX!['xX!]'xX!_'xX!a'xX!b'xX!d'xX!e'xX!f'xX!h'xX!i'xX'y'xX'z'xX'{'xX'|'xX(U'xX(Z'xX(['xX(]'xX(^'xX~Oo%TO~P)8TO![7tO'z&Va~P#?yO[&TOq!]Or!]Os!]Ot!]Ou!]Ov!]O!Y&SO(Z8wO(]8xO(^8xO~O|#UX!R#UX#Q#UX#S#UX'z#UX'|#UX(l#UX{#UX!P#UX(_#UXP#UX!g#UX~P):PO[&TO!Y&SO(Z8wO(]8xO(^8xO~Oq#YXr#YXs#YXt#YXu#YXv#YX|#YX!R#YX#Q#YX#S#YX'z#YX'|#YX(l#YX{#YX!P#YX(_#YXP#YX!g#YX~P);nO|,vO[wa!Rwa!Ywa![wa!]wa!_wa!awa!bwa!dwa!ewa!fwa!hwa!iwa'ywa'{wa'|wa(Uwa(Zwa([wa(]wa(^wa(_wa!jwa(lwa~O'z'WO!Pwa{wa!Zwa!XwaPwa!gwa~P)=]O'z'WO[waqwarwaswatwauwavwa|wa!Ywa#Qwa#Swa'|wa(Zwa(]wa(^wa(_wa!Pwa(lwa~O!R'XO{waPwa!gwa~P)?gO!Rwa~P)?gO'zwakwaqwarwaswatwauwavwazwa!pwa!qwa!rwa!swa!uwa!xwa#`wa'vwa~P)=]O|,zO[%ma!R%ma!Y%ma![%ma!]%ma!_%ma!a%ma!b%ma!d%ma!e%ma!f%ma!h%ma!i%ma'y%ma'{%ma'|%ma(U%ma(Z%ma([%ma(]%ma(^%ma(_%ma!j%ma(l%ma~O'z'WO!P%ma{%ma!Z%ma!X%maP%ma!g%ma~P)BfO'z'WO[%maq%mar%mas%mat%mau%mav%ma|%ma!Y%ma#Q%ma#S%ma'|%ma(Z%ma(]%ma(^%ma(_%ma!P%ma(l%ma~O!R'XO{%maP%ma!g%ma~P)DpO!R%ma~P)DpO'z%mak%maq%mar%mas%mat%mau%mav%maz%ma!p%ma!q%ma!r%ma!s%ma!u%ma!x%ma#`%ma'v%ma~P)BfO!R%na![%na!]%na!_%na!a%na!b%na!d%na!e%na!f%na!h%na!i%na'y%na'{%na([%na!j%na!Z%na!X%na~P$4wO!R%ta![%ta!]%ta!_%ta!a%ta!b%ta!d%ta!e%ta!f%ta!h%ta!i%ta'y%ta'{%ta'|%ta([%ta!j%ta!Z%ta!X%ta~P$7gO'z'WO[%taq%tar%tas%tat%tau%tav%ta|%ta!Y%ta#Q%ta#S%ta'|%ta(Z%ta(]%ta(^%ta(_%ta!P%ta(l%ta~O!R'XO{%taP%ta!g%ta~P)JUO!R%ta~P)JUO![7tO!]7kO!_7lO!i7sO'z&Xa~P$:SO'z&ca!j&ca(l&ca~P#MTO[bXkfXohX!RbX~O[#qO!Y#bO![7tO!_7lO'{#aO'|#aO(Z#cO!a&Oi!b&Oi!d&Oi!e&Oi!f&Oi!h&Oi!i&Oi'y&Oi'z&Oi(U&Oi([&Oi(]&Oi(^&Oi!j&Oi(l&Oi~O!]&Oi~P)LzO[#qO!Y#bO![7tO'{#aO'|#aO!a&Oi!b&Oi!d&Oi!e&Oi!f&Oi!h&Oi!i&Oi'y&Oi'z&Oi(U&Oi([&Oi(]&Oi(^&Oi!j&Oi(l&Oi~O!]&Oi!_&Oi(Z&Oi~P)NiO[#qO!Y#bO![7tO!]7kO!_7lO!b7oO!d7qO!e7rO!f7rO!h7rO!i7sO'{#aO'|#aO(Z#cO(^#eO'y&Oi'z&Oi(U&Oi([&Oi(]&Oi!j&Oi(l&Oi~O!a7nO~P*!WO!a&Oi~P*!WO[#qO!Y#bO![7tO!]7kO!_7lO!d7qO!e7rO!f7rO!h7rO!i7sO'{#aO'|#aO(Z#cO!a&Oi!b&Oi'y&Oi'z&Oi(U&Oi([&Oi(]&Oi!j&Oi(l&Oi~O(^#eO~P*#|O(^&Oi~P*#|O[#qO!Y#bO![7tO!]7kO!_7lO!i7sO'{#aO'|#aO(Z#cO!a&Oi!b&Oi!d&Oi'y&Oi'z&Oi(U&Oi([&Oi(]&Oi(^&Oi!j&Oi(l&Oi~O!e7rO!f7rO!h7rO~P*%rO!e&Oi!f&Oi!h&Oi~P*%rO!]7kO~P)LzO[#qO!Y#bO![7tO!]7kO!_7lO!a7nO!b7oO!d7qO!e7rO!f7rO!h7rO!i7sO'{#aO'|#aO(Z#cO([#dO(]#dO(^#eO~O'y&Oi'z&Oi(U&Oi!j&Oi(l&Oi~P*'uO'z&ci!j&ci(l&ci~P#MTO(U#pO'y^i'z^i!j^i(l^i~P*'uOc(oO#`(oO'}#rO~Oc(oO#`(oO'}7wO~Oc(oO#`(oO'}7|O~Oc(oO#`(oO'}7{O~Oc(oO#`(oO'}7vO~Oc(oO#`(oO'}7xO~Oc(oO#`(oO'}7zO~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O~P)6kOq!]Or!]Os!]Ot!]Ou!]Ov!]O~P!4hOq!]Or!]Os!]Ot!]Ou!]Ov!]O|)fO#Q)hO#S)iO'|<tO[#Oi!Y#Oi{#Oi(_#Oi!P#Oi(l#OiP#Oi!g#Oi~O!R#zO~P!,QO|#Ua!R#Ua#Q#Ua#S#Ua'z#Ua'|#Ua(l#Ua{#Ua!P#Ua(_#UaP#Ua!g#Ua~P):POq#Uar#Uas#Uat#Uau#Uav#Ua|#Ua!R#Ua#Q#Ua#S#Ua'z#Ua'|#Ua(l#Ua~P%F}Oq#Yar#Yas#Yat#Yau#Yav#Ya|#Ya!R#Ya#Q#Ya#S#Ya'z#Ya'|#Ya(l#Ya~P%I`O[(RXq(RXr(RXs(RXt(RXu(RXv(RXz(RX!p(RX!q(RX!r(RX!s(RX!u(RX!x(RX#`(RX'v(RX(Z(RX(](RX(^(RX(l(RX~Ok8QO!R(RX'z(RX(_(RX~P*0xO|1hO[wi!Rwi!Ywi![wi!]wi!_wi!awi!bwi!dwi!ewi!fwi!hwi!iwi'ywi'{wi'|wi(Uwi(Zwi([wi(]wi(^wi(_wi!jwi(lwi~O'z'WO!Pwi{wi!Zwi!XwiPwi!gwi~P*2jO'z'WO[wiqwirwiswitwiuwivwi|wi!Ywi#Qwi#Swi'|wi(Zwi(]wi(^wi(_wi!Pwi(lwi~O!R'XO{wiPwi!gwi~P*4tO!Rwi~P*4tO!Rwi![wi!]wi!_wi!awi!bwi!dwi!ewi!fwi!hwi!iwi'ywi'zwi'{wi'|wi([wi!jwi~P&4xO|1kO[%mi!R%mi!Y%mi![%mi!]%mi!_%mi!a%mi!b%mi!d%mi!e%mi!f%mi!h%mi!i%mi'y%mi'{%mi'|%mi(U%mi(Z%mi([%mi(]%mi(^%mi(_%mi!j%mi(l%mi~O'z'WO!P%mi{%mi!Z%mi!X%miP%mi!g%mi~P*7sO'z'WO[%miq%mir%mis%mit%miu%miv%mi|%mi!Y%mi#Q%mi#S%mi'|%mi(Z%mi(]%mi(^%mi(_%mi!P%mi(l%mi~O!R'XO{%miP%mi!g%mi~P*9}O!R%mi~P*9}O!R%mi![%mi!]%mi!_%mi!a%mi!b%mi!d%mi!e%mi!f%mi!h%mi!i%mi'y%mi'z%mi'{%mi'|%mi([%mi!j%mi~P&7SO'z-PO[%ni!P%ni!R%ni!Y%ni![%ni!]%ni!_%ni!a%ni!b%ni!d%ni!e%ni!f%ni!h%ni!i%ni'y%ni'{%ni'|%ni(U%ni(Z%ni([%ni(]%ni(^%ni(_%ni!j%ni(l%ni{%ni!Z%ni!X%niP%ni!g%niq%nir%nis%nit%niu%niv%ni|%ni#Q%ni#S%ni~O!R%ti![%ti!]%ti!_%ti!a%ti!b%ti!d%ti!e%ti!f%ti!h%ti!i%ti'y%ti'{%ti'|%ti([%ti!j%ti!Z%ti!X%ti~P&<iO'z'WO[%tiq%tir%tis%tit%tiu%tiv%ti|%ti!Y%ti#Q%ti#S%ti'|%ti(Z%ti(]%ti(^%ti(_%ti!P%ti(l%ti~O!R'XO{%tiP%ti!g%ti~P*@xO!R%ti~P*@xO`$nOk8`O![;QO!];PO!k!ZO%[7jO&T;PO&U;PO&Y;UO&^!ZO&a7iO&h!ZO&i!ZO'mXO'sQO'v$cO(`YO)R!WO)S!XO[&fa!R&fa!Y&fa(Z&fa(]&fa(^&fa~O[%{XklXomX!R%{X~Oc2RO#`2RO'}:bO~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O|)fO#Q)hO#S)iO[#Oq!Y#Oq(_#Oq!P#Oq(l#Oq~O'|<tO{#OqP#Oq!g#Oq~P*DxO!R#Ta(_#Ta(l#Ta~P$)mOk$|O(Z:jO(]2uO(^2uO~P&LeO'z&Wq!j&Wq(l&Wq~P#MTOq#Uir#Uis#Uit#Uiu#Uiv#Ui|#Ui!R#Ui#Q#Ui#S#Ui'z#Ui'|#Ui(l#Ui~P''sOk8`O%[7jO&T;PO&U;PO&Y;UO&a7iO'z)Qi~P'EOO'z&cq!j&cq(l&cq~P#MTO'z]y!j]y(l]y~P#MTO'z&cy!j&cy(l&cy~P#MTO[$sO!Y*wO!R#Ti(_#Ti(l#Ti~O!R#Ti(_#Ti(l#Ti~P$)mOckOk8gO!x!bO#`kO'v$cO~O[.rO!Y.qO(Z.oO(]:sO(^:sO{#YX!P#YXP#YX!g#YX~P*JRO'|<tO{!za~P(,iO[$sO!Y4dO{#ia~O[$sO!Y*wO!R#Tq(_#Tq(l#Tq~O[$sO!Y4dO{!vi~O'|<tO{!zi~P(:eO[$sO!Y4dO{!vq~O[$sO!Y4dO{!vy~O(Z8fO~O[=SO(U'rO~P!,TOk9pO~Ok9qO~Ok9rO~Ok9sO~Ok9tO~Ok9uO~Ok9vO~Ok9pO!j#|O(l#|O~Ok9uO!j#|O(l#|O~Ok9vO!j#|O(l#|O~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O|)fO!u!aO#Q)hO#S)iO[#Oa!Y#Oa(_#Oa!P#Oa(l#Oa~O'|<tO{#OaP#Oa!g#Oa~P*NoOk9uO!R#zOP(RX!P(RX!g(RX(U(RX{(RX(l(RX~P$$kOk9vO!R#zO~P$$kO{9}O~O!R#]a'z#]a~P#,pOk9tO{(RX!P(RX(U(RX(l(RX~P$$kO!Z:`O~P$>|O'z:aO~P#MTOc-gO#`-gO'}:bO~Ok:cO~O!Z:dO~P$>|O!R!}i'z!}i~P%3nO!u!aO~P*,sO{:mO~O!R!}q'z!}q~P&FhO!R!}y'z!}y~P'NqOq!]Or!]Os!]Ot!]Ou!]Ov!]O~P'<[Oq!]Or!]Os!]Ot!]Ou!]Ov!]O!y$oO~P'<[O[$sO!Y4dO{!va~Ok$VOx<nO!R'dO#t<nO'v$UO~O`!ROk$VOx<QO#s<^O#t<ZO%k<UO%o7aO%q!PO%w!}O%x!RO'v$UO~O`!ROk$VOx<TO#s<`O#t<]O%k<XO%o<YO%q!PO%w!}O%x!RO'v$UO~Oq!]Or!]Os!]Ot!]Ou!]Ov!]O~P& |Oq!]Or!]Os!]Ot!]Ou!]Ov!]O!y$oO~P& |Oq!]Or!]Os!]Ot!]Ou!]Ov!]O~P+&|Ox<TO#s<`O%k<XO%o<YO~P%5lOq!]Or!]Os!]Ot!]Ou!]Ov!]O|)fO#Q)hO#S)iO'|<vO[#Oi!P#Oi!R#Oi!Y#Oi(_#Oi(l#Oi~O'|<vO~P&GWO(Z;cO~O!R!}a'z!}a~P#$[O'|<uO{#VX!P#VXP#VX!g#VX(U#VX~P#BtO!R#YX(_#YX(l#YX~P$)mOq!]Or!]Os!]Ot!]Ou!]Ov!]O!R#Ua(_#Ua(l#Ua~P$)mOq!]Or!]Os!]Ot!]Ou!]Ov!]O#Q)hO#S)iO'|<uO[#Va{#Va!Y#Va!P#VaP#Va!g#Va(U#Va(_#Va~O[$sO!Y*wO!R#Ya(_#Ya(l#Ya~O[$sO!Y*wO!R#Ui(_#Ui(l#Ui~O'|<uO{#Vi!P#ViP#Vi!g#Vi(U#Vi~P'(cO(Z;|O~O(Z&PO(]&UO(^&UO(U#Ta~P&HcO{#Ti!P#TiP#Ti!g#Ti(U#Ti(_#Ti~O[$sO!Y*wO~P+0VO[&TO!Y&SO(Z&PO(]&UO(^&UO~P+0VO(U#Tq~P(4fO(Z<cO~O'|<vO~P#%SO!u!aO~P+*_O!R!}a~P#$[O!R#]a~P#,pOq!]Or!]Os!]Ot!]Ou!]Ov!]O!R#UX(_#UX(l#UX~P$)mO!R!}i~P%3nO[$sO!Y*wO!R#Ua(_#Ua(l#Ua~O!R!}q~P&FhO!R!}y~P'NqOU&j&m's(`!V#`'v'}&n&lRS!_!]c!a!k'{&U[&k)X&p&o!i!b&q&r&q~",
      goto: "%6i)XPPPPP)YP)]PP-[3VP6h6h9{P9{=bP>T>o?]Gt!!g!+[!3cP!<O!<t!=jP!>VPPPPPP!>sP!@mPPP!CZPP!EkP!HR!HV!HxP!IOPPPPP!IRP!IRPP!IRPPPPPPPP!I_!MW#!wPPPPP#!zP>W#$]PP>W#&v#)s#*Q#+m#-dP#-dP#.S#.v#/j#.v#.v#.v#*Q#*Q#*Q#0`#5^P#5|#*Q#)s#)s#:t#:z>W>W>W#:}#;b#=i#=q#=q#=xP#>Y#>aPP#>a#>a#>h#=xP#>l#?]#?hP#?z#At#A}#BWPP#Bm#CW#Ct#Db#BmP#Eo#E{P#BmP#BmPP#FO#Bm#BmP#BmP#BmP#BmP#BmP#I`P#Is#Is#Is#Is#BW#BWP#JQP#BW#AtP#JU#JUP#Jc#At#At#MyP#N^#Ni#No#NoP#At$ ePP#At$!P$!P!HR!HR!HR!HR!HR!HRPP!HR!>s!>sP$!SP$$P$$g!>s!>s!>sPP$$m$$p$$s$${9{6h$(Y$*^$,O6hPP6h$-v6hP6h6h6hP6hPP$1R6hP$-v$1_6hPPPPPPPPPPP)YP$4j$4p$7t$8T$8Z$9W$9^$9t$9z$:U$;d$<s$=R$=m$=s$>T$>g$>o$>u$?P$?_$?h$?p$?v$@R$@b$@l$@r$@x$AP$A`$Af$Cd$Cj$Cp$Cw$DOPPPPPPPPPPP$DU$DYPPPPP$Ky$$m$K|%!U%$v%(XP%([P%(`%(cPPPPPPPPP%(o%*[%+e%,j%,p%/g%/j%1`P%1f%1j%1m%1s%2P%2Z%2d%3c%4O%4U%4o%5P%5S%5d%5q%5}$$m$$p$$p%6QPP%6UP%6c%6fR#XP'rtObefj}!O!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%T%Y%Z%[%]%h%u%w&S&a&b&f&g&r&w&z'R'n'p'v(l(r)k)m)w*O*U*]*^*_*l*n*w*y*{+[+_+e+q+t+{-[-_-e-k-r-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U;i;n;r=O=SU%it%j3zQ&Z!_Q'w#Rd.V)O.S.T.U.X2c2d2e2h5UR3z0kdhObef}!O%w&w*^+{#n%Pgnuv!t$[$j$k$p$}%O%p'P'Q'T'X)Z)`)b)o*a+Y+d+r,X,i,o,q.c.n.o.r.s/z2u8d8e8f8k8l8m8n9w9x9y9z:e:f:j:s;a;b;c<a<b<c<d<e<r<s<xS%Vj/`&S%}!U!V!f!i!q#O#Q#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%T%Y%Z%[%]%h%u&S&a&b&f&g&r&z'R'n'p'v(l(r)k)m)w*O*U*]*_*l*n*w*y*{+[+_+e+q+t-[-_-e-k-r-t-y-{.i.m.u/Q/q/s0O0Q0S0V0^0c0f1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R;i;n;r=SQ&_!cQ&y!rQ'w#UQ'x#RQ'y#SQ)y%QQ+P&YQ+V&`S,|'d1mQ/V*QQ1y-ZQ1}-bQ2{.vQ6`5OQ8o.q!T8u!n#]7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U=O%b#^S![$d$n$t%U%|&O&h&q&t'o'u(P(Q(Y(Z([(](^(_(`(a(b(c(d(e(k(q(x)j)z*m*x+W+c+},`-X-v.l.}/T/_/a/i/p/|0U1z1{2Q2S2X2Z2_2`2o2z3P3^3g3j3q4k4l4v5]5_5a5d5g5m5z6S6e6q6y7P7W8^8v9_9a9c9d9e9f9g9h9i9j9k9l9n9o:k:n:o:p;oQ&]!bQ't#PQ'{#WQ(j#w[*`%e)X/c/{0T0dQ+S&[Q-]'sQ-a'xQ-d'|S-o(i-^Q/Y*VS2V-p-qQ5S2WQ9`7iR9m7}'s!ZObefj}!O!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%T%Y%Z%[%]%h%u%w&S&a&b&f&g&r&w&z'R'n'p'v(l(r)k)m)w*O*U*]*^*_*l*n*w*y*{+[+_+e+q+t+{-[-_-e-k-r-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U;i;n;r=O=S&n!TObefj}!O!U!V!f!i!q#O#Q#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%T%Y%Z%[%]%h%u%w&S&a&b&f&g&r&w&z'R'n'p'v(l(r)k)m)w*O*U*]*^*_*l*n*w*y*{+[+_+e+q+t+{-[-_-e-k-r-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R;i;n;r=S!T;O!n#]7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U=OQ(V#aS*V%a/ZQ-x(s{1U,h0{1O1R1S4^4_4`4b4e6O6P6v;w;y;z;|;}<O<P=ZQ(X#a{1T,h0{1O1R1S4^4_4`4b4e6O6P6v;w;y;z;|;}<O<P=Z|(W#a,h0{1O1R1S4^4_4`4b4e6O6P6v;w;y;z;|;}<O<P=ZT*V%a/Z^UO}!O%w&w*^+{&W$W]`!m!v!w!x!y!z!{!|#P#v#w$^$s$v&T&Z&o'O'W'^'c'g'l't(j(p)e)n+Q+T+X,S,T,e,f,r-P.g.j.x0l0p0w0|1b1c1d4O4U5Y7]7^7_7`7a7b7c7d7e7f7g7h7i7}8}9O9T9U9W9X9Y9^9`9m9{:i:{:|;R;S;T;k;l;m<Q<R<S<T<U<V<W<X<Y<Z<[<]<^<_<`<f<g<h<i<j<k<l<m<n<o<p<q<t<u<v<z<{<|'`$fbfgj!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$j$k$p$r$}%O%Z%[%]%h%u&S&b&f&z'P'R'n'v(l(r)`)b)k)m)w*O*U*_*l*n*w*y*{+[+_+e-[-_-e-k-r-t-y-{.c.i.m.n.q.u/`/q/s0O0Q0S0V0^1V1Y1l1x2u2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:j:m;P;Q;U;n;r=OY%luv%p,X,i|(U#a,h0{1O1R1S4^4_4`4b4e6O6P6v;w;y;z;|;}<O<P=ZQ8s'QU8t'X,o,qY;Ve%Y'p;i=S!l;Wn$['T)Z)o*a+Y+d+r.o.s/z8d8e8f8k8l8m8n9w9x9y9z:e:f:s;a;b;c<a<b<c<d<e<r<s<xS;X!c&`Q;Y!tQ;Z.rU;[%T*]/Q^;]&a&g&r+q+t0c0fT;q%a/Z^VO}!O%w&w*^+{Q$W-P#b$X]`!m!v!w!|#P#v#w$^$s$v&T&Z&o'O't(j(p)e)n+Q+T+X,S,f.g.j.x0l0p0|4O5Y7e7f7g7h7i7}9`9m9{:i:{:|<^<_<`<t<u<v<z<{<|j$fg$j$k$p$}%O'P)`)b.c.n2u:j&t$gbfj!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%Z%[%]%h%u&S&b&f&z'R'n'v(l(r)k)m)w*O*U*_*l*n*w*y*{+[+_+e-[-_-e-k-r-t-y-{.i.m.q.u/`/q/s0O0Q0S0V0^1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U;n;r=OY$ue%Y'p;i=SY%luv%p,X,iQ&{!tx'U!x!y!z!{'^'c'g'l,T1b1c1d7c9Y;R;S;T;k;l;m|(U#a,h0{1O1R1S4^4_4`4b4e6O6P6v;w;y;z;|;}<O<P=Z!v)x'W,e0w4U7]7^7_7`7a7b7d8}9O9T9U9W9X9^<Q<R<S<T<U<V<W<X<Y<Z<[<]<f<g<h<i<j<k<l<m<n<o<p<qQ,W'QQ1^,rU:R'X,o,q!l;Wn$['T)Z)o*a+Y+d+r.o.s/z8d8e8f8k8l8m8n9w9x9y9z:e:f:s;a;b;c<a<b<c<d<e<r<s<xS;X!c&`U;e%T*]/Q^;f&a&g&r+q+t0c0fQ;j.rT;q%a/Z|!SOe}!O%T%Y%w&a&g&r&w'p*]*^+q+t+{/Q0c0f;i=S#l$]]`!m!t!v!w!|#P#v#w$^$s$v&T&Z&o'O'Q'X't(j(p)e)n+Q+T+X,f,o,q.g.j.r.x0l0p0|4O5Y7e7f7g7h7i7}9`9m9{:i:{:|<^<_<`<t<u<v<z<{<|&t$mbfj!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%Z%[%]%h%u&S&b&f&z'R'n'v(l(r)k)m)w*O*U*_*l*n*w*y*{+[+_+e-[-_-e-k-r-t-y-{.i.m.q.u/`/q/s0O0Q0S0V0^1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U;n;r=O$f%Rgnuv#a$[$j$k$p$}%O%a%p&`'P'T)Z)`)b)o*a+Y+d+r,X,h,i.c.n.o.s/Z/z0{1O1R1S2u4^4_4`4b4e6O6P6v8d8e8f8k8l8m8n9w9x9y9z:e:f:j:s;a;b;c;w;y;z;|;}<O<P<a<b<c<d<e<r<s<x=ZQ&^!c#n'V!x!y!z!{'W'^'c'g'l,e0w1b1c1d4U7]7^7_7`7a7b7c7d8}9O9T9U9W9X9Y9^;R;S;T;k;l;m<Q<R<S<T<U<V<W<X<Y<Z<[<]<f<g<h<i<j<k<l<m<n<o<p<qf+o&p+i+k+n0X0Y0[0_3o3p5kQ0o,SQ0r,TQ0u,]Q1_,rQ1p-PQ4Q0qR5q4R|!SOe}!O%T%Y%w&a&g&r&w'p*]*^+q+t+{/Q0c0f;i=S#n$]]`!m!t!v!w!|#P#v#w$^$s$v&T&Z&o'O'Q'X't(j(p)e)n+Q+T+X,S,f,o,q.g.j.r.x0l0p0|4O5Y7e7f7g7h7i7}9`9m9{:i:{:|<^<_<`<t<u<v<z<{<|&t$mbfj!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%Z%[%]%h%u&S&b&f&z'R'n'v(l(r)k)m)w*O*U*_*l*n*w*y*{+[+_+e-[-_-e-k-r-t-y-{.i.m.q.u/`/q/s0O0Q0S0V0^1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U;n;r=O$h%Rgnuv!c#a$[$j$k$p$}%O%a%p&`'P'T)Z)`)b)o*a+Y+d+r,X,h,i.c.n.o.s/Z/z0{1O1R1S2u4^4_4`4b4e6O6P6v8d8e8f8k8l8m8n9w9x9y9z:e:f:j:s;a;b;c;w;y;z;|;}<O<P<a<b<c<d<e<r<s<x=Z#p'V!x!y!z!{'W'^'c'g'l,T,e0w1b1c1d4U7]7^7_7`7a7b7c7d8}9O9T9U9W9X9Y9^;R;S;T;k;l;m<Q<R<S<T<U<V<W<X<Y<Z<[<]<f<g<h<i<j<k<l<m<n<o<p<qQ1_,rR1p-P^WO}!O%w&w*^+{&W$W]`!m!v!w!x!y!z!{!|#P#v#w$^$s$v&T&Z&o'O'W'^'c'g'l't(j(p)e)n+Q+T+X,S,T,e,f,r-P.g.j.x0l0p0w0|1b1c1d4O4U5Y7]7^7_7`7a7b7c7d7e7f7g7h7i7}8}9O9T9U9W9X9Y9^9`9m9{:i:{:|;R;S;T;k;l;m<Q<R<S<T<U<V<W<X<Y<Z<[<]<^<_<`<f<g<h<i<j<k<l<m<n<o<p<q<t<u<v<z<{<|j$fg$j$k$p$}%O'P)`)b.c.n2u:j%p$hbfj!U!V!f!i!q#O#Q#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%Z%[%]%h%u&S&b&f&z'R'n'v(l(r)k)m)w*O*U*_*l*n*w*y*{+[+_+e-[-_-e-k-r-t-y-{.i.m.q.u/`/q/s0O0Q0S0V0^1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R;n;rY%luv%p,X,i|(U#a,h0{1O1R1S4^4_4`4b4e6O6P6v;w;y;z;|;}<O<P=Z!S8c!n#]7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U=OQ8s'QU8t'X,o,q!l;Wn$['T)Z)o*a+Y+d+r.o.s/z8d8e8f8k8l8m8n9w9x9y9z:e:f:s;a;b;c<a<b<c<d<e<r<s<xS;X!c&`Q;Y!tQ;Z.rY;^e%Y'p;i=SU;_%T*]/Q^;`&a&g&r+q+t0c0fT;q%a/Zr#sT$V$e$|%k(T8_8`8a8b8g8h8i8j8q8r;po(m#y)V)]-h8P8Q8R9p9q9r9s9t9u9v:cr#tT$V$e$|%k(T8_8`8a8b8g8h8i8j8q8r;po(n#y)V)]-h8P8Q8R9p9q9r9s9t9u9v:c`%Shi%P%V%W%}8o8ud%{!S$]$m%R&^'V0o0r1_1pV-i(V(W1US$ze%YQ){%TQ-Y'pQ/w+TQ2q.jQ3Q/QQ6c5YQ;g;iR;u=S$o!RO]`e}!O!m!t!v!w!|#P#v#w$^$s$v%T%Y%w&T&Z&a&g&o&r&w'O'Q'X'p't(j(p)e)n*]*^+Q+T+X+q+t+{,S,f,o,q,r.g.j.r.x/Q0c0f0l0p0|4O5Y7e7f7g7h7i7}9`9m9{:i:{:|;i<^<_<`<t<u<v<z<{<|=S#S_O]`a}!O!t!v!w#v$Z$^$`$a$s%w&T&Z&a&g&r&w&|'O'Q'X(p)[)n*]*^+Q+X+q+t+{,f,o,q,r.r.x0c0f0l0|:{:|S'^!x1cS'c!y1dU'l!{,T1bQ8}7]Q9O7^Q9T7_Q9U7`Q9^7dQ;k;RQ;l;SQ;m;TQ<f<QQ<g<RQ<h<SQ<i<TQ<j<UQ<k<VQ<l<WQ<m<XQ<o<ZQ<p<[R<q<]b'[!x1c7]7^;R<Q<R<S<Tb'a!y1d7_7`;S<U<V<W<X`'j!{,T1b7d;T<Z<[<]l,u'Y']'^4p8y8z8{8}9O;k<f<g<h<il,y'_'b'c4q9P9Q9R9T9U;l<j<k<l<mh-U'h'k'l4o9Z9[9]9^;m<o<p<qY1g,v,w:S:T:UY1j,z,{:W:X:YY1u-V-W:]:^:_Q4s1hQ4u1kR4{1vb'Z!x1c7]7^;R<Q<R<S<Tb'`!y1d7_7`;S<U<V<W<X`'i!{,T1b7d;T<Z<[<]j,t'Y'[']'^4p8z8}9O;k<f<g<h<ij,x'_'a'b'c4q9Q9T9U;l<j<k<l<mf-T'h'j'k'l4o9[9^;m<o<p<qW1f,u,v,w:TW1i,y,z,{:XW1t-U-V-W:^S4r1g1hS4t1j1kS4z1u1vQ6[4sQ6]4uR6^4{T,m'X,o!a[O]}!O$s%w&T&Z&a&g&r&w'O'Q'X)n*]*^+Q+X+q+t+{,f,o,r.r.x0c0f0lQ$SZR.Z)PR)R$Se.V)O.S.T.U.X2c2d2e2h5U'rtObefj}!O!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%T%Y%Z%[%]%h%u%w&S&a&b&f&g&r&w&z'R'n'p'v(l(r)k)m)w*O*U*]*^*_*l*n*w*y*{+[+_+e+q+t+{-[-_-e-k-r-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U;i;n;r=O=SU%it%j3zd.V)O.S.T.U.X2c2d2e2h5UR3z0k'r!ZObefj}!O!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%T%Y%Z%[%]%h%u%w&S&a&b&f&g&r&w&z'R'n'p'v(l(r)k)m)w*O*U*]*^*_*l*n*w*y*{+[+_+e+q+t+{-[-_-e-k-r-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U;i;n;r=O=Se.V)O.S.T.U.X2c2d2e2h5UR2i.Zd^O}!O%w&w'Q'X*^+{,o!n_]`a!t!v!w#v$Z$^$`$a$s&T&Z&a&g&r&|'O(p)[)n*]+Q+X+q+t,f,q,r.r.x0c0f0l0|:{:|Q%nu])c$q)d;d;t=b=c!fcObefguv}!O!t$j$k$p$}%O%p%w&w'P'Q'X)`)b*^+{,X,i,o,q.c.n.r2u:jf+l&p+i+k+n0X0Y0[0_3o3p5kh1P,h0{1O1S4^4_4`4b4e6O6P6vp:}n$['T)Z*a+Y+r/z8d8e8f8k8m9w9y:eh<})o.o.s8l8n9x9z:f:s;a;b;cb=[1R;w;y;z;|;}<O<P=Zc=a+d<a<b<c<d<e<r<s<x^$qd0T;h;s;v;x=Pb&Q!Y'S(h-s:h:r=R=T=fY*u2m5W:P:Q:lb*v&R,a-n2Y:q:v=W=X=h^0]+m0Z0a3n3u5j6jQ0h+xY2l.f2n8w8x:Ob4c1Q4Y4a4j5{5}6W6u7S[:t4i:u:w:y:z;{d;d$l$w${&})_,V.b.t2k2vt=Q$y&P&T&U)o)s)u*q.n.o.r.s.{2u:j:s=]=_f=V)v*r*|*}.p.|/l2t3O=^=`i=b%e)X,b.a/c/{0d=d=e=g=i=jW)p$s&T*].rS,P'O0lR2|.x$TkObefgnuv}!O!t$[$j$k$p$}%O%p%w&w'P'Q'T'X)Z)`)b)o*^*a+Y+d+r+{,X,i,o,q.c.n.o.r.s/z2u8d8e8f8k8l8m8n9w9x9y9z:e:f:j:s;a;b;c<a<b<c<d<e<r<s<x#bkbefgn!t$[$j$k$p$}%O'P'T)Z)`)b)o*a+Y+d+r.c.n.o.r.s/z2u8d8e8f8k8l8m8n9w9x9y9z:e:f:j:s;a;b;c<a<b<c<d<e<r<s<x`lO}!O%w&w'Q*^+{U%muv,XQ*h%pS,g'X,oT1Z,i,qh)f$q)d)g.e9|:g;d;t<w<y=b=c`*s&Q*t*v/o=Q=U=V=YX6Q4c6R:t:xh)f$q)d)g.e9|:g;d;t<w<y=b=cS*u&Q=QW/n*t*v=U=VS3[/o=YX6Q4c6R:t:x!c&V!Y$y&P&T&U'S(h)o)s)u*q-s.f.n.o.r.s.{2n2u8w8x:O:h:j:r:s=R=T=]=_=f!`&V$y&P&T&U'S(h)o)s)u*q-s.f.n.o.r.s.{2n2u8w8x:O:h:j:r:s=R=T=]=_=fR&W!YdiObef}!O%w&w*^+{#n%Pgnuv!t$[$j$k$p$}%O%p'P'Q'T'X)Z)`)b)o*a+Y+d+r,X,i,o,q.c.n.o.r.s/z2u8d8e8f8k8l8m8n9w9x9y9z:e:f:j:s;a;b;c<a<b<c<d<e<r<s<x'^%Wj!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%T%Y%Z%[%]%h%u&S&a&b&f&g&r&z'R'n'p'v(l(r)k)m)w*O*U*]*_*l*n*w*y*{+[+_+e+q+t-[-_-e-k-r-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U;i;n;r=O=SQ&_!cR+V&`l#uT$e$|%k8_8`8a8b8g8h8i8j8q8ri(o#y)]8P8Q8R9p9q9r9s9t9u9v#nkgnuv!t$[$j$k$p$}%O%p'P'Q'T'X)Z)`)b)o*a+Y+d+r,X,i,o,q.c.n.o.r.s/z2u8d8e8f8k8l8m8n9w9x9y9z:e:f:j:s;a;b;c<a<b<c<d<e<r<s<xdmObef}!O%w&w*^+{'_!Zj!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%T%Y%Z%[%]%h%u&S&a&b&f&g&r&z'R'n'p'v(l(r)k)m)w*O*U*]*_*l*n*w*y*{+[+_+e+q+t-[-_-e-k-r-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U;i;n;r=O=SQ.w)oR2x.sR.w)oQ1X,hS4[0{1QU5w4Y4^4fS6o5u5{R7Q6r^#{V!S$g$m$u;e;fQ&j!iS(f#q*]S(v#z*^Y*`%e)X/c0T0dQ-]'sS-o(i-^W/O)w1x9}:mQ/Y*VS/b*_3aQ1X,hQ2T-kS2V-p-qS2[-t3XQ2a-{Q3b/{U4[0{1Q1YQ5S2WQ5h3iY5w4Y4]4^4f4gW6o5u5x5{5|U7Q6p6r6sR7X7RS(v#z*^T2[-t3XZ(t#z(u*^-t3X^{O}!O%w&w*^+{Q,_'QT,m'X,oS'Q!t,^R0s,US,P'O0lR4S0sT,P'O0l^{O}!O%w&w*^+{Q+R&ZQ+[&aS+e&g0fW+s&r+q+t0cQ,_'QR1`,r[%fn$[+Y+d+r/zR/d*a^{O}!O%w&w*^+{Q+R&ZQ,_'QR1`,r!OrO}!O!f%h%w&b&f&r&w*^+_+q+t+{0O0c3e3k5e6f6i6{S%bl,gS%sx,YQ&X!YQ&s!pU*Y%c%m1ZQ*c%eS*j%q%rQ+O&WQ+`&dS._)X,bS/f*g*hQ/h*iQ2j.aQ3Y/gQ3x0hQ4h1QQ5y4YR6t5{_{O}!O%w&w*^+{Q&x!rQ+R&ZR+|&ywsO}!O!f%h%w&b&f&w*^+_+{0O3e3k5e6f6i6{!PrO}!O!f%h%w&b&f&r&w*^+_+q+t+{0O0c3e3k5e6f6i6{!OoO}!O!f%h%w&b&f&r&w*^+_+q+t+{0O0c3e3k5e6f6i6{R&n!l!OrO}!O!f%h%w&b&f&r&w*^+_+q+t+{0O0c3e3k5e6f6i6{R+[&a!OqO}!O!f%h%w&b&f&r&w*^+_+q+t+{0O0c3e3k5e6f6i6{[$xe%Y'p0Q;i=SQ&j!iS(R#_3XQ+Z&aS+f&g0fQ/}+[Q3l0VQ5f3hR6g5cQ&b!dQ&d!eQ&f!gR+_&cR+]&a&f!TObefj}!O!U!V!f!i!q#O#Q#_#b#f#g#h#i#j#k#l#m#n#q#x#z#|$r%T%Y%Z%[%]%h%u%w&S&a&b&f&g&r&w&z'R'n'p'v(l(r)k)m)w*O*U*]*^*_*l*n*w*y*{+[+_+e+q+t+{-[-e-k-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R;i;n;r=SQ0R+a{;O!n#]7j7k7l7m7n7o7p7q7r7s8O8S8p9}:a;P;Q;U=O^{O}!O%w&w*^+{W+s&r+q+t0cT,m'X,og+o&p+i+k+n0X0Y0[0_3o3p5kT+v&s+w^{O}!O%w&w*^+{T,m'X,o'r!ZObefj}!O!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#o#q#x#z#|$r%T%Y%Z%[%]%h%u%w&S&a&b&f&g&r&w&z'R'n'p'v(l(r)k)m)w*O*U*]*^*_*l*n*w*y*{+[+_+e+q+t+{-[-_-e-k-r-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l1x2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s7t8O8S8p9}:`:a:d:m;P;Q;U;i;n;r=O=SR3{0k^vO}!O%w&w*^+{Q%puQ,X'QT,i'X,oS%cl,gS*g%m1ZR/g*hQ*W%aR3V/ZS%bl,gS%sx,YU*Y%c%m1ZS*j%q%rS/f*g*hQ/h*iQ3Y/gQ4h1QQ5y4YR6t5{bxO}!O%w&w'X*^+{,oS%qu,XU%rv,i,qQ*i%pR,Y'QR,_'Q$n!RO]`e}!O!m!t!v!w!|#P#v#w$^$s$v%T%Y%w&T&Z&a&g&o&r&w'O'Q'X'p't(j(p)e)n*]*^+Q+T+X+q+t+{,S,f,o,q,r.g.j.r.x/Q0c0f0l0p0|4O5Y7e7f7g7h7i7}9`9m9{:i:{:|;i<^<_<`<t<u<v<z<{<|=SR1q-PY'f!z7a7b7c<Y[-Q'e'g9W9X9Y<nS1r-R-SR4y1sQ,}'dR4w1mR)|%TR3R/QS-g(T;pT2R-h:c&f!TObefj}!O!U!V!f!i!q#O#Q#_#b#f#g#h#i#j#k#l#m#n#q#x#z#|$r%T%Y%Z%[%]%h%u%w&S&a&b&f&g&r&w&z'R'n'p'v(l(r)k)m)w*O*U*]*^*_*l*n*w*y*{+[+_+e+q+t+{-[-e-k-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R;i;n;r=S{;O!n#]7j7k7l7m7n7o7p7q7r7s8O8S8p9}:a;P;Q;U=O$U#gS$t%U&h&t'o'u(Q(Y(Z(](^(_(`(a(b(c(d(e(k(q(x)j)z*m*x+W+c+},`-X-v.l.}/T/_/a/i/p/|0U1z1{2Q2S2X2Z2_2`2o2z3P3^3g3j3q4k4l4v5]5_5a5d5g5m5z6S6e6q6y7P7Wy7l&q(P9_9a9c9e9f9g9h9i9j9k9l9n9o:k:n:o:p;o#r#hS$t%U&h&t'u(Q(Y(d(e(k(q(x)j)z*m*x+W+c+},`-X-v.l.}/T/_/a/i/p/|0U1z1{2Q2S2X2Z2_2`2o2z3P3^3g3j3q4k4l4v5]5_5a5d5g5m5z6S6e6q6y7P7Wg7m&q(P9a9l9n9o:k:n:o:p;o#x#kS$t%U&h&t'u(Q(Y(](^(_(d(e(k(q(x)j)z*m*x+W+c+},`-X-v.l.}/T/_/a/i/p/|0U1z1{2Q2S2X2Z2_2`2o2z3P3^3g3j3q4k4l4v5]5_5a5d5g5m5z6S6e6q6y7P7Wm7p&q(P9a9e9f9g9l9n9o:k:n:o:p;o'c!ZObefj}!O!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#q#x#z#|$r%T%Y%Z%[%]%h%u%w&S&a&b&f&g&r&w&z'R'n'p'v(l(r)k)m)w*O*U*]*^*_*l*n*w*y*{+[+_+e+q+t+{-[-e-k-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s8O8S8p9}:a;P;Q;U;i;n;r=O=SQ-^'sQ-p(iQ2W-qR6_4}'c!YObefj}!O!U!V!f!i!n!q#O#Q#]#_#b#f#g#h#i#j#k#l#m#n#q#x#z#|$r%T%Y%Z%[%]%h%u%w&S&a&b&f&g&r&w&z'R'n'p'v(l(r)k)m)w*O*U*]*^*_*l*n*w*y*{+[+_+e+q+t+{-[-e-k-t-y-{.i.m.q.u/Q/`/q/s0O0Q0S0V0^0c0f1V1Y1l2y3X3_3a3e3h3i3k3r3t4]4d4g5c5e5n5x5|6T6V6f6i6p6s6z6{7R7j7k7l7m7n7o7p7q7r7s8O8S8p9}:a;P;Q;U;i;n;r=O=SQ#ZQR'}#ZU$jb$}:jd$ve%T%Y'p+T.j/Q5Y;i=SQ&o!m!^)^$j$v&o)`)k)u*y.c.{/q0X3o3r4_5k6O6T6v8d9w9x:e:f;a;y;}<P<a<r<xS)`$k$pQ)k$rQ)u$yS*y&S.qQ.c)bQ.{)sQ/q*wQ0X+kS3o0Y0[Q3r0^Q4_1OQ5k3pS6O4`4bQ6T4dQ6v6PQ8d8kS9w8e8fS9x;b;cQ:e9yQ:f9zS;a.o8lQ;y=ZS;};z;|Q<P<OQ<a<dS<r<b<cR<x<sQ0x,cU4V0x4W5tS4W0y0zR5t4XQ,o'XR1[,o`]O}!O%w&w'Q*^+{Y$Y])n+Q+X,f^)n$s&T'O*].r.x0lS+Q&Z,r^+X&a&g&r+q+t0c0fT,f'X,oQ(}$RR.O(}Q.X)OQ2c.SQ2d.TQ2e.UY2f.X2c2d2e5UR5U2hQ$OXR(y$OQ)Q$SS.[)Q.]R.])R!``O]}!O!t!w$^$s%w&T&Z&a&g&r&w'O'Q)n*]*^+Q+X+q+t+{,r.r.x0c0f0lY$_`$a)[:{:|U$aa$Z&|Q)[$`U:{!v#v(pZ:|'X,f,o,q0|U$kb$}:jl)a$k)b0Y3p4`6P8e9y9z;b;z<O<b<sQ)b$pQ0Y+kQ3p0[Q4`1OQ6P4bQ8e8kQ9y8fQ9z;cS;b.o8lQ;z=ZQ<O;|Q<b<dR<s<cQ)d$qU.d)d;t=cQ;t;dR=c=bQ)g$qQ.e)d[.h)g.e9|:g<w<yQ9|;dQ:g;tQ<w=bR<y=cQ5Z2qR6d5ZU*q&P.o:jU/k*q:O=TQ:O8wR=T=fQ*t&QW/m*t/o=U=YQ/o*vQ=U=QR=Y=VU*R%V)y8oR/W*RQ.y)pR2}.yQ6R4cS6w6R:xR:x:tQ4f1QQ5u4YU6X4f5u6rR6r5{W(u#z*^-t3XR-z(uU-u(q(v/_R2]-uQ0m,QR3}0m[*b%e%f)X/{0T0dR/e*bQ}OU%v}%w+{S%w!O*^R+{&wQ+t&rQ0c+qT0e+t0cQ0`+mR3v0`Q+w&sR0g+wS%jt3zR*f%jduO}!O%w&w'Q'X*^+{,oR%ouQ/[*WR3W/[$p!QO]`e}!O!m!t!v!w!|#P#v#w$^$s$v%T%Y%w&T&Z&a&g&o&r&w'O'Q'X'p't(j(p)e)n*]*^+Q+T+X+q+t+{,S,f,o,q,r-P.g.j.r.x/Q0c0f0l0p0|4O5Y7e7f7g7h7i7}9`9m9{:i:{:|;i<^<_<`<t<u<v<z<{<|=SR%y!QQ1n,}R4x1nQ/R)|R3S/RS*P%U-vR/U*PS-l(e(fR2U-lQ5P1}R6a5PT(g#q*]|SO}!O!f%h%w&b&f&r&w+_+q+t+{0O0c3e3k5e6f6i6{j$dbf%Z%[)m*{.m/s3_3t5n6V6z[$te%Y'p0Q;i=S^%Uj%]'v(l*U;n;rS%|!U;PQ&O!VQ&h!iQ&q!nQ&t!qQ'o#OS'u#Q*nQ(P#]Q(Q#_Q(Y#bQ(Z#fQ([#gQ(]#hQ(^#iQ(_#jQ(`#kQ(a#lQ(b#mQ(c#nQ(d#oS(e#q*]Q(k#xQ(q#zQ(x#|Q)j$rQ)z%TQ*m%uS*x&S.qQ+W&aS+c&g0fQ+}&zQ,`'RQ-X'nS-v(r/`Q.l)kS.})w1xQ/T*OQ/_*^Q/a*_Q/i*lS/p*w*yQ/|+[Q0U+eQ1z-[Q1{-_Q2Q-eQ2S-kQ2X-rQ2Z-tQ2_-yQ2`-{Q2o.iQ2z.uQ3P/QQ3^/qQ3g0SQ3j0VQ3q0^Q4k1VQ4l1YQ4v1lQ5]2yQ5_3XQ5a3aQ5d3hQ5g3iQ5m3rS5z4]4gQ6S4dQ6e5cS6q5x5|Q6y6TS7P6p6sQ7W7RQ8^8pQ8v;QQ9_;UQ9a7jQ9c7kQ9d7lQ9e7mQ9f7nQ9g7oQ9h7pQ9i7qQ9j7rQ9k7sQ9l7tQ9n8OQ9o8SS:k9}:mQ:n:`Q:o:aQ:p:dR;o=OR)}%Td^O}!O%w&w'Q'X*^+{,o!n_]`a!t!v!w#v$Z$^$`$a$s&T&Z&a&g&r&|'O(p)[)n*]+Q+X+q+t,f,q,r.r.x0c0f0l0|:{:|$b$ibe!m$j$k$p$r$v$y$}%T%Y&S&o'p)`)b)k)s)u*w*y+T+k.c.j.q.{/Q/q0X0Y0[0^1O3o3p3r4_4`4b4d5Y5k6O6P6T6v8d8e8f8k8l9w9x9y9z:e:f;a;b;c;i;y;z;|;}<O<P<a<b<c<d<r<s<x=S=ZQ%nuh)f$q)d)g.e9|:g;d;t<w<y=b=c[*p&P*q8w:O=T=f`*s&Q*t*v/o=Q=U=V=YQ.g)eS2w.o:jW6Q4c6R:t:xQ:i9{Q<z<tQ<{<uR<|<v`aO}!O%w&w'Q*^+{Q$Z]U$``:{:|d$ye%T%Y'p+T.j/Q5Y;i=SQ&p!m!^&|!t!v!w#v$^$s&T&Z&a&g&r'O'X(p)n*]+Q+X+q+t,f,o,q,r.r.x0c0f0l0|b'm!|,S7e7f7g7h<^<_<`S's#P7iW(i#w't7}9`Q)s$vQ+i&oS-q(j9mU.f)e<t<vU2n.g<z<|Q4P0pQ5p4OQ:h9{Q:r:iQ=]<uR=_<{S'Y!x7]Q'Z7^S'_!y7_Q'`7`S'e!z7aS'f7b7cU'h!{,T7dQ,c'WQ,t9OS,w'^8}Q,x9US,{'c9TS-Q9X9YS-S'g9WS-W'l9^Q0z,eQ1a,rQ4T0wQ4o1bQ4p1cQ4q1dQ5s4UQ8y<RQ8z<QQ8{<TS8|;R<SQ9P<VQ9Q<UQ9R<XS9S;S<WQ9V<YS9Z;T<[Q9[<ZQ9]<]Q:S<gQ:T<fQ:U<iS:V;k<hQ:W<kQ:X<jQ:Y<mS:Z;l<lQ:[<nS:];m<pQ:^<oR:_<qR,d'WT,n'X,oR$TZe.W)O.S.T.U.X2c2d2e2h5UdnO}!O%w&Z&w'Q*^+{,rS$[]+QQ'P!tQ'S!vQ'T!wQ(h#vQ)Z$^^)o$s&T'O*].r.x0lQ+Y&aQ+d&gY+r&r+q+t0c0fS,h'X,oQ-s(pQ.n)nQ/z+XS0{,f,qR4^0|d^O}!O%w&w'Q'X*^+{,o!n_]`a!t!v!w#v$Z$^$`$a$s&T&Z&a&g&r&|'O(p)[)n*]+Q+X+q+t,f,q,r.r.x0c0f0l0|:{:|R%nuQ1Q,hQ4Y0{Q4a1OQ4i1RQ4j1SQ5{4^U5}4_4`4bQ6W4eS6u6O6PQ7S6vQ:u;wU:w;y;z;|S:y;}<OQ:z<PR;{=ZX)q$s&T*].rpdOuv}!O%p%w&w'Q'X*^+{,X,i,o,qY$lb$}.o8l:jU$we%O.r[${fg.s2u8n:sQ%enQ&}!tQ)X$[[)_$j$k$p;a;b;cQ,V'PQ,b'TQ.a)ZW.b)`)b9x9zQ.t)oQ/c*aQ/{+YQ0T+dS0d+r/zS2k.c:fQ2v.nQ;h<eU;s<a<b<cS;v<r<sQ;x<xQ=P<dQ=d8kQ=e8mU=g8d8e8fS=i9w9yR=j:eR2r.jQ&R!YQ)v$yU*r&P.o:jS*|&T.rW*}&U.s2u:sQ,a'SQ-n(hQ.p)oS.|)s)uQ/l*qQ2Y-sQ2m.fQ2t.nQ3O.{Q5W2nQ:P8wQ:Q8xQ:l:OQ:q:hQ:v:rQ=W=RQ=X=TQ=^=]Q=`=_R=h=fX%Xj%Q.q/`T(w#z*^R,R'OQ,Q'OR3|0l^{O}!O%w&w*^+{R,_'QW%gn+Y+d+rT)Y$[/z_|O}!O%w&w*^+{^{O}!O%w&w*^+{Q&e!fQ*e%hQ+^&bQ+b&fQ0P+_Q3d0OQ5b3eQ5i3kQ6h5eQ6|6fQ6}6iR7U6{vsO}!O!f%h%w&b&f&w*^+_+{0O3e3k5e6f6i6{X+s&r+q+t0cQ+p&pR0W+iS+m&p+iQ0Z+kQ0a+nU3n0X0Y0[Q3u0_S5j3o3pR6j5k^wO}!O%w&w*^+{Q,Z'QT,j'X,oR*X%a^yO}!O%w&w*^+{Q,['QT,k'X,o^zO}!O%w&w*^+{T,l'X,oQ-Q9VQ-R'eQ1r:[R1s-SR-O'dT'q#O;U`%_j%]'v(l(r/`;n;rR/X*UR-c'yR2O-b",
      nodeNames: "⚠ > MacroName LineComment BlockComment PreprocDirective #include String EscapeSequence SystemLibString Identifier ArgumentList ( ConditionalExpression AssignmentExpression CallExpression PrimitiveType FieldExpression FieldIdentifier DestructorName TemplateMethod ScopedFieldIdentifier NamespaceIdentifier TemplateType TypeIdentifier ScopedTypeIdentifier ScopedNamespaceIdentifier :: NamespaceIdentifier TypeIdentifier TemplateArgumentList < TypeDescriptor const volatile restrict _Atomic mutable constexpr StructSpecifier struct MsDeclspecModifier __declspec ) VirtualSpecifier BaseClassClause Access , FieldDeclarationList { FieldDeclaration Attribute AttributeName Identifier AttributeArgs } [ ] UpdateOp ArithOp ArithOp ArithOp LogicOp BitOp BitOp BitOp CompareOp CompareOp CompareOp > CompareOp BitOp UpdateOp Number RawString CharLiteral AttributeArgs virtual extern static register inline AttributeSpecifier __attribute__ PointerDeclarator MsBasedModifier __based MsPointerModifier FunctionDeclarator ParameterList ParameterDeclaration PointerDeclarator FunctionDeclarator Noexcept noexcept ThrowSpecifier throw TrailingReturnType AbstractPointerDeclarator AbstractFunctionDeclarator AbstractArrayDeclarator AbstractParenthesizedDeclarator AbstractReferenceDeclarator ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator ScopedIdentifier Identifier OperatorName TemplateFunction StructuredBindingDeclarator OptionalParameterDeclaration VariadicParameterDeclaration VariadicDeclarator ReferenceDeclarator ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator BitfieldClause InitializerList InitializerPair SubscriptDesignator FieldDesignator TemplateDeclaration template TemplateParameterList TypeParameterDeclaration typename class OptionalTypeParameterDeclaration VariadicTypeParameterDeclaration TemplateTemplateParameterDeclaration AliasDeclaration using Declaration InitDeclarator FunctionDefinition MsCallModifier CompoundStatement LinkageSpecification DeclarationList CaseStatement case default LabeledStatement StatementIdentifier ExpressionStatement CommaExpression IfStatement if ConditionClause Declaration else SwitchStatement switch DoStatement do while ParenthesizedExpression WhileStatement ForStatement for ReturnStatement return BreakStatement break ContinueStatement continue GotoStatement goto TypeDefinition typedef PointerDeclarator FunctionDeclarator ArrayDeclarator ParenthesizedDeclarator ForRangeLoop TryStatement try CatchClause catch ThrowStatement NamespaceDefinition namespace UsingDeclaration StaticAssertDeclaration static_assert ConcatenatedString TemplateInstantiation FunctionDefinition ExplicitFunctionSpecifier explicit FieldInitializerList FieldInitializer DefaultMethodClause DeleteMethodClause delete FunctionDefinition OperatorCast operator operator Declaration FunctionDefinition FunctionDefinition FunctionDefinition FunctionDefinition Declaration FunctionDefinition Declaration FriendDeclaration friend union AccessSpecifier UnionSpecifier EnumSpecifier enum SizedTypeSpecifier TypeSize EnumeratorList Enumerator ClassSpecifier DependentType Decltype decltype auto ParameterPackExpansion ParameterPackExpansion FieldIdentifier PointerExpression SubscriptExpression BinaryExpression ArithOp LogicOp BitOp UnaryExpression LogicOp BitOp UpdateExpression CastExpression SizeofExpression sizeof CompoundLiteralExpression True False NULL NewExpression new new NewDeclarator DeleteExpression delete LambdaExpression LambdaCaptureSpecifier ParameterPackExpansion nullptr this #define PreprocArg #if #ifdef #ifndef #else #endif #elif PreprocDirectiveName Macro Program",
      maxTerm: 377,
      nodeProps: [
        [NodeProp$1.group, -30,7,10,13,14,15,17,73,74,75,106,109,158,187,228,229,230,234,237,238,239,241,242,243,244,245,249,251,253,254,255,"Expression",-12,16,23,24,25,39,213,214,216,220,221,222,224,"Type",-16,138,141,144,146,148,153,155,159,160,162,164,166,168,176,177,181,"Statement"]
      ],
      skippedNodes: [0,2,3,4,5,6,9,256,257,258,259,260,261,262,263,264,265,303],
      repeatNodeCount: 37,
      tokenData: "':`&iR!UOX$eXY'mYZ,iZ]$e]^)k^p$epq'mqr-Prs.ost/^tu$euv!/wvw!1gwx!3Yxy!3wyz!4lz{!5a{|!6[|}!8Q}!O!8u!O!P!:n!P!Q##Y!Q!R#4m!R![$6p![!]%Ki!]!^%MX!^!_%M|!_!`&*k!`!a&+f!a!b&.S!b!c$e!c!n&.w!n!o&0Y!o!w&.w!w!x&2s!x!}&.w!}#O&4U#O#P&5q#P#Q&Ep#Q#R&G]#R#S&.w#S#T$e#T#c&.w#c#d&HW#d#i&.w#i#j'0Z#j#o&.w#o#p'3T#p#q'3x#q#r'5n#r#s'6c#s~$e!l$nW(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e!j%_U(aW&k!bOY%WZw%Wwx%qx#O%W#O#P&S#P~%W!b%vS&k!bOY%qZ#O%q#O#P&S#P~%q!b&XV&k!bOY%qYZ%qZ]%q]^&n^#O%q#O#P&S#P~%q!b&sT&k!bOY%qYZ%qZ#O%q#O#P&S#P~%q!d'ZU'tQ&k!bOY'SZr'Srs%qs#O'S#O#P&S#P~'S&i'z^(aW'tQ'r$Z&k!b)X#SOX$eXY'mYZ(vZ]$e]^)k^p$epq'mqr$ers%Wsw$ewx'Sx#O$e#O#P*r#P~$e$Z({T'r$ZXY(vYZ(v]^(vpq(v#O#P)[$Z)_QYZ(v]^)e$Z)hPYZ(v%w)v^(aW'tQ'r$Z&k!bOX$eXY)kYZ(vZ]$e]^)k^p$epq)kqr$ers%Wsw$ewx'Sx#O$e#O#P*r#P~$e%m*wV&k!bOY%qYZ+^Z]%q]^,T^#O%q#O#P&S#P~%q%m+eY'r$Z&k!bOX%qXY+^YZ(vZ]%q]^+^^p%qpq+^q#O%q#O#P*r#P~%q%m,YT&k!bOY%qYZ+^Z#O%q#O#P&S#P~%q${,pT)Up'r$ZXY(vYZ(v]^(vpq(v#O#P)[%s-[Y&TP(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`-z!`#O$e#O#P&S#P~$e%s.VW!d$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e&e.zU(aW'uQ's$w&k!bOY%WZw%Wwx%qx#O%W#O#P&S#P~%W%w/gd(aW'tQ&k!bOX$eXY/^Zp$epq/^qr$ers%Wsw$ewx'Sx!c$e!c!}0u!}#O$e#O#P&S#P#T$e#T#W0u#W#X2S#X#Y:f#Y#]0u#]#^Hl#^#o0u#o~$e%w1Q`(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%w2_b(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#Y3g#Y#o0u#o~$e%w3rb(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#Z4z#Z#o0u#o~$e%w5Vb(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#]0u#]#^6_#^#o0u#o~$e%w6jb(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#b0u#b#c7r#c#o0u#o~$e%w7}b(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#Y9V#Y#o0u#o~$e%w9d`(aW'tQ&j$Z&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%w:qd(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#`0u#`#a<P#a#b0u#b#cCQ#c#o0u#o~$e%w<[d(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#]0u#]#^=j#^#g0u#g#h@^#h#o0u#o~$e%w=ub(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#Z>}#Z#o0u#o~$e%w?[`(aW'tQ&k!b&q$Z&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%w@ib(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#YAq#Y#o0u#o~$e%wBO`(aW'tQ&k!b&o$Z&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%wC]b(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#W0u#W#XDe#X#o0u#o~$e%wDpb(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#]0u#]#^Ex#^#o0u#o~$e%wFTb(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#ZG]#Z#o0u#o~$e%wGj`(aW'tQ&k!b&p$Z&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%wHwd(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#ZJV#Z#b0u#b#c!'e#c#o0u#o~$e%wJdd(aW'tQ&l$Z&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#W0u#W#XKr#X#b0u#b#c! y#c#o0u#o~$e%wK}b(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#YMV#Y#o0u#o~$e%wMbb(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#ZNj#Z#o0u#o~$e%wNw`(aW'tQ&m$Z&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%w!!Ub(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#W0u#W#X!#^#X#o0u#o~$e%w!#ib(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#Y!$q#Y#o0u#o~$e%w!$|b(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#Y0u#Y#Z!&U#Z#o0u#o~$e%w!&c`(aW'tQ&n$Z&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%w!'pb(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#V0u#V#W!(x#W#o0u#o~$e%w!)Tb(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#`0u#`#a!*]#a#o0u#o~$e%w!*hb(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#i0u#i#j!+p#j#o0u#o~$e%w!+{b(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#W0u#W#X!-T#X#o0u#o~$e%w!-`b(aW'tQ&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#X0u#X#Y!.h#Y#o0u#o~$e%w!.u`(aW'tQU$Z&k!b&r$ZOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![0u![!c$e!c!}0u!}#O$e#O#P&S#P#R$e#R#S0u#S#T$e#T#o0u#o~$e%s!0SY(aW'tQ!_$V&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P~$e%s!0}W!j$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s!1rZ(^$V(aW'tQ&k!bOY$eZr$ers%Wsv$evw!2ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P~$e%s!2pW(]$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%o!3eU(bS'tQ(`$V&k!bOY'SZr'Srs%qs#O'S#O#P&S#P~'S&i!4SW(aW'tQ[&_&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e!}!4wW{a(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s!5lY(Z$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P~$e%s!6g[(aW'tQ!]$V&k!bOY$eZr$ers%Wsw$ewx'Sx{$e{|!7]|!_$e!_!`!0r!`#O$e#O#P&S#P~$e%s!7hW(aW![$V'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%w!8]W!P$Z(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s!9Q](aW'tQ!]$V&k!bOY$eZr$ers%Wsw$ewx'Sx}$e}!O!7]!O!_$e!_!`!0r!`!a!9y!a#O$e#O#P&S#P~$e%s!:UW'|$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%w!:y[(aW'tQ'{$V&k!bOY$eZr$ers%Wsw$ewx'Sx!O$e!O!P!;o!P!Q$e!Q![!=]![#O$e#O#P&S#P~$e%w!;xY(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!O$e!O!P!<h!P#O$e#O#P&S#P~$e%w!<sW(U$Z(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s!=hl(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx!?`x!Q$e!Q![!=]![!g$e!g!h!Jp!h!i# o!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#X$e#X#Y!Jp#Y#Z# o#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%k!?gW'tQ&k!bOY'SZr'Srs%qs!Q'S!Q![!@P![#O'S#O#P&S#P~'S%k!@Yl'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx!?`x!Q'S!Q![!@P![!g'S!g!h!BQ!h!i!I_!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#X'S#X#Y!BQ#Y#Z!I_#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k!BZj'tQ!k$V&k!bOY'SZr'Srs%qs{'S{|!C{|!Q'S!Q![!Dx![!c'S!c!h!Dx!h!i!Dx!i!n'S!n!o!I_!o!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#Y!Dx#Y#Z!Dx#Z#`'S#`#a!I_#a#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%k!DS['tQ&k!bOY'SZr'Srs%qs!Q'S!Q![!Dx![!c'S!c!i!Dx!i#O'S#O#P&S#P#T'S#T#Z!Dx#Z~'S%k!ERh'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx!Fmx!Q'S!Q![!Dx![!c'S!c!h!Dx!h!i!Dx!i!n'S!n!o!I_!o!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#Y!Dx#Y#Z!Dx#Z#`'S#`#a!I_#a#i'S#i#j!I_#j~'S%k!Ft['tQ&k!bOY'SZr'Srs%qs!Q'S!Q![!Gj![!c'S!c!i!Gj!i#O'S#O#P&S#P#T'S#T#Z!Gj#Z~'S%k!Gsh'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx!Fmx!Q'S!Q![!Gj![!c'S!c!h!Gj!h!i!Gj!i!n'S!n!o!I_!o!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#Y!Gj#Y#Z!Gj#Z#`'S#`#a!I_#a#i'S#i#j!I_#j~'S%k!Ihb'tQ!k$V&k!bOY'SZr'Srs%qs!h'S!h!i!I_!i!n'S!n!o!I_!o!w'S!w!x!I_!x#O'S#O#P&S#P#Y'S#Y#Z!I_#Z#`'S#`#a!I_#a#i'S#i#j!I_#j~'S%s!J{l(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx'Sx{$e{|!Ls|!Q$e!Q![!Mx![!c$e!c!h!Mx!h!i!Mx!i!n$e!n!o# o!o!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#Y!Mx#Y#Z!Mx#Z#`$e#`#a# o#a#i$e#i#j# o#j?Ar$e?Ar?As!Ls?As~$e%s!L|^(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![!Mx![!c$e!c!i!Mx!i#O$e#O#P&S#P#T$e#T#Z!Mx#Z~$e%s!NTh(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx!Fmx!Q$e!Q![!Mx![!c$e!c!h!Mx!h!i!Mx!i!n$e!n!o# o!o!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#Y!Mx#Y#Z!Mx#Z#`$e#`#a# o#a#i$e#i#j# o#j~$e%s# zd(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx'Sx!h$e!h!i# o!i!n$e!n!o# o!o!w$e!w!x# o!x#O$e#O#P&S#P#Y$e#Y#Z# o#Z#`$e#`#a# o#a#i$e#i#j# o#j~$e%w##e^(aW'tQ!_$V&k!bOY$eZr$ers%Wsw$ewx'Sxz$ez{#$a{!P$e!P!Q#/W!Q!_$e!_!`!0r!`#O$e#O#P&S#P~$e%w#$jZ(aW'tQ&k!bOY#$aYZ#%]Zr#$ars#&Qsw#$awx#+Wxz#$az{#-a{#O#$a#O#P#(e#P~#$a$Z#%`ROz#%]z{#%i{~#%]$Z#%lTOz#%]z{#%i{!P#%]!P!Q#%{!Q~#%]$Z#&QOS$Z%u#&XX(aW&k!bOY#&QYZ#%]Zw#&Qwx#&txz#&Qz{#)q{#O#&Q#O#P#(e#P~#&Q%m#&yV&k!bOY#&tYZ#%]Zz#&tz{#'`{#O#&t#O#P#(e#P~#&t%m#'eX&k!bOY#&tYZ#%]Zz#&tz{#'`{!P#&t!P!Q#(Q!Q#O#&t#O#P#(e#P~#&t%m#(XSS$Z&k!bOY%qZ#O%q#O#P&S#P~%q%m#(jX&k!bOY#&tYZ#&tZ]#&t]^#)V^z#&tz{#'`{#O#&t#O#P#(e#P~#&t%m#)[V&k!bOY#&tYZ#&tZz#&tz{#'`{#O#&t#O#P#(e#P~#&t%u#)xZ(aW&k!bOY#&QYZ#%]Zw#&Qwx#&txz#&Qz{#)q{!P#&Q!P!Q#*k!Q#O#&Q#O#P#(e#P~#&Q%u#*tU(aWS$Z&k!bOY%WZw%Wwx%qx#O%W#O#P&S#P~%W%o#+_X'tQ&k!bOY#+WYZ#%]Zr#+Wrs#&tsz#+Wz{#+z{#O#+W#O#P#(e#P~#+W%o#,RZ'tQ&k!bOY#+WYZ#%]Zr#+Wrs#&tsz#+Wz{#+z{!P#+W!P!Q#,t!Q#O#+W#O#P#(e#P~#+W%o#,}U'tQS$Z&k!bOY'SZr'Srs%qs#O'S#O#P&S#P~'S%w#-j](aW'tQ&k!bOY#$aYZ#%]Zr#$ars#&Qsw#$awx#+Wxz#$az{#-a{!P#$a!P!Q#.c!Q#O#$a#O#P#(e#P~#$a%w#.nW(aW'tQS$Z&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%w#/cW(aW'tQR$Z&k!bOY#/WZr#/Wrs#/{sw#/Wwx#4Qx#O#/W#O#P#0{#P~#/W%u#0UU(aWR$Z&k!bOY#/{Zw#/{wx#0hx#O#/{#O#P#0{#P~#/{%m#0oSR$Z&k!bOY#0hZ#O#0h#O#P#0{#P~#0h%m#1SVR$Z&k!bOY#0hYZ%qZ]#0h]^#1i^#O#0h#O#P#2P#P~#0h%m#1pTR$Z&k!bOY#0hYZ%qZ#O#0h#O#P#0{#P~#0h%m#2WZR$Z&k!bOY#0hYZ%qZ]#0h]^#1i^#O#0h#O#P#2P#P#b#0h#b#c#0h#c#f#0h#f#g#2y#g~#0h%m#3QSR$Z&k!bOY#0hZ#O#0h#O#P#3^#P~#0h%m#3eXR$Z&k!bOY#0hYZ%qZ]#0h]^#1i^#O#0h#O#P#2P#P#b#0h#b#c#0h#c~#0h%o#4ZU'tQR$Z&k!bOY#4QZr#4Qrs#0hs#O#4Q#O#P#0{#P~#4Q%s#4xr(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx#7Sx!O$e!O!P$+X!P!Q$e!Q![$6p![!g$e!g!h!Jp!h!i# o!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#U$e#U#V$8y#V#X$e#X#Y!Jp#Y#Z# o#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j#l$e#l#m%:Z#m~$e%k#7ZW'tQ&k!bOY'SZr'Srs%qs!Q'S!Q![#7s![#O'S#O#P&S#P~'S%k#7|n'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#7Sx!O'S!O!P#9z!P!Q'S!Q![#7s![!g'S!g!h!BQ!h!i!I_!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#X'S#X#Y!BQ#Y#Z!I_#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k#:Tl'tQ!k$V&k!bOY'SZr'Srs%qs!Q'S!Q![#;{![!c'S!c!g#;{!g!h$$Y!h!i#;{!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X#;{#X#Y$$Y#Y#Z#;{#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k#<Un'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#>Sx!Q'S!Q![#;{![!c'S!c!g#;{!g!h$$Y!h!i#;{!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X#;{#X#Y$$Y#Y#Z#;{#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k#>Z['tQ&k!bOY'SZr'Srs%qs!Q'S!Q![#?P![!c'S!c!i#?P!i#O'S#O#P&S#P#T'S#T#Z#?P#Z~'S%k#?Yn'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#>Sx!Q'S!Q![#?P![!c'S!c!g#?P!g!h#AW!h!i#?P!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X#?P#X#Y#AW#Y#Z#?P#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k#Aar'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#>Sx{'S{|!C{|!Q'S!Q![#Ck![!c'S!c!g#Ck!g!h$ u!h!i#Ck!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X#Ck#X#Y$ u#Y#Z#Ck#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%k#Ctn'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#Erx!Q'S!Q![#Ck![!c'S!c!g#Ck!g!h$ u!h!i#Ck!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X#Ck#X#Y$ u#Y#Z#Ck#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k#Ey['tQ&k!bOY'SZr'Srs%qs!Q'S!Q![#Fo![!c'S!c!i#Fo!i#O'S#O#P&S#P#T'S#T#Z#Fo#Z~'S%k#Fxn'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#Erx!Q'S!Q![#Fo![!c'S!c!g#Fo!g!h#Hv!h!i#Fo!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X#Fo#X#Y#Hv#Y#Z#Fo#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k#IPr'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#Erx{'S{|!C{|!Q'S!Q![#KZ![!c'S!c!g#KZ!g!h#Mb!h!i#KZ!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X#KZ#X#Y#Mb#Y#Z#KZ#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%k#Kdn'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#Erx!Q'S!Q![#KZ![!c'S!c!g#KZ!g!h#Mb!h!i#KZ!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X#KZ#X#Y#Mb#Y#Z#KZ#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k#Mkr'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#Erx{'S{|!C{|!Q'S!Q![#KZ![!c'S!c!g#KZ!g!h#Mb!h!i#KZ!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X#KZ#X#Y#Mb#Y#Z#KZ#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%k$!Or'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#Erx{'S{|!C{|!Q'S!Q![#Ck![!c'S!c!g#Ck!g!h$ u!h!i#Ck!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X#Ck#X#Y$ u#Y#Z#Ck#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%k$$cr'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#>Sx{'S{|!C{|!Q'S!Q![$&m![!c'S!c!g$&m!g!h$(t!h!i$&m!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X$&m#X#Y$(t#Y#Z$&m#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%k$&vn'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#Erx!Q'S!Q![$&m![!c'S!c!g$&m!g!h$(t!h!i$&m!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X$&m#X#Y$(t#Y#Z$&m#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k$(}r'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx#Erx{'S{|!C{|!Q'S!Q![$&m![!c'S!c!g$&m!g!h$(t!h!i$&m!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X$&m#X#Y$(t#Y#Z$&m#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%s$+dn(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$-b![!c$e!c!g$-b!g!h$/k!h!i$-b!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X$-b#X#Y$/k#Y#Z$-b#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%s$-mn(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx#>Sx!Q$e!Q![$-b![!c$e!c!g$-b!g!h$/k!h!i$-b!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X$-b#X#Y$/k#Y#Z$-b#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%s$/vr(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx#>Sx{$e{|!Ls|!Q$e!Q![$2Q![!c$e!c!g$2Q!g!h$4Z!h!i$2Q!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X$2Q#X#Y$4Z#Y#Z$2Q#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j?Ar$e?Ar?As!Ls?As~$e%s$2]n(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx#Erx!Q$e!Q![$2Q![!c$e!c!g$2Q!g!h$4Z!h!i$2Q!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X$2Q#X#Y$4Z#Y#Z$2Q#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%s$4fr(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx#Erx{$e{|!Ls|!Q$e!Q![$2Q![!c$e!c!g$2Q!g!h$4Z!h!i$2Q!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X$2Q#X#Y$4Z#Y#Z$2Q#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j?Ar$e?Ar?As!Ls?As~$e%s$6{n(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx#7Sx!O$e!O!P$+X!P!Q$e!Q![$6p![!g$e!g!h!Jp!h!i# o!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#X$e#X#Y!Jp#Y#Z# o#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%s$9S](aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!O$e!O!P$9{!P!Q$e!Q!R$:t!R![$@R![#O$e#O#P&S#P~$e%s$:UY(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![!=]![#O$e#O#P&S#P~$e%s$;Pr(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx$=Zx!O$e!O!P$+X!P!Q$e!Q![$@R![!g$e!g!h!Jp!h!i# o!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#U$e#U#V$B[#V#X$e#X#Y!Jp#Y#Z# o#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j#l$e#l#m$HU#m~$e%k$=bW'tQ&k!bOY'SZr'Srs%qs!Q'S!Q![$=z![#O'S#O#P&S#P~'S%k$>Tn'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx$=Zx!O'S!O!P#9z!P!Q'S!Q![$=z![!g'S!g!h!BQ!h!i!I_!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#X'S#X#Y!BQ#Y#Z!I_#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%s$@^n(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx$=Zx!O$e!O!P$+X!P!Q$e!Q![$@R![!g$e!g!h!Jp!h!i# o!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#X$e#X#Y!Jp#Y#Z# o#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%s$BeY(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$CT![#O$e#O#P&S#P~$e%s$C`n(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx$E^x!O$e!O!P$+X!P!Q$e!Q![$CT![!g$e!g!h!Jp!h!i# o!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#X$e#X#Y!Jp#Y#Z# o#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%k$EeW'tQ&k!bOY'SZr'Srs%qs!Q'S!Q![$E}![#O'S#O#P&S#P~'S%k$FWn'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx$E^x!O'S!O!P#9z!P!Q'S!Q![$E}![!g'S!g!h!BQ!h!i!I_!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#X'S#X#Y!BQ#Y#Z!I_#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%s$H_^(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![$IZ![!c$e!c!i$IZ!i#O$e#O#P&S#P#T$e#T#Z$IZ#Z~$e%s$Ifp(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx$Kjx!O$e!O!P$+X!P!Q$e!Q![$IZ![!c$e!c!g$IZ!g!h%2r!h!i$IZ!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X$IZ#X#Y%2r#Y#Z$IZ#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%k$Kq['tQ&k!bOY'SZr'Srs%qs!Q'S!Q![$Lg![!c'S!c!i$Lg!i#O'S#O#P&S#P#T'S#T#Z$Lg#Z~'S%k$Lpp'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx$Kjx!O'S!O!P#9z!P!Q'S!Q![$Lg![!c'S!c!g$Lg!g!h$Nt!h!i$Lg!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X$Lg#X#Y$Nt#Y#Z$Lg#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k$N}t'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx$Kjx{'S{|!C{|!O'S!O!P#9z!P!Q'S!Q![%#_![!c'S!c!g%#_!g!h%0X!h!i%#_!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X%#_#X#Y%0X#Y#Z%#_#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%k%#hp'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx%%lx!O'S!O!P#9z!P!Q'S!Q![%#_![!c'S!c!g%#_!g!h%0X!h!i%#_!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X%#_#X#Y%0X#Y#Z%#_#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k%%s['tQ&k!bOY'SZr'Srs%qs!Q'S!Q![%&i![!c'S!c!i%&i!i#O'S#O#P&S#P#T'S#T#Z%&i#Z~'S%k%&rp'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx%%lx!O'S!O!P#9z!P!Q'S!Q![%&i![!c'S!c!g%&i!g!h%(v!h!i%&i!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X%&i#X#Y%(v#Y#Z%&i#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k%)Pt'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx%%lx{'S{|!C{|!O'S!O!P#9z!P!Q'S!Q![%+a![!c'S!c!g%+a!g!h%-n!h!i%+a!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X%+a#X#Y%-n#Y#Z%+a#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%k%+jp'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx%%lx!O'S!O!P#9z!P!Q'S!Q![%+a![!c'S!c!g%+a!g!h%-n!h!i%+a!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X%+a#X#Y%-n#Y#Z%+a#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%k%-wt'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx%%lx{'S{|!C{|!O'S!O!P#9z!P!Q'S!Q![%+a![!c'S!c!g%+a!g!h%-n!h!i%+a!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X%+a#X#Y%-n#Y#Z%+a#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%k%0bt'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx%%lx{'S{|!C{|!O'S!O!P#9z!P!Q'S!Q![%#_![!c'S!c!g%#_!g!h%0X!h!i%#_!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X%#_#X#Y%0X#Y#Z%#_#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j?Ar'S?Ar?As!C{?As~'S%s%2}t(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx$Kjx{$e{|!Ls|!O$e!O!P$+X!P!Q$e!Q![%5_![!c$e!c!g%5_!g!h%7n!h!i%5_!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X%5_#X#Y%7n#Y#Z%5_#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j?Ar$e?Ar?As!Ls?As~$e%s%5jp(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx%%lx!O$e!O!P$+X!P!Q$e!Q![%5_![!c$e!c!g%5_!g!h%7n!h!i%5_!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X%5_#X#Y%7n#Y#Z%5_#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%s%7yt(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx%%lx{$e{|!Ls|!O$e!O!P$+X!P!Q$e!Q![%5_![!c$e!c!g%5_!g!h%7n!h!i%5_!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X%5_#X#Y%7n#Y#Z%5_#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j?Ar$e?Ar?As!Ls?As~$e%s%:da(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!O$e!O!P$9{!P!Q$e!Q!R%;i!R![%A`![!c$e!c!i$IZ!i#O$e#O#P&S#P#T$e#T#Z$IZ#Z~$e%s%;tt(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx%>Ux!O$e!O!P$+X!P!Q$e!Q![%A`![!c$e!c!g$IZ!g!h%2r!h!i$IZ!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#U$IZ#U#V%Co#V#X$IZ#X#Y%2r#Y#Z$IZ#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j#l$e#l#m$HU#m~$e%k%>]['tQ&k!bOY'SZr'Srs%qs!Q'S!Q![%?R![!c'S!c!i$Lg!i#O'S#O#P&S#P#T'S#T#Z$Lg#Z~'S%k%?[p'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx%>Ux!O'S!O!P#9z!P!Q'S!Q![%?R![!c'S!c!g$Lg!g!h$Nt!h!i$Lg!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X$Lg#X#Y$Nt#Y#Z$Lg#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%s%Akp(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx%>Ux!O$e!O!P$+X!P!Q$e!Q![%A`![!c$e!c!g$IZ!g!h%2r!h!i$IZ!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X$IZ#X#Y%2r#Y#Z$IZ#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%s%Czp(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx$Kjx!O$e!O!P$+X!P!Q$e!Q![%FO![!c$e!c!g$IZ!g!h%2r!h!i$IZ!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X$IZ#X#Y%2r#Y#Z$IZ#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%s%FZp(aW'tQ!k$V&k!bOY$eZr$ers%Wsw$ewx%H_x!O$e!O!P$+X!P!Q$e!Q![%FO![!c$e!c!g$IZ!g!h%2r!h!i$IZ!i!n$e!n!o# o!o!r$e!r!s!Jp!s!w$e!w!x# o!x#O$e#O#P&S#P#T$e#T#X$IZ#X#Y%2r#Y#Z$IZ#Z#`$e#`#a# o#a#d$e#d#e!Jp#e#i$e#i#j# o#j~$e%k%Hf['tQ&k!bOY'SZr'Srs%qs!Q'S!Q![%I[![!c'S!c!i$Lg!i#O'S#O#P&S#P#T'S#T#Z$Lg#Z~'S%k%Iep'tQ!k$V&k!bOY'SZr'Srs%qsw'Swx%H_x!O'S!O!P#9z!P!Q'S!Q![%I[![!c'S!c!g$Lg!g!h$Nt!h!i$Lg!i!n'S!n!o!I_!o!r'S!r!s!BQ!s!w'S!w!x!I_!x#O'S#O#P&S#P#T'S#T#X$Lg#X#Y$Nt#Y#Z$Lg#Z#`'S#`#a!I_#a#d'S#d#e!BQ#e#i'S#i#j!I_#j~'S%w%KtY'z$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx![$e![!]%Ld!]#O$e#O#P&S#P~$e%w%LoWk$Z(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s%MdW(_$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e&e%NX[o$V(aW'tQ&k!bOY%N}Zr%N}rs& vsw%N}wx&%vx!^%N}!^!_&'w!_!`&)p!`!a&'S!a#O%N}#O#P&#c#P~%N}#^& WY(aW'tQ&k!bOY%N}Zr%N}rs& vsw%N}wx&%vx!`%N}!`!a&'S!a#O%N}#O#P&#c#P~%N}#[& }W(aW&k!bOY& vZw& vwx&!gx!`& v!`!a&%Z!a#O& v#O#P&#c#P~& v#S&!lU&k!bOY&!gZ!`&!g!`!a&#O!a#O&!g#O#P&#c#P~&!g#S&#VSXp&k!bOY%qZ#O%q#O#P&S#P~%q#S&#hV&k!bOY&!gYZ&!gZ]&!g]^&#}^#O&!g#O#P&$i#P~&!g#S&$SV&k!bOY&!gYZ%qZ!`&!g!`!a&#O!a#O&!g#O#P&#c#P~&!g#S&$nX&k!bOY&!gYZ%qZ]&!g]^&#}^!`&!g!`!a&#O!a#O&!g#O#P&#c#P~&!g#[&%dUXp(aW&k!bOY%WZw%Wwx%qx#O%W#O#P&S#P~%W#U&%}W'tQ&k!bOY&%vZr&%vrs&!gs!`&%v!`!a&&g!a#O&%v#O#P&#c#P~&%v#U&&pUXp'tQ&k!bOY'SZr'Srs%qs#O'S#O#P&S#P~'S#^&'_WXp(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e&e&(SZ(aW'tQ&k!b!i$VOY%N}Zr%N}rs& vsw%N}wx&%vx!_%N}!_!`&(u!`!a&'S!a#O%N}#O#P&#c#P~%N}&e&)QY!j$V(aW'tQ&k!bOY%N}Zr%N}rs& vsw%N}wx&%vx!`%N}!`!a&'S!a#O%N}#O#P&#c#P~%N}&e&){Y!e$V(aW'tQ&k!bOY%N}Zr%N}rs& vsw%N}wx&%vx!`%N}!`!a&'S!a#O%N}#O#P&#c#P~%N}%s&*vY(lP(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`-z!`#O$e#O#P&S#P~$e%s&+qZ(aW'tQ!g$V&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`&,d!`!a&-X!a#O$e#O#P&S#P~$e%s&,oW!e$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s&-dY(aW'tQ&k!b!i$VOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P~$e!m&._W'yP(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e&i&/W`(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#o&.w#o~$e&i&0i`(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers&1ksw$ewx&2Wx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#o&.w#o~$e&c&1tU(aW's$w&k!bOY%WZw%Wwx%qx#O%W#O#P&S#P~%W%k&2aU'tQ(`$V&k!bOY'SZr'Srs%qs#O'S#O#P&S#P~'S&i&3S`(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers&1ksw$ewx&2Wx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#o&.w#o~$e%s&4aX!Y$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx!}$e!}#O&4|#O#P&S#P~$e!m&5XW(WP(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%w&5v_&k!bOY&6uYZ&7YZ]&6u]^&8R^!Q&6u!Q![&8i![!w&6u!w!x&9m!x#O&6u#O#P&?q#P#i&6u#i#j&@_#j#l&6u#l#m&Ca#m~&6u!l&6|SWY&k!bOY%qZ#O%q#O#P&S#P~%q%w&7cYWY'r$Z&k!bOX%qXY+^YZ(vZ]%q]^+^^p%qpq+^q#O%q#O#P*r#P~%q%w&8YTWY&k!bOY%qYZ+^Z#O%q#O#P&S#P~%q!l&8pUWY&k!bOY%qZ!Q%q!Q![&9S![#O%q#O#P&S#P~%q!l&9ZUWY&k!bOY%qZ!Q%q!Q![&6u![#O%q#O#P&S#P~%q!l&9rY&k!bOY%qZ!Q%q!Q![&:b![!c%q!c!i&:b!i#O%q#O#P&S#P#T%q#T#Z&:b#Z~%q!l&:gY&k!bOY%qZ!Q%q!Q![&;V![!c%q!c!i&;V!i#O%q#O#P&S#P#T%q#T#Z&;V#Z~%q!l&;[Y&k!bOY%qZ!Q%q!Q![&;z![!c%q!c!i&;z!i#O%q#O#P&S#P#T%q#T#Z&;z#Z~%q!l&<PY&k!bOY%qZ!Q%q!Q![&<o![!c%q!c!i&<o!i#O%q#O#P&S#P#T%q#T#Z&<o#Z~%q!l&<tY&k!bOY%qZ!Q%q!Q![&=d![!c%q!c!i&=d!i#O%q#O#P&S#P#T%q#T#Z&=d#Z~%q!l&=iY&k!bOY%qZ!Q%q!Q![&>X![!c%q!c!i&>X!i#O%q#O#P&S#P#T%q#T#Z&>X#Z~%q!l&>^Y&k!bOY%qZ!Q%q!Q![&>|![!c%q!c!i&>|!i#O%q#O#P&S#P#T%q#T#Z&>|#Z~%q!l&?RY&k!bOY%qZ!Q%q!Q![&6u![!c%q!c!i&6u!i#O%q#O#P&S#P#T%q#T#Z&6u#Z~%q!l&?xVWY&k!bOY%qYZ%qZ]%q]^&n^#O%q#O#P&S#P~%q!l&@dY&k!bOY%qZ!Q%q!Q![&AS![!c%q!c!i&AS!i#O%q#O#P&S#P#T%q#T#Z&AS#Z~%q!l&AXY&k!bOY%qZ!Q%q!Q![&Aw![!c%q!c!i&Aw!i#O%q#O#P&S#P#T%q#T#Z&Aw#Z~%q!l&A|Y&k!bOY%qZ!Q%q!Q![&Bl![!c%q!c!i&Bl!i#O%q#O#P&S#P#T%q#T#Z&Bl#Z~%q!l&BqY&k!bOY%qZ!Q%q!Q![&6u![!c%q!c!i&6u!i#O%q#O#P&S#P#T%q#T#Z&6u#Z~%q!l&CfY&k!bOY%qZ!Q%q!Q![&DU![!c%q!c!i&DU!i#O%q#O#P&S#P#T%q#T#Z&DU#Z~%q!l&DZY&k!bOY%qZ!Q%q!Q![&Dy![!c%q!c!i&Dy!i#O%q#O#P&S#P#T%q#T#Z&Dy#Z~%q!l&EQYWY&k!bOY%qZ!Q%q!Q![&Dy![!c%q!c!i&Dy!i#O%q#O#P&S#P#T%q#T#Z&Dy#Z~%q%w&E{X!Z#u(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P#Q&Fh#Q~$e#Q&FsW(cd(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s&GhY(aW'tQ&k!b!b$VOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P~$e&i&Hgb(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#d&.w#d#e&Io#e#o&.w#o~$e&i&JOb(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#X&.w#X#Y&KW#Y#o&.w#o~$e&i&Kgb(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#f&.w#f#g&Lo#g#o&.w#o~$e&i&MOa(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#U&NT#U#o&.w#o~$e&i&Ndb(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#h&.w#h#i' l#i#o&.w#o~$e&i' {b(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#c&.w#c#d'#T#d#o&.w#o~$e&i'#db(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#f&.w#f#g'$l#g#o&.w#o~$e&i'${s(aW'tQ!V$U'vq'}S&k!bOY$eZq$eqr''Yrs%Wsu$euv'(xvw')swx'Sxy'*qyz$ez{'(x{|'(x|}$e}!O'+j!O!P$e!P!Q'(x!Q![&.w![!^$e!^!_',h!_!`''Y!`!a'-f!a!c$e!c!}&.w!}#O'.d#O#P&S#P#Q$e#Q#R'(x#R#S&.w#S#T$e#T#o&.w#o#p$e#p#q'/Y#q#r$e#r#s'(T#s~$e!q''eY(aW'tQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`'(T!`#O$e#O#P&S#P~$e!q'(`W(aW'tQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e!q')TY(aW'tQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`'(T!`#O$e#O#P&S#P~$e!q'*OZ(aW'tQ#`T&k!bOY$eZr$ers%Wsv$evw'(Twx'Sx!_$e!_!`'(T!`#O$e#O#P&S#P~$e!q'*zY(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sxy$eyz'(Tz#O$e#O#P&S#P~$e!q'+uZ(aW'tQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`'(T!`!a'(T!a#O$e#O#P&S#P~$e!q',sZ(aW'tQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!^$e!^!_'(x!_!`'(T!`#O$e#O#P&S#P~$e!q'-qZ(aW'tQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`'(T!`!a'(x!a#O$e#O#P&S#P~$e!q'.mX(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P#Q'(T#Q~$e!q'/e[(aW'tQ#`T&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`'(T!`#O$e#O#P&S#P#p$e#p#q'(T#q~$e&i'0jb(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers&1ksw$ewx&2Wx!Q$e!Q!Y&.w!Y!Z'1r!Z![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#o&.w#o~$e&i'2R`(aW'tQ!V$U'vq'}S&k!bOY$eZr$ers&1ksw$ewx&2Wx!Q$e!Q![&.w![!c$e!c!}&.w!}#O$e#O#P&S#P#R$e#R#S&.w#S#T$e#T#o&.w#o~$e%s'3`W!R$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e%s'4T[(aW'tQ!a$V&k!bOY$eZr$ers%Wsw$ewx'Sx!_$e!_!`!0r!`#O$e#O#P&S#P#p$e#p#q'4y#q~$e%s'5UW([$V(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e!}'5yW!Xa(aW'tQ&k!bOY$eZr$ers%Wsw$ewx'Sx#O$e#O#P&S#P~$e!q'6na(aW'tQ&UP&k!bOX$eXY'7sZp$epq'7sqr$ers%Wsw$ewx'Sx!c$e!c!}'9R!}#O$e#O#P&S#P#R$e#R#S'9R#S#T$e#T#o'9R#o~$e!q'7|a(aW'tQ&k!bOX$eXY'7sZp$epq'7sqr$ers%Wsw$ewx'Sx!c$e!c!}'9R!}#O$e#O#P&S#P#R$e#R#S'9R#S#T$e#T#o'9R#o~$e!q'9^`(aW'tQcT&k!bOY$eZr$ers%Wsw$ewx'Sx!Q$e!Q!['9R![!c$e!c!}'9R!}#O$e#O#P&S#P#R$e#R#S'9R#S#T$e#T#o'9R#o~$e",
      tokenizers: [rawString, rawStringContinue, fallback, 0, 1, 2, 3, 4, 5, 6, 7],
      topRules: {"Program":[0,266]},
      dynamicPrecedences: {"84":1,"91":1,"98":1,"104":-10,"105":1,"110":-1,"116":-10,"117":1,"172":1,"175":-10,"221":-1,"225":2,"226":2,"265":-10,"323":3,"367":1,"368":3,"369":1,"370":1},
      specialized: [{term: 314, get: value => spec_identifier[value] || -1},{term: 31, get: value => spec_[value] || -1},{term: 69, get: value => spec_templateArgsEnd[value] || -1},{term: 321, get: value => spec_scopedIdentifier[value] || -1}],
      tokenPrec: 22015
    });

    let nextTagID$1 = 0;
    /// Highlighting tags are markers that denote a highlighting category.
    /// They are [associated](#highlight.styleTags) with parts of a syntax
    /// tree by a language mode, and then mapped to an actual CSS style by
    /// a [highlight style](#highlight.highlightStyle).
    ///
    /// CodeMirror uses a mostly-closed set of tags for generic
    /// highlighters, so that the list of things that a theme must style
    /// is clear and bounded (as opposed to traditional open string-based
    /// systems, which make it hard for highlighting themes to cover all
    /// the tokens produced by the various languages).
    ///
    /// It _is_ possible to [define](#highlight.Tag^define) your own
    /// highlighting tags for system-internal use (where you control both
    /// the language package and the highlighter), but such tags will not
    /// be picked up by other highlighters (though you can derive them
    /// from standard tags to allow the highlighters to fall back to
    /// those).
    class Tag$1 {
        /// @internal
        constructor(
        /// The set of tags that match this tag, starting with this one
        /// itself, sorted in order of decreasing specificity. @internal
        set, 
        /// The base unmodified tag that this one is based on, if it's
        /// modified @internal
        base, 
        /// The modifiers applied to this.base @internal
        modified) {
            this.set = set;
            this.base = base;
            this.modified = modified;
            /// @internal
            this.id = nextTagID$1++;
        }
        /// Define a new tag. If `parent` is given, the tag is treated as a
        /// sub-tag of that parent, and [highlight
        /// styles](#highlight.highlightStyle) that don't mention this tag
        /// will try to fall back to the parent tag (or grandparent tag,
        /// etc).
        static define(parent) {
            if (parent === null || parent === void 0 ? void 0 : parent.base)
                throw new Error("Can not derive from a modified tag");
            let tag = new Tag$1([], null, []);
            tag.set.push(tag);
            if (parent)
                for (let t of parent.set)
                    tag.set.push(t);
            return tag;
        }
        /// Define a tag _modifier_, which is a function that, given a tag,
        /// will return a tag that is a subtag of the original. Applying the
        /// same modifier to a twice tag will return the same value (`m1(t1)
        /// == m1(t1)`) and applying multiple modifiers will, regardless or
        /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
        ///
        /// When multiple modifiers are applied to a given base tag, each
        /// smaller set of modifiers is registered as a parent, so that for
        /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        /// `m1(m3(t1)`, and so on.
        static defineModifier() {
            let mod = new Modifier$1;
            return (tag) => {
                if (tag.modified.indexOf(mod) > -1)
                    return tag;
                return Modifier$1.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
            };
        }
    }
    let nextModifierID$1 = 0;
    class Modifier$1 {
        constructor() {
            this.instances = [];
            this.id = nextModifierID$1++;
        }
        static get(base, mods) {
            if (!mods.length)
                return base;
            let exists = mods[0].instances.find(t => t.base == base && sameArray$3(mods, t.modified));
            if (exists)
                return exists;
            let set = [], tag = new Tag$1(set, base, mods);
            for (let m of mods)
                m.instances.push(tag);
            let configs = permute$1(mods);
            for (let parent of base.set)
                for (let config of configs)
                    set.push(Modifier$1.get(parent, config));
            return tag;
        }
    }
    function sameArray$3(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
    }
    function permute$1(array) {
        let result = [array];
        for (let i = 0; i < array.length; i++) {
            for (let a of permute$1(array.slice(0, i).concat(array.slice(i + 1))))
                result.push(a);
        }
        return result;
    }
    /// This function is used to add a set of tags to a language syntax
    /// via
    /// [`Parser.withProps`](https://lezer.codemirror.net/docs/ref#lezer.Parser.withProps).
    ///
    /// The argument object maps node selectors to [highlighting
    /// tags](#highlight.Tag) or arrays of tags.
    ///
    /// Node selectors may hold one or more (space-separated) node paths.
    /// Such a path can be a [node
    /// name](https://lezer.codemirror.net/docs/ref#tree.NodeType.name),
    /// or multiple node names (or `*` wildcards) separated by slash
    /// characters, as in `"Block/Declaration/VariableName"`. Such a path
    /// matches the final node but only if its direct parent nodes are the
    /// other nodes mentioned. A `*` in such a path matches any parent,
    /// but only a single level—wildcards that match multiple parents
    /// aren't supported, both for efficiency reasons and because Lezer
    /// trees make it rather hard to reason about what they would match.)
    ///
    /// A path can be ended with `/...` to indicate that the tag assigned
    /// to the node should also apply to all parent nodes, even if they
    /// match their own style (by default, only the innermost style is
    /// used).
    ///
    /// When a path ends in `!`, as in `Attribute!`, no further matching
    /// happens for the node's child nodes, and the entire node gets the
    /// given style.
    ///
    /// In this notation, node names that contain `/`, `!`, `*`, or `...`
    /// must be quoted as JSON strings.
    ///
    /// For example:
    ///
    /// ```javascript
    /// parser.withProps(
    ///   styleTags({
    ///     // Style Number and BigNumber nodes
    ///     "Number BigNumber": tags.number,
    ///     // Style Escape nodes whose parent is String
    ///     "String/Escape": tags.escape,
    ///     // Style anything inside Attributes nodes
    ///     "Attributes!": tags.meta,
    ///     // Add a style to all content inside Italic nodes
    ///     "Italic/...": tags.emphasis,
    ///     // Style InvalidString nodes as both `string` and `invalid`
    ///     "InvalidString": tags.string + tags.invalid,
    ///     // Style the node named "/" as punctuation
    ///     '"/"': tags.punctuation
    ///   })
    /// )
    /// ```
    function styleTags(spec) {
        let byName = Object.create(null);
        for (let prop in spec) {
            let tags = spec[prop];
            if (!Array.isArray(tags))
                tags = [tags];
            for (let part of prop.split(" "))
                if (part) {
                    let pieces = [], mode = 2 /* Normal */;
                    for (let pos = 0; pos < part.length;) {
                        let rest = part.slice(pos);
                        if (rest == "/...") {
                            mode = 1 /* Inherit */;
                            break;
                        }
                        if (rest == "!") {
                            mode = 0 /* Opaque */;
                            break;
                        }
                        let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                        if (!m)
                            throw new RangeError("Invalid path: " + part);
                        pieces.push(m[0] == "*" ? null : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                        pos += m[0].length + 1;
                        if (pos <= part.length && part[pos - 1] != "/")
                            throw new RangeError("Invalid path: " + part);
                    }
                    let last = pieces.length - 1, inner = pieces[last];
                    if (!inner)
                        throw new RangeError("Invalid path: " + part);
                    let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                    byName[inner] = rule.sort(byName[inner]);
                }
        }
        return ruleNodeProp$1.add(byName);
    }
    const ruleNodeProp$1 = new NodeProp();
    const highlightStyleProp$1 = Facet.define({
        combine(stylings) { return stylings.length ? stylings[0] : null; }
    });
    /// Create a highlighter style that associates the given styles to the
    /// given tags. The spec's property names must be
    /// [tags](#highlight.Tag) or lists of tags (which can be concatenated
    /// with `+`). The values should be
    /// [`style-mod`](https://github.com/marijnh/style-mod#documentation)
    /// style objects that define the CSS for that tag.
    ///
    /// The CSS rules created for a highlighter will be emitted in the
    /// order of the spec's properties. That means that for elements that
    /// have multiple tags associated with them, styles defined further
    /// down in the list will have a higher CSS precedence than styles
    /// defined earlier.
    function highlightStyle$1(...specs) {
        let styling = new Styling$1(specs);
        return [
            highlightStyleProp$1.of(styling),
            EditorView$1.styleModule.of(styling.module)
        ];
    }
    class Rule {
        constructor(tags, mode, context, next) {
            this.tags = tags;
            this.mode = mode;
            this.context = context;
            this.next = next;
        }
        sort(other) {
            if (!other || other.depth < this.depth) {
                this.next = other;
                return this;
            }
            other.next = this.sort(other.next);
            return other;
        }
        get depth() { return this.context ? this.context.length : 0; }
    }
    class Styling$1 {
        constructor(spec) {
            this.map = Object.create(null);
            let modSpec = Object.create(null);
            for (let style of spec) {
                let cls = StyleModule$1.newName();
                modSpec["." + cls] = Object.assign({}, style, { tag: null });
                let tags = style.tag;
                if (!Array.isArray(tags))
                    tags = [tags];
                for (let tag of tags)
                    this.map[tag.id] = cls;
            }
            this.module = new StyleModule$1(modSpec);
        }
        match(tag) {
            for (let t of tag.set) {
                let match = this.map[t.id];
                if (match) {
                    if (t != tag)
                        this.map[tag.id] = match;
                    return match;
                }
            }
            return this.map[tag.id] = null;
        }
    }
    /// Returns an extension that installs a highlighter that uses the
    /// tree produced by the given syntax, along with the current
    /// [highlight style](#highlight.highlightStyle), to style the
    /// document. If no highlight style is active, this plugin won't do
    /// any highlighting.
    function treeHighlighter(syntax) {
        return precedence(ViewPlugin$1.define(view => new TreeHighlighter(view, syntax), {
            decorations: v => v.decorations
        }), "fallback");
    }
    class TreeHighlighter {
        constructor(view, syntax) {
            this.syntax = syntax;
            // Reused stacks for buildDeco
            this.nodeStack = [""];
            this.classStack = [""];
            this.inheritStack = [""];
            this.markCache = Object.create(null);
            this.tree = syntax.getTree(view.state);
            this.decorations = this.buildDeco(view);
        }
        update(update) {
            if (this.syntax.parsePos(update.state) < update.view.viewport.to) {
                this.decorations = this.decorations.map(update.changes);
            }
            else {
                let tree = this.syntax.getTree(update.state);
                if (tree != this.tree || update.viewportChanged) {
                    this.tree = tree;
                    this.decorations = this.buildDeco(update.view);
                }
            }
        }
        buildDeco(view) {
            const style = view.state.facet(highlightStyleProp$1);
            if (!style)
                return Decoration$1.none;
            let builder = new RangeSetBuilder();
            let start, curClass, depth;
            let flush = (pos, style) => {
                if (pos > start && style) {
                    let mark = this.markCache[style] || (this.markCache[style] = Decoration$1.mark({ class: style }));
                    builder.add(start, pos, mark);
                }
                start = pos;
            };
            let { nodeStack, classStack, inheritStack } = this;
            for (let { from, to } of view.visibleRanges) {
                curClass = "";
                depth = 0;
                start = from;
                this.tree.iterate({
                    from, to,
                    enter: (type, start) => {
                        depth++;
                        let inheritedClass = inheritStack[depth - 1];
                        let cls = inheritedClass;
                        let rule = type.prop(ruleNodeProp$1), opaque = false;
                        while (rule) {
                            if (!rule.context || matchContext(rule.context, nodeStack, depth)) {
                                for (let tag of rule.tags) {
                                    let st = style.match(tag);
                                    if (st) {
                                        if (cls)
                                            cls += " ";
                                        cls += st;
                                        if (rule.mode == 1 /* Inherit */)
                                            inheritedClass = cls;
                                        else if (rule.mode == 0 /* Opaque */)
                                            opaque = true;
                                    }
                                }
                                break;
                            }
                            rule = rule.next;
                        }
                        if (cls != curClass) {
                            flush(start, curClass);
                            curClass = cls;
                        }
                        if (opaque) {
                            depth--;
                            return false;
                        }
                        classStack[depth] = cls;
                        inheritStack[depth] = inheritedClass;
                        nodeStack[depth] = type.name;
                        return undefined;
                    },
                    leave: (_t, _s, end) => {
                        depth--;
                        let backTo = classStack[depth];
                        if (backTo != curClass) {
                            flush(Math.min(to, end), curClass);
                            curClass = backTo;
                        }
                    }
                });
            }
            return builder.finish();
        }
    }
    function matchContext(context, stack, depth) {
        if (context.length > depth - 1)
            return false;
        for (let d = depth - 1, i = context.length - 1; i >= 0; i--, d--) {
            let check = context[i];
            if (check && check != stack[d])
                return false;
        }
        return true;
    }
    const t$1 = Tag$1.define;
    const comment$1 = t$1(), name$1 = t$1(), literal$1 = t$1(), string$1 = t$1(literal$1), number$1 = t$1(literal$1), content$1 = t$1(), heading$1 = t$1(content$1), keyword$1 = t$1(), operator$1 = t$1(), punctuation$1 = t$1(), bracket$1 = t$1(punctuation$1), meta$1 = t$1();
    /// The default set of highlighting [tags](#highlight.Tag^define) used
    /// by regular language packages and themes.
    ///
    /// This collection is heavily biasted towards programming language,
    /// and necessarily incomplete. A full ontology of syntactic
    /// constructs would fill a stack of books, and be impractical to
    /// write themes for. So try to make do with this set, possibly
    /// encoding more information with flags. If all else fails, [open an
    /// issue](https://github.com/codemirror/codemirror.next) to propose a
    /// new type, or [define](#highlight.Tag^define) a custom tag for your
    /// use case.
    ///
    /// Note that it is not obligatory to always attach the most specific
    /// tag possible to an element—if your grammar can't easily
    /// distinguish a certain type of element, it is okay to style it as
    /// its more general variant.
    /// 
    /// For tags that extend some parent tag, the documentation links to
    /// the parent.
    const tags$1 = {
        /// A comment.
        comment: comment$1,
        /// A line [comment](#highlight.tags.comment).
        lineComment: t$1(comment$1),
        /// A block [comment](#highlight.tags.comment).
        blockComment: t$1(comment$1),
        /// A documentation [comment](#highlight.tags.comment).
        docComment: t$1(comment$1),
        /// Any kind of identifier.
        name: name$1,
        /// The [name](#highlight.tags.name) of a variable.
        variableName: t$1(name$1),
        /// A type or tag [name](#highlight.tags.name).
        typeName: t$1(name$1),
        /// A property, field, or attribute [name](#highlight.tags.name).
        propertyName: t$1(name$1),
        /// The [name](#highlight.tags.name) of a class.
        className: t$1(name$1),
        /// A label [name](#highlight.tags.name).
        labelName: t$1(name$1),
        /// A namespace [name](#highlight.tags.name).
        namespace: t$1(name$1),
        /// The [name](#highlight.tags.name) of a macro.
        macroName: t$1(name$1),
        /// A literal value.
        literal: literal$1,
        /// A string [literal](#highlight.tags.literal).
        string: string$1,
        /// A documentation [string](#highlight.tags.string).
        docString: t$1(string$1),
        /// A character literal (subtag of [string](#highlight.tags.string)).
        character: t$1(string$1),
        /// A number [literal](#highlight.tags.literal).
        number: number$1,
        /// An integer [number](#highlight.tags.number) literal.
        integer: t$1(number$1),
        /// A floating-point [number](#highlight.tags.number) literal.
        float: t$1(number$1),
        /// A boolean [literal](#highlight.tags.literal).
        bool: t$1(literal$1),
        /// Regular expression [literal](#highlight.tags.literal).
        regexp: t$1(literal$1),
        /// An escape [literal](#highlight.tags.literal), for example a
        /// backslash escape in a string.
        escape: t$1(literal$1),
        /// A color [literal](#highlight.tags.literal).
        color: t$1(literal$1),
        /// A language keyword.
        keyword: keyword$1,
        /// The [keyword](#highlight.tags.keyword) for the self or this
        /// object.
        self: t$1(keyword$1),
        /// The [keyword](#highlight.tags.keyword) for null.
        null: t$1(keyword$1),
        /// A [keyword](#highlight.tags.keyword) denoting some atomic value.
        atom: t$1(keyword$1),
        /// A [keyword](#highlight.tags.keyword) that represents a unit.
        unit: t$1(keyword$1),
        /// A modifier [keyword](#highlight.tags.keyword).
        modifier: t$1(keyword$1),
        /// A [keyword](#highlight.tags.keyword) that acts as an operator.
        operatorKeyword: t$1(keyword$1),
        /// A control-flow related [keyword](#highlight.tags.keyword).
        controlKeyword: t$1(keyword$1),
        /// A [keyword](#highlight.tags.keyword) that defines something.
        definitionKeyword: t$1(keyword$1),
        /// An operator.
        operator: operator$1,
        /// An [operator](#highlight.tags.operator) that defines something.
        derefOperator: t$1(operator$1),
        /// Arithmetic-related [operator](#highlight.tags.operator).
        arithmeticOperator: t$1(operator$1),
        /// Logical [operator](#highlight.tags.operator).
        logicOperator: t$1(operator$1),
        /// Bit [operator](#highlight.tags.operator).
        bitwiseOperator: t$1(operator$1),
        /// Comparison [operator](#highlight.tags.operator).
        compareOperator: t$1(operator$1),
        /// [Operator](#highlight.tags.operator) that updates its operand.
        updateOperator: t$1(operator$1),
        /// [Operator](#highlight.tags.operator) that defines something.
        definitionOperator: t$1(operator$1),
        /// Type-related [operator](#highlight.tags.operator).
        typeOperator: t$1(operator$1),
        /// Control-flow [operator](#highlight.tags.operator).
        controlOperator: t$1(operator$1),
        /// Program or markup punctuation.
        punctuation: punctuation$1,
        /// [Punctuation](#highlight.tags.punctuation) that separates
        /// things.
        separator: t$1(punctuation$1),
        /// Bracket-style [punctuation](#highlight.tags.punctuation).
        bracket: bracket$1,
        /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
        /// tokens).
        angleBracket: t$1(bracket$1),
        /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
        /// tokens).
        squareBracket: t$1(bracket$1),
        /// Parentheses (usually `(` and `)` tokens). Subtag of
        /// [bracket](#highlight.tags.bracket)).
        paren: t$1(bracket$1),
        /// Braces (usually `{` and `}` tokens). Subtag of
        /// [bracket](#highlight.tags.bracket)).
        brace: t$1(bracket$1),
        /// Content, for example plain text in XML or markup documents.
        content: content$1,
        /// [Content](#highlight.tags.content) that represents a heading.
        heading: heading$1,
        /// A level 1 [heading](#highlight.tags.heading).
        heading1: t$1(heading$1),
        /// A level 2 [heading](#highlight.tags.heading).
        heading2: t$1(heading$1),
        /// A level 3 [heading](#highlight.tags.heading).
        heading3: t$1(heading$1),
        /// A level 4 [heading](#highlight.tags.heading).
        heading4: t$1(heading$1),
        /// A level 5 [heading](#highlight.tags.heading).
        heading5: t$1(heading$1),
        /// A level 6 [heading](#highlight.tags.heading).
        heading6: t$1(heading$1),
        /// [Content](#highlight.tags.content) that represents a list or
        /// list marker.
        list: t$1(content$1),
        /// [Content](#highlight.tags.content) that represents a quote.
        quote: t$1(content$1),
        /// [Content](#highlight.tags.content) that is emphasized.
        emphasis: t$1(content$1),
        /// [Content](#highlight.tags.content) that is styled strong.
        strong: t$1(content$1),
        /// [Content](#highlight.tags.content) that is part of a link.
        link: t$1(content$1),
        /// [Content](#highlight.tags.content) that is styled as code or
        /// monospace.
        monospace: t$1(content$1),
        /// Inserted content in a change-tracking format.
        inserted: t$1(),
        /// Deleted content.
        deleted: t$1(),
        /// Changed content.
        changed: t$1(),
        /// An invalid or unsyntactic element.
        invalid: t$1(),
        /// Metadata or meta-instruction.
        meta: meta$1,
        /// [Metadata](#higlight.tags.meta) that applies to the entire
        /// document.
        documentMeta: t$1(meta$1),
        /// [Metadata](#higlight.tags.meta) that annotates or adds
        /// attributes to a given syntactic element.
        annotation: t$1(meta$1),
        /// Processing instruction or preprocessor directive. Subtag of
        /// [meta](#highlight.tags.meta)).
        processingInstruction: t$1(meta$1),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates that a
        /// given element is being defined. Expected to be used with the
        /// various [name](#higlight.tags.name) tags.
        definition: Tag$1.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates that
        /// something is constant. Mostly expected to be used with
        /// [variable names](#highlight.tags.variableName).
        constant: Tag$1.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) used to indicate that a
        /// [variable name](#highlight.tags.variableName) is being called or
        /// being defined as a function.
        function: Tag$1.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that can be applied to
        /// [names](#highlight.tags.name) to indicate that they belong to
        /// the standard environment.
        standard: Tag$1.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates a given
        /// [names](#highlight.tags.name) is local to some scope.
        local: Tag$1.defineModifier(),
        /// A generic variant [modifier](#highlight.Tag^defineModifier) that
        /// can be used to tag language-specific alternative variants of
        /// some common tag. It is recommended for themes to define special
        /// forms of at least the [string](#highlight.tags.string) and
        /// [variable name](#highlight.tags.variableName) tags, since those
        /// come up a lot.
        special: Tag$1.defineModifier()
    };
    /// A default highlight style (works well with light themes).
    const defaultHighlightStyle$1 = precedence(highlightStyle$1({ tag: tags$1.deleted,
        textDecoration: "line-through" }, { tag: [tags$1.inserted, tags$1.heading, tags$1.link],
        textDecoration: "underline" }, { tag: tags$1.emphasis,
        fontStyle: "italic" }, { tag: tags$1.keyword,
        color: "#708" }, { tag: [tags$1.atom, tags$1.bool],
        color: "#219" }, { tag: tags$1.number,
        color: "#164" }, { tag: tags$1.string,
        color: "#a11" }, { tag: [tags$1.regexp, tags$1.escape, tags$1.special(tags$1.string)],
        color: "#e40" }, { tag: tags$1.definition(tags$1.variableName),
        color: "#00f" }, { tag: tags$1.typeName,
        color: "#085" }, { tag: tags$1.className,
        color: "#167" }, { tag: tags$1.special(tags$1.variableName),
        color: "#256" }, { tag: tags$1.definition(tags$1.propertyName),
        color: "#00c" }, { tag: tags$1.comment,
        color: "#940" }, { tag: tags$1.meta,
        color: "#555" }, { tag: tags$1.invalid,
        color: "#f00" }), "fallback");

    /// A syntax tree node prop used to associate indentation strategies
    /// with node types. Such a strategy is a function from an indentation
    /// context to a number. That number may be -1, to indicate that no
    /// definitive indentation can be determined, or a column number to
    /// which the given line should be indented.
    const indentNodeProp = new NodeProp();
    function syntaxIndentation(syntax) {
        return EditorState.indentation.of((cx, pos) => {
            return computeIndentation(cx, syntax.getTree(cx.state), pos);
        });
    }
    // Compute the indentation for a given position from the syntax tree.
    function computeIndentation(cx, ast, pos) {
        let tree = ast.resolve(pos);
        // Enter previous nodes that end in empty error terms, which means
        // they were broken off by error recovery, so that indentation
        // works even if the constructs haven't been finished.
        for (let scan = tree, scanPos = pos;;) {
            let last = scan.childBefore(scanPos);
            if (!last)
                break;
            if (last.type.isError && last.from == last.to) {
                tree = scan;
                scanPos = last.from;
            }
            else {
                scan = last;
                scanPos = scan.to + 1;
            }
        }
        for (; tree; tree = tree.parent) {
            let strategy = indentStrategy(tree);
            if (strategy)
                return strategy(new TreeIndentContext(cx, pos, tree));
        }
        return -1;
    }
    function ignoreClosed(cx) {
        var _a, _b;
        return cx.pos == ((_a = cx.options) === null || _a === void 0 ? void 0 : _a.simulateBreak) && ((_b = cx.options) === null || _b === void 0 ? void 0 : _b.simulateDoubleBreak);
    }
    function indentStrategy(tree) {
        let strategy = tree.type.prop(indentNodeProp);
        if (strategy)
            return strategy;
        let first = tree.firstChild, close;
        if (first && (close = first.type.prop(NodeProp.closedBy))) {
            let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
            return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
        }
        return tree.parent == null ? topIndent : null;
    }
    function topIndent() { return 0; }
    /// Objects of this type provide context information and helper
    /// methods to indentation functions.
    class TreeIndentContext extends IndentContext {
        /// @internal
        constructor(base, 
        /// The position at which indentation is being computed.
        pos, 
        /// The syntax tree node for which the indentation strategy is
        /// registered.
        node) {
            super(base.state, base.options);
            this.pos = pos;
            this.node = node;
        }
        /// Get the text directly after `this.pos`, either the entire line
        /// or the next 100 characters, whichever is shorter.
        get textAfter() {
            return this.textAfterPos(this.pos);
        }
        /// Get the indentation at the reference line for `this.node`, which
        /// is the line on which it starts, unless there is a node that is
        /// _not_ a parent of this node covering the start of that line. If
        /// so, the line at the start of that node is tried, again skipping
        /// on if it is covered by another such node.
        get baseIndent() {
            let line = this.state.doc.lineAt(this.node.from);
            // Skip line starts that are covered by a sibling (or cousin, etc)
            for (;;) {
                let atBreak = this.node.resolve(line.from);
                while (atBreak.parent && atBreak.parent.from == atBreak.from)
                    atBreak = atBreak.parent;
                if (isParent(atBreak, this.node))
                    break;
                line = this.state.doc.lineAt(atBreak.from);
            }
            return this.lineIndent(line);
        }
    }
    function isParent(parent, of) {
        for (let cur = of; cur; cur = cur.parent)
            if (parent == cur)
                return true;
        return false;
    }
    // Check whether a delimited node is aligned (meaning there are
    // non-skipped nodes on the same line as the opening delimiter). And
    // if so, return the opening token.
    function bracketedAligned(context) {
        var _a;
        let tree = context.node;
        let openToken = tree.childAfter(tree.from), last = tree.lastChild;
        if (!openToken)
            return null;
        let sim = (_a = context.options) === null || _a === void 0 ? void 0 : _a.simulateBreak;
        let openLine = context.state.doc.lineAt(openToken.from);
        let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
        for (let pos = openToken.to;;) {
            let next = tree.childAfter(pos);
            if (!next || next == last)
                return null;
            if (!next.type.isSkipped)
                return next.from < lineEnd ? openToken : null;
            pos = next.to;
        }
    }
    /// An indentation strategy for delimited (usually bracketed) nodes.
    /// Will, by default, indent one unit more than the parent's base
    /// indent unless the line starts with a closing token. When `align`
    /// is true and there are non-skipped nodes on the node's opening
    /// line, the content of the node will be aligned with the end of the
    /// opening node, like this:
    ///
    ///     foo(bar,
    ///         baz)
    function delimitedIndent({ closing, align = true, units = 1 }) {
        return (context) => delimitedStrategy(context, align, units, closing);
    }
    function delimitedStrategy(context, align, units, closing, closedAt) {
        let after = context.textAfter, space = after.match(/^\s*/)[0].length;
        let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
        let aligned = align ? bracketedAligned(context) : null;
        if (aligned)
            return closed ? context.column(aligned.from) : context.column(aligned.to);
        return context.baseIndent + (closed ? 0 : context.unit * units);
    }
    /// An indentation strategy that aligns a node content to its base
    /// indentation.
    const flatIndent = (context) => context.baseIndent;
    /// Creates an indentation strategy that, by default, indents
    /// continued lines one unit more than the node's base indentation.
    /// You can provide `except` to prevent indentation of lines that
    /// match a pattern (for example `/^else\b/` in `if`/`else`
    /// constructs), and you can change the amount of units used with the
    /// `units` option.
    function continuedIndent({ except, units = 1 } = {}) {
        return (context) => {
            let matchExcept = except && except.test(context.textAfter);
            return context.baseIndent + (matchExcept ? 0 : units * context.unit);
        };
    }

    /// This node prop is used to associate folding information with node
    /// types. Given a syntax node, it should check whether that tree is
    /// foldable and return the range that can be collapsed when it is.
    const foldNodeProp = new NodeProp();
    function syntaxFolding(syntax) {
        return EditorState.foldable.of((state, start, end) => {
            let inner = syntax.getTree(state).resolve(end);
            let found = null;
            for (let cur = inner; cur; cur = cur.parent) {
                if (cur.to <= end || cur.from > end)
                    continue;
                if (found && cur.from < start)
                    break;
                let prop = cur.type.prop(foldNodeProp);
                if (prop) {
                    let value = prop(cur, state);
                    if (value && value.from <= end && value.from >= start && value.to > end)
                        found = value;
                }
            }
            return found;
        });
    }

    /// A [syntax provider](#state.Syntax) based on a
    /// [Lezer](https://lezer.codemirror.net) parser.
    class LezerSyntax {
        /// @internal
        constructor(
        /// The Lezer parser used by this syntax.
        parser, 
        /// The dialect enabled for the parser.
        dialect, 
        /// The [language data](#state.EditorState.languageDataAt) data
        /// facet used for this language.
        languageData) {
            this.parser = parser;
            this.dialect = dialect;
            this.languageData = languageData;
            let setSyntax = StateEffect.define();
            this.field = StateField.define({
                create: state => SyntaxState.advance(Tree.empty, this, state.doc),
                update: (value, tr) => value.apply(tr, this, setSyntax)
            });
            this.extension = [
                EditorState.syntax.of(this),
                this.field,
                ViewPlugin$1.define(view => new HighlightWorker(view, this, setSyntax)),
                syntaxIndentation(this),
                syntaxFolding(this),
                treeHighlighter(this)
            ];
        }
        /// Create a syntax instance for the given parser. You'll usually
        /// want to use the
        /// [`withProps`](https://lezer.codemirror.net/docs/ref/#lezer.Parser.withProps)
        /// method to register CodeMirror-specific syntax node props in the
        /// parser, before passing it to this constructor.
        static define(parser, config = {}) {
            let languageData = Facet.define({
                combine: config.languageData ? values => values.concat(config.languageData) : undefined
            });
            return new LezerSyntax(parser.withProps(languageDataProp.add({ [parser.topType.name]: languageData })), config.dialect || "", languageData);
        }
        withDialect(dialect) {
            return new LezerSyntax(this.parser, dialect, this.languageData);
        }
        getTree(state) {
            return state.field(this.field).tree;
        }
        parsePos(state) {
            return state.field(this.field).upto;
        }
        ensureTree(state, upto, timeout = 100) {
            let field = state.field(this.field);
            if (field.upto >= upto)
                return field.updatedTree;
            if (!field.parse)
                field.startParse(this, state.doc);
            if (field.parse.pos < upto) {
                let done = work(field.parse, timeout, upto);
                if (done)
                    return field.stopParse(done, state.doc.length);
            }
            return field.parse.pos < upto ? null : field.stopParse();
        }
        languageDataFacetAt(state, pos) {
            if (this.parser.hasNested) {
                let tree = this.getTree(state);
                let target = tree.resolve(pos, -1);
                while (target) {
                    let facet = target.type.prop(languageDataProp);
                    if (facet)
                        return facet;
                    target = target.parent;
                }
            }
            return this.languageData;
        }
    }
    class DocStream {
        constructor(doc, length = doc.length) {
            this.doc = doc;
            this.length = length;
            this.cursorPos = 0;
            this.string = "";
            this.cursor = doc.iter();
        }
        get(pos) {
            if (pos >= this.length)
                return -1;
            let stringStart = this.cursorPos - this.string.length;
            if (pos < stringStart || pos >= this.cursorPos) {
                if (pos < this.cursorPos) { // Reset the cursor if we have to go back
                    this.cursor = this.doc.iter();
                    this.cursorPos = 0;
                }
                this.string = this.cursor.next(pos - this.cursorPos).value;
                this.cursorPos = pos + this.string.length;
                stringStart = this.cursorPos - this.string.length;
            }
            return this.string.charCodeAt(pos - stringStart);
        }
        read(from, to) {
            let stringStart = this.cursorPos - this.string.length;
            if (from < stringStart || to >= this.cursorPos)
                return this.doc.sliceString(from, to);
            else
                return this.string.slice(from - stringStart, to - stringStart);
        }
        clip(at) {
            return new DocStream(this.doc, at);
        }
    }
    function work(parse, time, upto = 5000000 /* MaxPos */) {
        let endTime = Date.now() + time;
        for (;;) {
            let done = parse.advance();
            if (done)
                return done;
            if (parse.pos > upto || Date.now() > endTime)
                return null;
        }
    }
    function takeTree(parse, base) {
        let parsed = parse.forceFinish();
        let cache = parsed.applyChanges([{ fromA: parse.pos, toA: parsed.length, fromB: parse.pos, toB: parsed.length }])
            .append(base.applyChanges([{ fromA: 0, toA: parse.pos, fromB: 0, toB: parse.pos }]));
        return { parsed, cache };
    }
    class SyntaxState {
        constructor(
        // The current tree. Immutable, because directly accessible from
        // the editor state.
        tree, 
        // The point upto which the document has been parsed.
        upto, 
        // The tree that can be used as cache for further incremental
        // parsing. May differ from tree/updatedTree if a parse is broken
        // off halfway—in that case, this one will have nodes that touch
        // the break-off point dropped/decomposed so that they don't get
        // incorrectly reused. The other properties will have those nodes,
        // since they may be useful for code consuming the tree.
        cache) {
            this.tree = tree;
            this.upto = upto;
            this.cache = cache;
            // In-progress parse, if any
            this.parse = null;
            this.updatedTree = tree;
        }
        static advance(cache, syntax, doc) {
            let parse = syntax.parser.startParse(new DocStream(doc), { cache, dialect: syntax.dialect });
            let done = work(parse, 25 /* Apply */);
            if (done)
                return new SyntaxState(done, doc.length, done);
            let result = takeTree(parse, cache);
            return new SyntaxState(result.parsed, parse.pos, result.cache);
        }
        apply(tr, syntax, effect) {
            for (let e of tr.effects)
                if (e.is(effect))
                    return e.value;
            if (!tr.docChanged)
                return this;
            let ranges = [];
            tr.changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
            return SyntaxState.advance((this.parse ? takeTree(this.parse, this.updatedTree).cache : this.cache).applyChanges(ranges), syntax, tr.state.doc);
        }
        startParse(syntax, doc) {
            this.parse = syntax.parser.startParse(new DocStream(doc), { cache: this.cache, dialect: syntax.dialect });
        }
        stopParse(tree, upto) {
            if (!tree)
                ({ parsed: tree, cache: this.cache } = takeTree(this.parse, this.updatedTree));
            else
                this.cache = tree;
            this.updatedTree = tree;
            this.upto = upto !== null && upto !== void 0 ? upto : this.parse.pos;
            this.parse = null;
            return tree;
        }
    }
    let requestIdle = typeof window != "undefined" && window.requestIdleCallback ||
        ((callback, { timeout }) => setTimeout(callback, timeout));
    let cancelIdle = typeof window != "undefined" && window.cancelIdleCallback || clearTimeout;
    // FIXME figure out some way to back off from full re-parses when the
    // document is large—you could waste a lot of battery re-parsing a
    // multi-megabyte document every time you insert a backtick, even if
    // it happens in the background.
    class HighlightWorker {
        constructor(view, syntax, setSyntax) {
            this.view = view;
            this.syntax = syntax;
            this.setSyntax = setSyntax;
            this.working = -1;
            this.work = this.work.bind(this);
            this.scheduleWork();
        }
        update(update) {
            if (update.docChanged)
                this.scheduleWork();
        }
        scheduleWork() {
            if (this.working > -1)
                return;
            let { state } = this.view, field = state.field(this.syntax.field);
            if (field.upto >= state.doc.length)
                return;
            this.working = requestIdle(this.work, { timeout: 200 /* Pause */ });
        }
        work(deadline) {
            this.working = -1;
            let { state } = this.view, field = state.field(this.syntax.field);
            if (field.upto >= state.doc.length)
                return;
            if (!field.parse)
                field.startParse(this.syntax, state.doc);
            let done = work(field.parse, deadline ? Math.max(25 /* MinSlice */, deadline.timeRemaining()) : 100 /* Slice */);
            if (done || field.parse.badness > .8) {
                let tree = field.stopParse(done, state.doc.length);
                this.view.dispatch({
                    effects: this.setSyntax.of(new SyntaxState(tree, state.doc.length, field.cache))
                });
            }
            else {
                this.scheduleWork();
            }
        }
        destroy() {
            if (this.working >= 0)
                cancelIdle(this.working);
        }
    }

    /// A syntax provider based on the [Lezer C++
    /// parser](https://github.com/lezer-parser/cpp), extended with
    /// highlighting and indentation information.
    const cppSyntax = LezerSyntax.define(parser.withProps(indentNodeProp.add({
        IfStatement: continuedIndent({ except: /^\s*({|else\b)/ }),
        TryStatement: continuedIndent({ except: /^\s*({|catch)\b/ }),
        LabeledStatement: flatIndent,
        CaseStatement: context => context.baseIndent + context.unit,
        BlockComment: () => -1,
        Statement: continuedIndent({ except: /^{/ })
    }), foldNodeProp.add({
        "DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList"(tree) { return { from: tree.from + 1, to: tree.to - 1 }; },
        BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
    }), styleTags({
        "typedef struct union enum class typename decltype auto template operator friend noexcept namespace using __attribute__ __declspec __based": tags$1.definitionKeyword,
        "extern MsCallModifier MsPointerModifier extern static register inline const volatile restrict _Atomic mutable constexpr virtual explicit VirtualSpecifier Access": tags$1.modifier,
        "if else switch for while do case default return break continue goto throw try catch": tags$1.controlKeyword,
        "new sizeof delete static_assert": tags$1.operatorKeyword,
        "NULL nullptr": tags$1.null,
        this: tags$1.self,
        "True False": tags$1.bool,
        "TypeSize PrimitiveType": tags$1.standard(tags$1.typeName),
        TypeIdentifier: tags$1.typeName,
        FieldIdentifier: tags$1.propertyName,
        StatementIdentifier: tags$1.labelName,
        Identifier: tags$1.variableName,
        DestructorName: tags$1.name,
        NamespaceIdentifier: tags$1.namespace,
        OperatorName: tags$1.operator,
        ArithOp: tags$1.arithmeticOperator,
        LogicOp: tags$1.logicOperator,
        BitOp: tags$1.bitwiseOperator,
        CompareOp: tags$1.compareOperator,
        AssignOp: tags$1.definitionOperator,
        UpdateOp: tags$1.updateOperator,
        LineComment: tags$1.lineComment,
        BlockComment: tags$1.blockComment,
        Number: tags$1.number,
        String: tags$1.string,
        "RawString SystemLibString": tags$1.special(tags$1.string),
        CharLiteral: tags$1.character,
        EscapeSequence: tags$1.escape,
        PreProcArg: tags$1.meta,
        "PreprocDirectiveName #include #ifdef #ifndef #if #define #else #endif #elif": tags$1.processingInstruction,
        MacroName: tags$1.special(tags$1.name),
        "( )": tags$1.paren,
        "[ ]": tags$1.squareBracket,
        "{ }": tags$1.brace,
        "< >": tags$1.angleBracket,
        ". ->": tags$1.derefOperator,
        ", ;": tags$1.separator
    })), {
        languageData: {
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:case |default:|\{|\})$/
        }
    });
    /// Returns an extension that installs the C++ syntax and
    /// support features.
    function cpp() {
        return [cppSyntax];
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const 
      descendantOp = 92,
      Unit = 1,
      callee = 93,
      identifier = 94;

    /* Hand-written tokenizers for CSS tokens that can't be
       expressed by Lezer's built-in tokenizer. */

    const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
                   8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
    const colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash = 45, period = 46,
          hash = 35, percent = 37;

    function isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }

    function isDigit(ch) { return ch >= 48 && ch <= 57 }

    const identifiers = new ExternalTokenizer((input, token) => {
      let start = token.start, pos = start, inside = false;
      for (;;) {
        let next = input.get(pos);
        if (isAlpha(next) || next == dash || next == underscore || (inside && isDigit(next))) {
          if (!inside && (next != dash || pos > start)) inside = true;
          pos++;
          continue
        }
        if (inside)
          token.accept(next == parenL ? callee : identifier, pos);
        break
      }
    });

    const descendant = new ExternalTokenizer((input, token) => {
      if (space.includes(input.get(token.start - 1))) {
        let next = input.get(token.start);
        if (isAlpha(next) || next == underscore || next == hash || next == period ||
            next == bracketL || next == colon || next == dash)
          token.accept(descendantOp, token.start);
      }
    });

    const unitToken = new ExternalTokenizer((input, token) => {
      let {start} = token;
      if (!space.includes(input.get(start - 1))) {
        let next = input.get(start);
        if (next == percent) token.accept(Unit, start + 1);
        if (isAlpha(next)) {
          let pos = start + 1;
          while (isAlpha(input.get(pos))) pos++;
          token.accept(Unit, pos);
        }
      }
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_callee = {__proto__:null,not:30, url:64, "url-prefix":64, domain:64, regexp:64, selector:132};
    const spec_AtKeyword = {__proto__:null,"@import":112, "@media":136, "@charset":140, "@namespace":144, "@keyframes":150, "@supports":162};
    const spec_identifier$1 = {__proto__:null,not:126, only:126, from:156, to:158};
    const parser$1 = Parser.deserialize({
      version: 12,
      states: "7WOYQ[OOOOQP'#Cc'#CcOOQP'#Cb'#CbO!ZQ[O'#CeO!}QXO'#C`O#UQ[O'#CgO#aQ[O'#DOO#fQ[O'#DSOOQP'#Eb'#EbO#kQdO'#DdO$SQ[O'#DqO#kQdO'#DsO$eQ[O'#DuO$pQ[O'#DxO$uQ[O'#EOO%TQ[O'#EQOOQS'#Ea'#EaOOQS'#ER'#ERQYQ[OOOOQP'#Cf'#CfOOQP,59P,59PO!ZQ[O,59PO%[Q[O'#ESO%vQWO,58zO&OQ[O,59RO#aQ[O,59jO#fQ[O,59nO%[Q[O,59rO%[Q[O,59tO%[Q[O,59uO'[Q[O'#D_OOQS,58z,58zOOQP'#Cj'#CjOOQO'#Cp'#CpOOQP,59R,59RO'cQWO,59RO'hQWO,59ROOQP'#DQ'#DQOOQP,59j,59jOOQO'#DU'#DUO'mQ`O,59nOOQS'#Cr'#CrO#kQdO'#CsO'uQvO'#CuO(|QtO,5:OOOQO'#Cz'#CzO'hQWO'#CyO)bQWO'#C{OOQS'#Ef'#EfOOQO'#Dg'#DgO)gQ[O'#DnO)uQWO'#EhO$uQ[O'#DlO*TQWO'#DoOOQO'#Ei'#EiO%yQWO,5:]O*YQpO,5:_OOQS'#Dw'#DwO*bQWO,5:aO*gQ[O,5:aOOQO'#Dz'#DzO*oQWO,5:dO*tQWO,5:jO*|QWO,5:lOOQS-E8P-E8POOQP1G.k1G.kO+pQXO,5:nOOQO-E8Q-E8QOOQS1G.f1G.fOOQP1G.m1G.mO'cQWO1G.mO'hQWO1G.mOOQP1G/U1G/UO+}Q`O1G/YO,hQXO1G/^O-OQXO1G/`O-fQXO1G/aO-|QXO'#CcO.qQWO'#D`OOQS,59y,59yO.vQWO,59yO/OQ[O,59yO/VQ[O'#CnO/^QdO'#CqOOQP1G/Y1G/YO#kQdO1G/YO/eQpO,59_OOQS,59a,59aO#kQdO,59cO/mQWO1G/jOOQS,59e,59eO/rQ!bO,59gO/zQWO'#DgO0VQWO,5:SO0[QWO,5:YO$uQ[O,5:UO$uQ[O'#EXO0dQWO,5;SO0oQWO,5:WO%[Q[O,5:ZOOQS1G/w1G/wOOQS1G/y1G/yOOQS1G/{1G/{O1QQWO1G/{O1VQdO'#D{OOQS1G0O1G0OOOQS1G0U1G0UOOQS1G0W1G0WOOQP7+$X7+$XOOQP7+$t7+$tO#kQdO7+$tO#kQdO,59zO1eQ[O'#EWO1oQWO1G/eOOQS1G/e1G/eO1oQWO1G/eO1wQXO'#EdO2OQWO,59YO2TQtO'#ETO2uQdO'#EeO3PQWO,59]O3UQpO7+$tOOQS1G.y1G.yOOQS1G.}1G.}OOQS7+%U7+%UO3^QWO1G/RO#kQdO1G/nOOQO1G/t1G/tOOQO1G/p1G/pO3cQWO,5:sOOQO-E8V-E8VO3qQXO1G/uOOQS7+%g7+%gO3xQYO'#CuO%yQWO'#EYO4QQdO,5:gOOQS,5:g,5:gO4`QpO<<H`O4hQtO1G/fOOQO,5:r,5:rO4{Q[O,5:rOOQO-E8U-E8UOOQS7+%P7+%PO5VQWO7+%PO5_QWO,5;OOOQP1G.t1G.tOOQS-E8R-E8RO#kQdO'#EUO5gQWO,5;POOQT1G.w1G.wOOQP<<H`<<H`OOQS7+$m7+$mO5oQdO7+%YOOQO7+%a7+%aOOQS,5:t,5:tOOQS-E8W-E8WOOQS1G0R1G0ROOQPAN=zAN=zO5vQtO'#EVO#kQdO'#EVO6nQdO7+%QOOQO7+%Q7+%QOOQO1G0^1G0^OOQS<<Hk<<HkO7OQdO,5:pOOQO-E8S-E8SOOQO<<Ht<<HtO7YQtO,5:qOOQS-E8T-E8TOOQO<<Hl<<Hl",
      stateData: "8W~O#SOSQOS~OTWOWWO[TO]TOsUOwVO!X_O!YXO!fYO!hZO!j[O!m]O!s^O#QPO#VRO~O#QcO~O[hO]hOcfOsiOwjO{kO!OmO#OlO#VeO~O!QnO~P!`O_sO#PqO#QpO~O#QuO~O#QwO~OazOh!QOj!QOp!PO#P}O#QyO#Z{O~Oa!SO!a!UO!d!VO#Q!RO!Q#[P~Oj![Op!PO#Q!ZO~O#Q!^O~Oa!SO!a!UO!d!VO#Q!RO~O!V#[P~P$SOTWOWWO[TO]TOsUOwVO#QPO#VRO~OcfO!QnO~O_!hO#PqO#QpO~OTWOWWO[TO]TOsUOwVO!X_O!YXO!fYO!hZO!j[O!m]O!s^O#Q!oO#VRO~O!P!qO~P&ZOa!tO~Oa!uO~Ou!vOy!wO~OP!yOaiXliX!ViX!aiX!diX#QiX`iXciXhiXjiXpiX#PiX#ZiXuiX!PiX!UiX~Oa!SOl!zO!a!UO!d!VO#Q!RO!V#[P~Oa!}O~Oa!SO!a!UO!d!VO#Q#OO~Oc#SO!_#RO!Q#[X!V#[X~Oa#VO~Ol!zO!V#XO~O!V#YO~Oj#ZOp!PO~O!Q#[O~O!QnO!_#RO~O!QnO!V#_O~O[hO]hOsiOwjO{kO!OmO#OlO#VeO~Oc!va!Q!va`!va~P+UOu#aOy#bO~O[hO]hOsiOwjO#VeO~Oczi{zi!Ozi!Qzi#Ozi`zi~P,VOc|i{|i!O|i!Q|i#O|i`|i~P,VOc}i{}i!O}i!Q}i#O}i`}i~P,VO[VX[!TX]VXcVXsVXwVX{VX!OVX!QVX#OVX#VVX~O[#cO~O!P#fO!V#dO~O!P#fO~P&ZO`#WP~P%[O`#XP~P#kO`#nOl!zO~O!V#pO~Oj#qOq#qO~O[!]X`!ZX!_!ZX~O[#rO~O`#sO!_#RO~Oc#SO!Q#[a!V#[a~O!_#ROc!`a!Q!`a!V!`a`!`a~O!V#xO~O!P#|O!p#zO!q#zO#Z#yO~O!P!zX!V!zX~P&ZO!P$SO!V#dO~O`#WX~P!`O`$VO~Ol!zO`!wXa!wXc!wXh!wXj!wXp!wX#P!wX#Q!wX#Z!wX~Oc$XO`#XX~P#kO`$ZO~Ol!zOu$[O~O`$]O~O!_#ROc!{a!Q!{a!V!{a~O`$_O~P+UOP!yO!QiX~O!P$bO!p#zO!q#zO#Z#yO~Ol!zOu$cO~Oc$eOl!zO!U$gO!P!Si!V!Si~P#kO!P!za!V!za~P&ZO!P$iO!V#dO~OcfO`#Wa~Oc$XO`#Xa~O`$lO~P#kOl!zOa!yXc!yXh!yXj!yXp!yX!P!yX!U!yX!V!yX#P!yX#Q!yX#Z!yX~Oc$eO!U$oO!P!Sq!V!Sq~P#kO`!xac!xa~P#kOl!zOa!yac!yah!yaj!yap!ya!P!ya!U!ya!V!ya#P!ya#Q!ya#Z!ya~Oq#Zl!Ol~",
      goto: "+}#^PPPP#_P#g#uP#g$T#gPP$ZPPP$aP$g$m$v$vP%YP$vP$v%p&SPP#gP&lP#gP&rP#gP#g#gPPP&x'['hPP#_PP'n'n'x'nP'nP'n'nP#_P#_P#_P'{#_P(O(RPP#_P#_(U(d(n(|)S)Y)d)jPPPPPP)p)xP*d*g*jP+`+i]`Obn!s#d$QiWObfklmn!s!t#V#d$QiQObfklmn!s!t#V#d$QQdRR!ceQrTR!ghQ!gsR#`!hQtTR!ihQ!gtQ!|!OR#`!iq!QXZz!u!w!z#b#c#k#r$O$X$^$e$f$jp!QXZz!u!w!z#b#c#k#r$O$X$^$e$f$jT#z#[#{q!OXZz!u!w!z#b#c#k#r$O$X$^$e$f$jp!QXZz!u!w!z#b#c#k#r$O$X$^$e$f$jQ![[R#Z!]QvUR!jiQxVR!kjQoSQ!fgQ#W!XQ#^!`Q#_!aR$`#zQ!rnQ#g!sQ$P#dR$h$QX!pn!s#d$Qa!WY^_|!S!U#R#SR#P!SR!][R!_]R#]!_QbOU!bb!s$QQ!snR$Q#dQgSS!eg$UR$U#hQ#k!uU$W#k$^$jQ$^#rR$j$XQ$Y#kR$k$YQ$f$OR$n$fQ#e!rS$R#e$TR$T#gQ#T!TR#v#TQ#{#[R$a#{]aObn!s#d$Q[SObn!s#d$QQ!dfQ!lkQ!mlQ!nmQ#h!tR#w#VR#i!tR#l!uQ|XQ!YZQ!xz[#j!u#k#r$X$^$jQ#m!wQ#o!zQ#}#bQ$O#cS$d$O$fR$m$eQ!XYQ!a_R!{|U!TY_|Q!`^Q#Q!SQ#U!UQ#t#RR#u#S",
      nodeNames: "⚠ Unit Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName not ) ( ArgList , PseudoClassName ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery callee MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports AtRule",
      maxTerm: 105,
      nodeProps: [
        [NodeProp$1.openedBy, 16,"(",47,"{"],
        [NodeProp$1.closedBy, 17,")",48,"}"]
      ],
      skippedNodes: [0,2],
      repeatNodeCount: 8,
      tokenData: "Bj~R![OX$wX^%]^p$wpq%]qr(crs+}st,otu2Uuv$wvw2rwx2}xy3jyz3uz{3z{|4_|}8u}!O9Q!O!P9i!P!Q9z!Q![<U![!]<y!]!^=i!^!_$w!_!`=t!`!a>P!a!b$w!b!c>o!c!}$w!}#O?{#O#P$w#P#Q@W#Q#R2U#R#T$w#T#U@c#U#c$w#c#dAb#d#o$w#o#pAq#p#q2U#q#rA|#r#sBX#s#y$w#y#z%]#z$f$w$f$g%]$g#BY$w#BY#BZ%]#BZ$IS$w$IS$I_%]$I_$I|$w$I|$JO%]$JO$JT$w$JT$JU%]$JU$KV$w$KV$KW%]$KW&FU$w&FU&FV%]&FV~$wW$zQOy%Qz~%QW%VQqWOy%Qz~%Q~%bf#S~OX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q~&}f#S~qWOX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q^(fSOy%Qz#]%Q#]#^(r#^~%Q^(wSqWOy%Qz#a%Q#a#b)T#b~%Q^)YSqWOy%Qz#d%Q#d#e)f#e~%Q^)kSqWOy%Qz#c%Q#c#d)w#d~%Q^)|SqWOy%Qz#f%Q#f#g*Y#g~%Q^*_SqWOy%Qz#h%Q#h#i*k#i~%Q^*pSqWOy%Qz#T%Q#T#U*|#U~%Q^+RSqWOy%Qz#b%Q#b#c+_#c~%Q^+dSqWOy%Qz#h%Q#h#i+p#i~%Q^+wQ!UUqWOy%Qz~%Q~,QUOY+}Zr+}rs,ds#O+}#O#P,i#P~+}~,iOj~~,lPO~+}_,tWsPOy%Qz!Q%Q!Q![-^![!c%Q!c!i-^!i#T%Q#T#Z-^#Z~%Q^-cWqWOy%Qz!Q%Q!Q![-{![!c%Q!c!i-{!i#T%Q#T#Z-{#Z~%Q^.QWqWOy%Qz!Q%Q!Q![.j![!c%Q!c!i.j!i#T%Q#T#Z.j#Z~%Q^.qWhUqWOy%Qz!Q%Q!Q![/Z![!c%Q!c!i/Z!i#T%Q#T#Z/Z#Z~%Q^/bWhUqWOy%Qz!Q%Q!Q![/z![!c%Q!c!i/z!i#T%Q#T#Z/z#Z~%Q^0PWqWOy%Qz!Q%Q!Q![0i![!c%Q!c!i0i!i#T%Q#T#Z0i#Z~%Q^0pWhUqWOy%Qz!Q%Q!Q![1Y![!c%Q!c!i1Y!i#T%Q#T#Z1Y#Z~%Q^1_WqWOy%Qz!Q%Q!Q![1w![!c%Q!c!i1w!i#T%Q#T#Z1w#Z~%Q^2OQhUqWOy%Qz~%QY2XSOy%Qz!_%Q!_!`2e!`~%QY2lQyQqWOy%Qz~%QX2wQWPOy%Qz~%Q~3QUOY2}Zw2}wx,dx#O2}#O#P3d#P~2}~3gPO~2}_3oQaVOy%Qz~%Q~3zO`~_4RSTPlSOy%Qz!_%Q!_!`2e!`~%Q_4fUlS!OPOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q^4}SqWOy%Qz!Q%Q!Q![5Z![~%Q^5bWqW#ZUOy%Qz!Q%Q!Q![5Z![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q^6PWqWOy%Qz{%Q{|6i|}%Q}!O6i!O!Q%Q!Q![6z![~%Q^6nSqWOy%Qz!Q%Q!Q![6z![~%Q^7RSqW#ZUOy%Qz!Q%Q!Q![6z![~%Q^7fYqW#ZUOy%Qz!O%Q!O!P8U!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q^8]WqW#ZUOy%Qz!Q%Q!Q![8U![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q_8zQcVOy%Qz~%Q^9VUlSOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q_9nS#VPOy%Qz!Q%Q!Q![5Z![~%Q~:PRlSOy%Qz{:Y{~%Q~:_SqWOy:Yyz:kz{;`{~:Y~:nROz:kz{:w{~:k~:zTOz:kz{:w{!P:k!P!Q;Z!Q~:k~;`OQ~~;eUqWOy:Yyz:kz{;`{!P:Y!P!Q;w!Q~:Y~<OQQ~qWOy%Qz~%Q^<ZY#ZUOy%Qz!O%Q!O!P8U!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%QX=OS[POy%Qz![%Q![!]=[!]~%QX=cQ]PqWOy%Qz~%Q_=nQ!VVOy%Qz~%QY=yQyQOy%Qz~%QX>US{POy%Qz!`%Q!`!a>b!a~%QX>iQ{PqWOy%Qz~%QX>rUOy%Qz!c%Q!c!}?U!}#T%Q#T#o?U#o~%QX?]Y!XPqWOy%Qz}%Q}!O?U!O!Q%Q!Q![?U![!c%Q!c!}?U!}#T%Q#T#o?U#o~%QX@QQwPOy%Qz~%Q^@]QuUOy%Qz~%QX@fSOy%Qz#b%Q#b#c@r#c~%QX@wSqWOy%Qz#W%Q#W#XAT#X~%QXA[Q!_PqWOy%Qz~%QXAeSOy%Qz#f%Q#f#gAT#g~%QXAvQ!QPOy%Qz~%Q_BRQ!PVOy%Qz~%QZB^S!OPOy%Qz!_%Q!_!`2e!`~%Q",
      tokenizers: [descendant, unitToken, identifiers, 0, 1, 2, 3],
      topRules: {"StyleSheet":[0,3]},
      specialized: [{term: 93, get: value => spec_callee[value] || -1},{term: 55, get: value => spec_AtKeyword[value] || -1},{term: 94, get: value => spec_identifier$1[value] || -1}],
      tokenPrec: 1060
    });

    /// A syntax provider based on the [Lezer CSS
    /// parser](https://github.com/lezer-parser/css), extended with
    /// highlighting and indentation information.
    const cssSyntax = LezerSyntax.define(parser$1.withProps(indentNodeProp.add({
        Declaration: continuedIndent()
    }), foldNodeProp.add({
        Block(subtree) { return { from: subtree.from + 1, to: subtree.to - 1 }; }
    }), styleTags({
        "import charset namespace keyframes": tags$1.definitionKeyword,
        "media supports": tags$1.controlKeyword,
        "from to": tags$1.keyword,
        NamespaceName: tags$1.namespace,
        KeyframeName: tags$1.labelName,
        TagName: tags$1.typeName,
        ClassName: tags$1.className,
        PseudoClassName: tags$1.constant(tags$1.className),
        not: tags$1.operatorKeyword,
        IdName: tags$1.labelName,
        "FeatureName PropertyName AttributeName": tags$1.propertyName,
        NumberLiteral: tags$1.number,
        KeywordQuery: tags$1.keyword,
        UnaryQueryOp: tags$1.operatorKeyword,
        callee: tags$1.keyword,
        "CallTag ValueName": tags$1.atom,
        Callee: tags$1.variableName,
        Unit: tags$1.unit,
        "UniversalSelector NestingSelector": tags$1.definitionOperator,
        AtKeyword: tags$1.keyword,
        MatchOp: tags$1.compareOperator,
        "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
        BinOp: tags$1.arithmeticOperator,
        Important: tags$1.modifier,
        Comment: tags$1.blockComment,
        ParenthesizedContent: tags$1.special(tags$1.name),
        ColorLiteral: tags$1.color,
        StringLiteral: tags$1.string,
        ":": tags$1.punctuation,
        "PseudoOp #": tags$1.derefOperator,
        "; ,": tags$1.separator,
        "( )": tags$1.paren,
        "[ ]": tags$1.squareBracket,
        "{ }": tags$1.brace
    })), {
        languageData: {
            commentTokens: { block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*\}$/
        }
    });
    /// Returns an extension that installs the CSS syntax provider.
    function css() {
        return cssSyntax;
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const 
      StartTag = 1,
      StartCloseTag = 2,
      MismatchedStartCloseTag = 3,
      missingCloseTag = 33,
      IncompleteCloseTag = 4,
      SelfCloseEndTag = 5,
      Element = 10,
      OpenTag = 11,
      SelfClosingTag = 20,
      RawText = 25;

    /* Hand-written tokenizers for HTML. */

    const selfClosers = {
      area: true, base: true, br: true, col: true, command: true,
      embed: true, frame: true, hr: true, img: true, input: true,
      keygen: true, link: true, meta: true, param: true, source: true,
      track: true, wbr: true, menuitem: true
    };

    const implicitlyClosed = {
      dd: true, li: true, optgroup: true, option: true, p: true,
      rp: true, rt: true, tbody: true, td: true, tfoot: true,
      th: true, tr: true
    };

    const closeOnOpen = {
      dd: {dd: true, dt: true},
      dt: {dd: true, dt: true},
      li: {li: true},
      option: {option: true, optgroup: true},
      optgroup: {optgroup: true},
      p: {
        address: true, article: true, aside: true, blockquote: true, dir: true,
        div: true, dl: true, fieldset: true, footer: true, form: true,
        h1: true, h2: true, h3: true, h4: true, h5: true, h6: true,
        header: true, hgroup: true, hr: true, menu: true, nav: true, ol: true,
        p: true, pre: true, section: true, table: true, ul: true
      },
      rp: {rp: true, rt: true},
      rt: {rp: true, rt: true},
      tbody: {tbody: true, tfoot: true},
      td: {td: true, th: true},
      tfoot: {tbody: true},
      th: {td: true, th: true},
      thead: {tbody: true, tfoot: true},
      tr: {tr: true}
    };

    function nameChar(ch) {
      return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
    }

    function isSpace(ch) {
      return ch == 9 || ch == 10 || ch == 13 || ch == 32
    }

    const lessThan = 60, greaterThan = 62, slash = 47, question = 63, bang = 33;

    const tagStartExpr = /^<\s*([\.\-\:\w\xa1-\uffff]+)/;

    let elementQuery = [Element], openAt = 0;

    function parentElement(input, stack, pos, len) {
      openAt = stack.startOf(elementQuery, pos);
      if (openAt == null) return null
      let match = tagStartExpr.exec(input.read(openAt, openAt + len + 10));
      return match ? match[1].toLowerCase() : ""
    }

    const tagStart = new ExternalTokenizer((input, token, stack) => {
      let pos = token.start, first = input.get(pos);
      // End of file, just close anything
      if (first < 0) {
        let contextStart = stack.startOf(elementQuery);
        let match = contextStart == null ? null : tagStartExpr.exec(input.read(contextStart, contextStart + 30));
        if (match && implicitlyClosed[match[1].toLowerCase()]) token.accept(missingCloseTag, token.start);
      }
      if (first != lessThan) return
      pos++;
      let close = false, tokEnd = pos;
      for (let next; next = input.get(pos);) {
        if (next == slash && !close) { close = true; pos++; tokEnd = pos; }
        else if (next == question || next == bang) return
        else if (isSpace(next)) pos++;
        else break
      }
      let nameStart = pos;
      while (nameChar(input.get(pos))) pos++;
      if (pos == nameStart) return token.accept(close ? IncompleteCloseTag : StartTag, tokEnd)

      let name = input.read(nameStart, pos).toLowerCase();
      let parent = parentElement(input, stack, stack.pos, name.length);
      if (close) {
        if (name == parent) return token.accept(StartCloseTag, tokEnd)
        if (implicitlyClosed[parent]) return token.accept(missingCloseTag, token.start)
        while (parent != null) {
          parent = parentElement(input, stack, openAt - 1, name.length);
          if (parent == name) return
        }
        token.accept(MismatchedStartCloseTag, tokEnd);
      } else {
        if (parent && closeOnOpen[parent] && closeOnOpen[parent][name])
          return token.accept(missingCloseTag, token.start)
        token.accept(StartTag, tokEnd);
      }
    }, {contextual: true});

    const tagQuery = [OpenTag, SelfClosingTag];

    const selfClosed = new ExternalTokenizer((input, token, stack) => {
      let next = input.get(token.start), end = token.start + 1;
      if (next == slash) {
        if (input.get(end) != greaterThan) return
        end++;
      } else if (next != greaterThan) {
        return
      }
      let from = stack.startOf(tagQuery);
      let match = from == null ? null : tagStartExpr.exec(input.read(from, token.start));
      if (match && selfClosers[match[1].toLowerCase()]) token.accept(SelfCloseEndTag, end);
    }, {contextual: true});

    const openTag = /^<\/?\s*([\.\-\:\w\xa1-\uffff]+)/;

    function tagName(tag) {
      let m = openTag.exec(tag);
      return m ? m[1].toLowerCase() : null
    }

    function attributes(tag) {
      let open = openTag.exec(tag), attrs = {};
      if (open) {
        let attr = /\s*([\.\-\:\w\xa1-\uffff]+)\s*(?:=("[^"]*"|'[^']*'|[^\s=<>"'/]+))?/g, m;
        attr.lastIndex = open.index + open[0].length;
        while (m = attr.exec(tag)) attrs[m[1]] = m[2] || m[1];
      }
      return attrs
    }

    const stay = {stay: true};

    function skip(name) { return token => tagName(token) == name }

    // tags: {
    //   tag: string,
    //   attrs?: ({[attr: string]: string}) => boolean,
    //   parser?: Parser,
    //   parseNode?: (input: InputStream, start: number) => Tree
    // }[]

    function resolveContent(tags) {
      let tagMap = null;
      for (let tag of tags) {
        if (!tagMap) tagMap = Object.create(null)
        ;(tagMap[tag.tag] || (tagMap[tag.tag] = [])).push({
          attrs: tag.attrs,
          value: {
            filterEnd: skip(tag.tag),
            parser: tag.parser,
            parseNode: tag.parseNode
          }
        });
      }
      return function(input, stack) {
        let openTag = input.read(stack.ruleStart, stack.pos);
        let name = tagName(openTag), matches, attrs;
        if (!name) return stay
        if (tagMap && (matches = tagMap[name])) {
          for (let match of matches) {
            if (!match.attrs || match.attrs(attrs || (attrs = attributes(openTag)))) return match.value
          }
        }
        if (name == "script" || name == "textarea" || name == "style") return {
          filterEnd: skip(name),
          wrapType: RawText
        }
        return stay
      }
    }

    const elementContent = resolveContent([]);

    function configureTags(parser, tags) {
      return parser.withNested({elementContent: resolveContent(tags)})
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser$2 = Parser.deserialize({
      version: 12,
      states: "*hOQOTOOOoOWO'#CgS!cOTO'#CfOOOP'#Cf'#CfO!mOWO'#CsOOOP'#DO'#DOOOOP'#Cv'#CvQQOTOOOOOQ'#Cw'#CwO!uOWO,59RO!}ObO,59ROOOP'#C{'#C{O#]OTO'#DUO#gOPO,59QO#oOWO,59_O#wOWO,59_OOOP-E6t-E6tOOOQ-E6u-E6uO$PObO1G.mO$PObO1G.mO$_ObO'#CiOOOQ'#Cx'#CxO$pObO1G.mOOOP1G.m1G.mOOOP1G.v1G.vOOOP-E6y-E6yO${OWO'#CoOOOP1G.l1G.lO%TOWO1G.yO%TOWO1G.yOOOP1G.y1G.yO%]ObO7+$XO%kObO7+$XOOOP7+$X7+$XOOOP7+$b7+$bO%vObO,59TO&XOpO,59TOOOQ-E6v-E6vO&gOWO,59ZO&oOWO,59ZO&wOWO7+$eOOOP7+$e7+$eO'PObO<<GsOOOP<<Gs<<GsOOOP<<G|<<G|O'[OpO1G.oO'[OpO1G.oO'jO!bO'#ClO'xO#tO'#ClO(WObO1G.oO(fOWO1G.uO(fOWO1G.uOOOP1G.u1G.uOOOP<<HP<<HPOOOPAN=_AN=_OOOPAN=hAN=hO(nOpO7+$ZO(|ObO7+$ZOOOO'#Cy'#CyO)[O!bO,59WOOOQ,59W,59WOOOO'#Cz'#CzO)jO#tO,59WO(|ObO7+$ZO)xOWO7+$aOOOP7+$a7+$aO*QObO<<GuO*QObO<<GuOOOO-E6w-E6wOOOQ1G.r1G.rOOOO-E6x-E6xOOOP<<G{<<G{O*`ObOAN=a",
      stateData: "*s~OPPORSOSTOVTOWTOXTOeTOfTOhUO~O[YOsWO~OPPORSOSTOVTOWTOXTOeTOfTO~OQxPqxP~PwO[_OsWO~O[bOsWO~OThO^dObgOsWO~OQxXqxX~PwOQjOqkO~O[lOsWO~ObnOsWO~OTrO^dObqOsWO~O_tOsWOT]X^]Xb]X~OTrO^dObqO~O[wOsWO~ObyOsWO~OT|O^dOb{OsWO~OT|O^dOb{O~O_}OsWOT]a^]ab]a~Oa!ROsWOt!POv!QO~O[!SOsWO~Ob!UOsWO~Ob!VOsWO~OT!XO^dOb!WO~Oa!ZOsWOt!POv!QO~OW![OX![Ot!^Ou![O~OW!_OX!_Ov!^Ow!_O~OsWOT]i^]ib]i~Ob!cOsWO~Oa!dOsWOt!POv!QO~OsWOT]q^]qb]q~OW![OX![Ot!gOu![O~OW!_OX!_Ov!gOw!_O~Ob!iOsWO~OsWOT]y^]yb]y~OsWOT]!R^]!Rb]!R~Oefhf~",
      goto: "%YyPPPPPPPPPPz!QP!WPP!aPP!k!nPPzPP!t!z$[$k$q$wPP$}PPPPP%VXTOQV[XQOQV[_eYbcfopzQ!RtS!Z}!OR!d!YRk]XROQV[QVOR`VQXPQ^SnaX^cmosvx!O!T!Y!a!b!e!jQcYQm_QobQsdQvjQxlQ!OtQ!TwQ!Y}Q!a!RQ!b!SQ!e!ZR!j!dQfYSpbcUufpzRzoQ!]!PR!f!]Q!`!QR!h!`Q[QRi[SUOVTZQ[R]Q",
      nodeNames: "⚠ StartTag StartCloseTag StartCloseTag IncompleteCloseTag SelfCloseEndTag Document Text EntityReference CharacterReference Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue EndTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag DoctypeDecl RawText",
      maxTerm: 40,
      nodeProps: [
        [NodeProp$1.closedBy, -2,1,2,"EndTag SelfCloseEndTag",11,"CloseTag"],
        [NodeProp$1.openedBy, 5,"StartTag",18,"StartTag StartCloseTag",19,"OpenTag"]
      ],
      skippedNodes: [0,25],
      repeatNodeCount: 6,
      tokenData: "!(Q!aR!UOX$eXY)mYZ)mZ]$e]^)m^p$epq)mqr$ers*tsv$evw+^wx2qx!P$e!P!Q3^!Q![$e![!]4t!]!^$e!^!_:a!_!`!%r!`!a4S!a!c$e!c!}4t!}#R$e#R#S4t#S#T$e#T#o4t#o$f$e$f$g%{$g%W$e%W%o4t%o%p$e%p&a4t&a&b$e&b1p4t1p4U$e4U4d4t4d4e$e4e$IS4t$IS$I`$e$I`$Ib4t$Ib$Kh$e$Kh%#t4t%#t&/x$e&/x&Et4t&Et&FV$e&FV;'S4t;'S;:j!&d;:j?&r$e?&r?Ah4t?Ah?BY$e?BY?Mn4t?Mn~$e!Z$pcVPaWu`wpOX$eXZ%{Z]$e]^%{^p$epq%{qr$ers&ksv$evw({wx'lx!P$e!P!Q%{!Q!^$e!^!_(e!_!a%{!a$f$e$f$g%{$g~$e!R&UVVPu`wpOr%{rs&ksv%{wx'lx!^%{!^!_(e!_~%{q&rTVPwpOv&kwx'Rx!^&k!^!_'a!_~&kP'WRVPOv'Rw!^'R!_~'Rp'fQwpOv'ax~'aa'sUVPu`Or'lrs'Rsv'lw!^'l!^!_(V!_~'l`([Ru`Or(Vsv(Vw~(V!Q(lTu`wpOr(ers'asv(ewx(Vx~(eW)QXaWOX({Z]({^p({qr({sw({x!P({!Q!^({!a$f({$g~({!a)x^VPu`wps^OX%{XY)mYZ)mZ]%{]^)m^p%{pq)mqr%{rs&ksv%{wx'lx!^%{!^!_(e!_~%{!Z*}TthVPwpOv&kwx'Rx!^&k!^!_'a!_~&k!Z+cbaWOX,kXZ-xZ],k]^-x^p,kqr,krs-xst/Ttw,kwx-xx!P,k!P!Q-x!Q!],k!]!^({!^!a-x!a$f,k$f$g-x$g~,k!Z,pbaWOX,kXZ-xZ],k]^-x^p,kqr,krs-xst({tw,kwx-xx!P,k!P!Q-x!Q!],k!]!^.a!^!a-x!a$f,k$f$g-x$g~,k!R-{TOp-xqs-xt!]-x!]!^.[!^~-x!R.aOW!R!Z.hXW!RaWOX({Z]({^p({qr({sw({x!P({!Q!^({!a$f({$g~({!Z/YaaWOX0_XZ1iZ]0_]^1i^p0_qr0_rs1isw0_wx1ix!P0_!P!Q1i!Q!]0_!]!^({!^!a1i!a$f0_$f$g1i$g~0_!Z0daaWOX0_XZ1iZ]0_]^1i^p0_qr0_rs1isw0_wx1ix!P0_!P!Q1i!Q!]0_!]!^1}!^!a1i!a$f0_$f$g1i$g~0_!R1lSOp1iq!]1i!]!^1x!^~1i!R1}OX!R!Z2UXX!RaWOX({Z]({^p({qr({sw({x!P({!Q!^({!a$f({$g~({!Z2zUvxVPu`Or'lrs'Rsv'lw!^'l!^!_(V!_~'l!X3gXVPu`wpOr%{rs&ksv%{wx'lx!^%{!^!_(e!_!`%{!`!a4S!a~%{!X4_VbUVPu`wpOr%{rs&ksv%{wx'lx!^%{!^!_(e!_~%{!a5T!Y^S[QVPaWu`wpOX$eXZ%{Z]$e]^%{^p$epq%{qr$ers&ksv$evw({wx'lx}$e}!O4t!O!P4t!P!Q%{!Q![4t![!]4t!]!^$e!^!_(e!_!a%{!a!c$e!c!}4t!}#R$e#R#S4t#S#T$e#T#o4t#o$f$e$f$g%{$g$}$e$}%O4t%O%W$e%W%o4t%o%p$e%p&a4t&a&b$e&b1p4t1p4U4t4U4d4t4d4e$e4e$IS4t$IS$I`$e$I`$Ib4t$Ib$Je$e$Je$Jg4t$Jg$Kh$e$Kh%#t4t%#t&/x$e&/x&Et4t&Et&FV$e&FV;'S4t;'S;:j8s;:j?&r$e?&r?Ah4t?Ah?BY$e?BY?Mn4t?Mn~$e!a9OeVPaWu`wpOX$eXZ%{Z]$e]^%{^p$epq%{qr$ers&ksv$evw({wx'lx!P$e!P!Q%{!Q!^$e!^!_(e!_!a%{!a$f$e$f$g%{$g;=`$e;=`<%l4t<%l~$e!R:hWu`wpOq(eqr;Qrs'asv(ewx(Vx!a(e!a!bNl!b~(e!R;XZu`wpOr(ers'asv(ewx(Vx}(e}!O;z!O!f(e!f!gDT!g#W(e#W#XJ|#X~(e!R<RVu`wpOr(ers'asv(ewx(Vx}(e}!O<h!O~(e!R<oWu`wpOr<hrs=Xsv<hvw=mwx?{x}<h}!OBT!O~<hq=^TwpOv=Xvx=mx}=X}!O>n!O~=XP=pRO}=m}!O=y!O~=mP=|RO}=m}!O>V!O~=mP>YTO}=m}!O>V!O!`=m!`!a>i!a~=mP>nOePq>sTwpOv=Xvx=mx}=X}!O?S!O~=Xq?XVwpOv=Xvx=mx}=X}!O?S!O!`=X!`!a?n!a~=Xq?uQwpePOv'ax~'aa@QVu`Or?{rs=msv?{vw=mw}?{}!O@g!O~?{a@lVu`Or?{rs=msv?{vw=mw}?{}!OAR!O~?{aAWXu`Or?{rs=msv?{vw=mw}?{}!OAR!O!`?{!`!aAs!a~?{aAzRu`ePOr(Vsv(Vw~(V!RB[Wu`wpOr<hrs=Xsv<hvw=mwx?{x}<h}!OBt!O~<h!RB{Yu`wpOr<hrs=Xsv<hvw=mwx?{x}<h}!OBt!O!`<h!`!aCk!a~<h!RCtTu`wpePOr(ers'asv(ewx(Vx~(e!RD[Vu`wpOr(ers'asv(ewx(Vx!q(e!q!rDq!r~(e!RDxVu`wpOr(ers'asv(ewx(Vx!e(e!e!fE_!f~(e!REfVu`wpOr(ers'asv(ewx(Vx!v(e!v!wE{!w~(e!RFSVu`wpOr(ers'asv(ewx(Vx!{(e!{!|Fi!|~(e!RFpVu`wpOr(ers'asv(ewx(Vx!r(e!r!sGV!s~(e!RG^Vu`wpOr(ers'asv(ewx(Vx!g(e!g!hGs!h~(e!RGzWu`wpOrGsrsHdsvGsvwHxwxIhx!`Gs!`!aJd!a~GsqHiTwpOvHdvxHxx!`Hd!`!aIZ!a~HdPH{RO!`Hx!`!aIU!a~HxPIZOhPqIbQwphPOv'ax~'aaImVu`OrIhrsHxsvIhvwHxw!`Ih!`!aJS!a~IhaJZRu`hPOr(Vsv(Vw~(V!RJmTu`wphPOr(ers'asv(ewx(Vx~(e!RKTVu`wpOr(ers'asv(ewx(Vx#c(e#c#dKj#d~(e!RKqVu`wpOr(ers'asv(ewx(Vx#V(e#V#WLW#W~(e!RL_Vu`wpOr(ers'asv(ewx(Vx#h(e#h#iLt#i~(e!RL{Vu`wpOr(ers'asv(ewx(Vx#m(e#m#nMb#n~(e!RMiVu`wpOr(ers'asv(ewx(Vx#d(e#d#eNO#e~(e!RNVVu`wpOr(ers'asv(ewx(Vx#X(e#X#YGs#Y~(e!RNsWu`wpOrNlrs! ]svNlvw! qwx!#Rx!aNl!a!b!$i!b~Nlq! bTwpOv! ]vx! qx!a! ]!a!b!!`!b~! ]P! tRO!a! q!a!b! }!b~! qP!!QRO!`! q!`!a!!Z!a~! qP!!`OfPq!!eTwpOv! ]vx! qx!`! ]!`!a!!t!a~! ]q!!{QwpfPOv'ax~'aa!#WVu`Or!#Rrs! qsv!#Rvw! qw!a!#R!a!b!#m!b~!#Ra!#rVu`Or!#Rrs! qsv!#Rvw! qw!`!#R!`!a!$X!a~!#Ra!$`Ru`fPOr(Vsv(Vw~(V!R!$pWu`wpOrNlrs! ]svNlvw! qwx!#Rx!`Nl!`!a!%Y!a~Nl!R!%cTu`wpfPOr(ers'asv(ewx(Vx~(e!V!%}V_SVPu`wpOr%{rs&ksv%{wx'lx!^%{!^!_(e!_~%{!a!&oeVPaWu`wpOX$eXZ%{Z]$e]^%{^p$epq%{qr$ers&ksv$evw({wx'lx!P$e!P!Q%{!Q!^$e!^!_(e!_!a%{!a$f$e$f$g%{$g;=`$e;=`<%l4t<%l~$e",
      tokenizers: [tagStart, selfClosed, 0, 1, 2, 3, 4, 5],
      topRules: {"Document":[0,6]},
      nested: [["elementContent", elementContent,"&k~RP!^!_U~XP!P!Q[~_dXY!mYZ!m]^!mpq!m![!]$O!c!}$O#R#S$O#T#o$O%W%o$O%p&a$O&b1p$O4U4d$O4e$IS$O$I`$Ib$O$Kh%#t$O&/x&Et$O&FV;'S$O;'S;:j&e?&r?Ah$O?BY?Mn$O~!pdXY!mYZ!m]^!mpq!m![!]$O!c!}$O#R#S$O#T#o$O%W%o$O%p&a$O&b1p$O4U4d$O4e$IS$O$I`$Ib$O$Kh%#t$O&/x&Et$O&FV;'S$O;'S;:j&e?&r?Ah$O?BY?Mn$O~$RkXY%vYZ%v]^%vpq%v}!O$O!O!P$O!Q![$O![!]$O!`!a&Y!c!}$O#R#S$O#T#o$O$}%O$O%W%o$O%p&a$O&b1p$O1p4U$O4U4d$O4e$IS$O$I`$Ib$O$Je$Jg$O$Kh%#t$O&/x&Et$O&FV;'S$O;'S;:j&_?&r?Ah$O?BY?Mn$O~%yTXY%vYZ%v]^%vpq%v!`!a&Y~&_Op~~&bP;=`<%l$O~&hP;=`<%l$O", 40]],
      tokenPrec: 444
    });

    function configureHTML(tags) { return configureTags(parser$2, tags) }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /// A parse stack. These are used internally by the parser to track
    /// parsing progress. They also provide some properties and methods
    /// that external code such as a tokenizer can use to get information
    /// about the parse state.
    var Stack$1 = /** @class */ (function () {
        /// @internal
        function Stack(
        /// A group of values that the stack will share with all
        /// split instances
        ///@internal
        cx, 
        /// Holds state, pos, value stack pos (15 bits array index, 15 bits
        /// buffer index) triplets for all but the top state
        /// @internal
        stack, 
        /// The current parse state @internal
        state, 
        // The position at which the next reduce should take place. This
        // can be less than `this.pos` when skipped expressions have been
        // added to the stack (which should be moved outside of the next
        // reduction)
        /// @internal
        reducePos, 
        /// The input position up to which this stack has parsed.
        pos, 
        /// The dynamic score of the stack, including dynamic precedence
        /// and error-recovery penalties
        /// @internal
        score, 
        // The output buffer. Holds (type, start, end, size) quads
        // representing nodes created by the parser, where `size` is
        // amount of buffer array entries covered by this node.
        /// @internal
        buffer, 
        // The base offset of the buffer. When stacks are split, the split
        // instance shared the buffer history with its parent up to
        // `bufferBase`, which is the absolute offset (including the
        // offset of previous splits) into the buffer at which this stack
        // starts writing.
        /// @internal
        bufferBase, 
        // A parent stack from which this was split off, if any. This is
        // set up so that it always points to a stack that has some
        // additional buffer content, never to a stack with an equal
        // `bufferBase`.
        /// @internal
        parent) {
            this.cx = cx;
            this.stack = stack;
            this.state = state;
            this.reducePos = reducePos;
            this.pos = pos;
            this.score = score;
            this.buffer = buffer;
            this.bufferBase = bufferBase;
            this.parent = parent;
        }
        /// @internal
        Stack.prototype.toString = function () {
            return "[" + this.stack.filter(function (_, i) { return i % 3 == 0; }).concat(this.state) + "]@" + this.pos + (this.score ? "!" + this.score : "");
        };
        // Start an empty stack
        /// @internal
        Stack.start = function (cx, state, pos) {
            if (pos === void 0) { pos = 0; }
            return new Stack(cx, [], state, pos, pos, 0, [], 0, null);
        };
        // Push a state onto the stack, tracking its start position as well
        // as the buffer base at that point.
        /// @internal
        Stack.prototype.pushState = function (state, start) {
            this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
            this.state = state;
        };
        // Apply a reduce action
        /// @internal
        Stack.prototype.reduce = function (action) {
            var depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;
            var parser = this.cx.parser;
            var dPrec = parser.dynamicPrecedence(type);
            if (dPrec)
                this.score += dPrec;
            if (depth == 0) {
                // Zero-depth reductions are a special case—they add stuff to
                // the stack without popping anything off.
                if (type < parser.minRepeatTerm)
                    this.storeNode(type, this.reducePos, this.reducePos, 4, true);
                this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
                return;
            }
            // Find the base index into `this.stack`, content after which will
            // be dropped. Note that with `StayFlag` reductions we need to
            // consume two extra frames (the dummy parent node for the skipped
            // expression and the state that we'll be staying in, which should
            // be moved to `this.state`).
            var base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);
            var start = this.stack[base - 2];
            var bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
            // Store normal terms or `R -> R R` repeat reductions
            if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {
                var pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
                this.storeNode(type, start, pos, count + 4, true);
            }
            if (action & 262144 /* StayFlag */) {
                this.state = this.stack[base];
            }
            else {
                var baseStateID = this.stack[base - 3];
                this.state = parser.getGoto(baseStateID, type, true);
            }
            while (this.stack.length > base)
                this.stack.pop();
        };
        // Shift a value into the buffer
        /// @internal
        Stack.prototype.storeNode = function (term, start, end, size, isReduce) {
            if (size === void 0) { size = 4; }
            if (isReduce === void 0) { isReduce = false; }
            if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes
                var cur = this, top = this.buffer.length;
                if (top == 0 && cur.parent) {
                    top = cur.bufferBase - cur.parent.bufferBase;
                    cur = cur.parent;
                }
                if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {
                    if (start == end)
                        return;
                    if (cur.buffer[top - 2] >= start) {
                        cur.buffer[top - 2] = end;
                        return;
                    }
                }
            }
            if (!isReduce || this.pos == end) { // Simple case, just append
                this.buffer.push(term, start, end, size);
            }
            else { // There may be skipped nodes that have to be moved forward
                var index = this.buffer.length;
                if (index > 0 && this.buffer[index - 4] != 0 /* Err */)
                    while (index > 0 && this.buffer[index - 2] > end) {
                        // Move this record forward
                        this.buffer[index] = this.buffer[index - 4];
                        this.buffer[index + 1] = this.buffer[index - 3];
                        this.buffer[index + 2] = this.buffer[index - 2];
                        this.buffer[index + 3] = this.buffer[index - 1];
                        index -= 4;
                        if (size > 4)
                            size -= 4;
                    }
                this.buffer[index] = term;
                this.buffer[index + 1] = start;
                this.buffer[index + 2] = end;
                this.buffer[index + 3] = size;
            }
        };
        // Apply a shift action
        /// @internal
        Stack.prototype.shift = function (action, next, nextEnd) {
            if (action & 131072 /* GotoFlag */) {
                this.pushState(action & 65535 /* ValueMask */, this.pos);
            }
            else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift
                var start = this.pos, nextState = action, parser = this.cx.parser;
                if (nextEnd > this.pos || next <= parser.maxNode) {
                    this.pos = nextEnd;
                    if (!parser.stateFlag(nextState, 1 /* Skipped */))
                        this.reducePos = nextEnd;
                }
                this.pushState(nextState, start);
                if (next <= parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
            }
            else { // Shift-and-stay, which means this is a skipped token
                if (next <= this.cx.parser.maxNode)
                    this.buffer.push(next, this.pos, nextEnd, 4);
                this.pos = nextEnd;
            }
        };
        // Apply an action
        /// @internal
        Stack.prototype.apply = function (action, next, nextEnd) {
            if (action & 65536 /* ReduceFlag */)
                this.reduce(action);
            else
                this.shift(action, next, nextEnd);
        };
        // Add a prebuilt node into the buffer. This may be a reused node or
        // the result of running a nested parser.
        /// @internal
        Stack.prototype.useNode = function (value, next) {
            var index = this.cx.reused.length - 1;
            if (index < 0 || this.cx.reused[index] != value) {
                this.cx.reused.push(value);
                index++;
            }
            var start = this.pos;
            this.reducePos = this.pos = start + value.length;
            this.pushState(next, start);
            this.buffer.push(index, start, this.reducePos, -1 /* size < 0 means this is a reused value */);
        };
        // Split the stack. Due to the buffer sharing and the fact
        // that `this.stack` tends to stay quite shallow, this isn't very
        // expensive.
        /// @internal
        Stack.prototype.split = function () {
            var parent = this;
            var off = parent.buffer.length;
            // Because the top of the buffer (after this.pos) may be mutated
            // to reorder reductions and skipped tokens, and shared buffers
            // should be immutable, this copies any outstanding skipped tokens
            // to the new buffer, and puts the base pointer before them.
            while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
                off -= 4;
            var buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
            // Make sure parent points to an actual parent with content, if there is such a parent.
            while (parent && base == parent.bufferBase)
                parent = parent.parent;
            return new Stack(this.cx, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, parent);
        };
        // Try to recover from an error by 'deleting' (ignoring) one token.
        /// @internal
        Stack.prototype.recoverByDelete = function (next, nextEnd) {
            var isNode = next <= this.cx.parser.maxNode;
            if (isNode)
                this.storeNode(next, this.pos, nextEnd);
            this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
            this.pos = this.reducePos = nextEnd;
            this.score -= 200 /* Token */;
        };
        /// Check if the given term would be able to be shifted (optionally
        /// after some reductions) on this stack. This can be useful for
        /// external tokenizers that want to make sure they only provide a
        /// given token when it applies.
        Stack.prototype.canShift = function (term) {
            for (var sim = new SimulatedStack$1(this);;) {
                var action = this.cx.parser.stateSlot(sim.top, 4 /* DefaultReduce */) || this.cx.parser.hasAction(sim.top, term);
                if ((action & 65536 /* ReduceFlag */) == 0)
                    return true;
                if (action == 0)
                    return false;
                sim.reduce(action);
            }
        };
        Object.defineProperty(Stack.prototype, "ruleStart", {
            /// Find the start position of the rule that is currently being parsed.
            get: function () {
                for (var state = this.state, base = this.stack.length;;) {
                    var force = this.cx.parser.stateSlot(state, 5 /* ForcedReduce */);
                    if (!(force & 65536 /* ReduceFlag */))
                        return 0;
                    base -= 3 * (force >> 19 /* ReduceDepthShift */);
                    if ((force & 65535 /* ValueMask */) < this.cx.parser.minRepeatTerm)
                        return this.stack[base + 1];
                    state = this.stack[base];
                }
            },
            enumerable: true,
            configurable: true
        });
        /// Find the start position of an instance of any of the given term
        /// types, or return `null` when none of them are found.
        ///
        /// **Note:** this is only reliable when there is at least some
        /// state that unambiguously matches the given rule on the stack.
        /// I.e. if you have a grammar like this, where the difference
        /// between `a` and `b` is only apparent at the third token:
        ///
        ///     a { b | c }
        ///     b { "x" "y" "x" }
        ///     c { "x" "y" "z" }
        ///
        /// Then a parse state after `"x"` will not reliably tell you that
        /// `b` is on the stack. You _can_ pass `[b, c]` to reliably check
        /// for either of those two rules (assuming that `a` isn't part of
        /// some rule that includes other things starting with `"x"`).
        ///
        /// When `before` is given, this keeps scanning up the stack until
        /// it finds a match that starts before that position.
        Stack.prototype.startOf = function (types, before) {
            var state = this.state, frame = this.stack.length, parser = this.cx.parser;
            for (;;) {
                var force = parser.stateSlot(state, 5 /* ForcedReduce */);
                var depth = force >> 19 /* ReduceDepthShift */, term = force & 65535 /* ValueMask */;
                if (types.indexOf(term) > -1) {
                    var base = frame - (3 * (force >> 19 /* ReduceDepthShift */)), pos = this.stack[base + 1];
                    if (before == null || before > pos)
                        return pos;
                }
                if (frame == 0)
                    return null;
                if (depth == 0) {
                    frame -= 3;
                    state = this.stack[frame];
                }
                else {
                    frame -= 3 * (depth - 1);
                    state = parser.getGoto(this.stack[frame - 3], term, true);
                }
            }
        };
        // Apply up to Recover.MaxNext recovery actions that conceptually
        // inserts some missing token or rule.
        /// @internal
        Stack.prototype.recoverByInsert = function (next) {
            var _this = this;
            if (this.stack.length >= 300 /* MaxInsertStackDepth */)
                return [];
            var nextStates = this.cx.parser.nextStates(this.state);
            if (nextStates.length > 4 /* MaxNext */ || this.stack.length >= 120 /* DampenInsertStackDepth */) {
                var best = nextStates.filter(function (s) { return s != _this.state && _this.cx.parser.hasAction(s, next); });
                if (this.stack.length < 120 /* DampenInsertStackDepth */)
                    for (var i = 0; best.length < 4 /* MaxNext */ && i < nextStates.length; i++)
                        if (best.indexOf(nextStates[i]) < 0)
                            best.push(nextStates[i]);
                nextStates = best;
            }
            var result = [];
            for (var i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i++) {
                if (nextStates[i] == this.state)
                    continue;
                var stack = this.split();
                stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
                stack.pushState(nextStates[i], this.pos);
                stack.score -= 200 /* Token */;
                result.push(stack);
            }
            return result;
        };
        // Force a reduce, if possible. Return false if that can't
        // be done.
        /// @internal
        Stack.prototype.forceReduce = function () {
            var reduce = this.cx.parser.stateSlot(this.state, 5 /* ForcedReduce */);
            if ((reduce & 65536 /* ReduceFlag */) == 0)
                return false;
            if (!this.cx.parser.validAction(this.state, reduce)) {
                this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
                this.score -= 100 /* Reduce */;
            }
            this.reduce(reduce);
            return true;
        };
        /// @internal
        Stack.prototype.forceAll = function () {
            while (!this.cx.parser.stateFlag(this.state, 2 /* Accepting */) && this.forceReduce()) { }
            return this;
        };
        Object.defineProperty(Stack.prototype, "deadEnd", {
            /// Check whether this state has no further actions (assumed to be a direct descendant of the
            /// top state, since any other states must be able to continue
            /// somehow). @internal
            get: function () {
                if (this.stack.length != 3)
                    return false;
                var parser = this.cx.parser;
                return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&
                    !parser.stateSlot(this.state, 4 /* DefaultReduce */);
            },
            enumerable: true,
            configurable: true
        });
        /// Restart the stack (put it back in its start state). Only safe
        /// when this.stack.length == 3 (state is directly below the top
        /// state). @internal
        Stack.prototype.restart = function () {
            this.state = this.stack[0];
            this.stack.length = 0;
        };
        /// @internal
        Stack.prototype.sameState = function (other) {
            if (this.state != other.state || this.stack.length != other.stack.length)
                return false;
            for (var i = 0; i < this.stack.length; i += 3)
                if (this.stack[i] != other.stack[i])
                    return false;
            return true;
        };
        // Convert the stack's buffer to a syntax tree.
        /// @internal
        Stack.prototype.toTree = function () {
            return Tree.build({ buffer: StackBufferCursor$1.create(this),
                group: this.cx.parser.group,
                topID: this.cx.topTerm,
                maxBufferLength: this.cx.maxBufferLength,
                reused: this.cx.reused,
                minRepeatType: this.cx.parser.minRepeatTerm });
        };
        Object.defineProperty(Stack.prototype, "parser", {
            /// Get the parser used by this stack.
            get: function () { return this.cx.parser; },
            enumerable: true,
            configurable: true
        });
        /// Test whether a given dialect (by numeric ID, as exported from
        /// the terms file) is enabled.
        Stack.prototype.dialectEnabled = function (dialectID) { return this.cx.dialect.flags[dialectID]; };
        return Stack;
    }());
    var Recover$1;
    (function (Recover) {
        Recover[Recover["Token"] = 200] = "Token";
        Recover[Recover["Reduce"] = 100] = "Reduce";
        Recover[Recover["MaxNext"] = 4] = "MaxNext";
        Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
        Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
    })(Recover$1 || (Recover$1 = {}));
    // Used to cheaply run some reductions to scan ahead without mutating
    // an entire stack
    var SimulatedStack$1 = /** @class */ (function () {
        function SimulatedStack(stack) {
            this.stack = stack;
            this.top = stack.state;
            this.rest = stack.stack;
            this.offset = this.rest.length;
        }
        SimulatedStack.prototype.reduce = function (action) {
            var term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;
            if (depth == 0) {
                if (this.rest == this.stack.stack)
                    this.rest = this.rest.slice();
                this.rest.push(this.top, 0, 0);
                this.offset += 3;
            }
            else {
                this.offset -= (depth - 1) * 3;
            }
            var goto = this.stack.cx.parser.getGoto(this.rest[this.offset - 3], term, true);
            this.top = goto;
        };
        return SimulatedStack;
    }());
    // This is given to `Tree.build` to build a buffer, and encapsulates
    // the parent-stack-walking necessary to read the nodes.
    var StackBufferCursor$1 = /** @class */ (function () {
        function StackBufferCursor(stack, pos, index) {
            this.stack = stack;
            this.pos = pos;
            this.index = index;
            this.buffer = stack.buffer;
            if (this.index == 0)
                this.maybeNext();
        }
        StackBufferCursor.create = function (stack) {
            return new StackBufferCursor(stack, stack.bufferBase + stack.buffer.length, stack.buffer.length);
        };
        StackBufferCursor.prototype.maybeNext = function () {
            var next = this.stack.parent;
            if (next != null) {
                this.index = this.stack.bufferBase - next.bufferBase;
                this.stack = next;
                this.buffer = next.buffer;
            }
        };
        Object.defineProperty(StackBufferCursor.prototype, "id", {
            get: function () { return this.buffer[this.index - 4]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StackBufferCursor.prototype, "start", {
            get: function () { return this.buffer[this.index - 3]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StackBufferCursor.prototype, "end", {
            get: function () { return this.buffer[this.index - 2]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StackBufferCursor.prototype, "size", {
            get: function () { return this.buffer[this.index - 1]; },
            enumerable: true,
            configurable: true
        });
        StackBufferCursor.prototype.next = function () {
            this.index -= 4;
            this.pos -= 4;
            if (this.index == 0)
                this.maybeNext();
        };
        StackBufferCursor.prototype.fork = function () {
            return new StackBufferCursor(this.stack, this.pos, this.index);
        };
        return StackBufferCursor;
    }());

    /// Tokenizers write the tokens they read into instances of this class.
    var Token$1 = /** @class */ (function () {
        function Token() {
            /// The start of the token. This is set by the parser, and should not
            /// be mutated by the tokenizer.
            this.start = -1;
            /// This starts at -1, and should be updated to a term id when a
            /// matching token is found.
            this.value = -1;
            /// When setting `.value`, you should also set `.end` to the end
            /// position of the token. (You'll usually want to use the `accept`
            /// method.)
            this.end = -1;
        }
        /// Accept a token, setting `value` and `end` to the given values.
        Token.prototype.accept = function (value, end) {
            this.value = value;
            this.end = end;
        };
        return Token;
    }());
    /// An `InputStream` that is backed by a single, flat string.
    var StringStream$1 = /** @class */ (function () {
        function StringStream(string, length) {
            if (length === void 0) { length = string.length; }
            this.string = string;
            this.length = length;
        }
        StringStream.prototype.get = function (pos) {
            return pos < 0 || pos >= this.length ? -1 : this.string.charCodeAt(pos);
        };
        StringStream.prototype.read = function (from, to) { return this.string.slice(from, Math.min(this.length, to)); };
        StringStream.prototype.clip = function (at) { return new StringStream(this.string, at); };
        return StringStream;
    }());
    /// @internal
    var TokenGroup$1 = /** @class */ (function () {
        function TokenGroup(data, id) {
            this.data = data;
            this.id = id;
        }
        TokenGroup.prototype.token = function (input, token, stack) { readToken$1(this.data, input, token, stack, this.id); };
        return TokenGroup;
    }());
    TokenGroup$1.prototype.contextual = TokenGroup$1.prototype.fallback = TokenGroup$1.prototype.extend = false;
    /// Exports that are used for `@external tokens` in the grammar should
    /// export an instance of this class.
    var ExternalTokenizer$1 = /** @class */ (function () {
        /// Create a tokenizer. The first argument is the function that,
        /// given an input stream and a token object,
        /// [fills](#lezer.Token.accept) the token object if it recognizes a
        /// token. `token.start` should be used as the start position to
        /// scan from.
        function ExternalTokenizer(
        /// @internal
        token, options) {
            if (options === void 0) { options = {}; }
            this.token = token;
            this.contextual = !!options.contextual;
            this.fallback = !!options.fallback;
            this.extend = !!options.extend;
        }
        return ExternalTokenizer;
    }());
    // Tokenizer data is stored a big uint16 array containing, for each
    // state:
    //
    //  - A group bitmask, indicating what token groups are reachable from
    //    this state, so that paths that can only lead to tokens not in
    //    any of the current groups can be cut off early.
    //
    //  - The position of the end of the state's sequence of accepting
    //    tokens
    //
    //  - The number of outgoing edges for the state
    //
    //  - The accepting tokens, as (token id, group mask) pairs
    //
    //  - The outgoing edges, as (start character, end character, state
    //    index) triples, with end character being exclusive
    //
    // This function interprets that data, running through a stream as
    // long as new states with the a matching group mask can be reached,
    // and updating `token` when it matches a token.
    function readToken$1(data, input, token, stack, group) {
        var state = 0, groupMask = 1 << group, dialect = stack.cx.dialect;
        scan: for (var pos = token.start;;) {
            if ((groupMask & data[state]) == 0)
                break;
            var accEnd = data[state + 1];
            // Check whether this state can lead to a token in the current group
            // Accept tokens in this state, possibly overwriting
            // lower-precedence / shorter tokens
            for (var i = state + 3; i < accEnd; i += 2)
                if ((data[i + 1] & groupMask) > 0) {
                    var term = data[i];
                    if (dialect.allows(term) &&
                        (token.value == -1 || token.value == term || stack.cx.parser.overrides(term, token.value))) {
                        token.accept(term, pos);
                        break;
                    }
                }
            var next = input.get(pos++);
            // Do a binary search on the state's edges
            for (var low = 0, high = data[state + 2]; low < high;) {
                var mid = (low + high) >> 1;
                var index = accEnd + mid + (mid << 1);
                var from = data[index], to = data[index + 1];
                if (next < from)
                    high = mid;
                else if (next >= to)
                    low = mid + 1;
                else {
                    state = data[index + 2];
                    continue scan;
                }
            }
            break;
        }
    }

    // See lezer-generator/src/encode.ts for comments about the encoding
    // used here
    function decodeArray$1(input, Type) {
        if (Type === void 0) { Type = Uint16Array; }
        if (typeof input != "string")
            return input;
        var array = null;
        for (var pos = 0, out = 0; pos < input.length;) {
            var value = 0;
            for (;;) {
                var next = input.charCodeAt(pos++), stop = false;
                if (next == 126 /* BigValCode */) {
                    value = 65535 /* BigVal */;
                    break;
                }
                if (next >= 92 /* Gap2 */)
                    next--;
                if (next >= 34 /* Gap1 */)
                    next--;
                var digit = next - 32 /* Start */;
                if (digit >= 46 /* Base */) {
                    digit -= 46 /* Base */;
                    stop = true;
                }
                value += digit;
                if (stop)
                    break;
                value *= 46 /* Base */;
            }
            if (array)
                array[out++] = value;
            else
                array = new Type(value);
        }
        return array;
    }

    // Environment variable used to control console output
    var verbose$1 = typeof process != "undefined" && /\bparse\b/.test(process.env.LOG);
    var stackIDs$1 = null;
    var CacheCursor$1 = /** @class */ (function () {
        function CacheCursor(tree) {
            this.start = [0];
            this.index = [0];
            this.nextStart = 0;
            this.trees = [tree];
        }
        // `pos` must be >= any previously given `pos` for this cursor
        CacheCursor.prototype.nodeAt = function (pos) {
            if (pos < this.nextStart)
                return null;
            for (;;) {
                var last = this.trees.length - 1;
                if (last < 0) { // End of tree
                    this.nextStart = 1e9;
                    return null;
                }
                var top = this.trees[last], index = this.index[last];
                if (index == top.children.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                    continue;
                }
                var next = top.children[index];
                var start = this.start[last] + top.positions[index];
                if (start >= pos)
                    return start == pos ? next : null;
                if (next instanceof TreeBuffer) {
                    this.index[last]++;
                    this.nextStart = start + next.length;
                }
                else {
                    this.index[last]++;
                    if (start + next.length >= pos) { // Enter this node
                        this.trees.push(next);
                        this.start.push(start);
                        this.index.push(0);
                    }
                }
            }
        };
        return CacheCursor;
    }());
    var CachedToken$1 = /** @class */ (function (_super) {
        __extends$1(CachedToken, _super);
        function CachedToken() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.extended = -1;
            _this.mask = 0;
            return _this;
        }
        CachedToken.prototype.clear = function (start) {
            this.start = start;
            this.value = this.extended = -1;
        };
        return CachedToken;
    }(Token$1));
    var dummyToken$1 = new Token$1;
    var TokenCache$1 = /** @class */ (function () {
        function TokenCache(parser) {
            this.tokens = [];
            this.mainToken = dummyToken$1;
            this.actions = [];
            this.tokens = parser.tokenizers.map(function (_) { return new CachedToken$1; });
        }
        TokenCache.prototype.getActions = function (stack, input) {
            var actionIndex = 0;
            var main = null;
            var parser = stack.cx.parser, tokenizers = parser.tokenizers;
            var mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
            for (var i = 0; i < tokenizers.length; i++) {
                if (((1 << i) & mask) == 0)
                    continue;
                var tokenizer = tokenizers[i], token = this.tokens[i];
                if (main && !tokenizer.fallback)
                    continue;
                if (tokenizer.contextual || token.start != stack.pos || token.mask != mask) {
                    this.updateCachedToken(token, tokenizer, stack, input);
                    token.mask = mask;
                }
                if (token.value != 0 /* Err */) {
                    var startIndex = actionIndex;
                    if (token.extended > -1)
                        actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                    actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                    if (!tokenizer.extend) {
                        main = token;
                        if (actionIndex > startIndex)
                            break;
                    }
                }
            }
            while (this.actions.length > actionIndex)
                this.actions.pop();
            if (!main) {
                main = dummyToken$1;
                main.start = stack.pos;
                if (stack.pos == input.length)
                    main.accept(stack.cx.parser.eofTerm, stack.pos);
                else
                    main.accept(0 /* Err */, stack.pos + 1);
            }
            this.mainToken = main;
            return this.actions;
        };
        TokenCache.prototype.updateCachedToken = function (token, tokenizer, stack, input) {
            token.clear(stack.pos);
            tokenizer.token(input, token, stack);
            if (token.value > -1) {
                var parser = stack.cx.parser;
                for (var i = 0; i < parser.specialized.length; i++)
                    if (parser.specialized[i] == token.value) {
                        var result = parser.specializers[i](input.read(token.start, token.end), stack);
                        if (result >= 0 && stack.cx.dialect.allows(result >> 1)) {
                            if ((result & 1) == 0 /* Specialize */)
                                token.value = result >> 1;
                            else
                                token.extended = result >> 1;
                            break;
                        }
                    }
            }
            else if (stack.pos == input.length) {
                token.accept(stack.cx.parser.eofTerm, stack.pos);
            }
            else {
                token.accept(0 /* Err */, stack.pos + 1);
            }
        };
        TokenCache.prototype.putAction = function (action, token, end, index) {
            // Don't add duplicate actions
            for (var i = 0; i < index; i += 3)
                if (this.actions[i] == action)
                    return index;
            this.actions[index++] = action;
            this.actions[index++] = token;
            this.actions[index++] = end;
            return index;
        };
        TokenCache.prototype.addActions = function (stack, token, end, index) {
            var state = stack.state, parser = stack.cx.parser, data = parser.data;
            for (var set = 0; set < 2; set++) {
                for (var i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {
                    if (data[i] == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */) {
                            i = pair$1(data, i + 2);
                        }
                        else {
                            if (index == 0 && data[i + 1] == 2 /* Other */)
                                index = this.putAction(pair$1(data, i + 1), token, end, index);
                            break;
                        }
                    }
                    if (data[i] == token)
                        index = this.putAction(pair$1(data, i + 1), token, end, index);
                }
            }
            return index;
        };
        return TokenCache;
    }());
    var StackContext$1 = /** @class */ (function () {
        function StackContext(parser, maxBufferLength, input, topTerm, dialect, parent, wrapType // Set to -2 when a stack descending from this nesting event finishes
        ) {
            if (parent === void 0) { parent = null; }
            if (wrapType === void 0) { wrapType = -1; }
            this.parser = parser;
            this.maxBufferLength = maxBufferLength;
            this.input = input;
            this.topTerm = topTerm;
            this.dialect = dialect;
            this.parent = parent;
            this.wrapType = wrapType;
            this.reused = [];
            this.tokens = new TokenCache$1(parser);
        }
        return StackContext;
    }());
    var recoverDist$1 = 5, maxRemainingPerStep$1 = 3, minBufferLengthPrune$1 = 200, forceReduceLimit$1 = 10;
    /// A parse context can be used for step-by-step parsing. After
    /// creating it, you repeatedly call `.advance()` until it returns a
    /// tree to indicate it has reached the end of the parse.
    var ParseContext$1 = /** @class */ (function () {
        /// @internal
        function ParseContext(parser, input, options) {
            if (options === void 0) { options = {}; }
            // The position to which the parse has advanced.
            this.pos = 0;
            this.recovering = 0;
            this.tokenCount = 0;
            this.nextStackID = 0x2654;
            var _a = options.cache, cache = _a === void 0 ? undefined : _a, _b = options.strict, strict = _b === void 0 ? false : _b, _c = options.bufferLength, bufferLength = _c === void 0 ? DefaultBufferLength : _c, _d = options.top, top = _d === void 0 ? undefined : _d, dialect = options.dialect;
            var topInfo = top ? parser.topRules[top] : parser.defaultTop;
            if (!topInfo)
                throw new RangeError("Invalid top rule name " + top);
            this.stacks = [Stack$1.start(new StackContext$1(parser, bufferLength, input, topInfo[1], parser.parseDialect(dialect)), topInfo[0])];
            this.strict = strict;
            this.cache = cache ? new CacheCursor$1(cache) : null;
        }
        /// @internal
        ParseContext.prototype.putStack = function (stack) {
            this.stacks.push(stack);
            if (this.pos < 0 || stack.pos < this.pos)
                this.pos = stack.pos;
        };
        /// @internal
        ParseContext.prototype.putStackDedup = function (stack) {
            for (var i = 0; i < this.stacks.length; i++) {
                var other = this.stacks[i];
                if (other.pos == stack.pos && other.sameState(stack)) {
                    if (this.stacks[i].score < stack.score)
                        this.stacks[i] = stack;
                    return;
                }
            }
            this.putStack(stack);
        };
        /// Move the parser forward. This will process all parse stacks at
        /// `this.pos` and try to advance them to a further position. If no
        /// stack for such a position is found, it'll start error-recovery.
        ///
        /// When the parse is finished, this will return a syntax tree. When
        /// not, it returns `null`.
        ParseContext.prototype.advance = function () {
            var stacks = this.stacks, pos = this.pos;
            // This will now hold stacks beyond `pos`.
            this.stacks = [];
            // Will be reset to the next position by `putStack`.
            this.pos = -1;
            var stopped = null, stoppedTokens = null;
            // Keep advancing any stacks at `pos` until they either move
            // forward or can't be advanced. Gather stacks that can't be
            // advanced further in `stopped`.
            for (var i = 0; i < stacks.length; i++) {
                var stack = stacks[i];
                for (;;) {
                    if (stack.pos > pos) {
                        this.putStack(stack);
                    }
                    else {
                        var result = this.advanceStack(stack, stacks);
                        if (result) {
                            stack = result;
                            continue;
                        }
                        else {
                            if (!stopped) {
                                stopped = [];
                                stoppedTokens = [];
                            }
                            stopped.push(stack);
                            var tok = stack.cx.tokens.mainToken;
                            stoppedTokens.push(tok.value, tok.end);
                        }
                    }
                    break;
                }
            }
            if (!this.stacks.length) {
                var finished = stopped && findFinished$1(stopped);
                if (finished)
                    return finished.toTree();
                if (this.strict) {
                    if (verbose$1 && stopped)
                        console.log("Stuck with token " + stopped[0].cx.parser.getName(stopped[0].cx.tokens.mainToken.value));
                    throw new SyntaxError("No parse at " + pos);
                }
                if (!this.recovering)
                    this.recovering = recoverDist$1;
            }
            if (this.recovering && stopped) {
                var finished = this.runRecovery(stopped, stoppedTokens);
                if (finished)
                    return finished.forceAll().toTree();
            }
            if (this.recovering) {
                var maxRemaining = this.recovering == 1 ? 1 : this.recovering * maxRemainingPerStep$1;
                if (this.stacks.length > maxRemaining) {
                    this.stacks.sort(function (a, b) { return b.score - a.score; });
                    this.stacks.length = maxRemaining;
                }
                if (this.stacks.some(function (s) { return s.reducePos > pos; }))
                    this.recovering--;
            }
            else if (this.stacks.length > 1) {
                // Prune stacks that are in the same state, or that have been
                // running without splitting for a while, to avoid getting stuck
                // with multiple successful stacks running endlessly on.
                outer: for (var i = 0; i < this.stacks.length - 1; i++) {
                    var stack = this.stacks[i];
                    for (var j = i + 1; j < this.stacks.length; j++) {
                        var other = this.stacks[j];
                        if (stack.sameState(other) ||
                            stack.buffer.length > minBufferLengthPrune$1 && other.buffer.length > minBufferLengthPrune$1) {
                            if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                                this.stacks.splice(j--, 1);
                            }
                            else {
                                this.stacks.splice(i--, 1);
                                continue outer;
                            }
                        }
                    }
                }
            }
            this.tokenCount++;
            return null;
        };
        // Returns an updated version of the given stack, or null if the
        // stack can't advance normally. When `split` is given, stacks split
        // off by ambiguous operations will be pushed to that, or given to
        // `putStack` if they move `pos` forward.
        ParseContext.prototype.advanceStack = function (stack, split) {
            var start = stack.pos, _a = stack.cx, input = _a.input, parser = _a.parser;
            var base = verbose$1 ? this.stackID(stack) + " -> " : "";
            if (this.cache) {
                for (var cached = this.cache.nodeAt(start); cached;) {
                    var match = parser.group.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                    if (match > -1 && cached.length) {
                        stack.useNode(cached, match);
                        if (verbose$1)
                            console.log(base + this.stackID(stack) + (" (via reuse of " + parser.getName(cached.type.id) + ")"));
                        return stack;
                    }
                    if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                        break;
                    var inner = cached.children[0];
                    if (inner instanceof Tree)
                        cached = inner;
                    else
                        break;
                }
            }
            var nest = parser.startNested(stack.state);
            maybeNest: if (nest > -1) {
                var _b = parser.nested[nest], grammar = _b.grammar, endToken = _b.end, placeholder = _b.placeholder;
                var filterEnd = undefined, parseNode = null, nested = void 0, top = void 0, dialect = void 0, wrapType = undefined;
                if (typeof grammar == "function") {
                    var query = grammar(input, stack);
                    if (query.stay)
                        break maybeNest;
                    (parseNode = query.parseNode, nested = query.parser, top = query.top, dialect = query.dialect, filterEnd = query.filterEnd, wrapType = query.wrapType);
                }
                else {
                    nested = grammar;
                }
                var end = this.scanForNestEnd(stack, endToken, filterEnd);
                var clippedInput = stack.cx.input.clip(end);
                if (parseNode || !nested) {
                    var node = parseNode ? parseNode(clippedInput, stack.pos) : Tree.empty;
                    if (node.length != end - stack.pos)
                        node = new Tree(node.type, node.children, node.positions, end - stack.pos);
                    if (wrapType != null)
                        node = new Tree(parser.group.types[wrapType], [node], [0], node.length);
                    stack.useNode(node, parser.getGoto(stack.state, placeholder, true));
                    return stack;
                }
                else {
                    var topInfo = top ? nested.topRules[top] : nested.defaultTop;
                    var newStack = Stack$1.start(new StackContext$1(nested, stack.cx.maxBufferLength, clippedInput, topInfo[1], nested.parseDialect(dialect), stack, wrapType), topInfo[0], stack.pos);
                    if (verbose$1)
                        console.log(base + this.stackID(newStack) + " (nested)");
                    return newStack;
                }
            }
            var defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
            if (defaultReduce > 0) {
                stack.reduce(defaultReduce);
                if (verbose$1)
                    console.log(base + this.stackID(stack) + (" (via always-reduce " + parser.getName(defaultReduce & 65535 /* ValueMask */) + ")"));
                return stack;
            }
            var actions = stack.cx.tokens.getActions(stack, input);
            for (var i = 0; i < actions.length;) {
                var action = actions[i++], term = actions[i++], end = actions[i++];
                var last = i == actions.length || !split;
                var localStack = last ? stack : stack.split();
                localStack.apply(action, term, end);
                if (verbose$1)
                    console.log(base + this.stackID(localStack) + (" (via " + ((action & 65536 /* ReduceFlag */) == 0 ? "shift"
                        : "reduce of " + parser.getName(action & 65535 /* ValueMask */)) + " for " + parser.getName(term) + " @ " + start + (localStack == stack ? "" : ", split") + ")"));
                if (last)
                    return localStack;
                else if (localStack.pos > start)
                    this.putStack(localStack);
                else
                    split.push(localStack);
            }
            if (stack.cx.parent && stack.pos == input.length)
                return this.finishNested(stack);
            return null;
        };
        // Advance a given stack forward as far as it will go. Returns the
        // (possibly updated) stack if it got stuck, or null if it moved
        // forward and was given to `putStackDedup`.
        ParseContext.prototype.advanceFully = function (stack) {
            var pos = stack.pos;
            for (;;) {
                var result = this.advanceStack(stack, null);
                if (!result)
                    return stack;
                if (result.pos > pos) {
                    this.putStackDedup(result);
                    return null;
                }
                stack = result;
            }
        };
        ParseContext.prototype.runRecovery = function (stacks, tokens) {
            var finished = null, restarted = false;
            for (var i = 0; i < stacks.length; i++) {
                var stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
                var base = verbose$1 ? this.stackID(stack) + " -> " : "";
                if (stack.deadEnd) {
                    if (restarted)
                        continue;
                    restarted = true;
                    stack.restart();
                    if (verbose$1)
                        console.log(base + this.stackID(stack) + " (restarted)");
                    var stopped = this.advanceFully(stack);
                    if (stopped)
                        stack = stopped;
                    else
                        continue;
                }
                var force = stack.split(), forceBase = base;
                for (var j = 0; force.forceReduce() && j < forceReduceLimit$1; j++) {
                    if (verbose$1)
                        console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                    var stopped = this.advanceFully(force);
                    if (!stopped)
                        break;
                    force = stopped;
                    if (verbose$1)
                        forceBase = this.stackID(stopped) + " -> ";
                }
                for (var _i = 0, _a = stack.recoverByInsert(token); _i < _a.length; _i++) {
                    var insert = _a[_i];
                    if (verbose$1)
                        console.log(base + this.stackID(insert) + " (via recover-insert)");
                    this.advanceFully(insert);
                }
                if (stack.cx.input.length > stack.pos) {
                    if (tokenEnd == stack.pos) {
                        tokenEnd++;
                        token = 0 /* Err */;
                    }
                    stack.recoverByDelete(token, tokenEnd);
                    if (verbose$1)
                        console.log(base + this.stackID(stack) + (" (via recover-delete " + stack.cx.parser.getName(token) + ")"));
                    this.putStackDedup(stack);
                }
                else if (!stack.cx.parent && (!finished || finished.score < stack.score)) {
                    finished = stack;
                }
            }
            return finished;
        };
        /// Force the parse to finish, generating a tree containing the nodes
        /// parsed so far.
        ParseContext.prototype.forceFinish = function () {
            return this.stacks[0].split().forceAll().toTree();
        };
        Object.defineProperty(ParseContext.prototype, "badness", {
            /// A value that indicates how successful the parse is so far, as
            /// the number of error-recovery steps taken divided by the number
            /// of tokens parsed. Could be used to decide to abort a parse when
            /// the input doesn't appear to match the grammar at all.
            get: function () {
                if (!this.stacks.length)
                    return 0;
                return -(this.stacks[0].score / (200 /* Token */ * this.tokenCount));
            },
            enumerable: true,
            configurable: true
        });
        ParseContext.prototype.scanForNestEnd = function (stack, endToken, filter) {
            var input = stack.cx.input;
            for (var pos = stack.pos; pos < input.length; pos++) {
                dummyToken$1.start = pos;
                dummyToken$1.value = -1;
                endToken.token(input, dummyToken$1, stack);
                if (dummyToken$1.value > -1 && (!filter || filter(input.read(pos, dummyToken$1.end))))
                    return pos;
            }
            return input.length;
        };
        ParseContext.prototype.finishNested = function (stack) {
            if (stack.cx.wrapType == -2)
                return null; // Another nested stack already finished
            var parent = stack.cx.parent, tree = stack.forceAll().toTree();
            var parentParser = parent.cx.parser, info = parentParser.nested[parentParser.startNested(parent.state)];
            tree = new Tree(tree.type, tree.children, tree.positions.map(function (p) { return p - parent.pos; }), stack.pos - parent.pos);
            if (stack.cx.wrapType > -1)
                tree = new Tree(parentParser.group.types[stack.cx.wrapType], [tree], [0], tree.length);
            stack.cx.wrapType = -2;
            parent.useNode(tree, parentParser.getGoto(parent.state, info.placeholder, true));
            if (verbose$1)
                console.log(this.stackID(parent) + (" (via unnest " + (stack.cx.wrapType > -1 ? parentParser.getName(stack.cx.wrapType) : tree.type.name) + ")"));
            return parent;
        };
        ParseContext.prototype.stackID = function (stack) {
            var id = (stackIDs$1 || (stackIDs$1 = new WeakMap)).get(stack);
            if (!id)
                stackIDs$1.set(stack, id = String.fromCodePoint(this.nextStackID++));
            return id + stack;
        };
        return ParseContext;
    }());
    var Dialect$1 = /** @class */ (function () {
        function Dialect(source, flags, disabled) {
            this.source = source;
            this.flags = flags;
            this.disabled = disabled;
        }
        Dialect.prototype.allows = function (term) { return !this.disabled || this.disabled[term] == 0; };
        return Dialect;
    }());
    /// A parser holds the parse tables for a given grammar, as generated
    /// by `lezer-generator`.
    var Parser$1 = /** @class */ (function () {
        /// @internal
        function Parser(spec) {
            var _this = this;
            this.nextStateCache = [];
            this.cachedDialect = null;
            if (spec.version != 12 /* Version */)
                throw new RangeError("Parser version (" + spec.version + ") doesn't match runtime version (" + 12 /* Version */ + ")");
            var tokenArray = decodeArray$1(spec.tokenData);
            var nodeNames = spec.nodeNames.split(" ");
            this.minRepeatTerm = nodeNames.length;
            for (var i = 0; i < spec.repeatNodeCount; i++)
                nodeNames.push("");
            var nodeProps = [];
            for (var i = 0; i < nodeNames.length; i++)
                nodeProps.push(noProps$1);
            function setProp(nodeID, prop, value) {
                if (nodeProps[nodeID] == noProps$1)
                    nodeProps[nodeID] = Object.create(null);
                prop.set(nodeProps[nodeID], prop.deserialize(String(value)));
            }
            if (spec.nodeProps)
                for (var _i = 0, _a = spec.nodeProps; _i < _a.length; _i++) {
                    var propSpec = _a[_i];
                    var prop = propSpec[0];
                    for (var i = 1; i < propSpec.length;) {
                        var next = propSpec[i++];
                        if (next >= 0) {
                            setProp(next, prop, propSpec[i++]);
                        }
                        else {
                            var value = propSpec[i + -next];
                            for (var j = -next; j > 0; j--)
                                setProp(propSpec[i++], prop, value);
                            i++;
                        }
                    }
                }
            this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);
            this.specializers = [];
            if (spec.specialized)
                for (var i = 0; i < spec.specialized.length; i++) {
                    this.specialized[i] = spec.specialized[i].term;
                    this.specializers[i] = spec.specialized[i].get;
                }
            this.states = decodeArray$1(spec.states, Uint32Array);
            this.data = decodeArray$1(spec.stateData);
            this.goto = decodeArray$1(spec.goto);
            var topTerms = Object.keys(spec.topRules).map(function (r) { return spec.topRules[r][1]; });
            this.group = new NodeGroup(nodeNames.map(function (name, i) {
                var flags = (i >= _this.minRepeatTerm ? 8 /* Repeated */ : 0) |
                    (topTerms.indexOf(i) > -1 ? 1 /* Top */ : 0) |
                    (i == 0 ? 4 /* Error */ : 0) |
                    (spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1 ? 2 /* Skipped */ : 0);
                return new NodeType(name, nodeProps[i], i, flags);
            }));
            this.maxTerm = spec.maxTerm;
            this.tokenizers = spec.tokenizers.map(function (value) { return typeof value == "number" ? new TokenGroup$1(tokenArray, value) : value; });
            this.topRules = spec.topRules;
            this.nested = (spec.nested || []).map(function (_a) {
                var name = _a[0], grammar = _a[1], endToken = _a[2], placeholder = _a[3];
                return { name: name, grammar: grammar, end: new TokenGroup$1(decodeArray$1(endToken), 0), placeholder: placeholder };
            });
            this.dialects = spec.dialects || {};
            this.dynamicPrecedences = spec.dynamicPrecedences || null;
            this.tokenPrecTable = spec.tokenPrec;
            this.termNames = spec.termNames || null;
            this.maxNode = this.group.types.length - 1;
            for (var i = 0, l = this.states.length / 6 /* Size */; i < l; i++)
                this.nextStateCache[i] = null;
        }
        /// Parse a given string or stream.
        Parser.prototype.parse = function (input, options) {
            if (typeof input == "string")
                input = new StringStream$1(input);
            var cx = new ParseContext$1(this, input, options);
            for (;;) {
                var done = cx.advance();
                if (done)
                    return done;
            }
        };
        /// Create a `ParseContext`.
        Parser.prototype.startParse = function (input, options) {
            if (typeof input == "string")
                input = new StringStream$1(input);
            return new ParseContext$1(this, input, options);
        };
        /// Get a goto table entry @internal
        Parser.prototype.getGoto = function (state, term, loose) {
            if (loose === void 0) { loose = false; }
            var table = this.goto;
            if (term >= table[0])
                return -1;
            for (var pos = table[term + 1];;) {
                var groupTag = table[pos++], last = groupTag & 1;
                var target = table[pos++];
                if (last && loose)
                    return target;
                for (var end = pos + (groupTag >> 1); pos < end; pos++)
                    if (table[pos] == state)
                        return target;
                if (last)
                    return -1;
            }
        };
        /// Check if this state has an action for a given terminal @internal
        Parser.prototype.hasAction = function (state, terminal) {
            var data = this.data;
            for (var set = 0; set < 2; set++) {
                for (var i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next = void 0;; i += 3) {
                    if ((next = data[i]) == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */)
                            next = data[i = pair$1(data, i + 2)];
                        else if (data[i + 1] == 2 /* Other */)
                            return pair$1(data, i + 2);
                        else
                            break;
                    }
                    if (next == terminal || next == 0 /* Err */)
                        return pair$1(data, i + 1);
                }
            }
            return 0;
        };
        /// @internal
        Parser.prototype.stateSlot = function (state, slot) {
            return this.states[(state * 6 /* Size */) + slot];
        };
        /// @internal
        Parser.prototype.stateFlag = function (state, flag) {
            return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
        };
        /// @internal
        Parser.prototype.startNested = function (state) {
            var flags = this.stateSlot(state, 0 /* Flags */);
            return flags & 4 /* StartNest */ ? flags >> 10 /* NestShift */ : -1;
        };
        /// @internal
        Parser.prototype.validAction = function (state, action) {
            if (action == this.stateSlot(state, 4 /* DefaultReduce */))
                return true;
            for (var i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair$1(this.data, i + 2);
                    else
                        return false;
                }
                if (action == pair$1(this.data, i + 1))
                    return true;
            }
        };
        /// Get the states that can follow this one through shift actions or
        /// goto jumps. @internal
        Parser.prototype.nextStates = function (state) {
            var cached = this.nextStateCache[state];
            if (cached)
                return cached;
            var result = [];
            for (var i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair$1(this.data, i + 2);
                    else
                        break;
                }
                if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0 && result.indexOf(this.data[i + 1]) < 0)
                    result.push(this.data[i + 1]);
            }
            var table = this.goto, max = table[0];
            for (var term = 0; term < max; term++) {
                for (var pos = table[term + 1];;) {
                    var groupTag = table[pos++], target = table[pos++];
                    for (var end = pos + (groupTag >> 1); pos < end; pos++)
                        if (table[pos] == state && result.indexOf(target) < 0)
                            result.push(target);
                    if (groupTag & 1)
                        break;
                }
            }
            return this.nextStateCache[state] = result;
        };
        /// @internal
        Parser.prototype.overrides = function (token, prev) {
            var iPrev = findOffset$1(this.data, this.tokenPrecTable, prev);
            return iPrev < 0 || findOffset$1(this.data, this.tokenPrecTable, token) < iPrev;
        };
        /// Create a new `Parser` instance with different values for (some
        /// of) the nested grammars. This can be used to, for example, swap
        /// in a different language for a nested grammar or fill in a nested
        /// grammar that was left blank by the original grammar.
        Parser.prototype.withNested = function (spec) {
            return this.copy({ nested: this.nested.map(function (obj) {
                    if (!Object.prototype.hasOwnProperty.call(spec, obj.name))
                        return obj;
                    return { name: obj.name, grammar: spec[obj.name], end: obj.end, placeholder: obj.placeholder };
                }) });
        };
        /// Create a new `Parser` instance whose node types have the given
        /// props added. You should use [`NodeProp.add`](#tree.NodeProp.add)
        /// to create the arguments to this method.
        Parser.prototype.withProps = function () {
            var _a;
            var props = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                props[_i] = arguments[_i];
            }
            return this.copy({ group: (_a = this.group).extend.apply(_a, props) });
        };
        /// Replace the given external tokenizer with another one, returning
        /// a new parser object.
        Parser.prototype.withTokenizer = function (from, to) {
            return this.copy({ tokenizers: this.tokenizers.map(function (t) { return t == from ? to : t; }) });
        };
        Parser.prototype.copy = function (props) {
            // Hideous reflection-based kludge to make it easy to create a
            // slightly modified copy of a parser.
            var obj = Object.create(Parser.prototype);
            for (var _i = 0, _a = Object.keys(this); _i < _a.length; _i++) {
                var key = _a[_i];
                obj[key] = key in props ? props[key] : this[key];
            }
            return obj;
        };
        /// Returns the name associated with a given term. This will only
        /// work for all terms when the parser was generated with the
        /// `--names` option. By default, only the names of tagged terms are
        /// stored.
        Parser.prototype.getName = function (term) {
            return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.group.types[term].name || term);
        };
        Object.defineProperty(Parser.prototype, "eofTerm", {
            /// The eof term id is always allocated directly after the node
            /// types. @internal
            get: function () { return this.maxNode + 1; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Parser.prototype, "hasNested", {
            /// Tells you whether this grammar has any nested grammars.
            get: function () { return this.nested.length > 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Parser.prototype, "defaultTop", {
            /// @internal
            get: function () { return this.topRules[Object.keys(this.topRules)[0]]; },
            enumerable: true,
            configurable: true
        });
        /// @internal
        Parser.prototype.dynamicPrecedence = function (term) {
            var prec = this.dynamicPrecedences;
            return prec == null ? 0 : prec[term] || 0;
        };
        Object.defineProperty(Parser.prototype, "topType", {
            /// The node type produced by the default top rule.
            get: function () { return this.group.types[this.defaultTop[1]]; },
            enumerable: true,
            configurable: true
        });
        /// @internal
        Parser.prototype.parseDialect = function (dialect) {
            if (this.cachedDialect && this.cachedDialect.source == dialect)
                return this.cachedDialect;
            var values = Object.keys(this.dialects), flags = values.map(function () { return false; });
            if (dialect)
                for (var _i = 0, _a = dialect.split(" "); _i < _a.length; _i++) {
                    var part = _a[_i];
                    var id = values.indexOf(part);
                    if (id >= 0)
                        flags[id] = true;
                }
            var disabled = null;
            for (var i = 0; i < values.length; i++)
                if (!flags[i]) {
                    for (var j = this.dialects[values[i]], id = void 0; (id = this.data[j++]) != 65535 /* End */;)
                        (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
                }
            return this.cachedDialect = new Dialect$1(dialect, flags, disabled);
        };
        /// (used by the output of the parser generator) @internal
        Parser.deserialize = function (spec) {
            return new Parser(spec);
        };
        return Parser;
    }());
    function pair$1(data, off) { return data[off] | (data[off + 1] << 16); }
    Parser$1.TokenGroup = TokenGroup$1;
    var noProps$1 = Object.create(null);
    function findOffset$1(data, start, term) {
        for (var i = start, next = void 0; (next = data[i]) != 65535 /* End */; i++)
            if (next == term)
                return i - start;
        return -1;
    }
    function findFinished$1(stacks) {
        var best = null;
        for (var _i = 0, stacks_1 = stacks; _i < stacks_1.length; _i++) {
            var stack = stacks_1[_i];
            if (stack.pos == stack.cx.input.length &&
                stack.cx.parser.stateFlag(stack.state, 2 /* Accepting */) &&
                (!best || best.score < stack.score))
                best = stack;
        }
        return best;
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const 
      descendantOp$1 = 92,
      Unit$1 = 1,
      callee$1 = 93,
      identifier$1 = 94;

    /* Hand-written tokenizers for CSS tokens that can't be
       expressed by Lezer's built-in tokenizer. */

    const space$1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
                   8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
    const colon$1 = 58, parenL$1 = 40, underscore$1 = 95, bracketL$1 = 91, dash$1 = 45, period$1 = 46,
          hash$1 = 35, percent$1 = 37;

    function isAlpha$1(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }

    function isDigit$1(ch) { return ch >= 48 && ch <= 57 }

    const identifiers$1 = new ExternalTokenizer$1((input, token) => {
      let start = token.start, pos = start, inside = false;
      for (;;) {
        let next = input.get(pos);
        if (isAlpha$1(next) || next == dash$1 || next == underscore$1 || (inside && isDigit$1(next))) {
          if (!inside && (next != dash$1 || pos > start)) inside = true;
          pos++;
          continue
        }
        if (inside)
          token.accept(next == parenL$1 ? callee$1 : identifier$1, pos);
        break
      }
    });

    const descendant$1 = new ExternalTokenizer$1((input, token) => {
      if (space$1.includes(input.get(token.start - 1))) {
        let next = input.get(token.start);
        if (isAlpha$1(next) || next == underscore$1 || next == hash$1 || next == period$1 ||
            next == bracketL$1 || next == colon$1 || next == dash$1)
          token.accept(descendantOp$1, token.start);
      }
    });

    const unitToken$1 = new ExternalTokenizer$1((input, token) => {
      let {start} = token;
      if (!space$1.includes(input.get(start - 1))) {
        let next = input.get(start);
        if (next == percent$1) token.accept(Unit$1, start + 1);
        if (isAlpha$1(next)) {
          let pos = start + 1;
          while (isAlpha$1(input.get(pos))) pos++;
          token.accept(Unit$1, pos);
        }
      }
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_callee$1 = {__proto__:null,not:30, url:64, "url-prefix":64, domain:64, regexp:64, selector:132};
    const spec_AtKeyword$1 = {__proto__:null,"@import":112, "@media":136, "@charset":140, "@namespace":144, "@keyframes":150, "@supports":162};
    const spec_identifier$2 = {__proto__:null,not:126, only:126, from:156, to:158};
    const parser$3 = Parser$1.deserialize({
      version: 12,
      states: "7WOYQ[OOOOQP'#Cc'#CcOOQP'#Cb'#CbO!ZQ[O'#CeO!}QXO'#C`O#UQ[O'#CgO#aQ[O'#DOO#fQ[O'#DSOOQP'#Eb'#EbO#kQdO'#DdO$SQ[O'#DqO#kQdO'#DsO$eQ[O'#DuO$pQ[O'#DxO$uQ[O'#EOO%TQ[O'#EQOOQS'#Ea'#EaOOQS'#ER'#ERQYQ[OOOOQP'#Cf'#CfOOQP,59P,59PO!ZQ[O,59PO%[Q[O'#ESO%vQWO,58zO&OQ[O,59RO#aQ[O,59jO#fQ[O,59nO%[Q[O,59rO%[Q[O,59tO%[Q[O,59uO'[Q[O'#D_OOQS,58z,58zOOQP'#Cj'#CjOOQO'#Cp'#CpOOQP,59R,59RO'cQWO,59RO'hQWO,59ROOQP'#DQ'#DQOOQP,59j,59jOOQO'#DU'#DUO'mQ`O,59nOOQS'#Cr'#CrO#kQdO'#CsO'uQvO'#CuO(|QtO,5:OOOQO'#Cz'#CzO'hQWO'#CyO)bQWO'#C{OOQS'#Ef'#EfOOQO'#Dg'#DgO)gQ[O'#DnO)uQWO'#EhO$uQ[O'#DlO*TQWO'#DoOOQO'#Ei'#EiO%yQWO,5:]O*YQpO,5:_OOQS'#Dw'#DwO*bQWO,5:aO*gQ[O,5:aOOQO'#Dz'#DzO*oQWO,5:dO*tQWO,5:jO*|QWO,5:lOOQS-E8P-E8POOQP1G.k1G.kO+pQXO,5:nOOQO-E8Q-E8QOOQS1G.f1G.fOOQP1G.m1G.mO'cQWO1G.mO'hQWO1G.mOOQP1G/U1G/UO+}Q`O1G/YO,hQXO1G/^O-OQXO1G/`O-fQXO1G/aO-|QXO'#CcO.qQWO'#D`OOQS,59y,59yO.vQWO,59yO/OQ[O,59yO/VQ[O'#CnO/^QdO'#CqOOQP1G/Y1G/YO#kQdO1G/YO/eQpO,59_OOQS,59a,59aO#kQdO,59cO/mQWO1G/jOOQS,59e,59eO/rQ!bO,59gO/zQWO'#DgO0VQWO,5:SO0[QWO,5:YO$uQ[O,5:UO$uQ[O'#EXO0dQWO,5;SO0oQWO,5:WO%[Q[O,5:ZOOQS1G/w1G/wOOQS1G/y1G/yOOQS1G/{1G/{O1QQWO1G/{O1VQdO'#D{OOQS1G0O1G0OOOQS1G0U1G0UOOQS1G0W1G0WOOQP7+$X7+$XOOQP7+$t7+$tO#kQdO7+$tO#kQdO,59zO1eQ[O'#EWO1oQWO1G/eOOQS1G/e1G/eO1oQWO1G/eO1wQXO'#EdO2OQWO,59YO2TQtO'#ETO2uQdO'#EeO3PQWO,59]O3UQpO7+$tOOQS1G.y1G.yOOQS1G.}1G.}OOQS7+%U7+%UO3^QWO1G/RO#kQdO1G/nOOQO1G/t1G/tOOQO1G/p1G/pO3cQWO,5:sOOQO-E8V-E8VO3qQXO1G/uOOQS7+%g7+%gO3xQYO'#CuO%yQWO'#EYO4QQdO,5:gOOQS,5:g,5:gO4`QpO<<H`O4hQtO1G/fOOQO,5:r,5:rO4{Q[O,5:rOOQO-E8U-E8UOOQS7+%P7+%PO5VQWO7+%PO5_QWO,5;OOOQP1G.t1G.tOOQS-E8R-E8RO#kQdO'#EUO5gQWO,5;POOQT1G.w1G.wOOQP<<H`<<H`OOQS7+$m7+$mO5oQdO7+%YOOQO7+%a7+%aOOQS,5:t,5:tOOQS-E8W-E8WOOQS1G0R1G0ROOQPAN=zAN=zO5vQtO'#EVO#kQdO'#EVO6nQdO7+%QOOQO7+%Q7+%QOOQO1G0^1G0^OOQS<<Hk<<HkO7OQdO,5:pOOQO-E8S-E8SOOQO<<Ht<<HtO7YQtO,5:qOOQS-E8T-E8TOOQO<<Hl<<Hl",
      stateData: "8W~O#SOSQOS~OTWOWWO[TO]TOsUOwVO!X_O!YXO!fYO!hZO!j[O!m]O!s^O#QPO#VRO~O#QcO~O[hO]hOcfOsiOwjO{kO!OmO#OlO#VeO~O!QnO~P!`O_sO#PqO#QpO~O#QuO~O#QwO~OazOh!QOj!QOp!PO#P}O#QyO#Z{O~Oa!SO!a!UO!d!VO#Q!RO!Q#[P~Oj![Op!PO#Q!ZO~O#Q!^O~Oa!SO!a!UO!d!VO#Q!RO~O!V#[P~P$SOTWOWWO[TO]TOsUOwVO#QPO#VRO~OcfO!QnO~O_!hO#PqO#QpO~OTWOWWO[TO]TOsUOwVO!X_O!YXO!fYO!hZO!j[O!m]O!s^O#Q!oO#VRO~O!P!qO~P&ZOa!tO~Oa!uO~Ou!vOy!wO~OP!yOaiXliX!ViX!aiX!diX#QiX`iXciXhiXjiXpiX#PiX#ZiXuiX!PiX!UiX~Oa!SOl!zO!a!UO!d!VO#Q!RO!V#[P~Oa!}O~Oa!SO!a!UO!d!VO#Q#OO~Oc#SO!_#RO!Q#[X!V#[X~Oa#VO~Ol!zO!V#XO~O!V#YO~Oj#ZOp!PO~O!Q#[O~O!QnO!_#RO~O!QnO!V#_O~O[hO]hOsiOwjO{kO!OmO#OlO#VeO~Oc!va!Q!va`!va~P+UOu#aOy#bO~O[hO]hOsiOwjO#VeO~Oczi{zi!Ozi!Qzi#Ozi`zi~P,VOc|i{|i!O|i!Q|i#O|i`|i~P,VOc}i{}i!O}i!Q}i#O}i`}i~P,VO[VX[!TX]VXcVXsVXwVX{VX!OVX!QVX#OVX#VVX~O[#cO~O!P#fO!V#dO~O!P#fO~P&ZO`#WP~P%[O`#XP~P#kO`#nOl!zO~O!V#pO~Oj#qOq#qO~O[!]X`!ZX!_!ZX~O[#rO~O`#sO!_#RO~Oc#SO!Q#[a!V#[a~O!_#ROc!`a!Q!`a!V!`a`!`a~O!V#xO~O!P#|O!p#zO!q#zO#Z#yO~O!P!zX!V!zX~P&ZO!P$SO!V#dO~O`#WX~P!`O`$VO~Ol!zO`!wXa!wXc!wXh!wXj!wXp!wX#P!wX#Q!wX#Z!wX~Oc$XO`#XX~P#kO`$ZO~Ol!zOu$[O~O`$]O~O!_#ROc!{a!Q!{a!V!{a~O`$_O~P+UOP!yO!QiX~O!P$bO!p#zO!q#zO#Z#yO~Ol!zOu$cO~Oc$eOl!zO!U$gO!P!Si!V!Si~P#kO!P!za!V!za~P&ZO!P$iO!V#dO~OcfO`#Wa~Oc$XO`#Xa~O`$lO~P#kOl!zOa!yXc!yXh!yXj!yXp!yX!P!yX!U!yX!V!yX#P!yX#Q!yX#Z!yX~Oc$eO!U$oO!P!Sq!V!Sq~P#kO`!xac!xa~P#kOl!zOa!yac!yah!yaj!yap!ya!P!ya!U!ya!V!ya#P!ya#Q!ya#Z!ya~Oq#Zl!Ol~",
      goto: "+}#^PPPP#_P#g#uP#g$T#gPP$ZPPP$aP$g$m$v$vP%YP$vP$v%p&SPP#gP&lP#gP&rP#gP#g#gPPP&x'['hPP#_PP'n'n'x'nP'nP'n'nP#_P#_P#_P'{#_P(O(RPP#_P#_(U(d(n(|)S)Y)d)jPPPPPP)p)xP*d*g*jP+`+i]`Obn!s#d$QiWObfklmn!s!t#V#d$QiQObfklmn!s!t#V#d$QQdRR!ceQrTR!ghQ!gsR#`!hQtTR!ihQ!gtQ!|!OR#`!iq!QXZz!u!w!z#b#c#k#r$O$X$^$e$f$jp!QXZz!u!w!z#b#c#k#r$O$X$^$e$f$jT#z#[#{q!OXZz!u!w!z#b#c#k#r$O$X$^$e$f$jp!QXZz!u!w!z#b#c#k#r$O$X$^$e$f$jQ![[R#Z!]QvUR!jiQxVR!kjQoSQ!fgQ#W!XQ#^!`Q#_!aR$`#zQ!rnQ#g!sQ$P#dR$h$QX!pn!s#d$Qa!WY^_|!S!U#R#SR#P!SR!][R!_]R#]!_QbOU!bb!s$QQ!snR$Q#dQgSS!eg$UR$U#hQ#k!uU$W#k$^$jQ$^#rR$j$XQ$Y#kR$k$YQ$f$OR$n$fQ#e!rS$R#e$TR$T#gQ#T!TR#v#TQ#{#[R$a#{]aObn!s#d$Q[SObn!s#d$QQ!dfQ!lkQ!mlQ!nmQ#h!tR#w#VR#i!tR#l!uQ|XQ!YZQ!xz[#j!u#k#r$X$^$jQ#m!wQ#o!zQ#}#bQ$O#cS$d$O$fR$m$eQ!XYQ!a_R!{|U!TY_|Q!`^Q#Q!SQ#U!UQ#t#RR#u#S",
      nodeNames: "⚠ Unit Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName not ) ( ArgList , PseudoClassName ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery callee MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports AtRule",
      maxTerm: 105,
      nodeProps: [
        [NodeProp.openedBy, 16,"(",47,"{"],
        [NodeProp.closedBy, 17,")",48,"}"]
      ],
      skippedNodes: [0,2],
      repeatNodeCount: 8,
      tokenData: "Bj~R![OX$wX^%]^p$wpq%]qr(crs+}st,otu2Uuv$wvw2rwx2}xy3jyz3uz{3z{|4_|}8u}!O9Q!O!P9i!P!Q9z!Q![<U![!]<y!]!^=i!^!_$w!_!`=t!`!a>P!a!b$w!b!c>o!c!}$w!}#O?{#O#P$w#P#Q@W#Q#R2U#R#T$w#T#U@c#U#c$w#c#dAb#d#o$w#o#pAq#p#q2U#q#rA|#r#sBX#s#y$w#y#z%]#z$f$w$f$g%]$g#BY$w#BY#BZ%]#BZ$IS$w$IS$I_%]$I_$I|$w$I|$JO%]$JO$JT$w$JT$JU%]$JU$KV$w$KV$KW%]$KW&FU$w&FU&FV%]&FV~$wW$zQOy%Qz~%QW%VQqWOy%Qz~%Q~%bf#S~OX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q~&}f#S~qWOX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q^(fSOy%Qz#]%Q#]#^(r#^~%Q^(wSqWOy%Qz#a%Q#a#b)T#b~%Q^)YSqWOy%Qz#d%Q#d#e)f#e~%Q^)kSqWOy%Qz#c%Q#c#d)w#d~%Q^)|SqWOy%Qz#f%Q#f#g*Y#g~%Q^*_SqWOy%Qz#h%Q#h#i*k#i~%Q^*pSqWOy%Qz#T%Q#T#U*|#U~%Q^+RSqWOy%Qz#b%Q#b#c+_#c~%Q^+dSqWOy%Qz#h%Q#h#i+p#i~%Q^+wQ!UUqWOy%Qz~%Q~,QUOY+}Zr+}rs,ds#O+}#O#P,i#P~+}~,iOj~~,lPO~+}_,tWsPOy%Qz!Q%Q!Q![-^![!c%Q!c!i-^!i#T%Q#T#Z-^#Z~%Q^-cWqWOy%Qz!Q%Q!Q![-{![!c%Q!c!i-{!i#T%Q#T#Z-{#Z~%Q^.QWqWOy%Qz!Q%Q!Q![.j![!c%Q!c!i.j!i#T%Q#T#Z.j#Z~%Q^.qWhUqWOy%Qz!Q%Q!Q![/Z![!c%Q!c!i/Z!i#T%Q#T#Z/Z#Z~%Q^/bWhUqWOy%Qz!Q%Q!Q![/z![!c%Q!c!i/z!i#T%Q#T#Z/z#Z~%Q^0PWqWOy%Qz!Q%Q!Q![0i![!c%Q!c!i0i!i#T%Q#T#Z0i#Z~%Q^0pWhUqWOy%Qz!Q%Q!Q![1Y![!c%Q!c!i1Y!i#T%Q#T#Z1Y#Z~%Q^1_WqWOy%Qz!Q%Q!Q![1w![!c%Q!c!i1w!i#T%Q#T#Z1w#Z~%Q^2OQhUqWOy%Qz~%QY2XSOy%Qz!_%Q!_!`2e!`~%QY2lQyQqWOy%Qz~%QX2wQWPOy%Qz~%Q~3QUOY2}Zw2}wx,dx#O2}#O#P3d#P~2}~3gPO~2}_3oQaVOy%Qz~%Q~3zO`~_4RSTPlSOy%Qz!_%Q!_!`2e!`~%Q_4fUlS!OPOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q^4}SqWOy%Qz!Q%Q!Q![5Z![~%Q^5bWqW#ZUOy%Qz!Q%Q!Q![5Z![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q^6PWqWOy%Qz{%Q{|6i|}%Q}!O6i!O!Q%Q!Q![6z![~%Q^6nSqWOy%Qz!Q%Q!Q![6z![~%Q^7RSqW#ZUOy%Qz!Q%Q!Q![6z![~%Q^7fYqW#ZUOy%Qz!O%Q!O!P8U!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q^8]WqW#ZUOy%Qz!Q%Q!Q![8U![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q_8zQcVOy%Qz~%Q^9VUlSOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q_9nS#VPOy%Qz!Q%Q!Q![5Z![~%Q~:PRlSOy%Qz{:Y{~%Q~:_SqWOy:Yyz:kz{;`{~:Y~:nROz:kz{:w{~:k~:zTOz:kz{:w{!P:k!P!Q;Z!Q~:k~;`OQ~~;eUqWOy:Yyz:kz{;`{!P:Y!P!Q;w!Q~:Y~<OQQ~qWOy%Qz~%Q^<ZY#ZUOy%Qz!O%Q!O!P8U!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%QX=OS[POy%Qz![%Q![!]=[!]~%QX=cQ]PqWOy%Qz~%Q_=nQ!VVOy%Qz~%QY=yQyQOy%Qz~%QX>US{POy%Qz!`%Q!`!a>b!a~%QX>iQ{PqWOy%Qz~%QX>rUOy%Qz!c%Q!c!}?U!}#T%Q#T#o?U#o~%QX?]Y!XPqWOy%Qz}%Q}!O?U!O!Q%Q!Q![?U![!c%Q!c!}?U!}#T%Q#T#o?U#o~%QX@QQwPOy%Qz~%Q^@]QuUOy%Qz~%QX@fSOy%Qz#b%Q#b#c@r#c~%QX@wSqWOy%Qz#W%Q#W#XAT#X~%QXA[Q!_PqWOy%Qz~%QXAeSOy%Qz#f%Q#f#gAT#g~%QXAvQ!QPOy%Qz~%Q_BRQ!PVOy%Qz~%QZB^S!OPOy%Qz!_%Q!_!`2e!`~%Q",
      tokenizers: [descendant$1, unitToken$1, identifiers$1, 0, 1, 2, 3],
      topRules: {"StyleSheet":[0,3]},
      specialized: [{term: 93, get: value => spec_callee$1[value] || -1},{term: 55, get: value => spec_AtKeyword$1[value] || -1},{term: 94, get: value => spec_identifier$2[value] || -1}],
      tokenPrec: 1060
    });

    /// A syntax provider based on the [Lezer CSS
    /// parser](https://github.com/lezer-parser/css), extended with
    /// highlighting and indentation information.
    const cssSyntax$1 = LezerSyntax.define(parser$3.withProps(indentNodeProp.add({
        Declaration: continuedIndent()
    }), foldNodeProp.add({
        Block(subtree) { return { from: subtree.from + 1, to: subtree.to - 1 }; }
    }), styleTags({
        "import charset namespace keyframes": tags$1.definitionKeyword,
        "media supports": tags$1.controlKeyword,
        "from to": tags$1.keyword,
        NamespaceName: tags$1.namespace,
        KeyframeName: tags$1.labelName,
        TagName: tags$1.typeName,
        ClassName: tags$1.className,
        PseudoClassName: tags$1.constant(tags$1.className),
        not: tags$1.operatorKeyword,
        IdName: tags$1.labelName,
        "FeatureName PropertyName AttributeName": tags$1.propertyName,
        NumberLiteral: tags$1.number,
        KeywordQuery: tags$1.keyword,
        UnaryQueryOp: tags$1.operatorKeyword,
        callee: tags$1.keyword,
        "CallTag ValueName": tags$1.atom,
        Callee: tags$1.variableName,
        Unit: tags$1.unit,
        "UniversalSelector NestingSelector": tags$1.definitionOperator,
        AtKeyword: tags$1.keyword,
        MatchOp: tags$1.compareOperator,
        "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
        BinOp: tags$1.arithmeticOperator,
        Important: tags$1.modifier,
        Comment: tags$1.blockComment,
        ParenthesizedContent: tags$1.special(tags$1.name),
        ColorLiteral: tags$1.color,
        StringLiteral: tags$1.string,
        ":": tags$1.punctuation,
        "PseudoOp #": tags$1.derefOperator,
        "; ,": tags$1.separator,
        "( )": tags$1.paren,
        "[ ]": tags$1.squareBracket,
        "{ }": tags$1.brace
    })), {
        languageData: {
            commentTokens: { block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*\}$/
        }
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const 
      noSemi = 268,
      incdec = 1,
      incdecPrefix = 2,
      templateContent = 269,
      templateDollarBrace = 270,
      templateEnd = 271,
      insertSemi = 272,
      TSExtends = 3,
      Dialect_ts = 1;

    /* Hand-written tokenizers for JavaScript tokens that can't be
       expressed by lezer's built-in tokenizer. */

    const newline = [10, 13, 8232, 8233];
    const space$2 = [9, 11, 12, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288];

    const braceR = 125, braceL = 123, semicolon = 59, slash$1 = 47, star = 42,
          plus = 43, minus = 45, dollar = 36, backtick = 96, backslash = 92;

    // FIXME this should technically enter block comments
    function newlineBefore(input, pos) {
      for (let i = pos - 1; i >= 0; i--) {
        let prev = input.get(i);
        if (newline.indexOf(prev) > -1) return true
        if (space$2.indexOf(prev) < 0) break
      }
      return false
    }

    const insertSemicolon = new ExternalTokenizer$1((input, token, stack) => {
      let pos = token.start, next = input.get(pos);
      if ((next == braceR || next == -1 || newlineBefore(input, pos)) && stack.canShift(insertSemi))
        token.accept(insertSemi, token.start);
    }, {contextual: true, fallback: true});

    const noSemicolon = new ExternalTokenizer$1((input, token, stack) => {
      let pos = token.start, next = input.get(pos++);
      if (space$2.indexOf(next) > -1 || newline.indexOf(next) > -1) return
      if (next == slash$1) {
        let after = input.get(pos++);
        if (after == slash$1 || after == star) return
      }
      if (next != braceR && next != semicolon && next != -1 && !newlineBefore(input, token.start) &&
          stack.canShift(noSemi))
        token.accept(noSemi, token.start);
    }, {contextual: true});

    const incdecToken = new ExternalTokenizer$1((input, token, stack) => {
      let pos = token.start, next = input.get(pos);
      if ((next == plus || next == minus) && next == input.get(pos + 1)) {
        let mayPostfix = !newlineBefore(input, token.start) && stack.canShift(incdec);
        token.accept(mayPostfix ? incdec : incdecPrefix, pos + 2);
      }
    }, {contextual: true});

    const template = new ExternalTokenizer$1((input, token) => {
      let pos = token.start, afterDollar = false;
      for (;;) {
        let next = input.get(pos++);
        if (next < 0) {
          if (pos - 1 > token.start) token.accept(templateContent, pos - 1);
          break
        } else if (next == backtick) {
          if (pos == token.start + 1) token.accept(templateEnd, pos);
          else token.accept(templateContent, pos - 1);
          break
        } else if (next == braceL && afterDollar) {
          if (pos == token.start + 2) token.accept(templateDollarBrace, pos);
          else token.accept(templateContent, pos - 2);
          break
        } else if (next == 10 /* "\n" */ && pos > token.start + 1) {
          // Break up template strings on lines, to avoid huge tokens
          token.accept(templateContent, pos);
          break
        } else if (next == backslash && pos != input.length) {
          pos++;
        }
        afterDollar = next == dollar;
      }
    });

    function tsExtends(value, stack) {
      return value == "extends" && stack.dialectEnabled(Dialect_ts) ? TSExtends : -1
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$3 = {__proto__:null,export:16, as:21, from:25, default:30, async:35, function:36, this:46, true:54, false:54, void:58, typeof:62, null:76, super:78, new:112, await:129, yield:131, delete:132, class:142, extends:144, public:181, private:181, protected:181, readonly:183, in:202, instanceof:204, import:236, keyof:285, unique:289, infer:295, is:329, abstract:349, implements:351, type:353, let:356, var:358, const:360, interface:367, enum:371, namespace:377, module:379, declare:383, global:387, for:408, of:417, while:420, with:424, do:428, if:432, else:434, switch:438, case:444, try:450, catch:452, finally:454, return:458, throw:462, break:466, continue:470, debugger:474};
    const spec_word = {__proto__:null,async:99, get:101, set:103, public:151, private:151, protected:151, static:153, abstract:155, readonly:159, new:333};
    const spec_LessThan = {__proto__:null,"<":119};
    const parser$4 = Parser$1.deserialize({
      version: 12,
      states: "$8YO]QYOOO&zQ!LdO'#CgO'ROSO'#DRO)ZQYO'#DWO)kQYO'#DcO)rQYO'#DmO-iQYO'#DsOOQO'#ET'#ETO-|QWO'#ESO.RQWO'#ESO.ZQ!LdO'#IfO2dQ!LdO'#IgO3QQWO'#EpO3VQpO'#FUOOQ!LS'#Ex'#ExO3_O!bO'#ExO3mQWO'#F]O4wQWO'#F[OOQ!LS'#Ig'#IgOOQ!LS'#If'#IfOOQQ'#JQ'#JQO4|QWO'#HdO5RQ!LYO'#HeOOQQ'#IZ'#IZOOQQ'#Hf'#HfQ]QYOOO)rQYO'#DeO5ZQWO'#GPO5`Q#tO'#ClO5nQWO'#ESO5yQ#tO'#EwO6eQWO'#GPO6jQWO'#GTO6uQWO'#GTO7TQWO'#GXO7TQWO'#GYO7TQWO'#G[O5ZQWO'#G_O7tQWO'#GbO9SQWO'#CcO9dQWO'#GoO9lQWO'#GuO9lQWO'#GwO]QYO'#GyO9lQWO'#G{O9lQWO'#HOO9qQWO'#HUO9vQ!LZO'#HYO)rQYO'#H[O:RQ!LZO'#H^O:^Q!LZO'#H`O5RQ!LYO'#HbO)rQYO'#IiOOOS'#Hg'#HgO:iOSO,59mOOQ!LS,59m,59mO<zQbO'#CgO=UQYO'#HhO=cQWO'#IkO?bQbO'#IkO'^QYO'#IkO?iQWO,59rO@PQ&jO'#D]O@xQWO'#ETOAVQWO'#IuOAbQWO'#ItOAjQWO,5:qOAoQWO'#IsOAvQWO'#DtO5`Q#tO'#ERO5qQWO'#ESOBUQ`O'#EwOOQ!LS,59},59}OB^QYO,59}OD[Q!LdO,5:XODxQWO,5:_OEcQ!LYO'#IrO6jQWO'#IqOEjQWO'#IqOErQWO,5:pOEwQWO'#IqOFVQYO,5:nOHSQWO'#EPOIZQWO,5:nOJgQWO'#DgOJnQYO'#DlOJxQ&jO,5:wO)rQYO,5:wOOQQ'#Eh'#EhOOQQ'#Ej'#EjO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xOOQQ'#En'#EnOJ}QYO,5;XOOQ!LS,5;^,5;^OOQ!LS,5;_,5;_OLzQWO,5;_OOQ!LS,5;`,5;`O)rQYO'#HrOMPQ!LYO,5;xOHSQWO,5:xO)rQYO,5;[OM|QpO'#IyOMkQpO'#IyONTQpO'#IyONfQpO,5;gOOQO,5;p,5;pO!!qQYO'#FWOOOO'#Hq'#HqO3_O!bO,5;dO!!xQpO'#FYOOQ!LS,5;d,5;dO!#fQ,UO'#CqOOQ!LS'#Ct'#CtO!#yQWO'#CtO!$aQ#tO,5;uO!$hQWO,5;wO!%qQWO'#FgO!&OQWO'#FhO!&TQWO'#FlO!'VQ&jO'#FpO!'xQ,UO'#IdOOQ!LS'#Id'#IdO!(SQWO'#IcO!(bQWO'#IbOOQ!LS'#Cr'#CrOOQ!LS'#Cx'#CxO!(jQWO'#CzOI`QWO'#F_OI`QWO'#FaO!(oQWO'#FcOIUQWO'#FdO!(tQWO'#FjOI`QWO'#FoO!(yQWO'#EUO!)bQWO,5;vO]QYO,5>OOOQQ'#I^'#I^OOQQ,5>P,5>POOQQ-E;d-E;dO!+^Q!LdO,5:POOQ!LQ'#Co'#CoO!+}Q#tO,5<kOOQO'#Ce'#CeO!,`QWO'#CpO!,hQ!LYO'#I_O4wQWO'#I_O9qQWO,59WO!,vQpO,59WO!-OQ#tO,59WO!-ZQWO,5:nO5`Q#tO,59WO!-cQWO'#GnO!-kQWO'#JUO!-sQYO,5;aOJxQ&jO,5;cO!/pQWO,5=XO!/uQWO,5=XO!/zQWO,5=XO5RQ!LYO,5=XO5ZQWO,5<kO!0YQWO'#EVO!0kQ&jO'#EWOOQ!LQ'#Is'#IsO!0|Q!LYO'#JRO5RQ!LYO,5<oO7TQWO,5<vOOQO'#Cq'#CqO!1XQpO,5<sO!1aQ#tO,5<tO!1lQWO,5<vO!1qQ`O,5<yO9qQWO'#GdO5ZQWO'#GfO!1yQWO'#GfO5`Q#tO'#GiO!2OQWO'#GiOOQQ,5<|,5<|O!2TQWO'#GjO!2]QWO'#ClO!2bQWO,58}O!2lQWO,58}O!4kQYO,58}OOQQ,58},58}O!4xQ!LYO,58}O)rQYO,58}O!5TQYO'#GqOOQQ'#Gr'#GrOOQQ'#Gs'#GsO]QYO,5=ZO!5eQWO,5=ZO)rQYO'#DsO]QYO,5=aO]QYO,5=cO!5jQWO,5=eO]QYO,5=gO!5oQWO,5=jO!5tQYO,5=pOOQQ,5=t,5=tO)rQYO,5=tO5RQ!LYO,5=vOOQQ,5=x,5=xO!9rQWO,5=xOOQQ,5=z,5=zO!9rQWO,5=zOOQQ,5=|,5=|O!9wQ`O,5?TOOOS-E;e-E;eOOQ!LS1G/X1G/XO!9|QbO,5>SO)rQYO,5>SOOQO-E;f-E;fO!:WQWO,5?VO!:`QbO,5?VO!:gQWO,5?`OOQ!LS1G/^1G/^O!:oQpO'#DPOOQO'#Im'#ImO)rQYO'#ImO!;^QpO'#ImO!;{QpO'#D^O!<^Q&jO'#D^O!>fQYO'#D^O!>mQWO'#IlO!>uQWO,59wO!>zQWO'#EXO!?YQWO'#IvO!?bQWO,5:rO!?xQ&jO'#D^O)rQYO,5?aO!@SQWO'#HmO!:gQWO,5?`OOQ!LQ1G0]1G0]O!AYQ&jO'#DwOOQ!LS,5:`,5:`O)rQYO,5:`OHSQWO,5:`O!AaQWO,5:`O9qQWO,5:mO!,vQpO,5:mO!-OQ#tO,5:mOOQ!LS1G/i1G/iOOQ!LS1G/y1G/yOOQ!LQ'#EO'#EOO)rQYO,5?^O!AlQ!LYO,5?^O!A}Q!LYO,5?^O!BUQWO,5?]O!B^QWO'#HoO!BUQWO,5?]OOQ!LQ1G0[1G0[O6jQWO,5?]OOQ!LS1G0Y1G0YO!BxQ!LbO,5:kOOQ!LS'#Ff'#FfO!CfQ!LdO'#IdOFVQYO1G0YO!EeQ#tO'#InO!EoQWO,5:RO!EtQbO'#IoO)rQYO'#IoO!FOQWO,5:WOOQ!LS'#DP'#DPOOQ!LS1G0c1G0cO!FTQWO1G0cO!HfQ!LdO1G0dO!HmQ!LdO1G0dO!KQQ!LdO1G0dO!KXQ!LdO1G0dO!M`Q!LdO1G0dO!MsQ!LdO1G0dO#!dQ!LdO1G0dO#!kQ!LdO1G0dO#%OQ!LdO1G0dO#%VQ!LdO1G0dO#&zQ!LdO1G0dO#)tQ7^O'#CgO#+oQ7^O1G0sO#-mQ7^O'#IgOOQ!LS1G0y1G0yO#-wQ!LdO,5>^OOQ!LS-E;p-E;pO#.hQ!LdO1G0dO#0jQ!LdO1G0vO#1ZQpO,5;iO#1`QpO,5;jO#1eQpO'#FQO#1yQWO'#FPOOQO'#Iz'#IzOOQO'#Hp'#HpO#2OQpO1G1ROOQ!LS1G1R1G1ROOQO1G1Z1G1ZO#2^Q7^O'#IfO#4WQWO,5;rONtQYO,5;rOOOO-E;o-E;oOOQ!LS1G1O1G1OOOQ!LS,5;t,5;tO#4]QpO,5;tOOQ!LS,59`,59`O)rQYO1G1aOJxQ&jO'#HtO#4bQWO,5<YOOQ!LS,5<V,5<VOOQO'#Fz'#FzOI`QWO,5<eOOQO'#F|'#F|OI`QWO,5<gOI`QWO,5<iOOQO1G1c1G1cO#4mQ`O'#CoO#5QQ`O,5<RO#5XQWO'#I}O5ZQWO'#I}O#5gQWO,5<TOI`QWO,5<SO#5lQ`O'#FfO#5yQ`O'#JOO#6TQWO'#JOOHSQWO'#JOO#6YQWO,5<WOOQ!LQ'#Db'#DbO#6_QWO'#FiO#6jQpO'#FqO!'QQ&jO'#FqO!'QQ&jO'#FsO#6{QWO'#FtO!(tQWO'#FwOOQO'#Hv'#HvO#7QQ&jO,5<[OOQ!LS,5<[,5<[O#7XQ&jO'#FqO#7gQ&jO'#FrO#7oQ&jO'#FrOOQ!LS,5<j,5<jOI`QWO,5>}OI`QWO,5>}O#7tQWO'#HwO#8PQWO,5>|OOQ!LS'#Cg'#CgO#8sQ#tO,59fOOQ!LS,59f,59fO#9fQ#tO,5;yO#:XQ#tO,5;{O#:cQWO,5;}OOQ!LS,5<O,5<OO#:hQWO,5<UO#:mQ#tO,5<ZOFVQYO1G1bO#:}QWO1G1bOOQQ1G3j1G3jOOQ!LS1G/k1G/kOLzQWO1G/kOOQQ1G2V1G2VOHSQWO1G2VO)rQYO1G2VOHSQWO1G2VO#;SQWO1G2VO#;bQWO,59[O#<hQWO'#EPOOQ!LQ,5>y,5>yO#<rQ!LYO,5>yOOQQ1G.r1G.rO9qQWO1G.rO!,vQpO1G.rO#=QQWO1G0YO!-OQ#tO1G.rO#=VQWO'#CgO#=bQWO'#JVO#=jQWO,5=YO#=oQWO'#JVO#=tQWO'#IPO#>SQWO,5?pO#@OQbO1G0{OOQ!LS1G0}1G0}O5ZQWO1G2sO#@VQWO1G2sO#@[QWO1G2sO#@aQWO1G2sOOQQ1G2s1G2sO#@fQ#tO1G2VO6jQWO'#ItO6jQWO'#EXO6jQWO'#HyO#@wQ!LYO,5?mOOQQ1G2Z1G2ZO!1lQWO1G2bOHSQWO1G2_O#ASQWO1G2_OOQQ1G2`1G2`OHSQWO1G2`O#AXQWO1G2`O#AaQ&jO'#G^OOQQ1G2b1G2bO!'QQ&jO'#H{O!1qQ`O1G2eOOQQ1G2e1G2eOOQQ,5=O,5=OO#AiQ#tO,5=QO5ZQWO,5=QO#6{QWO,5=TO4wQWO,5=TO!,vQpO,5=TO!-OQ#tO,5=TO5`Q#tO,5=TO#AzQWO'#JTO#BVQWO,5=UOOQQ1G.i1G.iO#B[Q!LYO1G.iO#BgQWO1G.iO!(jQWO1G.iO5RQ!LYO1G.iO#BlQbO,5?rO#BvQWO,5?rO#CRQYO,5=]O#CYQWO,5=]O6jQWO,5?rOOQQ1G2u1G2uO]QYO1G2uOOQQ1G2{1G2{OOQQ1G2}1G2}O9lQWO1G3PO#C_QYO1G3RO#GVQYO'#HQOOQQ1G3U1G3UO9qQWO1G3[O#GdQWO1G3[O5RQ!LYO1G3`OOQQ1G3b1G3bOOQ!LQ'#Fm'#FmO5RQ!LYO1G3dO5RQ!LYO1G3fOOOS1G4o1G4oO#I`Q!LdO,5;xO#IsQbO1G3nO#I}QWO1G4qO#JVQWO1G4zO#J_QWO,5?XONtQYO,5:sO6jQWO,5:sO9qQWO,59xONtQYO,59xO!,vQpO,59xO#LWQ7^O,59xOOQO,5:s,5:sO#LbQ&jO'#HiO#LxQWO,5?WOOQ!LS1G/c1G/cO#MQQ&jO'#HnO#MfQWO,5?bOOQ!LQ1G0^1G0^O!<^Q&jO,59xO#MnQbO1G4{OOQO,5>X,5>XO6jQWO,5>XOOQO-E;k-E;kO#MxQ!LrO'#D|O!'QQ&jO'#DxOOQO'#Hl'#HlO#NdQ&jO,5:cOOQ!LS,5:c,5:cO#NkQ&jO'#DxO#NyQ&jO'#D|O$ _Q&jO'#D|O!'QQ&jO'#D|O$ iQWO1G/zO$ nQ`O1G/zOOQ!LS1G/z1G/zO)rQYO1G/zOHSQWO1G/zOOQ!LS1G0X1G0XO9qQWO1G0XO!,vQpO1G0XO$ uQ!LdO1G4xO)rQYO1G4xO$!VQ!LYO1G4xO$!hQWO1G4wO6jQWO,5>ZOOQO,5>Z,5>ZO$!pQWO,5>ZOOQO-E;m-E;mO$!hQWO1G4wOOQ!LS,5;x,5;xO$#OQ!LdO,59fO$$}Q!LdO,5;yO$'PQ!LdO,5;{O$)RQ!LdO,5<ZOOQ!LS7+%t7+%tO$+ZQWO'#HjO$+eQWO,5?YOOQ!LS1G/m1G/mO$+mQYO'#HkO$+zQWO,5?ZO$,SQbO,5?ZOOQ!LS1G/r1G/rOOQ!LS7+%}7+%}O$,^Q7^O,5:XO)rQYO7+&_O$,hQ7^O,5:POOQO1G1T1G1TOOQO1G1U1G1UO$,oQMhO,5;lONtQYO,5;kOOQO-E;n-E;nOOQ!LS7+&m7+&mOOQO7+&u7+&uOOOO1G1^1G1^O$,zQWO1G1^OOQ!LS1G1`1G1`O$-PQ!LdO7+&{OOQ!LS,5>`,5>`O$-pQWO,5>`OOQ!LS1G1t1G1tP$-uQWO'#HtPOQ!LS-E;r-E;rO$.fQ#tO1G2PO$/XQ#tO1G2RO$/cQ#tO1G2TOOQ!LS1G1m1G1mO$/jQWO'#HsO$/xQWO,5?iO$/xQWO,5?iO$0QQWO,5?iO$0]QWO,5?iOOQO1G1o1G1oO$0kQ#tO1G1nO$0{QWO'#HuO$1]QWO,5?jOHSQWO,5?jO$1eQ`O,5?jOOQ!LS1G1r1G1rO5RQ!LYO,5<]O5RQ!LYO,5<^O$1oQWO,5<^O#6vQWO,5<^O!,vQpO,5<]O$1tQWO,5<_O5RQ!LYO,5<`O$1oQWO,5<cOOQO-E;t-E;tOOQ!LS1G1v1G1vO!'QQ&jO,5<]O$1|QWO,5<^O!'QQ&jO,5<_O!'QQ&jO,5<^O$2XQ#tO1G4iO$2cQ#tO1G4iOOQO,5>c,5>cOOQO-E;u-E;uOJxQ&jO,59hO)rQYO,59hO$2pQWO1G1iOI`QWO1G1pOOQ!LS7+&|7+&|OFVQYO7+&|OOQ!LS7+%V7+%VO$2uQ`O'#JPO$ iQWO7+'qO$3PQWO7+'qO$3XQ`O7+'qOOQQ7+'q7+'qOHSQWO7+'qO)rQYO7+'qOHSQWO7+'qOOQO1G.v1G.vO$3cQ!LbO'#CgO$3sQ!LbO,5<aO$4bQWO,5<aOOQ!LQ1G4e1G4eOOQQ7+$^7+$^O9qQWO7+$^OFVQYO7+%tO!,vQpO7+$^O$4gQWO'#IOO$4rQWO,5?qOOQO1G2t1G2tO5ZQWO,5?qOOQO,5>k,5>kOOQO-E;}-E;}OOQ!LS7+&g7+&gO$4zQWO7+(_O5RQ!LYO7+(_O5ZQWO7+(_O$5PQWO7+(_O$5UQWO7+'qOOQ!LQ,5>e,5>eOOQ!LQ-E;w-E;wOOQQ7+'|7+'|O$5dQ!LbO7+'yOHSQWO7+'yO$5nQ`O7+'zOOQQ7+'z7+'zOHSQWO7+'zO$5uQWO'#JSO$6QQWO,5<xOOQO,5>g,5>gOOQO-E;y-E;yOOQQ7+(P7+(PO$6wQ&jO'#GgOOQQ1G2l1G2lOHSQWO1G2lO)rQYO1G2lOHSQWO1G2lO$7OQWO1G2lO$7^Q#tO1G2lO5RQ!LYO1G2oO#6{QWO1G2oO4wQWO1G2oO!,vQpO1G2oO!-OQ#tO1G2oO$7oQWO'#H}O$7zQWO,5?oO$8SQ&jO,5?oOOQ!LQ1G2p1G2pOOQQ7+$T7+$TO$8XQWO7+$TO5RQ!LYO7+$TO$8^QWO7+$TO)rQYO1G5^O)rQYO1G5_O$8cQYO1G2wO$8jQWO1G2wO$8oQYO1G2wO$8vQ!LYO1G5^OOQQ7+(a7+(aO5RQ!LYO7+(kO]QYO7+(mOOQQ'#JY'#JYOOQQ'#IQ'#IQO$9QQYO,5=lOOQQ,5=l,5=lO)rQYO'#HRO$9_QWO'#HTOOQQ7+(v7+(vO$9dQYO7+(vO6jQWO7+(vOOQQ7+(z7+(zOOQQ7+)O7+)OOOQQ7+)Q7+)QOOQO1G4s1G4sO$=_Q7^O1G0_O$=iQWO1G0_OOQO1G/d1G/dO$=tQ7^O1G/dO9qQWO1G/dONtQYO'#D^OOQO,5>T,5>TOOQO-E;g-E;gOOQO,5>Y,5>YOOQO-E;l-E;lO!,vQpO1G/dOOQO1G3s1G3sO9qQWO,5:dOOQO,5:h,5:hO!-sQYO,5:hO$>OQ!LYO,5:hO$>ZQ!LYO,5:hO!,vQpO,5:dOOQO-E;j-E;jOOQ!LS1G/}1G/}O!'QQ&jO,5:dO$>iQ!LrO,5:hO$?TQ&jO,5:dO!'QQ&jO,5:hO$?cQ&jO,5:hO$?wQ!LYO,5:hOOQ!LS7+%f7+%fO$ iQWO7+%fO$ nQ`O7+%fOOQ!LS7+%s7+%sO9qQWO7+%sO$@]Q!LdO7+*dO)rQYO7+*dOOQO1G3u1G3uO6jQWO1G3uO$@mQWO7+*cO$@uQ!LdO1G2PO$BwQ!LdO1G2RO$DyQ!LdO1G1nO$GRQ#tO,5>UOOQO-E;h-E;hO$G]QbO,5>VO)rQYO,5>VOOQO-E;i-E;iO$GgQWO1G4uO$IiQ7^O1G0dO$KdQ7^O1G0dO$M_Q7^O1G0dO$MfQ7^O1G0dO% TQ7^O1G0dO% hQ7^O1G0dO%#oQ7^O1G0dO%#vQ7^O1G0dO%%qQ7^O1G0dO%%xQ7^O1G0dO%'mQ7^O1G0dO%'zQ!LdO<<IyO%(kQ7^O1G0dO%*ZQ7^O'#IdO%,WQ7^O1G0vOOQO'#I{'#I{ONtQYO'#I{OOQO1G1W1G1WO%,_QWO1G1VO%,dQ7^O,5>^OOOO7+&x7+&xOOQ!LS1G3z1G3zOI`QWO7+'oO%,qQWO,5>_O5ZQWO,5>_OOQO-E;q-E;qO%-PQWO1G5TO%-PQWO1G5TO%-XQWO1G5TO%-dQ`O,5>aO%-nQWO,5>aOHSQWO,5>aOOQO-E;s-E;sO%-sQ`O1G5UO%-}QWO1G5UOOQO1G1w1G1wOOQO1G1x1G1xO5RQ!LYO1G1xO$1oQWO1G1xO5RQ!LYO1G1wO%.VQWO1G1yOHSQWO1G1yOOQO1G1z1G1zO5RQ!LYO1G1}O!,vQpO1G1wO#6vQWO1G1xO%.[QWO1G1yO%.dQWO1G1xOI`QWO7+*TOOQ!LS1G/S1G/SO%.oQWO1G/SOOQ!LS7+'T7+'TO%.tQ#tO7+'[OOQ!LS<<Jh<<JhOHSQWO'#HxO%/UQWO,5?kOOQQ<<K]<<K]OHSQWO<<K]O$ iQWO<<K]O%/^QWO<<K]O%/fQ`O<<K]OHSQWO1G1{OOQQ<<Gx<<GxOOQ!LS<<I`<<I`O9qQWO<<GxOOQO,5>j,5>jO%/pQWO,5>jOOQO-E;|-E;|O%/uQWO1G5]O%/}QWO<<KyOOQQ<<Ky<<KyO%0SQWO<<KyO5RQ!LYO<<KyO)rQYO<<K]OHSQWO<<K]OOQQ<<Ke<<KeO$5dQ!LbO<<KeOOQQ<<Kf<<KfO$5nQ`O<<KfO%0XQ&jO'#HzO%0dQWO,5?nONtQYO,5?nOOQQ1G2d1G2dO#MxQ!LrO'#D|O!'QQ&jO'#GhOOQO'#H|'#H|O%0lQ&jO,5=ROOQQ,5=R,5=RO#7gQ&jO'#D|O%0sQ&jO'#D|O%1XQ&jO'#D|O%1cQ&jO'#GhO%1qQWO7+(WO%1vQWO7+(WO%2OQ`O7+(WOOQQ7+(W7+(WOHSQWO7+(WO)rQYO7+(WOHSQWO7+(WO%2YQWO7+(WOOQQ7+(Z7+(ZO5RQ!LYO7+(ZO#6{QWO7+(ZO4wQWO7+(ZO!,vQpO7+(ZO%2hQWO,5>iOOQO-E;{-E;{OOQO'#Gk'#GkO%2sQWO1G5ZO5RQ!LYO<<GoOOQQ<<Go<<GoO%2{QWO<<GoO%3QQWO7+*xO%3VQWO7+*yOOQQ7+(c7+(cO%3[QWO7+(cO%3aQYO7+(cO%3hQWO7+(cO)rQYO7+*xO)rQYO7+*yOOQQ<<LV<<LVOOQQ<<LX<<LXOOQQ-E<O-E<OOOQQ1G3W1G3WO%3mQWO,5=mOOQQ,5=o,5=oO9qQWO<<LbO%3rQWO<<LbONtQYO7+%yOOQO7+%O7+%OO%3wQ7^O1G4{O9qQWO7+%OOOQO1G0O1G0OO%4RQ!LdO1G0SOOQO1G0S1G0SO!-sQYO1G0SO%4]Q!LYO1G0SO9qQWO1G0OO!,vQpO1G0OO%4hQ!LYO1G0SO!'QQ&jO1G0OO%4vQ!LYO1G0SO%5[Q!LrO1G0SO%5fQ&jO1G0OO!'QQ&jO1G0SOOQ!LS<<IQ<<IQOOQ!LS<<I_<<I_O%5tQ!LdO<<NOOOQO7+)a7+)aO%6UQ!LdO7+'[O%8^QbO1G3qO%8hQ7^O,5;xO%8rQ7^O,59fO%:oQ7^O,5;yO%<lQ7^O,5;{O%>iQ7^O,5<ZO%@XQ7^O7+&{O%@`QWO,5?gOOQO7+&q7+&qO%@eQ#tO<<KZOOQO1G3y1G3yO%@uQWO1G3yO%AQQWO1G3yO%A`QWO7+*oO%A`QWO7+*oOHSQWO1G3{O%AhQ`O1G3{O%ArQWO7+*pOOQO7+'d7+'dO5RQ!LYO7+'dOOQO7+'c7+'cO$1oQWO7+'eO%AzQ`O7+'eOOQO7+'i7+'iO5RQ!LYO7+'cO$1oQWO7+'dO%BRQWO7+'eOHSQWO7+'eO#6vQWO7+'dO%BWQ#tO<<MoOOQ!LS7+$n7+$nO%BbQ`O,5>dOOQO-E;v-E;vO$ iQWOAN@wOOQQAN@wAN@wOHSQWOAN@wO%BlQ!LbO7+'gOOQQAN=dAN=dO5ZQWO1G4UO%ByQWO7+*wO5RQ!LYOANAeO%CRQWOANAeOOQQANAeANAeO%CWQWOAN@wO%C`Q`OAN@wOOQQANAPANAPOOQQANAQANAQO%CjQWO,5>fOOQO-E;x-E;xO%CuQ7^O1G5YO#6{QWO,5=SO4wQWO,5=SO!,vQpO,5=SOOQO-E;z-E;zOOQQ1G2m1G2mO$>iQ!LrO,5:hO!'QQ&jO,5=SO%DPQ&jO,5=SO%D_Q&jO,5:hOOQQ<<Kr<<KrOHSQWO<<KrO%1qQWO<<KrO%DsQWO<<KrO%D{Q`O<<KrO)rQYO<<KrOHSQWO<<KrOOQQ<<Ku<<KuO5RQ!LYO<<KuO#6{QWO<<KuO4wQWO<<KuO%EVQ&jO1G4TO%E[QWO7+*uOOQQAN=ZAN=ZO5RQ!LYOAN=ZOOQQ<<Nd<<NdOOQQ<<Ne<<NeOOQQ<<K}<<K}O%EdQWO<<K}O%EiQYO<<K}O%EpQWO<<NdO%EuQWO<<NeOOQQ1G3X1G3XOOQQANA|ANA|O9qQWOANA|O%EzQ7^O<<IeOOQO<<Hj<<HjOOQO7+%n7+%nO%4RQ!LdO7+%nO!-sQYO7+%nOOQO7+%j7+%jO9qQWO7+%jO%FUQ!LYO7+%nO!,vQpO7+%jO%FaQ!LYO7+%nO!'QQ&jO7+%jO%FoQ!LYO7+%nO%GTQ!LdO<<KZO%I]Q7^O<<IyO%IdQ7^O1G1nO%KSQ7^O1G2PO%MPQ7^O1G2ROOQO1G5R1G5ROOQO7+)e7+)eO%N|QWO7+)eO& XQWO<<NZO& aQ`O7+)gOOQO<<KO<<KOO5RQ!LYO<<KPO$1oQWO<<KPOOQO<<J}<<J}O5RQ!LYO<<KOO& kQ`O<<KPO$1oQWO<<KOOOQQG26cG26cO$ iQWOG26cOOQO7+)p7+)pOOQQG27PG27PO5RQ!LYOG27POHSQWOG26cONtQYO1G4QO& rQWO7+*tO5RQ!LYO1G2nO#6{QWO1G2nO4wQWO1G2nO!,vQpO1G2nO!'QQ&jO1G2nO%5[Q!LrO1G0SO& zQ&jO1G2nO%1qQWOANA^OOQQANA^ANA^OHSQWOANA^O&!YQWOANA^O&!bQ`OANA^OOQQANAaANAaO5RQ!LYOANAaO#6{QWOANAaOOQO'#Gl'#GlOOQO7+)o7+)oOOQQG22uG22uOOQQANAiANAiO&!lQWOANAiOOQQANDOANDOOOQQANDPANDPO&!qQYOG27hOOQO<<IY<<IYO%4RQ!LdO<<IYOOQO<<IU<<IUO!-sQYO<<IYO9qQWO<<IUO&&lQ!LYO<<IYO!,vQpO<<IUO&&wQ!LYO<<IYO&'VQ7^O7+'[OOQO<<MP<<MPOOQOAN@kAN@kO5RQ!LYOAN@kOOQOAN@jAN@jO$1oQWOAN@kO5RQ!LYOAN@jOOQQLD+}LD+}OOQQLD,kLD,kO$ iQWOLD+}O&(uQ7^O7+)lOOQO7+(Y7+(YO5RQ!LYO7+(YO#6{QWO7+(YO4wQWO7+(YO!,vQpO7+(YO!'QQ&jO7+(YOOQQG26xG26xO%1qQWOG26xOHSQWOG26xOOQQG26{G26{O5RQ!LYOG26{OOQQG27TG27TO9qQWOLD-SOOQOAN>tAN>tO%4RQ!LdOAN>tOOQOAN>pAN>pO!-sQYOAN>tO9qQWOAN>pO&)PQ!LYOAN>tO&)[Q7^O<<KZOOQOG26VG26VO5RQ!LYOG26VOOQOG26UG26UOOQQ!$( i!$( iOOQO<<Kt<<KtO5RQ!LYO<<KtO#6{QWO<<KtO4wQWO<<KtO!,vQpO<<KtOOQQLD,dLD,dO%1qQWOLD,dOOQQLD,gLD,gOOQQ!$(!n!$(!nOOQOG24`G24`O%4RQ!LdOG24`OOQOG24[G24[O!-sQYOG24`OOQOLD+qLD+qOOQOANA`ANA`O5RQ!LYOANA`O#6{QWOANA`O4wQWOANA`OOQQ!$(!O!$(!OOOQOLD)zLD)zO%4RQ!LdOLD)zOOQOG26zG26zO5RQ!LYOG26zO#6{QWOG26zOOQO!$'Mf!$'MfOOQOLD,fLD,fO5RQ!LYOLD,fOOQO!$(!Q!$(!QOJ}QYO'#DmO&*zQ!LdO'#IfO&+_Q!LdO'#IfOJ}QYO'#DeO&+fQ!LdO'#CgO&,PQbO'#CgO&,aQYO,5:nOFVQYO,5:nOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xONtQYO'#HrO&.^QWO,5;xO&.fQWO,5:xOJ}QYO,5;[O!(jQWO'#CzO!(jQWO'#CzOHSQWO'#F_O&.fQWO'#F_OHSQWO'#FaO&.fQWO'#FaOHSQWO'#FoO&.fQWO'#FoONtQYO,5?aO&,aQYO1G0YOFVQYO1G0YO&/mQ7^O'#CgO&/wQ7^O'#IfO&0RQ7^O'#IfOJ}QYO1G1aOHSQWO,5<eO&.fQWO,5<eOHSQWO,5<gO&.fQWO,5<gOHSQWO,5<SO&.fQWO,5<SO&,aQYO1G1bOFVQYO1G1bO&,aQYO1G1bO&,aQYO1G0YOJ}QYO7+&_OHSQWO1G1pO&.fQWO1G1pO&,aQYO7+&|OFVQYO7+&|O&,aQYO7+&|O&,aQYO7+%tOFVQYO7+%tO&,aQYO7+%tOHSQWO7+'oO&.fQWO7+'oO&0YQWO'#ESO&0_QWO'#ESO&0dQWO'#ESO&0lQWO'#ESO&0tQWO'#EpO!-sQYO'#DeO!-sQYO'#DmO&0yQWO'#IuO&1UQWO'#IsO&1aQWO,5:nO&1fQWO,5:nO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5;[O&1kQ#tO,5;uO&1rQWO'#FhO&1wQWO'#FhO&1|QWO,5;vO&2UQWO,5;vO&2^QWO,5;vO&2fQ!LdO,5:PO&2sQWO,5:nO&2xQWO,5:nO&3QQWO,5:nO&3YQWO,5:nO&5UQ!LdO1G0dO&5cQ!LdO1G0dO&7jQ!LdO1G0dO&7qQ!LdO1G0dO&9rQ!LdO1G0dO&9yQ!LdO1G0dO&;zQ!LdO1G0dO&<RQ!LdO1G0dO&>SQ!LdO1G0dO&>ZQ!LdO1G0dO&>bQ7^O1G0sO&>iQ!LdO1G0vO!-sQYO1G1aO&>vQWO,5<UO&>{QWO,5<UO&?QQWO1G1bO&?VQWO1G1bO&?[QWO1G1bO&?aQWO1G0YO&?fQWO1G0YO&?kQWO1G0YO!-sQYO7+&_O&?pQ!LdO7+&{O&?}Q#tO1G2TO&@UQ#tO1G2TO&@]Q!LdO<<IyO&,aQYO,5:nO&B^Q!LdO'#IgO&BqQWO'#EpO3mQWO'#F]O4wQWO'#F[O4wQWO'#F[O4wQWO'#F[O5qQWO'#ESO5qQWO'#ESO5qQWO'#ESOJ}QYO,5;XO&BvQ#tO,5;uO!(tQWO'#FjO!(tQWO'#FjO&B}Q7^O1G0sOI`QWO,5<iOI`QWO,5<iONtQYO'#DmONtQYO'#DeONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5;[ONtQYO1G1aONtQYO7+&_O&CUQWO'#ESO&CZQWO'#ESO&CcQWO'#EpO&ChQ#tO,5;uO&CoQ7^O1G0sO3mQWO'#F]OJ}QYO,5;XO&CvQ7^O'#IgO&DWQ7^O,5:PO&DeQ7^O1G0dO&FfQ7^O1G0dO&FmQ7^O1G0dO&HbQ7^O1G0dO&HuQ7^O1G0dO&KSQ7^O1G0dO&KZQ7^O1G0dO&M[Q7^O1G0dO&McQ7^O1G0dO' WQ7^O1G0dO' kQ7^O1G0vO' xQ7^O7+&{O'!VQ7^O<<IyO3mQWO'#F]OJ}QYO,5;X",
      stateData: "'#V~O&|OSSOSTOS~OPTOQTOWwO]bO^gOamOblOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!OSO!YjO!_UO!bTO!cTO!dTO!eTO!fTO!ikO#jnO#n]O$toO$vrO$xpO$ypO$zqO$}sO%PtO%SuO%TuO%VvO%dxO%jyO%lzO%n{O%p|O%s}O%y!OO%}!PO&P!QO&R!RO&T!SO&V!TO'OPO'[QO'p`O~OPZXYZX^ZXiZXqZXrZXtZX|ZX![ZX!]ZX!_ZX!eZX!tZX#OcX#RZX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#`ZX#eZX&zZX'[ZX'dZX'kZX'lZX~O!W$aX~P$tO&w!VO&x!UO&y!XO~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!O!`O!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'O!YO'[QO'p`O~O{!^O|!ZOy'_Py'hP~P'^O}!jO~P]OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!O!`O!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'O8UO'[QO'p`O~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!O!`O!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'[QO'p`O~O{!oO!|!rO!}!oO'O8VO!^'eP~P+oO#O!sO~O!W!tO#O!sO~OP#ZOY#aOi#OOq!xOr!xOt!yO|#_O![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO#`#WO'[QO'd#XO'k!zO'l!{O^'YX&z'YX!^'YXy'YX!O'YX$u'YX!W'YX~O!t#bO#e#bOP'ZXY'ZX^'ZXi'ZXq'ZXr'ZXt'ZX|'ZX!['ZX!]'ZX!_'ZX!e'ZX#R'ZX#S'ZX#T'ZX#U'ZX#V'ZX#W'ZX#Y'ZX#Z'ZX#]'ZX#_'ZX#`'ZX'['ZX'd'ZX'k'ZX'l'ZX~O#X'ZX&z'ZXy'ZX!^'ZX'^'ZX!O'ZX$u'ZX!W'ZX~P0gO!t#bO~O#p#cO#v#gO~O!O#hO#n]O#y#iO#{#kO~O]#nOg#zOi#oOj#nOk#nOm#{Oo#|Ot#tO!O#uO!Y$RO!_#rO!}$SO#j$PO$S#}O$U$OO$X$QO'O#mO'S'UP~O!_$TO~O!W$VO~O^$WO&z$WO~O'O$[O~O!_$TO'O$[O'P$^O'T$_O~Ob$fO!_$TO'O$[O~O]$nOq$jO!O$gO!_$iO$v$mO'O$[O'P$^O['xP~O!i$oO~Ot$pO!O$qO'O$[O~Ot$pO!O$qO%P$uO'O$[O~O'O$vO~O$vrO$xpO$ypO$zqO$}sO%PtO%SuO%TuO~Oa%POb%OO!i$|O$t$}O%X${O~P7YOa%SOblO!O%RO!ikO$toO$xpO$ypO$zqO$}sO%PtO%SuO%TuO%VvO~O_%VO!t%YO$v%TO'P$^O~P8XO!_%ZO!b%_O~O!_%`O~O!OSO~O^$WO&v%hO&z$WO~O^$WO&v%kO&z$WO~O^$WO&v%mO&z$WO~O&w!VO&x!UO&y%qO~OPZXYZXiZXqZXrZXtZX|ZX|cX![ZX!]ZX!_ZX!eZX!tZX!tcX#OcX#RZX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#`ZX#eZX'[ZX'dZX'kZX'lZX~OyZXycX~P:tO{%sOy&[X|&[X~P)rO|!ZOy'_X~OP#ZOY#aOi#OOq!xOr!xOt!yO|!ZO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO#`#WO'[QO'd#XO'k!zO'l!{O~Oy'_X~P=kOy%xO~Ot%{O!R&VO!S&OO!T&OO'P$^O~O]%|Oj%|O{&PO'X%yO}'`P}'jP~P?nOy'gX|'gX!W'gX!^'gX'd'gX~O!t'gX#O!wX}'gX~P@gO!t&WOy'iX|'iX~O|&XOy'hX~Oy&ZO~O!t#bO~P@gOR&_O!O&[O!j&^O'O$[O~Oq$jO!_$iO~O}&dO~P]Oq!xOr!xOt!yO!]!vO!_!wO'[QOP!aaY!aai!aa|!aa![!aa!e!aa#R!aa#S!aa#T!aa#U!aa#V!aa#W!aa#X!aa#Y!aa#Z!aa#]!aa#_!aa#`!aa'd!aa'k!aa'l!aa~O^!aa&z!aay!aa!^!aa'^!aa!O!aa$u!aa!W!aa~PBeO!^&eO~O!W!tO!t&gO'd&fO|'fX^'fX&z'fX~O!^'fX~PD}O|&kO!^'eX~O!^&mO~Ot$pO!O$qO!}&nO'O$[O~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!OSO!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'O8UO'[QO'p`O~O]#nOg#zOi#oOj#nOk#nOm#{Oo8iOt#tO!O#uO!Y:yO!_#rO!}8oO#j$PO$S8kO$U8mO$X$QO'O&qO~O#O&sO~O]#nOg#zOi#oOj#nOk#nOm#{Oo#|Ot#tO!O#uO!Y$RO!_#rO!}$SO#j$PO$S#}O$U$OO$X$QO'O&qO~O'S'bP~PI`O{&wO!^'cP~P)rO'X&yO~OP8QOQ8QO]bOa:tOb!gOgbOi8QOjbOkbOm8QOo8QOtROvbOwbOxbO!O!`O!Y8TO!_UO!b8QO!c8QO!d8QO!e8QO!f8QO!i!fO#j!iO#n]O'O'XO'[QO'p:pO~O!_!wO~O|#_O^$Qa&z$Qa!^$Qay$Qa!O$Qa$u$Qa!W$Qa~O!W'aO!O'mX#m'mX#p'mX#v'mX~Oq'bO~PMkOq'bO!O'mX#m'mX#p'mX#v'mX~O!O'dO#m'hO#p'cO#v'iO~OP;OOQ;OO]bOa:vOb!gOgbOi;OOjbOkbOm;OOo;OOtROvbOwbOxbO!O!`O!Y;PO!_UO!b;OO!c;OO!d;OO!e;OO!f;OO!i!fO#j!iO#n]O'O'XO'[QO'p;vO~O{'lO~PNtO#p#cO#v'oO~Oq$YXt$YX!]$YX'd$YX'k$YX'l$YX~OReX|eX!teX'SeX'S$YX~P!#QOj'qO~Oq'sOt'tO'd#XO'k'vO'l'xO~O'S'rO~P!$OO'S'{O~O]#nOg#zOi#oOj#nOk#nOm#{Oo8iOt#tO!O#uO!Y:yO!_#rO!}8oO#j$PO$S8kO$U8mO$X$QO~O{(PO'O'|O!^'qP~P!$mO#O(RO~O{(VO'O(SOy'rP~P!$mO^(`Oi(eOt(]O!R(cO!S([O!T([O!_(YO!q(dO$l(_O'P$^O'X(XO~O}(bO~P!&bO!]!vOq'WXt'WX'd'WX'k'WX'l'WX|'WX!t'WX~O'S'WX#c'WX~P!'^OR(hO!t(gO|'VX'S'VX~O|(iO'S'UX~O'O(kO~O!_(pO~O!_(YO~Ot$pO{!oO!O$qO!|!rO!}!oO'O$[O!^'eP~O!W!tO#O(tO~OP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO#`#WO'[QO'd#XO'k!zO'l!{O~O^!Xa|!Xa&z!Xay!Xa!^!Xa'^!Xa!O!Xa$u!Xa!W!Xa~P!)jOR(|O!O&[O!j({O$u(zO'T$_O~O'O$vO'S'UP~O!W)PO!O'RX^'RX&z'RX~O!_$TO'T$_O~O!_$TO'O$[O'T$_O~O!W!tO#O&sO~O'O)XO}'yP~O|)]O['xX~OP9eOQ9eO]bOa:uOb!gOgbOi9eOjbOkbOm9eOo9eOtROvbOwbOxbO!O!`O!Y9dO!_UO!b9eO!c9eO!d9eO!e9eO!f9eO!i!fO#j!iO#n]O'O8UO'[QO'p;eO~OY)aO~O[)bO~O!O$gO'O$[O'P$^O['xP~Ot$pO{)gO!O$qO'O$[Oy'hP~O]&SOj&SO{)hO'X&yO}'jP~O|)iO^'uX&z'uX~O!t)mO'T$_O~OR)pO!O#uO'T$_O~O!O)rO~Oq)tO!OSO~O!i)yO~Ob*OO~O'O(kO}'wP~Ob$fO~O$vrO'O$vO~P8XOY*UO[*TO~OPTOQTO]bOamOblOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!YjO!_UO!bTO!cTO!dTO!eTO!fTO!ikO#n]O$toO'[QO'p`O~O!O!`O#j!iO'O8UO~P!2tO[*TO^$WO&z$WO~O^*YO$x*[O$y*[O$z*[O~P)rO!_%ZO~O%j*aO~O!O*cO~O%z*fO%{*eOP%xaQ%xaW%xa]%xa^%xaa%xab%xag%xai%xaj%xak%xam%xao%xat%xav%xaw%xax%xa!O%xa!Y%xa!_%xa!b%xa!c%xa!d%xa!e%xa!f%xa!i%xa#j%xa#n%xa$t%xa$v%xa$x%xa$y%xa$z%xa$}%xa%P%xa%S%xa%T%xa%V%xa%d%xa%j%xa%l%xa%n%xa%p%xa%s%xa%y%xa%}%xa&P%xa&R%xa&T%xa&V%xa&u%xa'O%xa'[%xa'p%xa}%xa%q%xa_%xa%v%xa~O'O*iO~O'^*lO~Oy&[a|&[a~P!)jO|!ZOy'_a~Oy'_a~P=kO|&XOy'ha~O|sX|!UX}sX}!UX!WsX!W!UX!_!UX!tsX'T!UX~O!W*sO!t*rO|!{X|'aX}!{X}'aX!W'aX!_'aX'T'aX~O!W*uO!_$TO'T$_O|!QX}!QX~O]%zOj%zOt%{O'X(XO~OP;OOQ;OO]bOa:vOb!gOgbOi;OOjbOkbOm;OOo;OOtROvbOwbOxbO!O!`O!Y;PO!_UO!b;OO!c;OO!d;OO!e;OO!f;OO!i!fO#j!iO#n]O'[QO'p;vO~O'O8tO~P!<lO|*yO}'`X~O}*{O~O!W*sO!t*rO|!{X}!{X~O|*|O}'jX~O}+OO~O]%zOj%zOt%{O'P$^O'X(XO~O!S+PO!T+PO~P!?gOt$pO{+SO!O$qO'O$[Oy&aX|&aX~O^+WO!R+ZO!S+VO!T+VO!m+]O!n+[O!o+[O!q+^O'P$^O'X(XO~O}+YO~P!@hOR+cO!O&[O!j+bO~O!t+hO|'fa!^'fa^'fa&z'fa~O!W!tO~P!AlO|&kO!^'ea~Ot$pO{+kO!O$qO!|+mO!}+kO'O$[O|&cX!^&cX~O#O!sa|!sa!^!sa!t!sa!O!sa^!sa&z!say!sa~P!$OO#O'WXP'WXY'WX^'WXi'WXr'WX!['WX!_'WX!e'WX#R'WX#S'WX#T'WX#U'WX#V'WX#W'WX#X'WX#Y'WX#Z'WX#]'WX#_'WX#`'WX&z'WX'['WX!^'WXy'WX!O'WX$u'WX'^'WX!W'WX~P!'^O|+vO'S'bX~P!$OO'S+xO~O|+yO!^'cX~P!)jO!^+|O~Oy+}O~OP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO'[QOY#Qi^#Qii#Qi|#Qi![#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&z#Qi'd#Qi'k#Qi'l#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~O#R#Qi~P!FYO#R!|O~P!FYOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O'[QOY#Qi^#Qi|#Qi![#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&z#Qi'd#Qi'k#Qi'l#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~Oi#Qi~P!HtOi#OO~P!HtOP#ZOi#OOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO'[QO^#Qi|#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&z#Qi'd#Qi'k#Qi'l#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~OY#Qi![#Qi#W#Qi#X#Qi#Y#Qi~P!K`OY#aO![#QO#W#QO#X#QO#Y#QO~P!K`OP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO'[QO^#Qi|#Qi#]#Qi#_#Qi#`#Qi&z#Qi'd#Qi'l#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~O'k#Qi~P!NWO'k!zO~P!NWOP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO'[QO'k!zO^#Qi|#Qi#_#Qi#`#Qi&z#Qi'd#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~O'l#Qi~P#!rO'l!{O~P#!rOP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO'[QO'k!zO'l!{O~O^#Qi|#Qi#`#Qi&z#Qi'd#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~P#%^OPZXYZXiZXqZXrZXtZX![ZX!]ZX!_ZX!eZX!tZX#OcX#RZX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#`ZX#eZX'[ZX'dZX'kZX'lZX|ZX}ZX~O#cZX~P#'qOP#ZOY8gOi8[Oq!xOr!xOt!yO![8^O!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO#V8]O#W8^O#X8^O#Y8^O#Z8_O#]8aO#_8cO#`8dO'[QO'd#XO'k!zO'l!{O~O#c,PO~P#){OP'ZXY'ZXi'ZXq'ZXr'ZXt'ZX!['ZX!]'ZX!_'ZX!e'ZX#R'ZX#S'ZX#T'ZX#U'ZX#V'ZX#W'ZX#X'ZX#Y'ZX#Z'ZX#]'ZX#_'ZX#`'ZX#c'ZX'['ZX'd'ZX'k'ZX'l'ZX~O!t8hO#e8hO~P#+vO^&fa|&fa&z&fa!^&fa'^&fay&fa!O&fa$u&fa!W&fa~P!)jOP#QiY#Qi^#Qii#Qir#Qi|#Qi![#Qi!]#Qi!_#Qi!e#Qi#R#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&z#Qi'[#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~P!$OO^#di|#di&z#diy#di!^#di'^#di!O#di$u#di!W#di~P!)jO#p,RO~O#p,SO~O!W'aO!t,TO!O#tX#m#tX#p#tX#v#tX~O{,UO~O!O'dO#m,WO#p'cO#v,XO~OP#ZOY8gOi;SOq!xOr!xOt!yO|8eO![;UO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO#W;UO#X;UO#Y;UO#Z;VO#];XO#_;ZO#`;[O'[QO'd#XO'k!zO'l!{O}'YX~O},YO~O#v,[O~O],_Oj,_Oy,`O~O|cX!WcX!^cX!^$YX'dcX~P!#QO!^,fO~P!$OO|,gO!W!tO'd&fO!^'qX~O!^,lO~Oy$YX|$YX!W$aX~P!#QO|,nOy'rX~P!$OO!W,pO~Oy,rO~O{(PO'O$[O!^'qP~Oi,vO!W!tO!_$TO'T$_O'd&fO~O!W)PO~O},|O~P!&bO!S,}O!T,}O'P$^O'X(XO~Ot-PO'X(XO~O!q-QO~O'O$vO|&kX'S&kX~O|(iO'S'Ua~Oq-VOr-VOt-WO'dna'kna'lna|na!tna~O'Sna#cna~P#8XOq'sOt'tO'd$Ra'k$Ra'l$Ra|$Ra!t$Ra~O'S$Ra#c$Ra~P#8}Oq'sOt'tO'd$Ta'k$Ta'l$Ta|$Ta!t$Ta~O'S$Ta#c$Ta~P#9pO]-XO~O#O-YO~O'S$ca|$ca#c$ca!t$ca~P!$OO#O-[O~OR-eO!O&[O!j-dO$u-cO~O'S-fO~O]#nOi#oOj#nOk#nOm#{Oo8iOt#tO!O#uO!Y:yO!_#rO!}8oO#j$PO$S8kO$U8mO$X$QO~Og-hO'O-gO~P#;gO!W)PO!O'Ra^'Ra&z'Ra~O#O-mO~OYZX|cX}cX~O|-oO}'yX~O}-qO~OY-rO~O!O$gO'O$[O[&sX|&sX~O|)]O['xa~OP#ZOY#aOi9lOq!xOr!xOt!yO![9nO!]!vO!_!wO!e#ZO#R9jO#S9kO#T9kO#U9kO#V9mO#W9nO#X9nO#Y9nO#Z9oO#]9qO#_9sO#`9tO'[QO'd#XO'k!zO'l!{O~O!^-uO~P#>[O]-wO~OY-xO~O[-yO~OR-eO!O&[O!j-dO$u-cO'T$_O~O|)iO^'ua&z'ua~O!t.PO~OR.SO!O#uO~O'X&yO}'vP~OR.^O!O.YO!j.]O$u.[O'T$_O~OY.hO|.fO}'wX~O}.iO~O[.kO^$WO&z$WO~O].lO~O#X.nO%h.oO~P0gO!t#bO#X.nO%h.oO~O^.pO~P)rO^.rO~O%q.vOP%oiQ%oiW%oi]%oi^%oia%oib%oig%oii%oij%oik%oim%oio%oit%oiv%oiw%oix%oi!O%oi!Y%oi!_%oi!b%oi!c%oi!d%oi!e%oi!f%oi!i%oi#j%oi#n%oi$t%oi$v%oi$x%oi$y%oi$z%oi$}%oi%P%oi%S%oi%T%oi%V%oi%d%oi%j%oi%l%oi%n%oi%p%oi%s%oi%y%oi%}%oi&P%oi&R%oi&T%oi&V%oi&u%oi'O%oi'[%oi'p%oi}%oi_%oi%v%oi~O_.|O}.zO%v.{O~P]O!OSO!_/PO~OP$QaY$Qai$Qaq$Qar$Qat$Qa![$Qa!]$Qa!_$Qa!e$Qa#R$Qa#S$Qa#T$Qa#U$Qa#V$Qa#W$Qa#X$Qa#Y$Qa#Z$Qa#]$Qa#_$Qa#`$Qa'[$Qa'd$Qa'k$Qa'l$Qa~O|#_O'^$Qa!^$Qa^$Qa&z$Qa~P#GlOy&[i|&[i~P!)jO|!ZOy'_i~O|&XOy'hi~Oy/TO~OP#ZOY8gOi;SOq!xOr!xOt!yO![;UO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO#W;UO#X;UO#Y;UO#Z;VO#];XO#_;ZO#`;[O'[QO'd#XO'k!zO'l!{O~O|!Qa}!Qa~P#JdO]%zOj%zO{/ZO'X(XO|&]X}&]X~P?nO|*yO}'`a~O]&SOj&SO{)hO'X&yO|&bX}&bX~O|*|O}'ja~Oy'ii|'ii~P!)jO^$WO!W!tO!_$TO!e/fO!t/dO&z$WO'T$_O'd&fO~O}/iO~P!@hO!S/jO!T/jO'P$^O'X(XO~O!R/lO!S/jO!T/jO!q/mO'P$^O'X(XO~O!n/nO!o/nO~P#NyO!O&[O~O!O&[O~P!$OO|'fi!^'fi^'fi&z'fi~P!)jO!t/vO|'fi!^'fi^'fi&z'fi~O|&kO!^'ei~Ot$pO!O$qO!}/xO'O$[O~O#OnaPnaYna^naina![na!]na!_na!ena#Rna#Sna#Tna#Una#Vna#Wna#Xna#Yna#Zna#]na#_na#`na&zna'[na!^nayna!Ona$una'^na!Wna~P#8XO#O$RaP$RaY$Ra^$Rai$Rar$Ra![$Ra!]$Ra!_$Ra!e$Ra#R$Ra#S$Ra#T$Ra#U$Ra#V$Ra#W$Ra#X$Ra#Y$Ra#Z$Ra#]$Ra#_$Ra#`$Ra&z$Ra'[$Ra!^$Ray$Ra!O$Ra$u$Ra'^$Ra!W$Ra~P#8}O#O$TaP$TaY$Ta^$Tai$Tar$Ta![$Ta!]$Ta!_$Ta!e$Ta#R$Ta#S$Ta#T$Ta#U$Ta#V$Ta#W$Ta#X$Ta#Y$Ta#Z$Ta#]$Ta#_$Ta#`$Ta&z$Ta'[$Ta!^$Tay$Ta!O$Ta$u$Ta'^$Ta!W$Ta~P#9pO#O$caP$caY$ca^$cai$car$ca|$ca![$ca!]$ca!_$ca!e$ca#R$ca#S$ca#T$ca#U$ca#V$ca#W$ca#X$ca#Y$ca#Z$ca#]$ca#_$ca#`$ca&z$ca'[$ca!^$cay$ca!O$ca!t$ca$u$ca'^$ca!W$ca~P!$OO|&^X'S&^X~PI`O|+vO'S'ba~O{0QO|&_X!^&_X~P)rO|+yO!^'ca~O|+yO!^'ca~P!)jO#c!aa}!aa~PBeO#c!Xa~P#){O!O0eO#n]O#u0dO~O}0iO~O^#}q|#}q&z#}qy#}q!^#}q'^#}q!O#}q$u#}q!W#}q~P!)jOy0jO~O],_Oj,_O~Oq'sOt'tO'l'xO'd$mi'k$mi|$mi!t$mi~O'S$mi#c$mi~P$-}Oq'sOt'tO'd$oi'k$oi'l$oi|$oi!t$oi~O'S$oi#c$oi~P$.pO#c0kO~P!$OO{0mO'O$[O|&gX!^&gX~O|,gO!^'qa~O|,gO!W!tO!^'qa~O|,gO!W!tO'd&fO!^'qa~O'S$[i|$[i#c$[i!t$[i~P!$OO{0tO'O(SOy&iX|&iX~P!$mO|,nOy'ra~O|,nOy'ra~P!$OO!W!tO~O!W!tO#X1OO~Oi1SO!W!tO'd&fO~O|'Vi'S'Vi~P!$OO!t1VO|'Vi'S'Vi~P!$OO!^1YO~O|1]O!O'sX~P!$OO!O&[O$u1`O~O!O&[O$u1`O~P!$OO!O$YX$jZX^$YX&z$YX~P!#QO$j1dOqfXtfX!OfX'dfX'kfX'lfX^fX&zfX~O$j1dO~O'O)XO|&rX}&rX~O|-oO}'ya~O[1lO~O]1oO~OR1qO!O&[O!j1pO$u1`O~O^$WO&z$WO~P!$OO!O#uO~P!$OO|1vO!t1xO}'vX~O}1yO~Ot(]O!R2SO!S1{O!T1{O!m2RO!n2QO!o2QO!q2PO'P$^O'X(XO~O}2OO~P$6VOR2ZO!O.YO!j2YO$u2XO~OR2ZO!O.YO!j2YO$u2XO'T$_O~O'O(kO|&qX}&qX~O|.fO}'wa~O'X2dO~O]2fO~O[2hO~O!^2kO~P)rO^2mO~O^2mO~P)rO#X2oO%h2pO~PD}O_.|O}2tO%v.{O~P]O!W2vO~O%{2wOP%xqQ%xqW%xq]%xq^%xqa%xqb%xqg%xqi%xqj%xqk%xqm%xqo%xqt%xqv%xqw%xqx%xq!O%xq!Y%xq!_%xq!b%xq!c%xq!d%xq!e%xq!f%xq!i%xq#j%xq#n%xq$t%xq$v%xq$x%xq$y%xq$z%xq$}%xq%P%xq%S%xq%T%xq%V%xq%d%xq%j%xq%l%xq%n%xq%p%xq%s%xq%y%xq%}%xq&P%xq&R%xq&T%xq&V%xq&u%xq'O%xq'[%xq'p%xq}%xq%q%xq_%xq%v%xq~O|!{i}!{i~P#JdO!t2yO|!{i}!{i~O|!Qi}!Qi~P#JdO^$WO!t3QO&z$WO~O^$WO!W!tO!t3QO&z$WO~O^$WO!W!tO!_$TO!e3UO!t3QO&z$WO'T$_O'd&fO~O!S3VO!T3VO'P$^O'X(XO~O!R3YO!S3VO!T3VO!q3ZO'P$^O'X(XO~O^$WO!W!tO!e3UO!t3QO&z$WO'd&fO~O|'fq!^'fq^'fq&z'fq~P!)jO|&kO!^'eq~O#O$miP$miY$mi^$mii$mir$mi![$mi!]$mi!_$mi!e$mi#R$mi#S$mi#T$mi#U$mi#V$mi#W$mi#X$mi#Y$mi#Z$mi#]$mi#_$mi#`$mi&z$mi'[$mi!^$miy$mi!O$mi$u$mi'^$mi!W$mi~P$-}O#O$oiP$oiY$oi^$oii$oir$oi![$oi!]$oi!_$oi!e$oi#R$oi#S$oi#T$oi#U$oi#V$oi#W$oi#X$oi#Y$oi#Z$oi#]$oi#_$oi#`$oi&z$oi'[$oi!^$oiy$oi!O$oi$u$oi'^$oi!W$oi~P$.pO#O$[iP$[iY$[i^$[ii$[ir$[i|$[i![$[i!]$[i!_$[i!e$[i#R$[i#S$[i#T$[i#U$[i#V$[i#W$[i#X$[i#Y$[i#Z$[i#]$[i#_$[i#`$[i&z$[i'[$[i!^$[iy$[i!O$[i!t$[i$u$[i'^$[i!W$[i~P!$OO|&^a'S&^a~P!$OO|&_a!^&_a~P!)jO|+yO!^'ci~OP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO'[QOY#Qii#Qi![#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'd#Qi'k#Qi'l#Qi|#Qi}#Qi~O#R#Qi~P$GoOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO'[QOY#Qii#Qi![#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'd#Qi'k#Qi'l#Qi~O#R8YO~P$IpOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO'[QOY#Qi![#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'd#Qi'k#Qi'l#Qi~Oi#Qi~P$KkOi8[O~P$KkOP#ZOi8[Oq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO#V8]O'[QO#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'd#Qi'k#Qi'l#Qi~OY#Qi![#Qi#W#Qi#X#Qi#Y#Qi~P$MmOY8gO![8^O#W8^O#X8^O#Y8^O~P$MmOP#ZOY8gOi8[Oq!xOr!xOt!yO![8^O!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO#V8]O#W8^O#X8^O#Y8^O#Z8_O'[QO#]#Qi#_#Qi#`#Qi#c#Qi'd#Qi'l#Qi~O'k#Qi~P% {O'k!zO~P% {OP#ZOY8gOi8[Oq!xOr!xOt!yO![8^O!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO#V8]O#W8^O#X8^O#Y8^O#Z8_O#]8aO'[QO'k!zO#_#Qi#`#Qi#c#Qi'd#Qi~O'l#Qi~P%#}O'l!{O~P%#}OP#ZOY8gOi8[Oq!xOr!xOt!yO![8^O!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO#V8]O#W8^O#X8^O#Y8^O#Z8_O#]8aO#_8cO'[QO'k!zO'l!{O~O#`#Qi#c#Qi'd#Qi~P%&PO^#ay|#ay&z#ayy#ay!^#ay'^#ay!O#ay$u#ay!W#ay~P!)jOP#QiY#Qii#Qir#Qi![#Qi!]#Qi!_#Qi!e#Qi#R#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'[#Qi|#Qi}#Qi~P!$OO!]!vOP'WXY'WXi'WXq'WXr'WXt'WX!['WX!_'WX!e'WX#R'WX#S'WX#T'WX#U'WX#V'WX#W'WX#X'WX#Y'WX#Z'WX#]'WX#_'WX#`'WX#c'WX'['WX'd'WX'k'WX'l'WX|'WX}'WX~O#c#di~P#){O}3iO~O|&fa}&fa#c&fa~P#JdO!W!tO'd&fO|&ga!^&ga~O|,gO!^'qi~O|,gO!W!tO!^'qi~Oy&ia|&ia~P!$OO!W3pO~O|,nOy'ri~P!$OO|,nOy'ri~Oy3vO~O!W!tO#X3|O~Oi3}O!W!tO'd&fO~Oy4PO~O'S$^q|$^q#c$^q!t$^q~P!$OO|1]O!O'sa~O!O&[O$u4UO~O!O&[O$u4UO~P!$OOY4XO~O|-oO}'yi~O]4ZO~O[4[O~O'X&yO|&nX}&nX~O|1vO}'va~O}4iO~P$6VO!R4lO!S4kO!T4kO!q/mO'P$^O'X(XO~O!n4mO!o4mO~P%0sO!S4kO!T4kO'P$^O'X(XO~O!O.YO~O!O.YO$u4oO~O!O.YO$u4oO~P!$OOR4tO!O.YO!j4sO$u4oO~OY4yO|&qa}&qa~O|.fO}'wi~O]4|O~O!^4}O~O!^5OO~O!^5PO~O!^5PO~P)rO^5RO~O!W5UO~O!^5WO~O|'ii}'ii~P#JdO^$WO&z$WO~P#>[O^$WO!t5]O&z$WO~O^$WO!W!tO!t5]O&z$WO~O^$WO!W!tO!e5bO!t5]O&z$WO'd&fO~O!_$TO'T$_O~P%4vO!S5cO!T5cO'P$^O'X(XO~O|'fy!^'fy^'fy&z'fy~P!)jO#O$^qP$^qY$^q^$^qi$^qr$^q|$^q![$^q!]$^q!_$^q!e$^q#R$^q#S$^q#T$^q#U$^q#V$^q#W$^q#X$^q#Y$^q#Z$^q#]$^q#_$^q#`$^q&z$^q'[$^q!^$^qy$^q!O$^q!t$^q$u$^q'^$^q!W$^q~P!$OO|&_i!^&_i~P!)jO|8eO#c$Qa~P#GlOq-VOr-VOt-WOPnaYnaina![na!]na!_na!ena#Rna#Sna#Tna#Una#Vna#Wna#Xna#Yna#Zna#]na#_na#`na#cna'[na'dna'kna'lna|na}na~Oq'sOt'tOP$RaY$Rai$Rar$Ra![$Ra!]$Ra!_$Ra!e$Ra#R$Ra#S$Ra#T$Ra#U$Ra#V$Ra#W$Ra#X$Ra#Y$Ra#Z$Ra#]$Ra#_$Ra#`$Ra#c$Ra'[$Ra'd$Ra'k$Ra'l$Ra|$Ra}$Ra~Oq'sOt'tOP$TaY$Tai$Tar$Ta![$Ta!]$Ta!_$Ta!e$Ta#R$Ta#S$Ta#T$Ta#U$Ta#V$Ta#W$Ta#X$Ta#Y$Ta#Z$Ta#]$Ta#_$Ta#`$Ta#c$Ta'[$Ta'd$Ta'k$Ta'l$Ta|$Ta}$Ta~OP$caY$cai$car$ca![$ca!]$ca!_$ca!e$ca#R$ca#S$ca#T$ca#U$ca#V$ca#W$ca#X$ca#Y$ca#Z$ca#]$ca#_$ca#`$ca#c$ca'[$ca|$ca}$ca~P!$OO#c#}q~P#){O}5jO~O'S$qy|$qy#c$qy!t$qy~P!$OO!W!tO|&gi!^&gi~O!W!tO'd&fO|&gi!^&gi~O|,gO!^'qq~Oy&ii|&ii~P!$OO|,nOy'rq~Oy5qO~P!$OOy5qO~O|'Vy'S'Vy~P!$OO|&la!O&la~P!$OO!O$iq^$iq&z$iq~P!$OO|-oO}'yq~O]5zO~O!O&[O$u5{O~O!O&[O$u5{O~P!$OO!t5|O|&na}&na~O|1vO}'vi~P#JdO!S6SO!T6SO'P$^O'X(XO~O!R6UO!S6SO!T6SO!q3ZO'P$^O'X(XO~O!O.YO$u6XO~O!O.YO$u6XO~P!$OO'X6_O~O|.fO}'wq~O!^6bO~O!^6bO~P)rO!^6dO~O!^6eO~O|!{y}!{y~P#JdO^$WO!t6jO&z$WO~O^$WO!W!tO!t6jO&z$WO~O^$WO!W!tO!e6nO!t6jO&z$WO'd&fO~O#O$qyP$qyY$qy^$qyi$qyr$qy|$qy![$qy!]$qy!_$qy!e$qy#R$qy#S$qy#T$qy#U$qy#V$qy#W$qy#X$qy#Y$qy#Z$qy#]$qy#_$qy#`$qy&z$qy'[$qy!^$qyy$qy!O$qy!t$qy$u$qy'^$qy!W$qy~P!$OO#c#ay~P#){OP$[iY$[ii$[ir$[i![$[i!]$[i!_$[i!e$[i#R$[i#S$[i#T$[i#U$[i#V$[i#W$[i#X$[i#Y$[i#Z$[i#]$[i#_$[i#`$[i#c$[i'[$[i|$[i}$[i~P!$OOq'sOt'tO'l'xOP$miY$mii$mir$mi![$mi!]$mi!_$mi!e$mi#R$mi#S$mi#T$mi#U$mi#V$mi#W$mi#X$mi#Y$mi#Z$mi#]$mi#_$mi#`$mi#c$mi'[$mi'd$mi'k$mi|$mi}$mi~Oq'sOt'tOP$oiY$oii$oir$oi![$oi!]$oi!_$oi!e$oi#R$oi#S$oi#T$oi#U$oi#V$oi#W$oi#X$oi#Y$oi#Z$oi#]$oi#_$oi#`$oi#c$oi'[$oi'd$oi'k$oi'l$oi|$oi}$oi~O!W!tO|&gq!^&gq~O|,gO!^'qy~Oy&iq|&iq~P!$OOy6tO~P!$OO|1vO}'vq~O!S7PO!T7PO'P$^O'X(XO~O!O.YO$u7SO~O!O.YO$u7SO~P!$OO!^7VO~O%{7WOP%x!ZQ%x!ZW%x!Z]%x!Z^%x!Za%x!Zb%x!Zg%x!Zi%x!Zj%x!Zk%x!Zm%x!Zo%x!Zt%x!Zv%x!Zw%x!Zx%x!Z!O%x!Z!Y%x!Z!_%x!Z!b%x!Z!c%x!Z!d%x!Z!e%x!Z!f%x!Z!i%x!Z#j%x!Z#n%x!Z$t%x!Z$v%x!Z$x%x!Z$y%x!Z$z%x!Z$}%x!Z%P%x!Z%S%x!Z%T%x!Z%V%x!Z%d%x!Z%j%x!Z%l%x!Z%n%x!Z%p%x!Z%s%x!Z%y%x!Z%}%x!Z&P%x!Z&R%x!Z&T%x!Z&V%x!Z&u%x!Z'O%x!Z'[%x!Z'p%x!Z}%x!Z%q%x!Z_%x!Z%v%x!Z~O^$WO!t7[O&z$WO~O^$WO!W!tO!t7[O&z$WO~OP$^qY$^qi$^qr$^q![$^q!]$^q!_$^q!e$^q#R$^q#S$^q#T$^q#U$^q#V$^q#W$^q#X$^q#Y$^q#Z$^q#]$^q#_$^q#`$^q#c$^q'[$^q|$^q}$^q~P!$OO|&nq}&nq~P#JdO^$WO!t7pO&z$WO~OP$qyY$qyi$qyr$qy![$qy!]$qy!_$qy!e$qy#R$qy#S$qy#T$qy#U$qy#V$qy#W$qy#X$qy#Y$qy#Z$qy#]$qy#_$qy#`$qy#c$qy'[$qy|$qy}$qy~P!$OO|#_O'^'YX!^'YX^'YX&z'YX~P!)jO'^'YX~P.ZO'^ZXyZX!^ZX%hZX!OZX$uZX!WZX~P$tO!WcX!^ZX!^cX'dcX~P:tOP;OOQ;OO]bOa:vOb!gOgbOi;OOjbOkbOm;OOo;OOtROvbOwbOxbO!OSO!Y;PO!_UO!b;OO!c;OO!d;OO!e;OO!f;OO!i!fO#j!iO#n]O'O'XO'[QO'p;vO~O|8eO}$Qa~O]#nOg#zOi#oOj#nOk#nOm#{Oo8jOt#tO!O#uO!Y:zO!_#rO!}8pO#j$PO$S8lO$U8nO$X$QO'O&qO~O}ZX}cX~P:tO|8eO#c'YX~P#JdO#c'YX~P#2^O#O8WO~O#O8XO~O!W!tO#O8WO~O!W!tO#O8XO~O!t8hO~O!t8qO|'iX}'iX~O!t;]O|'gX}'gX~O#O8rO~O#O8sO~O'S8wO~P!$OO#O8|O~O#O8}O~O!W!tO#O9OO~O!W!tO#O9PO~O!W!tO#O9QO~O!^!Xa^!Xa&z!Xa~P#>[O#O9RO~O!W!tO#O8rO~O!W!tO#O8sO~O!W!tO#O9RO~OP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R9jO'[QOY#Qii#Qi![#Qi!^#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'd#Qi'k#Qi'l#Qi^#Qi&z#Qi~O#S#Qi#T#Qi#U#Qi~P&3bO#S9kO#T9kO#U9kO~P&3bOP#ZOi9lOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R9jO#S9kO#T9kO#U9kO'[QOY#Qi![#Qi!^#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'd#Qi'k#Qi'l#Qi^#Qi&z#Qi~O#V#Qi~P&5pO#V9mO~P&5pOP#ZOY#aOi9lOq!xOr!xOt!yO![9nO!]!vO!_!wO!e#ZO#R9jO#S9kO#T9kO#U9kO#V9mO#W9nO#X9nO#Y9nO'[QO!^#Qi#]#Qi#_#Qi#`#Qi'd#Qi'k#Qi'l#Qi^#Qi&z#Qi~O#Z#Qi~P&7xO#Z9oO~P&7xOP#ZOY#aOi9lOq!xOr!xOt!yO![9nO!]!vO!_!wO!e#ZO#R9jO#S9kO#T9kO#U9kO#V9mO#W9nO#X9nO#Y9nO#Z9oO'[QO'k!zO!^#Qi#_#Qi#`#Qi'd#Qi'l#Qi^#Qi&z#Qi~O#]#Qi~P&:QO#]9qO~P&:QOP#ZOY#aOi9lOq!xOr!xOt!yO![9nO!]!vO!_!wO!e#ZO#R9jO#S9kO#T9kO#U9kO#V9mO#W9nO#X9nO#Y9nO#Z9oO#]9qO'[QO'k!zO'l!{O!^#Qi#`#Qi'd#Qi^#Qi&z#Qi~O#_#Qi~P&<YO#_9sO~P&<YO#c9SO~P#){O!^#di^#di&z#di~P#>[O#O9TO~O#O9UO~O#O9VO~O#O9WO~O#O9XO~O#O9YO~O#O9ZO~O#O9[O~O!^#}q^#}q&z#}q~P#>[O#c9]O~P!$OO#c9^O~P!$OO!^#ay^#ay&z#ay~P#>[OP'ZXY'ZXi'ZXq'ZXr'ZXt'ZX!['ZX!]'ZX!_'ZX!e'ZX#R'ZX#S'ZX#T'ZX#U'ZX#V'ZX#W'ZX#X'ZX#Y'ZX#Z'ZX#]'ZX#_'ZX#`'ZX'['ZX'd'ZX'k'ZX'l'ZX~O!t9uO#e9uO!^'ZX^'ZX&z'ZX~P&@jO!t9uO~O'S:_O~P!$OO#c:hO~P#){O#O:mO~O!W!tO#O:mO~O!t;]O~O'S;^O~P!$OO#c;_O~P#){O!t;]O#e;]O|'ZX}'ZX~P#+vO|!Xa}!Xa#c!Xa~P#JdO#R;QO~P$GoOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO'[QOY#Qi|#Qi}#Qi![#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'd#Qi'k#Qi'l#Qi#c#Qi~Oi#Qi~P&DlOi;SO~P&DlOP#ZOi;SOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO'[QO|#Qi}#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'd#Qi'k#Qi'l#Qi#c#Qi~OY#Qi![#Qi#W#Qi#X#Qi#Y#Qi~P&FtOY8gO![;UO#W;UO#X;UO#Y;UO~P&FtOP#ZOY8gOi;SOq!xOr!xOt!yO![;UO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO#W;UO#X;UO#Y;UO#Z;VO'[QO|#Qi}#Qi#]#Qi#_#Qi#`#Qi'd#Qi'l#Qi#c#Qi~O'k#Qi~P&IYO'k!zO~P&IYOP#ZOY8gOi;SOq!xOr!xOt!yO![;UO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO#W;UO#X;UO#Y;UO#Z;VO#];XO'[QO'k!zO|#Qi}#Qi#_#Qi#`#Qi'd#Qi#c#Qi~O'l#Qi~P&KbO'l!{O~P&KbOP#ZOY8gOi;SOq!xOr!xOt!yO![;UO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO#W;UO#X;UO#Y;UO#Z;VO#];XO#_;ZO'[QO'k!zO'l!{O~O|#Qi}#Qi#`#Qi'd#Qi#c#Qi~P&MjO|#di}#di#c#di~P#JdO|#}q}#}q#c#}q~P#JdO|#ay}#ay#c#ay~P#JdO#n~!]!m!o!|!}'p$S$U$X$j$t$u$v$}%P%S%T%V%X~TS#n'p#p'X'O&|#Sx~",
      goto: "$!b'}PPPPPPP(OP(`P)xPPPP.ZPP.p4p6`6uP6uPPP6uP6uP8dPP8iP9QPPPP>vPPPP>vBdPPPBjDmP>vPGXPPPPIh>vPPPPPKx>vPP! u!!rPPP!!vP!#O!$PP>v>v!'j!+k!1f!1f!5uPPP!5|>vPPPPPPPPP!9rP!;dPP>v!<|P>vP>v>v>v>vP>v!?iPP!C^P!F}!GV!GZ!GZPP!G_!G_P!KOP!KS>v>v!KY!N|6uP6uP6u6uP#!e6u6u#$Z6u6u6u#&^6u6u#&z#(u#(u#(y#(u#)RP#(uP6u#)}6u#+Y6u6u.ZPPP#,hPPP#-Q#-QP#-QP#-g#-QPP#-mP#-dP#-d#.P!!z#-d#.n#.t#.w(O#.z(OP#/R#/R#/RP(OP(OP(OP(OPP(OP#/X#/[P#/[(OPPP(OP(OP(OP(OP(OP(O(O#/`#/j#/p#0O#0U#0[#0f#0l#0v#0|#1[#1b#1h#2O#2e#3x#4W#4^#4d#4j#4p#4z#5Q#5W#5b#5l#5rPPPPPPPP#5xPP#6l#:jPP#;x#<R#<]P#@l#CoP#KgP#Kk#Kn#Kq#K|#LPP#LS#LW#Lu#Mj#Mn#NQPP#NU#N[#N`P#Nc#Ng#Nj$ Y$ p$ u$ x$ {$!R$!U$!Y$!^mgOSi{!k$V%^%a%b%d*^*c.v.yQ$dlQ$knQ%UwS&O!`*yQ&c!gS([#u(aQ)W$fQ)c$mQ)}%OQ+P&VS+V&[+XQ,}(cQ.e*OU/j+Z+[+]S1{.Y1}S3V/l/nU4k2Q2R2SQ5c3YS6S4l4mR7P6U$hZORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9Zx'Z#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;wQ(l#|Q)[$gQ*P%RQ*W%ZQ+q8iQ-i)PQ.m*UQ1i-oQ2b.fQ3c8j!O:n$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h!q;g#h&P'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_pdOSiw{!k$V%T%^%a%b%d*^*c.v.yR*R%V(WVOSTijm{!Q!U!Z!h!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:t:u:v:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wW!aRU!^&PQ$]kQ$clS$hn$mv$rpq!o!r$T$p&X&k&n)g)h)i*[*s+S+k+m/P/xQ$zuQ&`!fQ&b!gS(O#r(YS)U$d$fQ)Y$gQ)f$oQ)x$|Q)|%OQ+f&cQ,k(PQ-n)WQ-s)]Q-v)aQ.`)yS.d)}*OQ0l,gQ1h-oQ1k-rQ1n-xQ2a.eQ3m0mR5x4X!Q$al!g$c$d$f%}&b&c(Z)U)W*v+U+f,w-n/`/g/k1R3T3X5a6mQ(}$]Q)n$wQ)q$xQ){%OQ-z)fQ._)xU.c)|)}*OQ2[.`S2`.d.eQ4f1zQ4x2aS6Q4g4jS6}6R6TQ7g7OR7u7h[#x`$_(i:p;e;vS$wr%TQ$xsQ$ytR)l$u$X#w`!t!v#a#r#t#}$O$S&_'w'y'z(R(V(g(h(z(|)P)m)p+c+v,n,p-Y-c-e.P.S.[.^0k0t1O1V1]1`1d1q2X2Z3p3|4U4o4t5{6X7S8g8k8l8m8n8o8p8x8y8z8{8|8}9T9U9]9^:p:|:};e;vV(m#|8i8jU&S!`$q*|Q&z!xQ)`$jQ,^'sQ.T)rQ1W-VR4b1v(UbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;w%]#^Y!]!l$Z%r%v&v&|&}'O'P'Q'R'S'T'U'V'W'Y']'`'j)_*n*w+Q+g+{,O,Q,]/U/X/u0P0T0U0V0W0X0Y0Z0[0]0^0_0`0c0h2{3O3^3a3g4d5X5[5f6h6y7Y7n7x8R8S8u8v9|:R:S:T:U:V:W:X:Y:Z:[:]:^:i:l:{;d;h;i;j;k;l;m;n;o;p;q;r;s;t;u(VbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wQ&Q!`R/[*yY%z!`&O&V*y+PS(Z#u(aS+U&[+XS,w([(cQ,x(]Q-O(dQ.V)tS/g+V+ZS/k+[+]S/o+^2PQ1R,}Q1T-PQ1U-QS1z.Y1}S3T/j/lQ3W/mQ3X/nS4g1{2SS4j2Q2RS5a3V3YQ5d3ZS6R4k4lQ6T4mQ6m5cS7O6S6UR7h7PlgOSi{!k$V%^%a%b%d*^*c.v.yQ%f!OW&o!s8W8X:mQ)S$bQ)v$zQ)w${Q+d&aW+u&s8r8s9RW-Z(t9O9P9QQ-k)TQ.X)uQ.}*eQ/O*fQ/W*tQ/s+eW1[-[9V9W9XQ1e-lW1f-m9Y9Z9[Q2z/YQ2}/bQ3]/tQ4W1gQ5V2wQ5Y2|Q5^3SQ6f5WQ6i5_Q7Z6kQ7l7WR7o7]%S#]Y!]!l%r%v&v&|&}'O'P'Q'R'S'T'U'V'W'Y']'`'j)_*n*w+Q+g+{,O,]/U/X/u0P0T0U0V0W0X0Y0Z0[0]0^0_0`0c0h2{3O3^3a3g4d5X5[5f6h6y7Y7n7x8R8S8u8v:R:S:T:U:V:W:X:Y:Z:[:]:^:i:l:{;d;i;j;k;l;m;n;o;p;q;r;s;t;uU(f#v&r0bX(x$Z,Q9|;h%S#[Y!]!l%r%v&v&|&}'O'P'Q'R'S'T'U'V'W'Y']'`'j)_*n*w+Q+g+{,O,]/U/X/u0P0T0U0V0W0X0Y0Z0[0]0^0_0`0c0h2{3O3^3a3g4d5X5[5f6h6y7Y7n7x8R8S8u8v:R:S:T:U:V:W:X:Y:Z:[:]:^:i:l:{;d;i;j;k;l;m;n;o;p;q;r;s;t;uQ'[#]W(w$Z,Q9|;hR-](x(UbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wQ%ayQ%bzQ%d|Q%e}R.u*aQ&]!fQ(y$]Q+a&`S-b(})fS/p+_+`W1_-_-`-a-zS3[/q/rU4T1a1b1cU5v4S4^4_Q6v5wR7c6xT+W&[+XS+W&[+XT1|.Y1}S&i!n.sQ,j(OQ,u(ZS/f+U1zQ0q,kS0{,v-OU3U/k/o4jQ3l0lS3z1S1UU5b3W3X6TQ5l3mQ5u3}R6n5dQ!uXS&h!n.sQ(u$UQ)Q$`Q)V$eQ+i&iQ,i(OQ,t(ZQ,y(^Q-j)RQ.a)zS/e+U1zS0p,j,kS0z,u-OQ0},xQ1Q,zQ2^.bW3R/f/k/o4jQ3k0lQ3o0qS3t0{1UQ3{1TQ4v2_W5`3U3W3X6TS5k3l3mQ5p3vQ5s3zQ6O4eQ6]4wS6l5b5dQ6p5lQ6r5qQ6u5uQ6{6PQ7U6^Q7^6nQ7a6tQ7e6|Q7s7fQ7z7tQ8O7{Q9h9aQ9i9bQ9};aQ:b9yQ:c9zQ:d9{Q:e:OQ:f:PR:g:Q$jWORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%Z%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9ZS!um!hx9_#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;w!O9`$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:hQ9h:tQ9i:uQ9}:v!q;`#h&P'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_$jXORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%Z%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9ZQ$Ua!Q$`l!g$c$d$f%}&b&c(Z)U)W*v+U+f,w-n/`/g/k1R3T3X5a6mS$em!hQ)R$aQ)z%OW.b){)|)}*OU2_.c.d.eQ4e1zS4w2`2aU6P4f4g4jQ6^4xU6|6Q6R6TS7f6}7OS7t7g7hQ7{7ux9a#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;w!O9b$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:hQ9y:qQ9z:rQ9{:sQ:O:tQ:P:uQ:Q:v!q;a#h&P'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_$b[OSTij{!Q!U!Z!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9ZU!eRU!^v$rpq!o!r$T$p&X&k&n)g)h)i*[*s+S+k+m/P/xQ*X%Zx9c#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;wQ9g&P!O:o$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h!o;b#h'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_S&T!`$qR/^*|$hZORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9Zx'Z#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;wQ*W%Z!O:n$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h!q;g#h&P'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_!Q#SY!]$Z%r%v&v'T'U'V'W']'`*n+Q+g+{,]/u0P0`3^3a8R8Sh8`'Y,Q0[0]0^0_0c3g5f:]:{;dn9p)_3O5[6h7Y7n7x9|:X:Y:Z:[:^:i:lw;W'j*w/U/X0h2{4d5X6y8u8v;h;o;p;q;r;s;t;u|#UY!]$Z%r%v&v'V'W']'`*n+Q+g+{,]/u0P0`3^3a8R8Sd8b'Y,Q0^0_0c3g5f:]:{;dj9r)_3O5[6h7Y7n7x9|:Z:[:^:i:ls;Y'j*w/U/X0h2{4d5X6y8u8v;h;q;r;s;t;ux#YY!]$Z%r%v&v']'`*n+Q+g+{,]/u0P0`3^3a8R8Sp'z#p&t(s,e,m-R-S/}1Z3j4O9v:j:k:x;c`:w'Y,Q0c3g5f:]:{;d!^:|&p'_'}(T+`+t,q-^-a.O.Q/r/|0r0v1c1s1u2V3`3q3w4Q4V4_4r5e5n5t6ZY:}0a3f5g6o7_f;f)_3O5[6h7Y7n7x9|:^:i:lo;w'j*w/U/X0h2{4d5X6y8u8v;h;s;t;u(UbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wS#i_#jR0d,T(]^ORSTU_ij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h#j$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,T,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wS#d]#kT'c#f'gT#e]#kT'e#f'g(]_ORSTU_ij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h#j$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,T,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wT#i_#jQ#l_R'n#j$jaORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%Z%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9Zx:q#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;w!O:r$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h!q:s#h&P'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_#{cOSUi{!Q!U!k!s!y#h$V%V%Y%Z%^%`%a%b%d%h%{&^&s'l(t({*Y*^*c+b,U-W-[-d-m.].n.o.p.r.v.y.{0e1p2Y2m2o2p4s5R8W8X8r8s9O9P9Q9R9V9W9X9Y9Z9[:mx#v`!v#}$O$S'w'y'z(R(g(h+v-Y0k1V:p:|:};e;v!z&r!t#a#r#t&_(V(z(|)P)m)p+c,n,p-c-e.P.S.[.^0t1O1]1`1d1q2X2Z3p3|4U4o4t5{6X7S8k8m8o8x8z8|9T9]Q(q$Qc0b8g8l8n8p8y8{8}9U9^x#s`!v#}$O$S'w'y'z(R(g(h+v-Y0k1V:p:|:};e;vS(^#u(aQ(r$RQ,z(_!z9w!t#a#r#t&_(V(z(|)P)m)p+c,n,p-c-e.P.S.[.^0t1O1]1`1d1q2X2Z3p3|4U4o4t5{6X7S8k8m8o8x8z8|9T9]b9x8g8l8n8p8y8{8}9U9^Q:`:yR:a:zleOSi{!k$V%^%a%b%d*^*c.v.yQ(U#tQ*j%kQ*k%mR0s,n$W#w`!t!v#a#r#t#}$O$S&_'w'y'z(R(V(g(h(z(|)P)m)p+c+v,n,p-Y-c-e.P.S.[.^0k0t1O1V1]1`1d1q2X2Z3p3|4U4o4t5{6X7S8g8k8l8m8n8o8p8x8y8z8{8|8}9T9U9]9^:p:|:};e;vQ)o$xQ.R)qQ1t.QR4a1uT(`#u(aS(`#u(aT1|.Y1}Q)Q$`Q,y(^Q-j)RQ.a)zQ2^.bQ4v2_Q6O4eQ6]4wQ6{6PQ7U6^Q7e6|Q7s7fQ7z7tR8O7{p'w#p&t(s,e,m-R-S/}1Z3j4O9v:j:k:x;c!^8x&p'_'}(T+`+t,q-^-a.O.Q/r/|0r0v1c1s1u2V3`3q3w4Q4V4_4r5e5n5t6ZZ8y0a3f5g6o7_r'y#p&t(s,c,e,m-R-S/}1Z3j4O9v:j:k:x;c!`8z&p'_'}(T+`+t,q-^-a.O.Q/r/z/|0r0v1c1s1u2V3`3q3w4Q4V4_4r5e5n5t6Z]8{0a3f5g5h6o7_pdOSiw{!k$V%T%^%a%b%d*^*c.v.yQ%QvR*Y%ZpdOSiw{!k$V%T%^%a%b%d*^*c.v.yR%QvQ)s$yR-})lqdOSiw{!k$V%T%^%a%b%d*^*c.v.yQ.Z)xS2W._.`W4n2T2U2V2[U6W4p4q4rU7Q6V6Y6ZQ7i7RR7v7jQ%XwR*S%TR2e.hR6`4yS$hn$mR-s)]Q%^xR*^%_R*d%eT.w*c.yQiOQ!kST$Yi!kQ!WQR%p!WQ![RU%t![%u*oQ%u!]R*o%vQ*z&QR/]*zQ+w&tR0O+wQ+z&vS0R+z0SR0S+{Q+X&[R/h+XQ&Y!cQ*p%wT+T&Y*pQ*}&TR/_*}Q&l!pQ+j&jU+n&l+j/yR/y+oQ'g#fR,V'gQ#j_R'm#jQ#`YW'^#`*m3b8fQ*m8RS+p8S8vQ3b8uR8f'jQ,h(OW0n,h0o3n5mU0o,i,j,kS3n0p0qR5m3o#s'u#p&p&t'_'}(T(n(o(s+`+r+s+t,c,d,e,m,q-R-S-^-a.O.Q/r/z/{/|/}0a0r0v1Z1c1s1u2V3`3d3e3f3j3q3w4O4Q4V4_4r5e5g5h5i5n5t6Z6o7_9v:j:k:x;cQ,o(TU0u,o0w3rQ0w,qR3r0vQ(a#uR,{(aQ(j#yR-U(jQ1^-^R4R1^Q)j$sR-|)jQ1w.TS4c1w5}R5}4dQ)u$zR.W)uQ1}.YR4h1}Q.g*PS2c.g4zR4z2eQ-p)YS1j-p4YR4Y1kQ)^$hR-t)^Q.y*cR2s.yWhOSi!kQ%c{Q(v$VQ*]%^Q*_%aQ*`%bQ*b%dQ.t*^S.w*c.yR2r.vQ$XfQ%g!PQ%j!RQ%l!SQ%n!TQ)e$nQ)k$tQ*R%XQ*h%iS.j*S*VQ/Q*gQ/R*jQ/S*kS/c+U1zQ0x,sQ0y,tQ1P,yQ1m-wQ1r.OQ2].aQ2g.lQ2q.uY3P/e/f/k/o4jQ3s0zQ3u0|Q3x1QQ4]1oQ4`1sQ4u2^Q4{2f[5Z3O3R3U3W3X6TQ5o3tQ5r3yQ5y4ZQ6[4vQ6a4|W6g5[5`5b5dQ6q5pQ6s5sQ6w5zQ6z6OQ7T6]U7X6h6l6nQ7`6rQ7b6uQ7d6{Q7k7US7m7Y7^Q7q7aQ7r7eQ7w7nQ7y7sQ7|7xQ7}7zR8P8OQ$blQ&a!gU)T$c$d$fQ*t%}S+e&b&cQ,s(ZS-l)U)WQ/Y*vQ/b+UQ/t+fQ0|,wQ1g-nQ2|/`S3S/g/kQ3y1RS5_3T3XQ6k5aR7]6mW#q`:p;e;vR)O$_Y#y`$_:p;e;vR-T(iQ#p`S&p!t)PQ&t!vQ'_#aQ'}#rQ(T#tQ(n#}Q(o$OQ(s$SQ+`&_Q+r8kQ+s8mQ+t8oQ,c'wQ,d'yQ,e'zQ,m(RQ,q(VQ-R(gQ-S(hd-^(z-c.[1`2X4U4o5{6X7SQ-a(|Q.O)mQ.Q)pQ/r+cQ/z8xQ/{8zQ/|8|Q/}+vQ0a8gQ0r,nQ0v,pQ1Z-YQ1c-eQ1s.PQ1u.SQ2V.^Q3`9TQ3d8lQ3e8nQ3f8pQ3j0kQ3q0tQ3w1OQ4O1VQ4Q1]Q4V1dQ4_1qQ4r2ZQ5e9]Q5g8}Q5h8yQ5i8{Q5n3pQ5t3|Q6Z4tQ6o9UQ7_9^Q9v:pQ:j:|Q:k:}Q:x;eR;c;vlfOSi{!k$V%^%a%b%d*^*c.v.yS!mU%`Q%i!QQ%o!UW&o!s8W8X:mQ&{!yQ'k#hS*V%V%YQ*Z%ZQ*g%hQ*q%{Q+_&^W+u&s8r8s9RQ,Z'lW-Z(t9O9P9QQ-`({Q.q*YQ/q+bQ0g,UQ1X-WW1[-[9V9W9XQ1b-dW1f-m9Y9Z9[Q2U.]Q2i.nQ2j.oQ2l.pQ2n.rQ2u.{Q3h0eQ4^1pQ4q2YQ5Q2mQ5S2oQ5T2pQ6Y4sR6c5R!vYOSUi{!Q!k!y$V%V%Y%Z%^%`%a%b%d%h%{&^({*Y*^*c+b-W-d.].n.o.p.r.v.y.{1p2Y2m2o2p4s5RQ!]RS!lT9eQ$ZjQ%r!ZQ%v!^Q&v!wS&|!|9jQ&}!}Q'O#OQ'P#PQ'Q#QQ'R#RQ'S#SQ'T#TQ'U#UQ'V#VQ'W#WQ'Y#YQ']#_Q'`#bW'j#h'l,U0eQ)_$iQ*n%sS*w&P/ZQ+Q&WQ+g&gQ+{&wS,O8Q;OQ,Q8TQ,]'rQ/U*rQ/X*uQ/u+hQ0P+yS0T8Y;QQ0U8ZQ0V8[Q0W8]Q0X8^Q0Y8_Q0Z8`Q0[8aQ0]8bQ0^8cQ0_8dQ0`,PQ0c8hQ0h8eQ2{8qQ3O/dQ3^/vQ3a0QQ3g8wQ4d1xQ5X2yQ5[3QQ5f9SQ6h5]Q6y5|Q7Y6jQ7n7[Q7x7p[8R!U8X8s9P9W9ZY8S!s&s(t-[-mY8u8W8r9O9V9YY8v9Q9R9X9[:mQ9|9dQ:R9kQ:S9lQ:T9mQ:U9nQ:V9oQ:W9pQ:X9qQ:Y9rQ:Z9sQ:[9tQ:]:wQ:^9uQ:i:_Q:l:hQ:{;fQ;d;wQ;h;PQ;i;RQ;j;SQ;k;TQ;l;UQ;m;VQ;n;WQ;o;XQ;p;YQ;q;ZQ;r;[Q;s;]Q;t;^R;u;_T!VQ!WR!_RR&R!`S%}!`*yS*v&O&VR/`+PR&u!vR&x!wT!qU$TS!pU$TU$spq*[S&j!o!rQ+l&kQ+o&nQ-{)iS/w+k+mR3_/x[!bR!^$p&X)g+Sh!nUpq!o!r$T&k&n)i+k+m/xQ.s*[Q/V*sQ2x/PT9f&P)hT!dR$pS!cR$pS%w!^)gS*x&P)hQ+R&XR/a+ST&U!`$qQ#f]R'p#kT'f#f'gR0f,TT(Q#r(YR(W#tQ-_(zQ1a-cQ2T.[Q4S1`Q4p2XQ5w4UQ6V4oQ6x5{Q7R6XR7j7SlgOSi{!k$V%^%a%b%d*^*c.v.yQ%WwR*R%TV$tpq*[R.U)rR*Q%RQ$lnR)d$mR)Z$gT%[x%_T%]x%_T.x*c.y",
      nodeNames: "⚠ ArithOp ArithOp extends LineComment BlockComment Script ExportDeclaration export Star as VariableName from String ; default FunctionDeclaration async function VariableDefinition TypeParamList TypeDefinition ThisType this LiteralType ArithOp Number BooleanLiteral VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString null super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyNameDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression await yield delete LogicOp BitOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration Privacy static abstract PropertyDeclaration readonly Optional TypeAnnotation Equals FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp in instanceof CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplatExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var const TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try catch finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement",
      maxTerm: 320,
      nodeProps: [
        [NodeProp.group, -26,7,14,16,53,173,177,181,182,184,187,190,201,203,209,211,213,215,218,224,228,230,232,234,236,238,239,"Statement",-30,11,13,23,26,27,37,38,39,40,42,47,55,63,69,70,83,84,93,94,109,112,114,115,116,117,119,120,137,138,140,"Expression",-21,22,24,28,30,141,143,145,146,148,149,150,152,153,154,156,157,158,167,169,171,172,"Type",-2,74,78,"ClassItem"],
        [NodeProp.closedBy, 36,"]",46,"}",61,")",122,"JSXSelfCloseEndTag JSXEndTag",135,"JSXEndTag"],
        [NodeProp.openedBy, 41,"[",45,"{",60,"(",121,"JSXStartTag",130,"JSXStartTag JSXStartCloseTag"]
      ],
      skippedNodes: [0,4,5],
      repeatNodeCount: 27,
      tokenData: "!Ck~R!ZOX$tX^%S^p$tpq%Sqr&rrs'zst$ttu/wuv2Xvw2|wx3zxy:byz:rz{;S{|<S|}<g}!O<S!O!P<w!P!QAT!Q!R!0Z!R![!2j![!]!8Y!]!^!8l!^!_!8|!_!`!9y!`!a!;U!a!b!<{!b!c$t!c!}/w!}#O!>^#O#P$t#P#Q!>n#Q#R!?O#R#S/w#S#T!?c#T#o/w#o#p!?s#p#q!?x#q#r!@`#r#s!@r#s#y$t#y#z%S#z$f$t$f$g%S$g#BY/w#BY#BZ!AS#BZ$IS/w$IS$I_!AS$I_$I|/w$I|$JO!AS$JO$JT/w$JT$JU!AS$JU$KV/w$KV$KW!AS$KW&FU/w&FU&FV!AS&FV~/wW$yR#yWO!^$t!_#o$t#p~$t,T%Zg#yW&|+{OX$tX^%S^p$tpq%Sq!^$t!_#o$t#p#y$t#y#z%S#z$f$t$f$g%S$g#BY$t#BY#BZ%S#BZ$IS$t$IS$I_%S$I_$I|$t$I|$JO%S$JO$JT$t$JT$JU%S$JU$KV$t$KV$KW%S$KW&FU$t&FU&FV%S&FV~$t$T&yS#yW!e#{O!^$t!_!`'V!`#o$t#p~$t$O'^S#Z#v#yWO!^$t!_!`'j!`#o$t#p~$t$O'qR#Z#v#yWO!^$t!_#o$t#p~$t'u(RZ#yW]!ROY'zYZ(tZr'zrs*Rs!^'z!^!_*e!_#O'z#O#P,q#P#o'z#o#p*e#p~'z&r(yV#yWOr(trs)`s!^(t!^!_)p!_#o(t#o#p)p#p~(t&r)gR#u&j#yWO!^$t!_#o$t#p~$t&j)sROr)prs)|s~)p&j*RO#u&j'u*[R#u&j#yW]!RO!^$t!_#o$t#p~$t'm*jV]!ROY*eYZ)pZr*ers+Ps#O*e#O#P+W#P~*e'm+WO#u&j]!R'm+ZROr*ers+ds~*e'm+kU#u&j]!ROY+}Zr+}rs,fs#O+}#O#P,k#P~+}!R,SU]!ROY+}Zr+}rs,fs#O+}#O#P,k#P~+}!R,kO]!R!R,nPO~+}'u,vV#yWOr'zrs-]s!^'z!^!_*e!_#o'z#o#p*e#p~'z'u-fZ#u&j#yW]!ROY.XYZ$tZr.Xrs/Rs!^.X!^!_+}!_#O.X#O#P/c#P#o.X#o#p+}#p~.X!Z.`Z#yW]!ROY.XYZ$tZr.Xrs/Rs!^.X!^!_+}!_#O.X#O#P/c#P#o.X#o#p+}#p~.X!Z/YR#yW]!RO!^$t!_#o$t#p~$t!Z/hT#yWO!^.X!^!_+}!_#o.X#o#p+}#p~.X&i0S_#yW#pS'Xp'O%kOt$ttu/wu}$t}!O1R!O!Q$t!Q![/w![!^$t!_!c$t!c!}/w!}#R$t#R#S/w#S#T$t#T#o/w#p$g$t$g~/w[1Y_#yW#pSOt$ttu1Ru}$t}!O1R!O!Q$t!Q![1R![!^$t!_!c$t!c!}1R!}#R$t#R#S1R#S#T$t#T#o1R#p$g$t$g~1R$O2`S#T#v#yWO!^$t!_!`2l!`#o$t#p~$t$O2sR#yW#e#vO!^$t!_#o$t#p~$t%r3TU'l%j#yWOv$tvw3gw!^$t!_!`2l!`#o$t#p~$t$O3nS#yW#_#vO!^$t!_!`2l!`#o$t#p~$t'u4RZ#yW]!ROY3zYZ4tZw3zwx*Rx!^3z!^!_5l!_#O3z#O#P7l#P#o3z#o#p5l#p~3z&r4yV#yWOw4twx)`x!^4t!^!_5`!_#o4t#o#p5`#p~4t&j5cROw5`wx)|x~5`'m5qV]!ROY5lYZ5`Zw5lwx+Px#O5l#O#P6W#P~5l'm6ZROw5lwx6dx~5l'm6kU#u&j]!ROY6}Zw6}wx,fx#O6}#O#P7f#P~6}!R7SU]!ROY6}Zw6}wx,fx#O6}#O#P7f#P~6}!R7iPO~6}'u7qV#yWOw3zwx8Wx!^3z!^!_5l!_#o3z#o#p5l#p~3z'u8aZ#u&j#yW]!ROY9SYZ$tZw9Swx/Rx!^9S!^!_6}!_#O9S#O#P9|#P#o9S#o#p6}#p~9S!Z9ZZ#yW]!ROY9SYZ$tZw9Swx/Rx!^9S!^!_6}!_#O9S#O#P9|#P#o9S#o#p6}#p~9S!Z:RT#yWO!^9S!^!_6}!_#o9S#o#p6}#p~9S%V:iR!_$}#yWO!^$t!_#o$t#p~$tZ:yR!^R#yWO!^$t!_#o$t#p~$t%R;]U'P!R#U#v#yWOz$tz{;o{!^$t!_!`2l!`#o$t#p~$t$O;vS#R#v#yWO!^$t!_!`2l!`#o$t#p~$t$u<ZSi$m#yWO!^$t!_!`2l!`#o$t#p~$t&i<nR|&a#yWO!^$t!_#o$t#p~$t&i=OVq%n#yWO!O$t!O!P=e!P!Q$t!Q![>Z![!^$t!_#o$t#p~$ty=jT#yWO!O$t!O!P=y!P!^$t!_#o$t#p~$ty>QR{q#yWO!^$t!_#o$t#p~$ty>bZ#yWjqO!Q$t!Q![>Z![!^$t!_!g$t!g!h?T!h#R$t#R#S>Z#S#X$t#X#Y?T#Y#o$t#p~$ty?YZ#yWO{$t{|?{|}$t}!O?{!O!Q$t!Q![@g![!^$t!_#R$t#R#S@g#S#o$t#p~$ty@QV#yWO!Q$t!Q![@g![!^$t!_#R$t#R#S@g#S#o$t#p~$ty@nV#yWjqO!Q$t!Q![@g![!^$t!_#R$t#R#S@g#S#o$t#p~$t,TA[`#yW#S#vOYB^YZ$tZzB^z{HT{!PB^!P!Q!*|!Q!^B^!^!_Da!_!`!+u!`!a!,t!a!}B^!}#O!-s#O#P!/o#P#oB^#o#pDa#p~B^XBe[#yWxPOYB^YZ$tZ!PB^!P!QCZ!Q!^B^!^!_Da!_!}B^!}#OFY#O#PGi#P#oB^#o#pDa#p~B^XCb_#yWxPO!^$t!_#Z$t#Z#[CZ#[#]$t#]#^CZ#^#a$t#a#bCZ#b#g$t#g#hCZ#h#i$t#i#jCZ#j#m$t#m#nCZ#n#o$t#p~$tPDfVxPOYDaZ!PDa!P!QD{!Q!}Da!}#OEd#O#PFP#P~DaPEQUxP#Z#[D{#]#^D{#a#bD{#g#hD{#i#jD{#m#nD{PEgTOYEdZ#OEd#O#PEv#P#QDa#Q~EdPEyQOYEdZ~EdPFSQOYDaZ~DaXF_Y#yWOYFYYZ$tZ!^FY!^!_Ed!_#OFY#O#PF}#P#QB^#Q#oFY#o#pEd#p~FYXGSV#yWOYFYYZ$tZ!^FY!^!_Ed!_#oFY#o#pEd#p~FYXGnV#yWOYB^YZ$tZ!^B^!^!_Da!_#oB^#o#pDa#p~B^,TH[^#yWxPOYHTYZIWZzHTz{Ki{!PHT!P!Q!)j!Q!^HT!^!_Mt!_!}HT!}#O!%e#O#P!(x#P#oHT#o#pMt#p~HT,TI]V#yWOzIWz{Ir{!^IW!^!_Jt!_#oIW#o#pJt#p~IW,TIwX#yWOzIWz{Ir{!PIW!P!QJd!Q!^IW!^!_Jt!_#oIW#o#pJt#p~IW,TJkR#yWT+{O!^$t!_#o$t#p~$t+{JwROzJtz{KQ{~Jt+{KTTOzJtz{KQ{!PJt!P!QKd!Q~Jt+{KiOT+{,TKp^#yWxPOYHTYZIWZzHTz{Ki{!PHT!P!QLl!Q!^HT!^!_Mt!_!}HT!}#O!%e#O#P!(x#P#oHT#o#pMt#p~HT,TLu_#yWT+{xPO!^$t!_#Z$t#Z#[CZ#[#]$t#]#^CZ#^#a$t#a#bCZ#b#g$t#g#hCZ#h#i$t#i#jCZ#j#m$t#m#nCZ#n#o$t#p~$t+{MyYxPOYMtYZJtZzMtz{Ni{!PMt!P!Q!$a!Q!}Mt!}#O! w#O#P!#}#P~Mt+{NnYxPOYMtYZJtZzMtz{Ni{!PMt!P!Q! ^!Q!}Mt!}#O! w#O#P!#}#P~Mt+{! eUT+{xP#Z#[D{#]#^D{#a#bD{#g#hD{#i#jD{#m#nD{+{! zWOY! wYZJtZz! wz{!!d{#O! w#O#P!#k#P#QMt#Q~! w+{!!gYOY! wYZJtZz! wz{!!d{!P! w!P!Q!#V!Q#O! w#O#P!#k#P#QMt#Q~! w+{!#[TT+{OYEdZ#OEd#O#PEv#P#QDa#Q~Ed+{!#nTOY! wYZJtZz! wz{!!d{~! w+{!$QTOYMtYZJtZzMtz{Ni{~Mt+{!$f_xPOzJtz{KQ{#ZJt#Z#[!$a#[#]Jt#]#^!$a#^#aJt#a#b!$a#b#gJt#g#h!$a#h#iJt#i#j!$a#j#mJt#m#n!$a#n~Jt,T!%j[#yWOY!%eYZIWZz!%ez{!&`{!^!%e!^!_! w!_#O!%e#O#P!(W#P#QHT#Q#o!%e#o#p! w#p~!%e,T!&e^#yWOY!%eYZIWZz!%ez{!&`{!P!%e!P!Q!'a!Q!^!%e!^!_! w!_#O!%e#O#P!(W#P#QHT#Q#o!%e#o#p! w#p~!%e,T!'hY#yWT+{OYFYYZ$tZ!^FY!^!_Ed!_#OFY#O#PF}#P#QB^#Q#oFY#o#pEd#p~FY,T!(]X#yWOY!%eYZIWZz!%ez{!&`{!^!%e!^!_! w!_#o!%e#o#p! w#p~!%e,T!(}X#yWOYHTYZIWZzHTz{Ki{!^HT!^!_Mt!_#oHT#o#pMt#p~HT,T!)qc#yWxPOzIWz{Ir{!^IW!^!_Jt!_#ZIW#Z#[!)j#[#]IW#]#^!)j#^#aIW#a#b!)j#b#gIW#g#h!)j#h#iIW#i#j!)j#j#mIW#m#n!)j#n#oIW#o#pJt#p~IW,T!+TV#yWS+{OY!*|YZ$tZ!^!*|!^!_!+j!_#o!*|#o#p!+j#p~!*|+{!+oQS+{OY!+jZ~!+j$P!,O[#yW#e#vxPOYB^YZ$tZ!PB^!P!QCZ!Q!^B^!^!_Da!_!}B^!}#OFY#O#PGi#P#oB^#o#pDa#p~B^]!,}[#mS#yWxPOYB^YZ$tZ!PB^!P!QCZ!Q!^B^!^!_Da!_!}B^!}#OFY#O#PGi#P#oB^#o#pDa#p~B^X!-xY#yWOY!-sYZ$tZ!^!-s!^!_!.h!_#O!-s#O#P!/T#P#QB^#Q#o!-s#o#p!.h#p~!-sP!.kTOY!.hZ#O!.h#O#P!.z#P#QDa#Q~!.hP!.}QOY!.hZ~!.hX!/YV#yWOY!-sYZ$tZ!^!-s!^!_!.h!_#o!-s#o#p!.h#p~!-sX!/tV#yWOYB^YZ$tZ!^B^!^!_Da!_#oB^#o#pDa#p~B^y!0bd#yWjqO!O$t!O!P!1p!P!Q$t!Q![!2j![!^$t!_!g$t!g!h?T!h#R$t#R#S!2j#S#U$t#U#V!4Q#V#X$t#X#Y?T#Y#b$t#b#c!3p#c#d!5`#d#l$t#l#m!6h#m#o$t#p~$ty!1wZ#yWjqO!Q$t!Q![!1p![!^$t!_!g$t!g!h?T!h#R$t#R#S!1p#S#X$t#X#Y?T#Y#o$t#p~$ty!2q_#yWjqO!O$t!O!P!1p!P!Q$t!Q![!2j![!^$t!_!g$t!g!h?T!h#R$t#R#S!2j#S#X$t#X#Y?T#Y#b$t#b#c!3p#c#o$t#p~$ty!3wR#yWjqO!^$t!_#o$t#p~$ty!4VW#yWO!Q$t!Q!R!4o!R!S!4o!S!^$t!_#R$t#R#S!4o#S#o$t#p~$ty!4vW#yWjqO!Q$t!Q!R!4o!R!S!4o!S!^$t!_#R$t#R#S!4o#S#o$t#p~$ty!5eV#yWO!Q$t!Q!Y!5z!Y!^$t!_#R$t#R#S!5z#S#o$t#p~$ty!6RV#yWjqO!Q$t!Q!Y!5z!Y!^$t!_#R$t#R#S!5z#S#o$t#p~$ty!6mZ#yWO!Q$t!Q![!7`![!^$t!_!c$t!c!i!7`!i#R$t#R#S!7`#S#T$t#T#Z!7`#Z#o$t#p~$ty!7gZ#yWjqO!Q$t!Q![!7`![!^$t!_!c$t!c!i!7`!i#R$t#R#S!7`#S#T$t#T#Z!7`#Z#o$t#p~$t%w!8cR!WV#yW#c%hO!^$t!_#o$t#p~$t!P!8sR^w#yWO!^$t!_#o$t#p~$t+c!9XR'Td![%Y#n&s'pP!P!Q!9b!^!_!9g!_!`!9tW!9gO#{W#v!9lP#V#v!_!`!9o#v!9tO#e#v#v!9yO#W#v%w!:QT!t%o#yWO!^$t!_!`!:a!`!a!:t!a#o$t#p~$t$O!:hS#Z#v#yWO!^$t!_!`'j!`#o$t#p~$t$P!:{R#O#w#yWO!^$t!_#o$t#p~$t%w!;aT'S!s#W#v#vS#yWO!^$t!_!`!;p!`!a!<Q!a#o$t#p~$t$O!;wR#W#v#yWO!^$t!_#o$t#p~$t$O!<XT#V#v#yWO!^$t!_!`2l!`!a!<h!a#o$t#p~$t$O!<oS#V#v#yWO!^$t!_!`2l!`#o$t#p~$t%w!=SV'd%o#yWO!O$t!O!P!=i!P!^$t!_!a$t!a!b!=y!b#o$t#p~$t$`!=pRr$W#yWO!^$t!_#o$t#p~$t$O!>QS#yW#`#vO!^$t!_!`2l!`#o$t#p~$t&e!>eRt&]#yWO!^$t!_#o$t#p~$tZ!>uRyR#yWO!^$t!_#o$t#p~$t$O!?VS#]#v#yWO!^$t!_!`2l!`#o$t#p~$t$P!?jR#yW'[#wO!^$t!_#o$t#p~$t~!?xO!O~%r!@PT'k%j#yWO!^$t!_!`2l!`#o$t#p#q!=y#q~$t$u!@iR}$k#yW'^QO!^$t!_#o$t#p~$tX!@yR!fP#yWO!^$t!_#o$t#p~$t,T!Aar#yW#pS'Xp'O%k&|+{OX$tX^%S^p$tpq%Sqt$ttu/wu}$t}!O1R!O!Q$t!Q![/w![!^$t!_!c$t!c!}/w!}#R$t#R#S/w#S#T$t#T#o/w#p#y$t#y#z%S#z$f$t$f$g%S$g#BY/w#BY#BZ!AS#BZ$IS/w$IS$I_!AS$I_$I|/w$I|$JO!AS$JO$JT/w$JT$JU!AS$JU$KV/w$KV$KW!AS$KW&FU/w&FU&FV!AS&FV~/w",
      tokenizers: [noSemicolon, incdecToken, template, 0, 1, 2, 3, 4, 5, 6, 7, 8, insertSemicolon],
      topRules: {"Script":[0,6]},
      dialects: {jsx: 12762, ts: 12764},
      dynamicPrecedences: {"138":1,"165":1},
      specialized: [{term: 276, get: (value, stack) => (tsExtends(value, stack) << 1) | 1},{term: 276, get: value => spec_identifier$3[value] || -1},{term: 285, get: value => spec_word[value] || -1},{term: 58, get: value => spec_LessThan[value] || -1}],
      tokenPrec: 12784
    });

    /// An instance of this is passed to completion source functions.
    class CompletionContext$1 {
        /// Create a new completion context. (Mostly useful for testing
        /// completion sources—in the editor, the extension will create
        /// these for you.)
        constructor(
        /// The editor state that the completion happens in.
        state, 
        /// The position at which the completion happens.
        pos, 
        /// Indicates whether completion was activated explicitly, or
        /// implicitly by typing. The usual way to respond to this is to
        /// only return completions when either there is part of a
        /// completable entity at the cursor, or explicit is true.
        explicit) {
            this.state = state;
            this.pos = pos;
            this.explicit = explicit;
            /// @internal
            this.abortListeners = [];
        }
        /// Get the extent, content, and (if there is a token) type of the
        /// token before `this.pos`.
        tokenBefore(types) {
            let token = this.state.tree.resolve(this.pos, -1);
            while (token && types.indexOf(token.name) < 0)
                token = token.parent;
            return token ? { from: token.from, to: this.pos,
                text: this.state.sliceDoc(token.from, this.pos),
                type: token.type } : null;
        }
        /// Get the match of the given expression directly before the
        /// cursor.
        matchBefore(expr) {
            let line = this.state.doc.lineAt(this.pos);
            let start = Math.max(line.from, this.pos - 250);
            let str = line.slice(start - line.from, this.pos - line.from);
            let found = str.search(ensureAnchor$1(expr, false));
            return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
        }
        /// Yields true when the query has been aborted. Can be useful in
        /// asynchronous queries to avoid doing work that will be ignored.
        get aborted() { return this.abortListeners == null; }
        /// Allows you to register abort handlers, which will be called when
        /// the query is
        /// [aborted](#autocomplete.CompletionContext.aborted).
        addEventListener(_type, listener) {
            if (this.abortListeners)
                this.abortListeners.push(listener);
        }
    }
    class Option$1 {
        constructor(completion, source, match) {
            this.completion = completion;
            this.source = source;
            this.match = match;
        }
    }
    function cur$1(state) { return state.selection.primary.head; }
    // Make sure the given regexp has a $ at its end and, if `start` is
    // true, a ^ at its start.
    function ensureAnchor$1(expr, start) {
        var _a;
        let { source } = expr;
        let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
        if (!addStart && !addEnd)
            return expr;
        return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
    }
    function applyCompletion$1(view, option) {
        let apply = option.completion.apply || option.completion.label;
        let result = option.source;
        if (typeof apply == "string") {
            view.dispatch({
                changes: { from: result.from, to: result.to, insert: apply },
                selection: { anchor: result.from + apply.length }
            });
        }
        else {
            apply(view, option.completion, result.from, result.to);
        }
    }

    // A pattern matcher for fuzzy completion matching. Create an instance
    // once for a pattern, and then use that to match any number of
    // completions.
    class FuzzyMatcher$1 {
        constructor(pattern) {
            this.pattern = pattern;
            this.chars = [];
            this.folded = [];
            // Buffers reused by calls to `match` to track matched character
            // positions.
            this.any = [];
            this.precise = [];
            this.byWord = [];
            for (let p = 0; p < pattern.length;) {
                let char = codePointAt(pattern, p), size = codePointSize(char);
                this.chars.push(char);
                let part = pattern.slice(p, p + size), upper = part.toUpperCase();
                this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
                p += size;
            }
            this.astral = pattern.length != this.chars.length;
        }
        // Matches a given word (completion) against the pattern (input).
        // Will return null for no match, and otherwise an array that starts
        // with the match score, followed by any number of `from, to` pairs
        // indicating the matched parts of `word`.
        //
        // The score is a number that is more negative the worse the match
        // is. See `Penalty` above.
        match(word) {
            if (this.pattern.length == 0)
                return [0];
            if (word.length < this.pattern.length)
                return null;
            let { chars, folded, any, precise, byWord } = this;
            // For single-character queries, only match when they occur right
            // at the start
            if (chars.length == 1) {
                let first = codePointAt(word, 0);
                return first == chars[0] ? [0, 0, codePointSize(first)]
                    : first == folded[0] ? [-200 /* CaseFold */, 0, codePointSize(first)] : null;
            }
            let direct = word.indexOf(this.pattern);
            if (direct == 0)
                return [0, 0, this.pattern.length];
            let len = chars.length, anyTo = 0;
            if (direct < 0) {
                for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                    let next = codePointAt(word, i);
                    if (next == chars[anyTo] || next == folded[anyTo])
                        any[anyTo++] = i;
                    i += codePointSize(next);
                }
                // No match, exit immediately
                if (anyTo < len)
                    return null;
            }
            let preciseTo = 0;
            let byWordTo = 0, byWordFolded = false;
            let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
            for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {
                let next = codePointAt(word, i);
                if (direct < 0) {
                    if (preciseTo < len && next == chars[preciseTo])
                        precise[preciseTo++] = i;
                    if (adjacentTo < len) {
                        if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                            if (adjacentTo == 0)
                                adjacentStart = i;
                            adjacentEnd = i;
                            adjacentTo++;
                        }
                        else {
                            adjacentTo = 0;
                        }
                    }
                }
                let ch, type = next < 0xff
                    ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */)
                    : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */);
                if (type == 1 /* Upper */ || prevType == 0 /* NonWord */ && type != 0 /* NonWord */ &&
                    (this.chars[byWordTo] == next || (this.folded[byWordTo] == next && (byWordFolded = true))))
                    byWord[byWordTo++] = i;
                prevType = type;
                i += codePointSize(next);
            }
            if (byWordTo == len && byWord[0] == 0)
                return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);
            if (adjacentTo == len && adjacentStart == 0)
                return [-200 /* CaseFold */, 0, adjacentEnd];
            if (direct > -1)
                return [-700 /* NotStart */, direct, direct + this.pattern.length];
            if (adjacentTo == len)
                return [-200 /* CaseFold */ + -700 /* NotStart */, adjacentStart, adjacentEnd];
            if (byWordTo == len)
                return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */, byWord, word);
            return chars.length == 2 ? null : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);
        }
        result(score, positions, word) {
            let result = [score], i = 1;
            for (let pos of positions) {
                let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
                if (i > 1 && result[i - 1] == pos)
                    result[i - 1] = to;
                else {
                    result[i++] = pos;
                    result[i++] = to;
                }
            }
            return result;
        }
    }

    const completionConfig$1 = Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                activateOnTyping: true,
                override: null,
                maxRenderedOptions: 100
            });
        }
    });

    const MaxInfoWidth$1 = 300;
    const baseTheme$e = EditorView$1.baseTheme({
        "$tooltip.autocomplete": {
            "& > ul": {
                fontFamily: "monospace",
                overflowY: "auto",
                whiteSpace: "nowrap",
                maxHeight: "10em",
                listStyle: "none",
                margin: 0,
                padding: 0,
                "& > li": {
                    cursor: "pointer",
                    padding: "1px 1em 1px 3px",
                    lineHeight: 1.2
                },
                "& > li[aria-selected]": {
                    background_fallback: "#bdf",
                    backgroundColor: "Highlight",
                    color_fallback: "white",
                    color: "HighlightText"
                }
            }
        },
        "$completionListIncompleteTop:before, $completionListIncompleteBottom:after": {
            content: '"···"',
            opacity: 0.5,
            display: "block",
            textAlign: "center"
        },
        "$tooltip.completionInfo": {
            position: "absolute",
            padding: "3px 9px",
            width: "max-content",
            maxWidth: MaxInfoWidth$1 + "px",
        },
        "$tooltip.completionInfo.left": { right: "100%" },
        "$tooltip.completionInfo.right": { left: "100%" },
        "$$light $snippetField": { backgroundColor: "#ddd" },
        "$$dark $snippetField": { backgroundColor: "#333" },
        "$snippetFieldPosition": {
            verticalAlign: "text-top",
            width: 0,
            height: "1.15em",
            margin: "0 -0.7px -.7em",
            borderLeft: "1.4px dotted #888"
        },
        $completionMatchedText: {
            textDecoration: "underline"
        },
        $completionDetail: {
            marginLeft: "0.5em",
            fontStyle: "italic"
        },
        $completionIcon: {
            fontSize: "90%",
            width: ".8em",
            display: "inline-block",
            textAlign: "center",
            paddingRight: ".6em",
            opacity: "0.6"
        },
        "$completionIcon.function, $completionIcon.method": {
            "&:after": { content: "'ƒ'" }
        },
        "$completionIcon.class": {
            "&:after": { content: "'○'" }
        },
        "$completionIcon.interface": {
            "&:after": { content: "'◌'" }
        },
        "$completionIcon.variable": {
            "&:after": { content: "'𝑥'" }
        },
        "$completionIcon.constant": {
            "&:after": { content: "'𝐶'" }
        },
        "$completionIcon.type": {
            "&:after": { content: "'𝑡'" }
        },
        "$completionIcon.enum": {
            "&:after": { content: "'∪'" }
        },
        "$completionIcon.property": {
            "&:after": { content: "'□'" }
        },
        "$completionIcon.keyword": {
            "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
        },
        "$completionIcon.namespace": {
            "&:after": { content: "'▢'" }
        },
        "$completionIcon.text": {
            "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
        }
    });

    function createListBox$1(options, id, range) {
        const ul = document.createElement("ul");
        ul.id = id;
        ul.setAttribute("role", "listbox");
        ul.setAttribute("aria-expanded", "true");
        for (let i = range.from; i < range.to; i++) {
            let { completion, match } = options[i];
            const li = ul.appendChild(document.createElement("li"));
            li.id = id + "-" + i;
            let icon = li.appendChild(document.createElement("div"));
            icon.className = themeClass$1("completionIcon" + (completion.type ? "." + completion.type : ""));
            icon.setAttribute("aria-hidden", "true");
            let labelElt = li.appendChild(document.createElement("span"));
            labelElt.className = themeClass$1("completionLabel");
            let { label, detail } = completion, off = 0;
            for (let j = 1; j < match.length;) {
                let from = match[j++], to = match[j++];
                if (from > off)
                    labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                let span = labelElt.appendChild(document.createElement("span"));
                span.appendChild(document.createTextNode(label.slice(from, to)));
                span.className = themeClass$1("completionMatchedText");
                off = to;
            }
            if (off < label.length)
                labelElt.appendChild(document.createTextNode(label.slice(off)));
            if (detail) {
                let detailElt = li.appendChild(document.createElement("span"));
                detailElt.className = themeClass$1("completionDetail");
                detailElt.textContent = detail;
            }
            li.setAttribute("role", "option");
        }
        if (range.from)
            ul.classList.add(themeClass$1("completionListIncompleteTop"));
        if (range.to < options.length)
            ul.classList.add(themeClass$1("completionListIncompleteBottom"));
        return ul;
    }
    function createInfoDialog$1(option) {
        let dom = document.createElement("div");
        dom.className = themeClass$1("tooltip.completionInfo");
        let { info } = option.completion;
        if (typeof info == "string")
            dom.textContent = info;
        else
            dom.appendChild(info(option.completion));
        return dom;
    }
    function rangeAroundSelected$1(total, selected, max) {
        if (total <= max)
            return { from: 0, to: total };
        if (selected <= (total >> 1)) {
            let off = Math.floor(selected / max);
            return { from: off * max, to: (off + 1) * max };
        }
        let off = Math.floor((total - selected) / max);
        return { from: total - (off + 1) * max, to: total - off * max };
    }
    class CompletionTooltip$1 {
        constructor(view, stateField) {
            this.view = view;
            this.stateField = stateField;
            this.info = null;
            this.placeInfo = {
                read: () => this.measureInfo(),
                write: (pos) => this.positionInfo(pos),
                key: this
            };
            let cState = view.state.field(stateField);
            let { options, selected } = cState.open;
            let config = view.state.facet(completionConfig$1);
            this.range = rangeAroundSelected$1(options.length, selected, config.maxRenderedOptions);
            this.dom = document.createElement("div");
            this.dom.addEventListener("mousedown", (e) => {
                for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                    if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                        applyCompletion$1(view, options[+match[1]]);
                        e.preventDefault();
                        return;
                    }
                }
            });
            this.list = this.dom.appendChild(createListBox$1(options, cState.id, this.range));
            this.list.addEventListener("scroll", () => {
                if (this.info)
                    this.view.requestMeasure(this.placeInfo);
            });
        }
        mount() { this.updateSel(); }
        update(update) {
            if (update.state.field(this.stateField) != update.prevState.field(this.stateField))
                this.updateSel();
        }
        positioned() {
            if (this.info)
                this.view.requestMeasure(this.placeInfo);
        }
        updateSel() {
            let cState = this.view.state.field(this.stateField), open = cState.open;
            if (open.selected < this.range.from || open.selected >= this.range.to) {
                this.range = rangeAroundSelected$1(open.options.length, open.selected, this.view.state.facet(completionConfig$1).maxRenderedOptions);
                this.list.remove();
                this.list = this.dom.appendChild(createListBox$1(open.options, cState.id, this.range));
                this.list.addEventListener("scroll", () => {
                    if (this.info)
                        this.view.requestMeasure(this.placeInfo);
                });
            }
            if (this.updateSelectedOption(open.selected)) {
                if (this.info) {
                    this.info.remove();
                    this.info = null;
                }
                let option = open.options[open.selected];
                if (option.completion.info) {
                    this.info = this.dom.appendChild(createInfoDialog$1(option));
                    this.view.requestMeasure(this.placeInfo);
                }
            }
        }
        updateSelectedOption(selected) {
            let set = null;
            for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
                if (i == selected) {
                    if (!opt.hasAttribute("aria-selected")) {
                        opt.setAttribute("aria-selected", "true");
                        set = opt;
                    }
                }
                else {
                    if (opt.hasAttribute("aria-selected"))
                        opt.removeAttribute("aria-selected");
                }
            }
            if (set)
                scrollIntoView$1(this.list, set);
            return set;
        }
        measureInfo() {
            let sel = this.dom.querySelector("[aria-selected]");
            if (!sel)
                return null;
            let rect = this.dom.getBoundingClientRect();
            let top = sel.getBoundingClientRect().top - rect.top;
            if (top < 0 || top > this.list.clientHeight - 10)
                return null;
            let left = this.view.textDirection == Direction$1.RTL;
            let spaceLeft = rect.left, spaceRight = innerWidth - rect.right;
            if (left && spaceLeft < Math.min(MaxInfoWidth$1, spaceRight))
                left = false;
            else if (!left && spaceRight < Math.min(MaxInfoWidth$1, spaceLeft))
                left = true;
            return { top, left };
        }
        positionInfo(pos) {
            if (this.info && pos) {
                this.info.style.top = pos.top + "px";
                this.info.classList.toggle("cm-tooltip-completionInfo-left", pos.left);
                this.info.classList.toggle("cm-tooltip-completionInfo-right", !pos.left);
            }
        }
    }
    // We allocate a new function instance every time the completion
    // changes to force redrawing/repositioning of the tooltip
    function completionTooltip$1(stateField) {
        return (view) => new CompletionTooltip$1(view, stateField);
    }
    function scrollIntoView$1(container, element) {
        let parent = container.getBoundingClientRect();
        let self = element.getBoundingClientRect();
        if (self.top < parent.top)
            container.scrollTop -= parent.top - self.top;
        else if (self.bottom > parent.bottom)
            container.scrollTop += self.bottom - parent.bottom;
    }

    const MaxOptions$1 = 300;
    function sortOptions$1(active, state) {
        let options = [];
        for (let a of active)
            if (a.hasResult()) {
                let matcher = new FuzzyMatcher$1(state.sliceDoc(a.from, a.to)), match;
                for (let option of a.result.options)
                    if (match = matcher.match(option.label)) {
                        if (option.boost != null)
                            match[0] += option.boost;
                        options.push(new Option$1(option, a, match));
                    }
            }
        options.sort(cmpOption$1);
        return options.length > MaxOptions$1 ? options.slice(0, MaxOptions$1) : options;
    }
    class CompletionDialog$1 {
        constructor(options, attrs, tooltip, timestamp, selected) {
            this.options = options;
            this.attrs = attrs;
            this.tooltip = tooltip;
            this.timestamp = timestamp;
            this.selected = selected;
        }
        setSelected(selected, id) {
            return selected == this.selected || selected >= this.options.length ? this
                : new CompletionDialog$1(this.options, makeAttrs$1(id, selected), this.tooltip, this.timestamp, selected);
        }
        static build(active, state, id, prev) {
            let options = sortOptions$1(active, state);
            if (!options.length)
                return null;
            let selected = 0;
            if (prev) {
                let selectedValue = prev.options[prev.selected].completion;
                for (let i = 0; i < options.length && !selected; i++) {
                    if (options[i].completion == selectedValue)
                        selected = i;
                }
            }
            return new CompletionDialog$1(options, makeAttrs$1(id, selected), [{
                    pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
                    style: "autocomplete",
                    create: completionTooltip$1(completionState$1)
                }], prev ? prev.timestamp : Date.now(), selected);
        }
        map(changes) {
            return new CompletionDialog$1(this.options, this.attrs, [Object.assign(Object.assign({}, this.tooltip[0]), { pos: changes.mapPos(this.tooltip[0].pos) })], this.timestamp, this.selected);
        }
    }
    class CompletionState$1 {
        constructor(active, id, open) {
            this.active = active;
            this.id = id;
            this.open = open;
        }
        static start() {
            return new CompletionState$1(none$a, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
        }
        update(tr) {
            let { state } = tr, conf = state.facet(completionConfig$1);
            let sources = conf.override || state.languageDataAt("autocomplete", cur$1(state));
            let active = sources.map(source => {
                let value = this.active.find(s => s.source == source) || new ActiveSource$1(source, 0 /* Inactive */, false);
                return value.update(tr, conf);
            });
            if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
                active = this.active;
            let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
                !sameResults$1(active, this.active) ? CompletionDialog$1.build(active, state, this.id, this.open)
                : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
            for (let effect of tr.effects)
                if (effect.is(setSelectedEffect$1))
                    open = open && open.setSelected(effect.value, this.id);
            return active == this.active && open == this.open ? this : new CompletionState$1(active, this.id, open);
        }
        get tooltip() { return this.open ? this.open.tooltip : none$a; }
        get attrs() { return this.open ? this.open.attrs : baseAttrs$1; }
    }
    function sameResults$1(a, b) {
        if (a == b)
            return true;
        for (let iA = 0, iB = 0;;) {
            while (iA < a.length && !a[iA].hasResult)
                iA++;
            while (iB < b.length && !b[iB].hasResult)
                iB++;
            let endA = iA == a.length, endB = iB == b.length;
            if (endA || endB)
                return endA == endB;
            if (a[iA++].result != b[iB++].result)
                return false;
        }
    }
    function makeAttrs$1(id, selected) {
        return {
            "aria-autocomplete": "list",
            "aria-activedescendant": id + "-" + selected,
            "aria-owns": id
        };
    }
    const baseAttrs$1 = { "aria-autocomplete": "list" }, none$a = [];
    function cmpOption$1(a, b) {
        let dScore = b.match[0] - a.match[0];
        if (dScore)
            return dScore;
        let lA = a.completion.label, lB = b.completion.label;
        return lA < lB ? -1 : lA == lB ? 0 : 1;
    }
    class ActiveSource$1 {
        constructor(source, state, explicit) {
            this.source = source;
            this.state = state;
            this.explicit = explicit;
        }
        hasResult() { return false; }
        update(tr, conf) {
            let event = tr.annotation(Transaction.userEvent), value = this;
            if (event == "input" || event == "delete")
                value = value.handleUserEvent(tr, event, conf);
            else if (tr.docChanged)
                value = value.handleChange(tr);
            else if (tr.selection && value.state != 0 /* Inactive */)
                value = new ActiveSource$1(value.source, 0 /* Inactive */, false);
            for (let effect of tr.effects) {
                if (effect.is(startCompletionEffect$1))
                    value = new ActiveSource$1(value.source, 1 /* Pending */, effect.value);
                else if (effect.is(closeCompletionEffect$1))
                    value = new ActiveSource$1(value.source, 0 /* Inactive */, false);
                else if (effect.is(setActiveEffect$1))
                    for (let active of effect.value)
                        if (active.source == value.source)
                            value = active;
            }
            return value;
        }
        handleUserEvent(_tr, type, conf) {
            return type == "delete" || !conf.activateOnTyping ? this : new ActiveSource$1(this.source, 1 /* Pending */, false);
        }
        handleChange(tr) {
            return tr.changes.touchesRange(cur$1(tr.startState)) ? new ActiveSource$1(this.source, 0 /* Inactive */, false) : this;
        }
    }
    class ActiveResult$1 extends ActiveSource$1 {
        constructor(source, explicit, result, from, to, span) {
            super(source, 2 /* Result */, explicit);
            this.result = result;
            this.from = from;
            this.to = to;
            this.span = span;
        }
        hasResult() { return true; }
        handleUserEvent(tr, type, conf) {
            let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
            let pos = cur$1(tr.state);
            if ((this.explicit ? pos < from : pos <= from) || pos > to)
                return new ActiveSource$1(this.source, type == "input" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */, false);
            if (this.span && (from == to || this.span.test(tr.state.sliceDoc(from, to))))
                return new ActiveResult$1(this.source, this.explicit, this.result, from, to, this.span);
            return new ActiveSource$1(this.source, 1 /* Pending */, this.explicit);
        }
        handleChange(tr) {
            return tr.changes.touchesRange(this.from, this.to)
                ? new ActiveSource$1(this.source, 0 /* Inactive */, false)
                : new ActiveResult$1(this.source, this.explicit, this.result, tr.changes.mapPos(this.from), tr.changes.mapPos(this.to, 1), this.span);
        }
        map(mapping) {
            return new ActiveResult$1(this.source, this.explicit, this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1), this.span);
        }
    }
    const startCompletionEffect$1 = StateEffect.define();
    const closeCompletionEffect$1 = StateEffect.define();
    const setActiveEffect$1 = StateEffect.define({
        map(sources, mapping) { return sources.map(s => s.hasResult() && !mapping.empty ? s.map(mapping) : s); }
    });
    const setSelectedEffect$1 = StateEffect.define();
    const completionState$1 = StateField.define({
        create() { return CompletionState$1.start(); },
        update(value, tr) { return value.update(tr); },
        provide: [
            showTooltip.nFrom(state => state.tooltip),
            EditorView$1.contentAttributes.from(state => state.attrs)
        ]
    });
    class RunningQuery$1 {
        constructor(source, context) {
            this.source = source;
            this.context = context;
            this.time = Date.now();
            this.updates = [];
            // Note that 'undefined' means 'not done yet', whereas 'null' means
            // 'query returned null'.
            this.done = undefined;
        }
    }
    const DebounceTime$1 = 50, MaxUpdateCount$1 = 50, MinAbortTime$1 = 1000;
    const completionPlugin$1 = ViewPlugin$1.fromClass(class {
        constructor(view) {
            this.view = view;
            this.debounceUpdate = -1;
            this.running = [];
            this.debounceAccept = -1;
            this.composing = 0 /* None */;
            for (let active of view.state.field(completionState$1).active)
                if (active.state == 1 /* Pending */)
                    this.startQuery(active);
        }
        update(update) {
            let cState = update.state.field(completionState$1);
            if (!update.selectionSet && !update.docChanged && update.prevState.field(completionState$1) == cState)
                return;
            let doesReset = update.transactions.some(tr => {
                let event = tr.annotation(Transaction.userEvent);
                return (tr.selection || tr.docChanged) && event != "input" && event != "delete";
            });
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (doesReset ||
                    query.updates.length + update.transactions.length > MaxUpdateCount$1 && query.time - Date.now() > MinAbortTime$1) {
                    for (let handler of query.context.abortListeners) {
                        try {
                            handler();
                        }
                        catch (e) {
                            logException$1(this.view.state, e);
                        }
                    }
                    query.context.abortListeners = null;
                    this.running.splice(i--, 1);
                }
                else {
                    query.updates.push(...update.transactions);
                }
            }
            if (this.debounceUpdate > -1)
                clearTimeout(this.debounceUpdate);
            this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.source == a.source))
                ? setTimeout(() => this.startUpdate(), DebounceTime$1) : -1;
            if (this.composing != 0 /* None */)
                for (let tr of update.transactions) {
                    if (tr.annotation(Transaction.userEvent) == "input")
                        this.composing = 2 /* Changed */;
                    else if (this.composing == 2 /* Changed */ && tr.selection)
                        this.composing = 3 /* ChangedAndMoved */;
                }
        }
        startUpdate() {
            this.debounceUpdate = -1;
            let { state } = this.view, cState = state.field(completionState$1);
            for (let active of cState.active) {
                if (active.state == 1 /* Pending */ && !this.running.some(r => r.source == active.source))
                    this.startQuery(active);
            }
        }
        startQuery(active) {
            let { state } = this.view, pos = cur$1(state);
            let context = new CompletionContext$1(state, pos, active.explicit);
            let pending = new RunningQuery$1(active.source, context);
            this.running.push(pending);
            Promise.resolve(active.source(context)).then(result => {
                if (!pending.context.aborted) {
                    pending.done = result || null;
                    this.scheduleAccept();
                }
            }, err => {
                this.view.dispatch({ effects: closeCompletionEffect$1.of(null) });
                logException$1(this.view.state, err);
            });
        }
        scheduleAccept() {
            if (this.running.every(q => q.done !== undefined))
                this.accept();
            else if (this.debounceAccept < 0)
                this.debounceAccept = setTimeout(() => this.accept(), DebounceTime$1);
        }
        // For each finished query in this.running, try to create a result
        // or, if appropriate, restart the query.
        accept() {
            var _a;
            if (this.debounceAccept > -1)
                clearTimeout(this.debounceAccept);
            this.debounceAccept = -1;
            let updated = [];
            let conf = this.view.state.facet(completionConfig$1);
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (query.done === undefined)
                    continue;
                this.running.splice(i--, 1);
                if (query.done) {
                    let active = new ActiveResult$1(query.source, query.context.explicit, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur$1(query.updates.length ? query.updates[0].startState : this.view.state), query.done.span ? ensureAnchor$1(query.done.span, true) : null);
                    // Replay the transactions that happened since the start of
                    // the request and see if that preserves the result
                    for (let tr of query.updates)
                        active = active.update(tr, conf);
                    if (active.hasResult()) {
                        updated.push(active);
                        continue;
                    }
                }
                let current = this.view.state.field(completionState$1).active.find(a => a.source == query.source);
                if (current && current.state == 1 /* Pending */) {
                    if (query.done == null) {
                        // Explicitly failed. Should clear the pending status if it
                        // hasn't been re-set in the meantime.
                        let active = new ActiveSource$1(query.source, 0 /* Inactive */, false);
                        for (let tr of query.updates)
                            active = active.update(tr, conf);
                        if (active.state != 1 /* Pending */)
                            updated.push(active);
                    }
                    else {
                        // Cleared by subsequent transactions. Restart.
                        this.startQuery(current);
                    }
                }
            }
            if (updated.length)
                this.view.dispatch({ effects: setActiveEffect$1.of(updated) });
        }
    }, {
        eventHandlers: {
            compositionstart() {
                this.composing = 1 /* Started */;
            },
            compositionend() {
                if (this.composing == 3 /* ChangedAndMoved */)
                    this.view.dispatch({ effects: startCompletionEffect$1.of(false) });
                this.composing = 0 /* None */;
            }
        } // See https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/949
    });

    class FieldPos {
        constructor(field, line, from, to) {
            this.field = field;
            this.line = line;
            this.from = from;
            this.to = to;
        }
    }
    class FieldRange {
        constructor(field, from, to) {
            this.field = field;
            this.from = from;
            this.to = to;
        }
        map(changes) {
            return new FieldRange(this.field, changes.mapPos(this.from, -1), changes.mapPos(this.to, 1));
        }
    }
    class Snippet {
        constructor(lines, fieldPositions) {
            this.lines = lines;
            this.fieldPositions = fieldPositions;
        }
        instantiate(state, pos) {
            let text = [], lineStart = [pos];
            let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.slice(0, Math.min(100, lineObj.length)))[0];
            for (let line of this.lines) {
                if (text.length) {
                    let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                    for (let i = 0; i < tabs; i++)
                        indent += state.facet(EditorState.indentUnit);
                    lineStart.push(pos + indent.length - tabs);
                    line = indent + line.slice(tabs);
                }
                text.push(line);
                pos += line.length + 1;
            }
            let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
            return { text, ranges };
        }
        static parse(template) {
            let fields = [];
            let lines = [], positions = [], m;
            for (let line of template.split(/\r\n?|\n/)) {
                while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
                    let seq = m[1] ? +m[1] : null, name = m[2] || m[3], found = -1;
                    for (let i = 0; i < fields.length; i++) {
                        if (name ? fields[i].name == name : seq != null && fields[i].seq == seq)
                            found = i;
                    }
                    if (found < 0) {
                        let i = 0;
                        while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                            i++;
                        fields.splice(i, 0, { seq, name: name || null });
                        found = i;
                    }
                    positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                    line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
                }
                lines.push(line);
            }
            return new Snippet(lines, positions);
        }
    }
    let fieldMarker$1 = Decoration$1.widget({ widget: new class extends WidgetType$1 {
            toDOM() {
                let span = document.createElement("span");
                span.className = themeClass$1("snippetFieldPosition");
                return span;
            }
            ignoreEvent() { return false; }
        } });
    let fieldRange$1 = Decoration$1.mark({ class: themeClass$1("snippetField") });
    class ActiveSnippet$1 {
        constructor(ranges, active) {
            this.ranges = ranges;
            this.active = active;
            this.deco = Decoration$1.set(ranges.map(r => (r.from == r.to ? fieldMarker$1 : fieldRange$1).range(r.from, r.to)));
        }
        map(changes) {
            return new ActiveSnippet$1(this.ranges.map(r => r.map(changes)), this.active);
        }
        selectionInsideField(sel) {
            return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
        }
    }
    const setActive$1 = StateEffect.define({
        map(value, changes) { return value && value.map(changes); }
    });
    const moveToField$1 = StateEffect.define();
    const snippetState$1 = StateField.define({
        create() { return null; },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setActive$1))
                    return effect.value;
                if (effect.is(moveToField$1) && value)
                    return new ActiveSnippet$1(value.ranges, effect.value);
            }
            if (value && tr.docChanged)
                value = value.map(tr.changes);
            if (value && tr.selection && !value.selectionInsideField(tr.selection))
                value = null;
            return value;
        },
        provide: [EditorView$1.decorations.from(val => val ? val.deco : Decoration$1.none)]
    });
    function fieldSelection$1(ranges, field) {
        return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
    }
    /// Convert a snippet template to a function that can apply it.
    /// Snippets are written using syntax like this:
    ///
    ///     "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"
    ///
    /// Each `${}` placeholder (you may also use `#{}`) indicates a field
    /// that the user can fill in. Its name, if any, will be the default
    /// content for the field.
    ///
    /// When the snippet is activated by calling the returned function,
    /// the code is inserted at the given position. Newlines in the
    /// template are indented by the indentation of the start line, plus
    /// one [indent unit](#state.EditorState^indentUnit) per tab character
    /// after the newline.
    ///
    /// On activation, (all instances of) the first field are selected.
    /// The user can move between fields with Tab and Shift-Tab as long as
    /// the fields are active. Moving to the last field or moving the
    /// cursor out of the current field deactivates the fields.
    ///
    /// The order of fields defaults to textual order, but you can add
    /// numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
    /// a custom order.
    function snippet(template) {
        let snippet = Snippet.parse(template);
        return (editor, _completion, from, to) => {
            let { text, ranges } = snippet.instantiate(editor.state, from);
            let spec = { changes: { from, to, insert: Text.of(text) } };
            if (ranges.length)
                spec.selection = fieldSelection$1(ranges, 0);
            if (ranges.length > 1) {
                spec.effects = setActive$1.of(new ActiveSnippet$1(ranges, 0));
                if (editor.state.field(snippetState$1, false) === undefined)
                    spec.reconfigure = { append: [snippetState$1, snippetKeymap$1, baseTheme$e] };
            }
            editor.dispatch(editor.state.update(spec));
        };
    }
    function moveField$1(dir) {
        return ({ state, dispatch }) => {
            let active = state.field(snippetState$1, false);
            if (!active || dir < 0 && active.active == 0)
                return false;
            let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
            dispatch(state.update({
                selection: fieldSelection$1(active.ranges, next),
                effects: setActive$1.of(last ? null : new ActiveSnippet$1(active.ranges, next))
            }));
            return true;
        };
    }
    const clearSnippet$1 = ({ state, dispatch }) => {
        let active = state.field(snippetState$1, false);
        if (!active)
            return false;
        dispatch(state.update({ effects: setActive$1.of(null) }));
        return true;
    };
    const snippetKeymap$1 = precedence(keymap$1([
        { key: "Tab", run: moveField$1(1), shift: moveField$1(-1) },
        { key: "Escape", run: clearSnippet$1 }
    ]), "override");
    function toSet(chars) {
        let flat = Object.keys(chars).join("");
        let words = /\w/.test(flat);
        if (words)
            flat = flat.replace(/\w/g, "");
        return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
    }
    function prefixMatch(options) {
        let first = Object.create(null), rest = Object.create(null);
        for (let { label } of options) {
            first[label[0]] = true;
            for (let i = 1; i < label.length; i++)
                rest[label[i]] = true;
        }
        let source = toSet(first) + toSet(rest) + "*$";
        return [new RegExp("^" + source), new RegExp(source)];
    }
    /// Given a a fixed array of options, return an autocompleter that
    /// compares those options to the current
    /// [token](#autocomplete.CompletionContext.tokenBefore) and returns
    /// the matching ones.
    function completeFromList(list) {
        let options = list.map(o => typeof o == "string" ? { label: o } : o);
        let [span, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
        return (context) => {
            let token = context.matchBefore(match);
            return token || context.explicit ? { from: token ? token.from : context.pos, options, span } : null;
        };
    }
    /// Create a completion source from an array of snippet specs.
    function completeSnippets(snippets) {
        return completeFromList(snippets.map(s => Object.assign({}, s, { apply: snippet(s.snippet) })));
    }

    /// A collection of JavaScript-related
    /// [snippets](#autocomplete.snippet).
    const snippets = [
        { label: "function",
            detail: "definition",
            type: "keyword",
            snippet: "function ${name}(${params}) {\n\t${}\n}" },
        { label: "for",
            detail: "loop",
            type: "keyword",
            snippet: "for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}" },
        { label: "for",
            detail: "of loop",
            type: "keyword",
            snippet: "for (let ${name} of ${collection}) {\n\t${}\n}" },
        { label: "try",
            detail: "block",
            type: "keyword",
            snippet: "try {\n\t${}\n} catch (${error}) {\n\t${}\n}" },
        { label: "class",
            detail: "definition",
            type: "keyword",
            snippet: "class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}" },
        { label: "import",
            detail: "named",
            type: "keyword",
            snippet: "import {${names}} from \"${module}\"\n${}" },
        { label: "import",
            detail: "default",
            type: "keyword",
            snippet: "import ${name} from \"${module}\"\n${}" }
    ];

    /// A syntax provider based on the [Lezer JavaScript
    /// parser](https://github.com/lezer-parser/javascript), extended with
    /// highlighting and indentation information.
    const javascriptSyntax = LezerSyntax.define(parser$4.withProps(indentNodeProp.add({
        IfStatement: continuedIndent({ except: /^\s*({|else\b)/ }),
        TryStatement: continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
        LabeledStatement: flatIndent,
        SwitchBody: context => {
            let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
            return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
        },
        Block: delimitedIndent({ closing: "}" }),
        "TemplateString BlockComment": () => -1,
        "Statement Property": continuedIndent({ except: /^{/ })
    }), foldNodeProp.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression"(tree) {
            return { from: tree.from + 1, to: tree.to - 1 };
        },
        BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
    }), styleTags({
        "get set async static": tags$1.modifier,
        "for while do if else switch try catch finally return throw break continue default case": tags$1.controlKeyword,
        "in of await yield void typeof delete instanceof": tags$1.operatorKeyword,
        "export import let var const function class extends": tags$1.definitionKeyword,
        "with debugger from as new": tags$1.keyword,
        TemplateString: tags$1.special(tags$1.string),
        Super: tags$1.atom,
        BooleanLiteral: tags$1.bool,
        this: tags$1.self,
        null: tags$1.null,
        Star: tags$1.modifier,
        VariableName: tags$1.variableName,
        VariableDefinition: tags$1.definition(tags$1.variableName),
        Label: tags$1.labelName,
        PropertyName: tags$1.propertyName,
        PropertyNameDefinition: tags$1.definition(tags$1.propertyName),
        UpdateOp: tags$1.updateOperator,
        LineComment: tags$1.lineComment,
        BlockComment: tags$1.blockComment,
        Number: tags$1.number,
        String: tags$1.string,
        ArithOp: tags$1.arithmeticOperator,
        LogicOp: tags$1.logicOperator,
        BitOp: tags$1.bitwiseOperator,
        CompareOp: tags$1.compareOperator,
        RegExp: tags$1.regexp,
        Equals: tags$1.definitionOperator,
        "Arrow : Spread": tags$1.punctuation,
        "( )": tags$1.paren,
        "[ ]": tags$1.squareBracket,
        "{ }": tags$1.brace,
        ".": tags$1.derefOperator,
        ", ;": tags$1.separator,
        TypeName: tags$1.typeName,
        TypeDefinition: tags$1.definition(tags$1.typeName),
        "type enum interface implements namespace module declare": tags$1.definitionKeyword,
        "abstract global privacy readonly": tags$1.modifier,
        "is keyof unique infer": tags$1.operatorKeyword,
        JSXAttributeValue: tags$1.string,
        JSXText: tags$1.content,
        "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags$1.angleBracket,
        "JSXIdentifier JSXNameSpacedName": tags$1.typeName,
        "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags$1.propertyName
    })), {
        languageData: {
            closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:case |default:|\{|\})$/
        }
    });
    /// Returns an extension that installs JavaScript support features
    /// (completion of [snippets](#lang-javascript.snippets)).
    function javascriptSupport() {
        return javascriptSyntax.languageData.of({ autocomplete: completeSnippets(snippets) });
    }

    const Targets = ["_blank", "_self", "_top", "_parent"];
    const Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
    const Methods = ["get", "post", "put", "delete"];
    const Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
    const Bool = ["true", "false"];
    const S = {}; // Empty tag spec
    const Tags = {
        a: {
            attrs: {
                href: null, ping: null, type: null,
                media: null,
                target: Targets,
                hreflang: null
            }
        },
        abbr: S,
        acronym: S,
        address: S,
        applet: S,
        area: {
            attrs: {
                alt: null, coords: null, href: null, target: null, ping: null,
                media: null, hreflang: null, type: null,
                shape: ["default", "rect", "circle", "poly"]
            }
        },
        article: S,
        aside: S,
        audio: {
            attrs: {
                src: null, mediagroup: null,
                crossorigin: ["anonymous", "use-credentials"],
                preload: ["none", "metadata", "auto"],
                autoplay: ["autoplay"],
                loop: ["loop"],
                controls: ["controls"]
            }
        },
        b: S,
        base: { attrs: { href: null, target: Targets } },
        basefont: S,
        bdi: S,
        bdo: S,
        big: S,
        blockquote: { attrs: { cite: null } },
        body: S,
        br: S,
        button: {
            attrs: {
                form: null, formaction: null, name: null, value: null,
                autofocus: ["autofocus"],
                disabled: ["autofocus"],
                formenctype: Encs,
                formmethod: Methods,
                formnovalidate: ["novalidate"],
                formtarget: Targets,
                type: ["submit", "reset", "button"]
            }
        },
        canvas: { attrs: { width: null, height: null } },
        caption: S,
        center: S,
        cite: S,
        code: S,
        col: { attrs: { span: null } },
        colgroup: { attrs: { span: null } },
        command: {
            attrs: {
                type: ["command", "checkbox", "radio"],
                label: null, icon: null, radiogroup: null, command: null, title: null,
                disabled: ["disabled"],
                checked: ["checked"]
            }
        },
        data: { attrs: { value: null } },
        datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
        datalist: { attrs: { data: null } },
        dd: S,
        del: { attrs: { cite: null, datetime: null } },
        details: { attrs: { open: ["open"] } },
        dfn: S,
        dir: S,
        div: S,
        dl: S,
        dt: S,
        em: S,
        embed: { attrs: { src: null, type: null, width: null, height: null } },
        eventsource: { attrs: { src: null } },
        fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
        figcaption: S,
        figure: S,
        font: S,
        footer: S,
        form: {
            attrs: {
                action: null, name: null,
                "accept-charset": Charsets,
                autocomplete: ["on", "off"],
                enctype: Encs,
                method: Methods,
                novalidate: ["novalidate"],
                target: Targets
            }
        },
        frame: S,
        frameset: S,
        h1: S, h2: S, h3: S, h4: S, h5: S, h6: S,
        head: {
            children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
        },
        header: S,
        hgroup: S,
        hr: S,
        html: {
            attrs: { manifest: null },
            children: ["head", "body"]
        },
        i: S,
        iframe: {
            attrs: {
                src: null, srcdoc: null, name: null, width: null, height: null,
                sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
                seamless: ["seamless"]
            }
        },
        img: {
            attrs: {
                alt: null, src: null, ismap: null, usemap: null, width: null, height: null,
                crossorigin: ["anonymous", "use-credentials"]
            }
        },
        input: {
            attrs: {
                alt: null, dirname: null, form: null, formaction: null,
                height: null, list: null, max: null, maxlength: null, min: null,
                name: null, pattern: null, placeholder: null, size: null, src: null,
                step: null, value: null, width: null,
                accept: ["audio/*", "video/*", "image/*"],
                autocomplete: ["on", "off"],
                autofocus: ["autofocus"],
                checked: ["checked"],
                disabled: ["disabled"],
                formenctype: Encs,
                formmethod: Methods,
                formnovalidate: ["novalidate"],
                formtarget: Targets,
                multiple: ["multiple"],
                readonly: ["readonly"],
                required: ["required"],
                type: ["hidden", "text", "search", "tel", "url", "email", "password", "datetime", "date", "month",
                    "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio",
                    "file", "submit", "image", "reset", "button"]
            }
        },
        ins: { attrs: { cite: null, datetime: null } },
        kbd: S,
        keygen: {
            attrs: {
                challenge: null, form: null, name: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                keytype: ["RSA"]
            }
        },
        label: { attrs: { for: null, form: null } },
        legend: S,
        li: { attrs: { value: null } },
        link: {
            attrs: {
                href: null, type: null,
                hreflang: null,
                media: null,
                sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
            }
        },
        map: { attrs: { name: null } },
        mark: S,
        menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
        meta: {
            attrs: {
                content: null,
                charset: Charsets,
                name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
                "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
            }
        },
        meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
        nav: S,
        noframes: S,
        noscript: S,
        object: {
            attrs: {
                data: null, type: null, name: null, usemap: null, form: null, width: null, height: null,
                typemustmatch: ["typemustmatch"]
            }
        },
        ol: { attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
            children: ["li", "script", "template", "ul", "ol"] },
        optgroup: { attrs: { disabled: ["disabled"], label: null } },
        option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
        output: { attrs: { for: null, form: null, name: null } },
        p: S,
        param: { attrs: { name: null, value: null } },
        pre: S,
        progress: { attrs: { value: null, max: null } },
        q: { attrs: { cite: null } },
        rp: S,
        rt: S,
        ruby: S,
        s: S,
        samp: S,
        script: {
            attrs: {
                type: ["text/javascript"],
                src: null,
                async: ["async"],
                defer: ["defer"],
                charset: Charsets
            }
        },
        section: S,
        select: {
            attrs: {
                form: null, name: null, size: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                multiple: ["multiple"]
            }
        },
        small: S,
        source: { attrs: { src: null, type: null, media: null } },
        span: S,
        strike: S,
        strong: S,
        style: {
            attrs: {
                type: ["text/css"],
                media: null,
                scoped: null
            }
        },
        sub: S,
        summary: S,
        sup: S,
        table: S,
        tbody: S,
        td: { attrs: { colspan: null, rowspan: null, headers: null } },
        textarea: {
            attrs: {
                dirname: null, form: null, maxlength: null, name: null, placeholder: null,
                rows: null, cols: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                readonly: ["readonly"],
                required: ["required"],
                wrap: ["soft", "hard"]
            }
        },
        tfoot: S,
        th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
        thead: S,
        time: { attrs: { datetime: null } },
        title: S,
        tr: S,
        track: {
            attrs: {
                src: null, label: null, default: null,
                kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
                srclang: null
            }
        },
        tt: S,
        u: S,
        ul: { children: ["li", "script", "template", "ul", "ol"] },
        var: S,
        video: {
            attrs: {
                src: null, poster: null, width: null, height: null,
                crossorigin: ["anonymous", "use-credentials"],
                preload: ["auto", "metadata", "none"],
                autoplay: ["autoplay"],
                mediagroup: ["movie"],
                muted: ["muted"],
                controls: ["controls"]
            }
        },
        wbr: S
    };
    const GlobalAttrs = {
        accesskey: null,
        class: null,
        contenteditable: Bool,
        contextmenu: null,
        dir: ["ltr", "rtl", "auto"],
        draggable: ["true", "false", "auto"],
        dropzone: ["copy", "move", "link", "string:", "file:"],
        hidden: ["hidden"],
        id: null,
        inert: ["inert"],
        itemid: null,
        itemprop: null,
        itemref: null,
        itemscope: ["itemscope"],
        itemtype: null,
        lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
        spellcheck: Bool,
        autocorrect: Bool,
        autocapitalize: Bool,
        style: null,
        tabindex: null,
        title: null,
        translate: ["yes", "no"],
        onclick: null,
        rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
        role: "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
        "aria-activedescendant": null,
        "aria-atomic": Bool,
        "aria-autocomplete": ["inline", "list", "both", "none"],
        "aria-busy": Bool,
        "aria-checked": ["true", "false", "mixed", "undefined"],
        "aria-controls": null,
        "aria-describedby": null,
        "aria-disabled": Bool,
        "aria-dropeffect": null,
        "aria-expanded": ["true", "false", "undefined"],
        "aria-flowto": null,
        "aria-grabbed": ["true", "false", "undefined"],
        "aria-haspopup": Bool,
        "aria-hidden": Bool,
        "aria-invalid": ["true", "false", "grammar", "spelling"],
        "aria-label": null,
        "aria-labelledby": null,
        "aria-level": null,
        "aria-live": ["off", "polite", "assertive"],
        "aria-multiline": Bool,
        "aria-multiselectable": Bool,
        "aria-owns": null,
        "aria-posinset": null,
        "aria-pressed": ["true", "false", "mixed", "undefined"],
        "aria-readonly": Bool,
        "aria-relevant": null,
        "aria-required": Bool,
        "aria-selected": ["true", "false", "undefined"],
        "aria-setsize": null,
        "aria-sort": ["ascending", "descending", "none", "other"],
        "aria-valuemax": null,
        "aria-valuemin": null,
        "aria-valuenow": null,
        "aria-valuetext": null
    };
    const AllTags = Object.keys(Tags);
    const GlobalAttrNames = Object.keys(GlobalAttrs);
    function elementName(doc, tree) {
        let tag = tree.firstChild;
        if (!tag || tag.name != "OpenTag")
            return "";
        let name = tag.getChild("TagName");
        return name ? doc.sliceString(name.from, name.to) : "";
    }
    function findParentElement(tree, skip = false) {
        for (let cur = tree.parent; cur; cur = cur.parent)
            if (cur.name == "Element") {
                if (skip)
                    skip = false;
                else
                    return cur;
            }
        return null;
    }
    function allowedChildren(doc, tree) {
        let parent = findParentElement(tree, true);
        let parentInfo = parent ? Tags[elementName(doc, parent)] : null;
        return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || AllTags;
    }
    function openTags(doc, tree) {
        let open = [];
        for (let parent = tree; parent = findParentElement(parent);) {
            let tagName = elementName(doc, parent);
            if (tagName && parent.lastChild.name == "CloseTag")
                break;
            if (tagName && open.indexOf(tagName) < 0)
                open.push(tagName);
        }
        return open;
    }
    const identifier$2 = /^[:\-\.\w\u00b7-\uffff]+$/;
    function completeTag(state, tree, from, to) {
        let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
        return { from, to,
            options: allowedChildren(state.doc, tree).map(tagName => ({ label: tagName, type: "type" })).concat(openTags(state.doc, tree).map((tag, i) => ({ label: "/" + tag, apply: "/" + tag + end, type: "type", boost: 99 - i }))),
            span: /^\/?[:\-\.\w\u00b7-\uffff]*$/ };
    }
    function completeCloseTag(state, tree, from, to) {
        let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
        return { from, to,
            options: openTags(state.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end, type: "type", boost: 99 - i })),
            span: identifier$2 };
    }
    function completeStartTag(state, tree, pos) {
        let options = [], level = 0;
        for (let tagName of allowedChildren(state.doc, tree))
            options.push({ label: "<" + tagName, type: "type" });
        for (let open of openTags(state.doc, tree))
            options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
        return { from: pos, to: pos, options, span: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
    }
    function completeAttrName(state, tree, from, to) {
        let elt = findParentElement(tree), info = elt ? Tags[elementName(state.doc, elt)] : null;
        let names = (info && info.attrs ? Object.keys(info.attrs).concat(GlobalAttrNames) : GlobalAttrNames);
        return { from, to,
            options: names.map(attrName => ({ label: attrName, type: "property" })),
            span: identifier$2 };
    }
    function completeAttrValue(state, tree, from, to) {
        var _a;
        let nameNode = (_a = tree.parent) === null || _a === void 0 ? void 0 : _a.getChild("AttributeName");
        let options = [], span = undefined;
        if (nameNode) {
            let attrName = state.sliceDoc(nameNode.from, nameNode.to);
            let attrs = GlobalAttrs[attrName];
            if (!attrs) {
                let elt = findParentElement(tree), info = elt ? Tags[elementName(state.doc, elt)] : null;
                attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
            }
            if (attrs) {
                let base = state.sliceDoc(from, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
                if (/^['"]/.test(base)) {
                    span = base[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
                    quoteStart = "";
                    quoteEnd = state.sliceDoc(to, to + 1) == base[0] ? "" : base[0];
                    base = base.slice(1);
                    from++;
                }
                else {
                    span = /^[^\s<>='"]*$/;
                }
                for (let value of attrs)
                    options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
            }
        }
        return { from, to, options, span };
    }
    function completeHTML(context) {
        let { state, pos } = context, around = state.tree.resolve(pos), tree = around.resolve(pos, -1);
        if (tree.name == "TagName") {
            return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos)
                : completeTag(state, tree, tree.from, pos);
        }
        else if (tree.name == "StartTag") {
            return completeTag(state, tree, pos, pos);
        }
        else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
            return completeCloseTag(state, tree, pos, pos);
        }
        else if (context.explicit && (tree.name == "OpenTag" || tree.name == "SelfClosingTag") || tree.name == "AttributeName") {
            return completeAttrName(state, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
        }
        else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
            return completeAttrValue(state, tree, tree.name == "Is" ? pos : tree.from, pos);
        }
        else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
            return completeStartTag(state, tree, pos);
        }
        else {
            return null;
        }
    }

    /// A syntax provider based on the [Lezer HTML
    /// parser](https://github.com/lezer-parser/html), wired up with the
    /// JavaScript and CSS parsers to parse the content of `<script>` and
    /// `<style>` tags.
    const htmlSyntax = LezerSyntax.define(configureHTML([
        { tag: "script",
            attrs(attrs) {
                return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
            },
            parser: javascriptSyntax.parser },
        { tag: "style",
            attrs(attrs) {
                return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
            },
            parser: cssSyntax$1.parser }
    ]).withProps(indentNodeProp.add(type => {
        if (type.name == "Element")
            return delimitedIndent({ closing: "</", align: false });
        if (type.name == "OpenTag" || type.name == "CloseTag" || type.name == "SelfClosingTag")
            return continuedIndent();
        return undefined;
    }), foldNodeProp.add({
        Element(node) {
            let first = node.firstChild, last = node.lastChild;
            if (!first || first.name != "OpenTag")
                return null;
            return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
        }
    }), styleTags({
        AttributeValue: tags$1.string,
        "Text RawText": tags$1.content,
        "StartTag StartCloseTag SelfCloserEndTag EndTag SelfCloseEndTag": tags$1.angleBracket,
        TagName: tags$1.typeName,
        "MismatchedCloseTag/TagName": [tags$1.typeName, tags$1.invalid],
        AttributeName: tags$1.propertyName,
        UnquotedAttributeValue: tags$1.string,
        Is: tags$1.definitionOperator,
        "EntityReference CharacterReference": tags$1.character,
        Comment: tags$1.blockComment,
        ProcessingInst: tags$1.processingInstruction,
        DoctypeDecl: tags$1.documentMeta
    })), {
        languageData: {
            commentTokens: { block: { open: "<!--", close: "-->" } },
            indentOnInput: /^\s*<\/$/
        }
    });
    /// HTML tag completion. Opens and closes tags and attributes in a
    /// context-aware way.
    const htmlCompletion = htmlSyntax.languageData.of({ autocomplete: completeHTML });
    /// An extension that installs HTML-related functionality
    /// ([`htmlCompletion`](#lang-html.htmlCompletion) and
    /// [`javascriptSupport`](#lang-javascript.javascriptSupport)).
    function htmlSupport() { return [htmlCompletion, javascriptSupport()]; }
    /// Returns an extension that installs the HTML
    /// [syntax](#lang-html.htmlSyntax) and
    /// [support](#lang-html.htmlSupport).
    function html() { return [htmlSyntax, htmlSupport()]; }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$4 = {__proto__:null,true:34, false:34, null:40, void:44, byte:46, short:46, int:46, long:46, char:46, float:46, double:46, boolean:46, extends:60, super:62, class:74, this:76, new:82, public:98, protected:100, private:102, abstract:104, static:106, final:108, strictfp:110, default:112, synchronized:114, native:116, transient:118, volatile:120, throws:148, implements:158, interface:164, enum:174, instanceof:232, open:261, module:263, requires:268, transitive:270, exports:272, to:274, opens:276, uses:278, provides:280, with:282, package:286, import:290, if:302, else:304, while:308, for:312, assert:324, switch:328, case:334, do:338, break:342, continue:348, return:354, throw:360, try:364, catch:368, finally:376};
    const parser$5 = Parser.deserialize({
      version: 12,
      states: "#&|Q]QPOOO&nQQO'#HZO)OQQO'#CbOOQO'#Cb'#CbO)VQPO'#CaOOQO'#H`'#H`OOQO'#Ct'#CtO*oQPO'#D^O+YQQO'#HgOOQO'#Hg'#HgO-nQQO'#HbO-uQQO'#HbOOQO'#Hb'#HbOOQO'#Ha'#HaO-|QPO'#DTO0PQPO'#GkO1dQPO'#D^O2tQPO'#DyO)VQPO'#EZO2{QPO'#EZOOQO'#DU'#DUO4nQQO'#H^O6rQQO'#H_O6yQPO'#EdOOQO'#H_'#H_O5UQQO'#H_O7|QQO'#FeO8TQPO'#EuO8YQPO'#EzO8YQPO'#E|OOQO'#H^'#H^OOQO'#HV'#HVOOQO'#Ge'#GeOOQO'#HU'#HUO9gQPO'#FfOOQO'#HT'#HTOOQO'#Gd'#GdQ]QPOOOOQO'#Hm'#HmO9lQPO'#HmO9qQPO'#DzO9qQPO'#EUO9qQPO'#EPO9yQPO'#HjO:[QQO'#EdO)VQPO'#C`O:dQPO'#C`O)VQPO'#F`O:iQPO'#FbO:tQPO'#FhO:tQPO'#FkO:yQPO'#FmO8YQPO'#FsO:tQPO'#FuO]QPO'#FzO;OQPO'#F|O;WQPO'#GPO;`QPO'#GSO:tQPO'#GUO8YQPO'#GVO;gQPO'#GXOOQO'#HZ'#HZO<WQQO,58{OOQO'#HX'#HXOOQO'#Hc'#HcO>[QPO,59dO?aQPO,59xOOQO-E:c-E:cO)VQPO,58zO@QQPO,58zO)VQPO,5;zO@VQPO'#DOO@[QPO'#DOOOQO'#Gg'#GgOAeQQO,59iOOQO'#Dl'#DlOBpQPO'#HoOBzQPO'#DkOCYQPO'#HnOCbQPO,5<[OCgQPO,59]ODQQPO'#CwOOQO,59b,59bODXQPO,59aOFaQQO'#CbO)_QPO'#D^OGYQQO'#HgOGmQQO,59oOGtQPO'#DuOHSQPO'#HvOH[QPO,5:_OHaQPO,5:_OHwQPO,5;kOISQPO'#H}OI_QPO,5;bOIdQPO,5=VOOQO-E:i-E:iOOQO,5:e,5:eOJwQPO,5:eOKOQPO,5:uOKTQPO,5<[O)VQPO,5:uO9qQPO,5:fO9qQPO,5:pO9qQPO,5:kOKtQPO,59pOK{QPO,5:|OMYQPO,5;OOMhQPO'#DWOOQO,5:},5:}O8YQPO,59TOOQO'#Ej'#EjOOQO'#El'#ElO8YQPO,5;SO8YQPO,5;SO8YQPO,5;SO8YQPO,5;SO8YQPO,5;SO8YQPO,5;SO8YQPO,5;cOOQO,5;f,5;fOOQO,5<P,5<POMoQPO,5;_ONQQPO,5;aOMoQPO'#CxONXQQO'#HgONgQQO,5;hO]QPO,5<QOOQO-E:b-E:bOOQO,5>X,5>XO! wQPO,5:fO!!VQPO,5:pO!!_QPO,5:kO!!jQPO,5>UOGtQPO,5>UOKcQPO,59UO!!uQQO,58zO!!}QQO,5;zO!#VQQO,5;|O)VQPO,5;|O8YQPO'#DTO]QPO,5<SO]QPO,5<VO!#_QPO'#FoO]QPO,5<XO]QPO,5<]O!$XQQO,5<_O!$cQPO,5<aO!$hQPO,5<fOOQO'#GO'#GOOOQO,5<h,5<hO!$mQPO,5<hOOQO'#GR'#GROOQO,5<k,5<kO!$rQPO,5<kO!$wQQO,5<nOOQO,5<n,5<nO;jQPO,5<pO!%OQQO,5<qO!%VQPO'#GbO!&YQPO,5<sO;jQPO,5<{O)VQPO,58}O!*QQPO'#ChOOQO1G.k1G.kO!*[QPO,59iO!!uQQO1G.fO)VQPO1G.fO!+]QQO1G1fOOQO'#Gh'#GhO!,cQQO,59jO@VQPO,59jOOQO-E:e-E:eO!-cQPO,5>ZO!-zQPO,5:VO9qQPO'#GmO!.RQPO,5>YOOQO1G1v1G1vOOQO1G.w1G.wO!.lQPO'#CxO!/XQPO'#HgO!/fQPO'#CyO!/tQPO'#HfO!/|QPO,59cOOQO1G.{1G.{ODXQPO1G.{O!0dQPO,59dO!0qQQO'#HZO!1SQQO'#CbOOQO,5:a,5:aO9qQPO,5:bOOQO,5:`,5:`O!1eQQO,5:`OOQO1G/Z1G/ZO!1jQPO,5:aO!1{QPO'#GpO!2`QPO,5>bOOQO1G/y1G/yO!2hQPO'#DuO!2yQPO'#D^O!3QQPO1G/yOMoQPO'#GnO!3VQPO1G1VO8YQPO1G1VO9qQPO'#GvO!3_QPO,5>iOOQO1G0|1G0|OOQO1G0P1G0PO!3gQPO'#E[OOQO1G0a1G0aO!4WQPO1G1vOKOQPO1G0aO! wQPO1G0QO!!VQPO1G0[O!!_QPO1G0VOOQO1G/[1G/[O!4]QQO1G.pO)VQPO1G0iO9yQPO'#HjO!6PQQO1G.pOOQO1G.p1G.pO!7SQQO1G0hOOQO1G0j1G0jO!7ZQPO1G0jO!7fQQO'#HkO!7sQPO,59rO!7xQQO1G.oO!9dQQO1G0nO!:xQQO1G0nO!<TQQO1G0nO!<bQQO1G0nO!=dQQO1G0nO!=zQQO1G0nO!>XQQO1G0}O!>`QQO'#HgOOQO1G0y1G0yO!?cQQO1G0{OOQO1G0{1G0{OOQO1G1l1G1lOKWQPO'#DpO!AaQPO'#DZOMoQPO'#D{OMoQPO'#D|OOQO1G0Q1G0QO!AhQPO1G0QO!AmQPO1G0QO!AuQPO1G0QO!BQQPO'#EWOOQO1G0[1G0[O!BeQPO1G0[O!BjQPO'#ESOMoQPO'#EROOQO1G0V1G0VO!CdQPO1G0VO!CiQPO1G0VO!CqQPO'#EfO!CxQPO'#EfOOQO'#Gu'#GuO!DQQQO1G0kO!EqQQO1G3pO!G_QPO1G3pO!GuQPO'#FUOOQO1G.f1G.fOOQO1G1f1G1fO!G|QPO1G1hOOQO1G1h1G1hO!HXQQO1G1hO!HaQPO1G1nOOQO1G1q1G1qO)_QPO'#D^O+YQQO,5<^OGtQPO,5<^O!LRQPO,5<ZO!LYQPO,5<ZOOQO1G1s1G1sOOQO1G1w1G1wOOQO1G1y1G1yO8YQPO1G1yO# vQPO'#FwOOQO1G1{1G1{O:tQPO1G2QOOQO1G2S1G2SOOQO1G2V1G2VOOQO1G2Y1G2YOOQO1G2[1G2[OOQO1G2]1G2]O#!uQQO'#HZO#!|QQO'#CbO+YQQO'#HgO##wQQOOO#$eQQO'#H_O#$SQQO'#H_OGtQPO'#GcO#$lQPO,5<|OOQO'#G}'#G}O#$tQPO1G2_O#(lQPO'#GZO;jQPO'#G_OOQO1G2_1G2_O#(qQPO1G2gOOQO1G.i1G.iO#-sQQO'#H_O#.QQQO'#H]O#.bQPO'#FQOOQO'#H]'#H]O#.lQPO'#H]O#/ZQPO'#IQO#/cQPO,59SO#/hQPO,59jOOQO7+$Q7+$QO!!uQQO7+$QOOQO7+'Q7+'QOOQO-E:f-E:fO#0|QQO1G/UO#1|QPO'#DnO#2WQQO'#HpOOQO'#Hp'#HpOOQO1G/q1G/qOOQO,5=X,5=XOOQO-E:k-E:kO#2hQSO,58{O#2oQPO,59eOOQO,59e,59eOMoQPO'#HiOClQPO'#GfO#2}QPO,5>QOOQO1G.}1G.}OOQO7+$g7+$gOOQO1G/z1G/zO#3VQQO1G/zOOQO1G/|1G/|O#3[QPO1G/zOOQO1G/{1G/{O9qQPO1G/|OOQO,5=[,5=[OOQO-E:n-E:nOOQO7+%e7+%eOOQO,5=Y,5=YOOQO-E:l-E:lO8YQPO7+&qOOQO7+&q7+&qOOQO,5=b,5=bOOQO-E:t-E:tO#3aQPO'#ETO#3oQPO'#ETOOQO'#Gt'#GtO#4WQPO,5:vOOQO,5:v,5:vOOQO7+'b7+'bOOQO7+%{7+%{OOQO7+%l7+%lO!AhQPO7+%lO!AmQPO7+%lO!AuQPO7+%lOOQO7+%v7+%vO!BeQPO7+%vOOQO7+%q7+%qO!CdQPO7+%qO!CiQPO7+%qOOQO7+&T7+&TO!G_QPO7+&TO!G_QPO,5>UO#4wQPO7+$[OOQO7+&S7+&SOOQO7+&U7+&UO8YQPO'#GiO#5VQPO,5>VOOQO1G/^1G/^O8YQPO7+&iO#5bQQO,59dO#6eQPO'#DqOKWQPO'#DqO#6pQPO'#HsO#6xQPO,5:[O#7cQQO'#HcO#8OQQO'#CtOKTQPO'#HrO#8nQPO'#DoO#8xQPO'#HrO#9ZQPO'#DoO#9cQPO'#H{O#9hQPO'#E_OOQO'#Hl'#HlOOQO'#Gj'#GjO#9pQPO,59uOOQO,59u,59uO#9wQPO'#HmOOQO,5:g,5:gO#;_QPO'#HxOOQO'#EO'#EOOOQO,5:h,5:hO#;jQPO'#EXO9qQPO'#EXO#;{QPO'#HyO#<WQPO,5:rOKTQPO'#HrOMoQPO'#HrO#<`QPO'#DoOOQO'#Gr'#GrO#<gQPO,5:nOOQO,5:n,5:nOOQO,5:m,5:mOOQO,5;Q,5;QO#=aQQO,5;QO#=hQPO,5;QOOQO-E:s-E:sOOQO7+&V7+&VOOQO7+)[7+)[O#=oQQO7+)[OOQO'#Gy'#GyO#?]QPO,5;pOOQO,5;p,5;pO#?dQPO'#FVO)VQPO'#FVO)VQPO'#FVO)VQPO'#FVO#?rQPO7+'SO#?wQPO7+'SOOQO7+'S7+'SO]QPO7+'YO#@SQPO1G1xOKTQPO1G1xO#@bQQO1G1uOMhQPO1G1uO#@iQPO1G1uO#@pQQO7+'eOOQO'#G|'#G|O#@wQPO,5<cOOQO,5<c,5<cO#AOQPO'#HmO8YQPO'#FxO#AWQPO7+'lO#A]QPO,5<}OKTQPO,5<}O#AbQPO1G2hO#BhQPO1G2hOOQO1G2h1G2hOOQO-E:{-E:{OOQO7+'y7+'yO!1{QPO'#G]O;jQPO,5<uOOQO,5<y,5<yO#BpQPO7+(ROOQO7+(R7+(RO#FhQPO,59TO#FoQPO'#IPO#FwQPO,5;lO)VQPO'#GxO#F|QPO,5>lOOQO1G.n1G.nO#GUQPO1G/UOOQO<<Gl<<GlO#GlQPO'#HqO#GtQPO,5:YOOQO1G/P1G/POOQO,5>T,5>TOOQO,5=Q,5=QOOQO-E:d-E:dO#GyQPO7+%fOOQO7+%f7+%fOOQO7+%h7+%hOOQO<<J]<<J]O#HaQPO'#HZO#HhQPO'#CbO#HoQPO,5:oO#HtQPO,5:wO#3aQPO,5:oOOQO-E:r-E:rOOQO1G0b1G0bOOQO<<IW<<IWO!AhQPO<<IWO!AmQPO<<IWOOQO<<Ib<<IbOOQO<<I]<<I]O!CdQPO<<I]OOQO<<Io<<IoO#HyQQO<<GvO)VQPO<<IoOOQO<<Gv<<GvO#JmQQO,5=TOOQO-E:g-E:gO#JzQQO<<JTOOQO,5:],5:]OMoQPO'#DrO#K_QPO,5:]OKWQPO'#GoO#KjQPO,5>_OOQO1G/v1G/vO#KrQPO'#HoO#KyQPO,59wO#LOQPO,5>^OKTQPO,59wO#LZQPO,5:ZO#9hQPO,5:yOKTQPO,5>^OMoQPO,5>^O#9cQPO,5>gOOQO,5:Z,5:ZOHaQPO'#DsOOQO,5>g,5>gO#LcQPO'#E`OOQO,5:y,5:yO$ ^QPO,5:yOMoQPO'#DwOOQO-E:h-E:hOOQO1G/a1G/aOOQO,5:x,5:xOMoQPO'#GqO$ cQPO,5>dOOQO,5:s,5:sO$ nQPO,5:sO$ |QPO,5:sO$!_QPO'#GsO$!uQPO,5>eO$#QQPO'#EYOOQO1G0^1G0^O$#XQPO1G0^OKTQPO,5:oOOQO-E:p-E:pOOQO1G0Y1G0YOOQO1G0l1G0lO$#^QQO1G0lOOQO<<Lv<<LvOOQO-E:w-E:wOOQO1G1[1G1[O$#eQQO,5;qOOQO'#Gz'#GzO#?dQPO,5;qOOQO'#IR'#IRO$#mQQO,5;qO$$OQQO,5;qOOQO<<Jn<<JnO$$WQPO<<JnOOQO<<Jt<<JtO8YQPO7+'dO$$]QPO7+'dOMhQPO7+'aO$$kQPO7+'aO$$pQQO7+'aOOQO<<KP<<KPOOQO-E:z-E:zOOQO1G1}1G1}OOQO,5<d,5<dO$$wQQO,5<dOOQO<<KW<<KWO8YQPO1G2iO$%OQPO1G2iOOQO,5=k,5=kOOQO7+(S7+(SO$%TQPO7+(SOOQO-E:}-E:}O$&oQSO'#HbO$&ZQSO'#HbO$&vQPO'#G^O9qQPO,5<wOGtQPO,5<wOOQO1G2a1G2aOOQO<<Km<<KmO$'XQQO1G.oOOQO1G1X1G1XO$'cQPO'#GwO$'pQPO,5>kOOQO1G1W1G1WO$'xQPO'#FROOQO,5=d,5=dOOQO-E:v-E:vO$'}QPO'#GlO$([QPO,5>]OOQO1G/t1G/tOOQO<<IQ<<IQOOQO1G0Z1G0ZO$(dQPO1G0cO$(iQPO1G0ZO$(nQPO1G0cOOQOAN>rAN>rO!AhQPOAN>rOOQOAN>wAN>wOOQOAN?ZAN?ZO!G_QPOAN?ZO$(sQPO,5:^OOQO1G/w1G/wOOQO,5=Z,5=ZOOQO-E:m-E:mO$)OQPO,5>aOOQO1G/c1G/cOOQO1G3x1G3xO$)aQPO1G/cOOQO1G/u1G/uOOQO1G0e1G0eO$ ^QPO1G0eO#9cQPO'#HuO$)fQPO1G3xOKTQPO1G3xOOQO1G4R1G4RO$)qQPO'#DuO)_QPO'#D^OOQO,5:z,5:zO$)xQPO,5:zO$)xQPO,5:zO$*PQQO'#H^O$*WQQO'#H_O$*_QQO'#EaO$*jQPO'#EaOOQO,5:c,5:cOOQO,5=],5=]OOQO-E:o-E:oOOQO1G0_1G0_O$*rQPO1G0_OOQO,5=_,5=_OOQO-E:q-E:qO$+QQPO,5:tOOQO7+%x7+%xOOQO7+&W7+&WOOQO1G1]1G1]O$+XQQO1G1]OOQO-E:x-E:xO$+aQQO'#ISO$+[QPO1G1]O$#sQPO1G1]O)VQPO1G1]OOQOAN@YAN@YO$+lQQO<<KOO8YQPO<<KOO$+sQPO<<J{OOQO<<J{<<J{OMhQPO<<J{OOQO1G2O1G2OO$+xQQO7+(TO8YQPO7+(TOOQO<<Kn<<KnP!%VQPO'#HPOGtQPO'#HOO$,SQPO,5<xO$,_QPO1G2cO9qQPO1G2cOOQO,5=c,5=cOOQO-E:u-E:uO#FhQPO,5;mOOQO,5=W,5=WOOQO-E:j-E:jO$,dQPO7+%}OOQO7+%u7+%uO$,rQPO7+%}OOQOG24^G24^OOQOG24uG24uOOQO,59j,59jO$,wQPO1G/xO$-SQPO1G3{OOQO7+$}7+$}OOQO7+&P7+&POOQO7+)d7+)dO$-eQPO7+)dO!0RQPO,5:`OOQO1G0f1G0fO$-pQPO1G0fO$-wQPO,59pO$.]QPO,5:{O!G_QPO,5:{OOQO7+%y7+%yOOQO7+&w7+&wO)VQPO'#G{O$.bQPO,5>nO$.jQPO7+&wO$.oQQO'#ITOOQOAN@jAN@jO$.zQQOAN@jOOQOAN@gAN@gO$/RQPOAN@gO$/WQQO<<KoO$/bQPO,5=jOOQO-E:|-E:|OOQO7+'}7+'}O$/sQPO7+'}O$/xQPO<<IiOOQO<<Ii<<IiO#FhQPO<<IiO$/xQPO<<IiOOQO1G/U1G/UOOQO<<MO<<MOOOQO7+&Q7+&QO$0WQPO1G0iO$0cQQO1G0gOOQO1G0g1G0gO$0kQPO1G0gO$0pQQO,5=gOOQO-E:y-E:yOOQO<<Jc<<JcO$0{QPO,5>oOOQOG26UG26UOOQOG26RG26ROOQO<<Ki<<KiOOQOAN?TAN?TO#FhQPOAN?TO$1TQPOAN?TO$1YQPOAN?TO!G_QPO7+&RO$1hQPO7+&ROOQO7+&R7+&RO$1mQPOG24oOOQOG24oG24oO#FhQPOG24oO$1rQPO<<ImOOQO<<Im<<ImOOQOLD*ZLD*ZO$1wQPOLD*ZOOQOAN?XAN?XOOQO!$'Mu!$'MuO$1|QQO'#HZO)VQPO'#CaO@VQPO'#DOO@VQPO'#DOO$2dQQO,59iO$2nQQO'#CbOMoQPO'#CxO@VQPO,59jO@VQPO,59jO$3RQQO'#HgO$4YQQO,59dO$5aQPO'#DOO$5iQPO'#DOOMoQPO,5;_O$5qQQO1G.oO$6vQQO1G0nO$7uQQO1G0nO$8SQQO1G0nO$9OQQO1G0nO$9`QQO1G0{O$9gQQO<<JTOMoQPO'#CxOK{QPO,59TOK{QPO,5;SOK{QPO,5;SOK{QPO,5;SOK{QPO,5;SO$9nQPO,5;aOK{QPO7+&iO$9uQQO'#H_O$:SQQO'#H_O$;dQPO'#EuOK{QPO'#EzOK{QPO'#E|OK{QPO,5;SOK{QPO,5;SOK{QPO1G1VO$;iQQO1G0nO$;yQQO1G0}OK{QPO7+&qO$<QQPO,5;kO8YQPO,5;cO$<]QPO1G1VO-|QPO'#DT",
      stateData: "$<h~OPOSQOS%vOS~OZ^O_TO`TOaTObTOcTOdTOf[Og[Oo|OuxOvhOy{O|aO!OsO!RvO!SvO!TvO!UvO!VvO!WvO!XvO!YwO!Z![O![vO!]vO!^vO!tzO!yyO#cmO#olO#qmO#rmO#v!OO#w}O$T!PO$V!QO$]!RO$`!SO$b!TO$h!UO$j!VO$o!WO$q!XO$t!YO$w!ZO$z!]O$|!^O%zSO%|QO&OPO&nbO~OWhXW%}XZ%}XshXs%}X!a%}X#Z%}X#]%}X#_%}X#a%}X#b%}X#c%}X#d%}X#e%}X#f%}X#h%}X#l%}X#o%}X%zhX%|hX&OhX&W%}X&XhX&X%}X&h%}X&phX&p%}X&r!`XY%}X~O!O%}X#m%}Xt%}Xp%}X{%}X~P$qOWUXW&VXZUXsUXs&VX!OUX!aUX#ZUX#]UX#_UX#aUX#bUX#cUX#dUX#eUX#fUX#hUX#lUX#oUX%z&VX%|&VX&O&VX&WUX&XUX&X&VX&hUX&pUX&p&VX&r!`X~O#m$ZX~P'RO%|RO&O!_O~Of[Og[O!RvO!SvO!TvO!UvO!VvO!WvO!XvO!YwO![vO!]vO!^vO%zSO%|!bO&OUOf!QXg!QX%|!QX&O!QX~O#v!gO#w!fO$T!hOu!QX!t!QX!y!QX&n!QX~P)_OW!rOs!iO%zSO%|!mO&O!mO&p&ZX~OW!uOs&UX%z&UX%|&UX&O&UX&p&UXY&UXv&UX&h&UX&k&UXZ&UXp&UX&W&UX!O&UX#]&UX#_&UX#a&UX#b&UX#c&UX#d&UX#e&UX#f&UX#h&UX#l&UX#o&UX|&UX!q&UX#m&UXt&UX{&UX~O&X!sO~P+nO&X&UX~P+nOZ^O_TO`TOaTObTOcTOdTOf[Og[Oo|OvhOy{O!RvO!SvO!TvO!UvO!VvO!WvO!XvO!YwO![vO!]vO!^vO#cmO#olO#qmO#rmO%zSO%|!vO&O0aOY&jP~O%zSOf%_Xg%_Xu%_X!R%_X!S%_X!T%_X!U%_X!V%_X!W%_X!X%_X!Y%_X![%_X!]%_X!^%_X!t%_X!y%_X%|%_X&O%_X&n%_X&X%_X~O!RvO!SvO!TvO!UvO!VvO!WvO!XvO!YwO![vO!]vO!^vOf!QXg!QXu!QX!t!QX!y!QX%|!QX&O!QX&n!QX&X!QX~O{#TO~P]Of[Og[Ou#YO!t#[O!y#ZO%|!bO&OUO&n#XO~Os#^O&p#_O!O&QX#]&QX#_&QX#a&QX#b&QX#c&QX#d&QX#e&QX#f&QX#h&QX#l&QX#o&QX&W&QX&X&QX&h&QX~OW#]OY&QX#m&QXt&QXp&QX{&QX~P3gO!a#bO#Z#bOW&RXs&RX!O&RX#]&RX#_&RX#a&RX#b&RX#c&RX#d&RX#e&RX#f&RX#h&RX#l&RX#o&RX&W&RX&X&RX&h&RX&p&RXY&RX#m&RXp&RX{&RX~OZ#`O~P5UO&p#_O~O#]#eO#_#fO#a#gO#b#gO#c#hO#d#iO#e#jO#f#jO#h#nO#l#kO#o#lO&W#cO&X#cO&h#dO~O!O#mO~P7OO&r#oO~OZ^O_TO`TOaTObTOcTOdTOf[Og[Oo|OvhOy{O#cmO#olO#qmO#rmO%zSO%|0fO&OPO~O#m#sO~O!Z#uO~O%|!mO&O!mO~Of[Og[O%|!bO&OUO&X!sO~OW#{O&p#_O~O#w!fO~O!V$PO%|RO&O!_O~OZ$QO~OZ$TO~O!O$[O%|$ZO~O!O$_O%|$^O~O!O$bO~P8YOZ$eO|aO~OW$hOZ$iOfTagTa%zTa%|Ta&OTa~OuTa!RTa!STa!TTa!UTa!VTa!WTa!XTa!YTa![Ta!]Ta!^Ta!tTa!yTa#vTa#wTa$TTa&nTasTaYTa&XTapTa{Ta!OTa~P;oO%zSOpla&WlaYla&hla!Ola~Os0cO&pla|la!qla~P=vO!RvO!SvO!TvO!UvO!VvO!WvO!XvO!YwO![vO!]vO!^vO~Of!Qag!Qau!Qa!t!Qa!y!Qa%|!Qa&O!Qa&n!Qa&X!Qa~P>lO#w$mO~Ot$oO~Os$qO%zSO~O%zqa&hqa#]qa#_qa#aqa#bqa#cqa#dqa#eqa#fqa#hqa#lqa#oqa&Wqa&Xqa~Os!iOWqa%|qa&Oqa&pqaYqavqa&kqa!Oqa#mqapqa{qa~P@dOs0cO%zSOp&cX!O&cX!a&cX~OY&cX#m&cX~PB_O!a$tOp!_X!O!_XY!_X~Op$uO!O&bX~O!O$wO~Ou$xO~Of[Og[O%z0bO%|!bO&OUO&[${O~O&W&YP~PClO%zSO%|!bO&OUO~OWUXW&VXYUXZUXsUXs&VX!aUX#ZUX#]UX#_UX#aUX#bUX#cUX#dUX#eUX#fUX#hUX#lUX#oUX%z&VX%|&VX&O&VX&WUX&XUX&X&VX&hUX&pUX&p&VX&r!`X~OY!`XY&VXp!`Xv&VX&h&VX&k&VX~PDdOv%VO%zSO%|%SO&O%RO&k%UO~OW!rOs!iOY&ZX&h&ZX&p&ZX~PFwOY%XO~P7OOf[Og[O%|!bO&OUO~Op%ZOY&jX~OY%]O~Of[Og[O%zSO%|!bO&OUOY&jP~P>lOY%cO&h%aO&p#_O~Op%dO&r#oOY&qX~OY%fO~O%zSOf%_ag%_au%_a!R%_a!S%_a!T%_a!U%_a!V%_a!W%_a!X%_a!Y%_a![%_a!]%_a!^%_a!t%_a!y%_a%|%_a&O%_a&n%_a&X%_a~O{%gO~P]O|%hO~Os0cO%zSO%|!mO&O!mO~Oo%sOv%tO%|RO&O!_O&X!sO~Oy%rO~PKcOZ1^O_TO`TOaTObTOcTOdTOf[Og[Oo|OvhOy{O#c1SO#o1RO#q1SO#r1SO%zSO%|0fO&OPO~Oy%vO%|RO&O!_O&X!sO~OY&_P~P8YOf[Og[O%zSO%|!bO&OUO~O|aO~P8YOW!rOs!iO%zSO&p&ZX~O#o#lO!O#pa#]#pa#_#pa#a#pa#b#pa#c#pa#d#pa#e#pa#f#pa#h#pa#l#pa&W#pa&X#pa&h#paY#pa#m#pat#pap#pa{#pa~On&ZO|&YO!q&[O&X&XO~O|&aO!q&[O~On&eO|&dO&X&XO~OZ#`Os&iO%zSO~OW$hO|&oO~OW$hO!O&qO~OW&rO!O&sO~O!RvO!SvO!TvO!UvO!VvO!WvO!XvO!YwO![vO!]vO!^vO!O&_P~P8YO!O'OO#m'PO~P7OO|'QO~O$`'SO~O!O'TO~O!O'UO~O!O'VO~P7OO!O'XO~P7OOZ$QO_TO`TOaTObTOcTOdTOf[Og[Oo|OvhOy{O%zSO%|'ZO&O'YO~P>lO%O'dO%S'eOZ${a_${a`${aa${ab${ac${ad${af${ag${ao${au${av${ay${a|${a!O${a!R${a!S${a!T${a!U${a!V${a!W${a!X${a!Y${a!Z${a![${a!]${a!^${a!t${a!y${a#c${a#o${a#q${a#r${a#v${a#w${a$T${a$V${a$]${a$`${a$b${a$h${a$j${a$o${a$q${a$t${a$w${a$z${a$|${a%t${a%z${a%|${a&O${a&n${a{${a$^${a$m${a~O|'kOY&tP~P8YOs0cO%zqa&pqa%|qa&Oqapqa&WqaYqavqa&hqa&kqa|qa!qqa&xqa!Oqa~OW$hO!O'sO~Ot$oOsra%zra%|ra&Ora&praYravra&hra&kra!Ora&Wra#mrapra~OWra#]ra#_ra#ara#bra#cra#dra#era#fra#hra#lra#ora&Xra{ra~P!+eOs0cO%zSOp&ca!O&ca!a&caY&ca#m&ca~O|'vO~P8YOp$uO!O&ba~Of[Og[O%z0bO%|!bO&OUO~O&['}O~P!.ZO%zSOp&ZX&W&ZXY&ZX&h&ZX!O&ZX~Os0cO|&ZX!q&ZX~P!.sOn(POo(POpmX&WmX~Op(QO&W&YX~O&W(SO~Os0cOv(UO%zSO%|RO&O!_O~OYla&hla&pla~P!0ROW%}XY!`Xp!`Xs!`X%z!`X~OWUXY!`Xp!`Xs!`X%z!`X~OW(XO~Os0cO%zSO%|!mO&O!mO&k(ZO~Of[Og[O%zSO%|!bO&OUO~P>lOp%ZOY&ja~Os0cO%zSO%|!mO&O!mO&k%UO~O%zSO~P1dOY(^O~OY(aO&h%aO~Op%dOY&qa~Of[Og[OuxO{(iO!tzO%zSO%|!bO&OUO&nbO~P>lO!O(jO~OZ#`OW^is^i!O^i!a^i#Z^i#]^i#_^i#a^i#b^i#c^i#d^i#e^i#f^i#h^i#l^i#o^i&W^i&X^i&h^i&p^iY^i#m^it^ip^i{^i~OW(xO~O#]1TO#_0xO#a0yO#b0yO#c0zO#d0{O#e1UO#f1UO#h0nO#l1[O#o#lO&W#cO&X#cO&h#dO~Ot(yO~P!6UOy(zO%|RO&O!_O~Op({OY&_X!O&_X~P7OOY(}O~O!O]iY]i#m]ip]i{]i~P7OO#o#lO!O#[i#]#[i#_#[i#a#[i#b#[i#c#[i#d#[i#h#[i#l#[i&W#[i&X#[i&h#[iY#[i#m#[ip#[i{#[i~O#e#jO#f#jO~P!8]O#]#eO#d#iO#e#jO#f#jO#h#nO#o#lO&W#cO&X#cO!O#[i#_#[i#a#[i#b#[i#l#[i&h#[iY#[i#m#[ip#[i{#[i~O#c#hO~P!9nO#]#eO#d#iO#e#jO#f#jO#h#nO#o#lO&W#cO&X#cO!O#[i#a#[i#b#[i#l#[iY#[i#m#[ip#[i{#[i~O#_#fO#c#hO&h#dO~P!;PO#c#[i~P!9nO#o#lO!O#[i#_#[i#a#[i#b#[i#c#[i#d#[i#l#[i&h#[iY#[i#m#[ip#[i{#[i~O#]#eO#e#jO#f#jO#h#nO&W#cO&X#cO~P!<iO#e#[i#f#[it#[i~P!8]O#m)OO~P7OOs!iO#]&ZX#_&ZX#a&ZX#b&ZX#c&ZX#d&ZX#e&ZX#f&ZX#h&ZX#l&ZX#o&ZX&X&ZX#m&ZX{&ZX~P!.sO!O#iiY#ii#m#iip#ii{#ii~P7OOf[Og[OuxO|aO!O)^O!RvO!SvO!TvO!UvO!V)bO!WvO!XvO!YwO![vO!]vO!^vO!tzO!yyO%zSO%|)UO&O)VO&X&XO&nbO~O{)aO~P!?vO|&YO~O|&YO!q&[O~On&ZO|&YO!q&[O~O%zSO%|!mO&O!mO{&mP!O&mP~P>lO|&aO~Of[Og[OuxO{)pO!O)nO!tzO!yyO%zSO%|!bO&OUO&X&XO&nbO~P>lO|&dO~On&eO|&dO~Ot)rO~PK{Os)tO%zSO~Os&iO|'vO%zSOW#Xi!O#Xi#]#Xi#_#Xi#a#Xi#b#Xi#c#Xi#d#Xi#e#Xi#f#Xi#h#Xi#l#Xi#o#Xi&W#Xi&X#Xi&h#Xi&p#XiY#Xi#m#Xit#Xip#Xi{#Xi~O|&YOW&^is&^i!O&^i#]&^i#_&^i#a&^i#b&^i#c&^i#d&^i#e&^i#f&^i#h&^i#l&^i#o&^i&W&^i&X&^i&h&^i&p&^iY&^i#m&^it&^ip&^i{&^i~OZ#`O~O#z)|O#|)}O$O)}O$P*OO$Q*PO~O{){O~P!GdO$W*QO%|RO&O!_O~OW*RO!O*SO~O$^*TOZ$[i_$[i`$[ia$[ib$[ic$[id$[if$[ig$[io$[iu$[iv$[iy$[i|$[i!O$[i!R$[i!S$[i!T$[i!U$[i!V$[i!W$[i!X$[i!Y$[i!Z$[i![$[i!]$[i!^$[i!t$[i!y$[i#c$[i#o$[i#q$[i#r$[i#v$[i#w$[i$T$[i$V$[i$]$[i$`$[i$b$[i$h$[i$j$[i$o$[i$q$[i$t$[i$w$[i$z$[i$|$[i%t$[i%z$[i%|$[i&O$[i&n$[i{$[i$m$[i~O!O*XO~P8YO!O*YO~OZ^O_TO`TOaTObTOcTOdTOf[Og[Oo|OuxOvhOy{O|aO!OsO!RvO!SvO!TvO!UvO!VvO!WvO!XvO!Y*_O!Z![O![vO!]vO!^vO!tzO!yyO#cmO#olO#qmO#rmO#v!OO#w}O$T!PO$V!QO$]!RO$`!SO$b!TO$h!UO$j!VO$m*`O$o!WO$q!XO$t!YO$w!ZO$z!]O$|!^O%zSO%|QO&OPO&nbO~O{*^O~P!L_OWhXW%}XY%}XZ%}XshXs%}X%zhX%|hX&OhX&XhX&phX&p%}X~O!O%}X~P# }OWUXW&VXYUXZUXsUXs&VX!OUX%z&VX%|&VX&O&VX&X&VX&pUX&p&VX~OW#]Os#^O&p#_O~OW&RXY%VXs&RX!O%VX&p&RX~OZ#`O~P#$SOY*fO!O*dO~O%O'dO%S'eOZ${i_${i`${ia${ib${ic${id${if${ig${io${iu${iv${iy${i|${i!O${i!R${i!S${i!T${i!U${i!V${i!W${i!X${i!Y${i!Z${i![${i!]${i!^${i!t${i!y${i#c${i#o${i#q${i#r${i#v${i#w${i$T${i$V${i$]${i$`${i$b${i$h${i$j${i$o${i$q${i$t${i$w${i$z${i$|${i%t${i%z${i%|${i&O${i&n${i{${i$^${i$m${i~OZ*iO~O%O'dO%S'eOZ%Ti_%Ti`%Tia%Tib%Tic%Tid%Tif%Tig%Tio%Tiu%Tiv%Tiy%Ti|%Ti!O%Ti!R%Ti!S%Ti!T%Ti!U%Ti!V%Ti!W%Ti!X%Ti!Y%Ti!Z%Ti![%Ti!]%Ti!^%Ti!t%Ti!y%Ti#c%Ti#o%Ti#q%Ti#r%Ti#v%Ti#w%Ti$T%Ti$V%Ti$]%Ti$`%Ti$b%Ti$h%Ti$j%Ti$o%Ti$q%Ti$t%Ti$w%Ti$z%Ti$|%Ti%t%Ti%z%Ti%|%Ti&O%Ti&n%Ti{%Ti$^%Ti$m%Ti~OZ#`OW&RXs&RX#]&RX#_&RX#a&RX#b&RX#c&RX#d&RX#e&RX#f&RX#h&RX#l&RX#o&RX&W&RX&X&RX&h&RX&p&RX~O!a*nO#Z#bOY&RX~P#,iOY&PXp&PX{&PX!O&PX~P7OO|'kO{&sP~P8YOY&PXf%XXg%XX%z%XX%|%XX&O%XXp&PX{&PX!O&PX~Op*qOY&tX~OY*sO~O!ara|ra!qra&xra!lra!Yra~P!+eOt$oOsri%zri%|ri&Ori&priYrivri&hri&kri!Ori&Wri#mripri~OWri#]ri#_ri#ari#bri#cri#dri#eri#fri#hri#lri#ori&Xri{ri~P#0OO|'vO{&eP~P8YOp&dX!O&dX{&dXY&dX~P7OO&[Ta~P;oOn(POo(POpma&Wma~Op(QO&W&Ya~OW*|O~Ov*}O~Os0cO%zSO%|+RO&O+QO~Of[Og[Ou#YO!t#[O%|!bO&OUO&n#XO~Of[Og[OuxO{+WO!tzO%zSO%|!bO&OUO&nbO~P>lOv+bO%|RO&O!_O&X!sO~Op({OY&_a!O&_a~Os!iO#]la#_la#ala#bla#cla#dla#ela#fla#hla#lla#ola&Xla#mla{la~P=vOn+gOp!eX&W!eX~Op+iO&W&gX~O&W+kO~OW&VXs&VX%z&VX%|&VX&O&VX&X&VX~OZ!`X~P#6}OWhXshX%zhX%|hX&OhX&XhX~OZ!`X~P#7jOf[Og[Ou#YO!t#[O!y#ZO&X&XO&n#XO~O%|)UO&O)VO~P#8VOf[Og[O%zSO%|)UO&O)VO~O|aO!O+uO~OZ+vO~O|+xO!l+{O~O{+}O~P!?vO|aOf&aXg&aXu&aX!R&aX!S&aX!T&aX!U&aX!V&aX!W&aX!X&aX!Y&aX![&aX!]&aX!^&aX!t&aX!y&aX%z&aX%|&aX&O&aX&X&aX&n&aX~Op,PO|&lX!O&lX~OZ#`O|&YOp!{X{!{X!O!{X~Op,UO{&mX!O&mX~O{,XO!O,WO~O&X&XO~P2{Of[Og[OuxO{,]O!O)nO!tzO!yyO%zSO%|!bO&OUO&X&XO&nbO~P>lOt,^O~P!6UOt,^O~PK{O|&YOW&^qs&^q!O&^q#]&^q#_&^q#a&^q#b&^q#c&^q#d&^q#e&^q#f&^q#h&^q#l&^q#o&^q&W&^q&X&^q&h&^q&p&^qY&^q#m&^qt&^qp&^q{&^q~O{,bO~P!GdO!V,fO#{,fO%|RO&O!_O~O!O,iO~O$W,jO%|RO&O!_O~O!a$tO#m,lOp!_X!O!_X~O!O,nO~P7OO!O,nO~P8YO!O,qO~P7OO{,sO~P!L_O!Z#uO#m,tO~O!O,vO~O!a,wO~OY,zOZ$QO_TO`TOaTObTOcTOdTOf[Og[Oo|OvhOy{O%zSO%|'ZO&O'YO~P>lOY,zO!O,{O~O%O'dO%S'eOZ%Tq_%Tq`%Tqa%Tqb%Tqc%Tqd%Tqf%Tqg%Tqo%Tqu%Tqv%Tqy%Tq|%Tq!O%Tq!R%Tq!S%Tq!T%Tq!U%Tq!V%Tq!W%Tq!X%Tq!Y%Tq!Z%Tq![%Tq!]%Tq!^%Tq!t%Tq!y%Tq#c%Tq#o%Tq#q%Tq#r%Tq#v%Tq#w%Tq$T%Tq$V%Tq$]%Tq$`%Tq$b%Tq$h%Tq$j%Tq$o%Tq$q%Tq$t%Tq$w%Tq$z%Tq$|%Tq%t%Tq%z%Tq%|%Tq&O%Tq&n%Tq{%Tq$^%Tq$m%Tq~O|'kO~P8YOp-WO{&sX~O{-YO~Op*qOY&ta~O!ari|ri!qri&xri!lri!Yri~P#0OOp-^O{&eX~O{-`O~Ov-aO~Op!`Xs!`X!O!`X!a!`X%z!`X~OZ%}X~P#HOOZUX~P#HOO!O-bO~OZ-cO~OZ#`OW^ys^y!O^y!a^y#Z^y#]^y#_^y#a^y#b^y#c^y#d^y#e^y#f^y#h^y#l^y#o^y&W^y&X^y&h^y&p^yY^y#m^yt^yp^y{^y~OY%]ap%]a!O%]a~P7OO!O#kyY#ky#m#kyp#ky{#ky~P7OOn+gOp!ea&W!ea~Op+iO&W&ga~OZ+vO~PB_O!O-pO~O!l+{O|&fa!O&fa~O|aO!O-sO~OZ^O_TO`TOaTObTOcTOdTOf[Og[Oo.ROuxOv.QOy{O{-|O|aO!OsO!Z![O!tzO!yyO#cmO#olO#qmO#rmO#v!OO#w}O$T!PO$V!QO$]!RO$`!SO$b!TO$h!UO$j!VO$o!WO$q!XO$t!YO$w!ZO$z!]O$|!^O%zSO%|QO&OPO&X!sO&nbO~P>lO|+xO~Op,PO|&la!O&la~O|&YOp!{a{!{a!O!{a~OZ#`O|&YOp!{a{!{a!O!{a~O%zSO%|!mO&O!mOp%gX{%gX!O%gX~P>lOp,UO{&ma!O&ma~O{!|X~P!?vO{.]O~Ot.^O~P!6UOW$hO!O._O~OW$hO#}.dO%|RO&O!_O!O&vP~OW$hO$R.eO~O!O.fO~O!a$tO#m.hOp!_X!O!_X~OY.jO~O!O.kO~P7OO#m.lO~P7OO!a.nO~OY.oOZ$QO_TO`TOaTObTOcTOdTOf[Og[Oo|OvhOy{O%zSO%|'ZO&O'YO~P>lOW!uOs&UX%z&UX%|&UX&O&UX&x&UX~O&X!sO~P$&ZOs0cO%zSO&x.qO%|%QX&O%QX~OY&PXp&PX~P7OO|'kOp%kX{%kX~P8YOp-WO{&sa~O!a.wO~O|'vOp%`X{%`X~P8YOp-^O{&ea~OY.zO~O!O.{O~OZ.|O~O&h%aOp!fa&W!fa~Os0cO%zSO|&ia!O&ia!l&ia~O!O/SO~O!l+{O|&fi!O&fi~Os0cO~PFwO{/XO~P]OW/ZO~P3gO!O&RX~P#,iOW#{OZ#`O&p#_O~Oo/]Ov/]O~O|&YOp!{i{!{i!O!{i~O{!|a~P!?vOW$hO!O/_O~OW$hOp/`O!O&vX~OY/dO~P7OOY/fO~OY%Vq!O%Vq~P7OO&x.qO%|%Qa&O%Qa~OY/kO~Os0cO!O/nO!Y/oO%zSO~OY/pO~O&h%aOp!fi&W!fi~Os0cO%zSO|&ii!O&ii!l&ii~O!l+{O|&fq!O&fq~O{/sO~P]Oo/uOv%tOy%rO%|RO&O!_O&X!sO~O!O/vO~Op/`O!O&va~O!O/zO~OW$hOp/`O!O&wX~OY/|O~P7OOY/}O~OY%Vy!O%Vy~P7OOs0cO%zSO%|%ra&O%ra&x%ra~OY0OO~Os0cO!O0PO!Y0QO%zSO~Oo0TO%|RO&O!_O~OW(xOZ#`O~O!O0VO~OW$hOp%oa!O%oa~Op/`O!O&wa~O!O0XO~Os0cO!O0XO!Y0YO%zSO~O!O0[O~O!O0]O~O!O0_O~O!O0`O~OYhXY!`Xp!`XvhX&hhX&khX~P$qOs0dOtqa~P@dO#mUXYUXtUXpUX{UX~P'ROs0dO%zSOt&ZX#]&ZX#_&ZX#a&ZX#b&ZX#c&ZX#d&ZX#e&ZX#f&ZX#h&ZX#l&ZX#o&ZX&W&ZX&X&ZX&h&ZX~Os0dO%zSOtla#]la#_la#ala#bla#cla#dla#ela#fla#hla#lla#ola&Wla&Xla&hla~Os0hO%zSO~Os0iO%zSO~Ot]i~P!6UO#]1TO#d0{O#e1UO#f1UO#h0nO#o#lO&W#cO&X#cOt#[i#_#[i#a#[i#b#[i#l#[i&h#[i~O#c0zO~P$5xO#]1TO#d0{O#e1UO#f1UO#h0nO#o#lO&W#cO&X#cOt#[i#a#[i#b#[i#l#[i~O#_0xO#c0zO&h#dO~P$6}O#c#[i~P$5xO#e1UO#f1UO#o#lOt#[i#_#[i#a#[i#b#[i#c#[i#d#[i#l#[i&h#[i~O#]1TO#h0nO&W#cO&X#cO~P$8ZOt#ii~P!6UOt#ky~P!6UO|aO~PK{O!a0wO#Z0wOt&RX~P#,iO!a0wO#Z0wOW&RXs&RXt&RX#]&RX#_&RX#a&RX#b&RX#c&RX#d&RX#e&RX#f&RX#h&RX#l&RX#o&RX&W&RX&X&RX&h&RX&p&RX~O&r0|O~O#]#[i#h#[i&W#[i&X#[i~P$8ZO#m0}O~P7OOY1VO&h%aO&p#_O~OY1YO&h%aO~O`#d~",
      goto: "#/m&xPPPP&y'^+S.jP'^PP/O/S0wPPPPPP2tPP4m7o:k=g>P@UPPP@[CRPPPPDO2tPFWPPGUPG{HRPPPPPPPPPPPPI]IrPMXMaMkNTNZNa!!b!!g!!g!!pP!#P!$W!$y!%TP!%j!$WP!%p!%z!&Z!&cP!'Q!'[!'b!$W!'e!'kG{G{!'o!'y!'|2t2t2t!)yP/SP!)}P!*xPPPPPP/SP/S!+m/SPP/SP/SPP/S!-d!-nPP!-t!-}PPPPPPPP&yP&yPP!.R!.R!.f!.RPP!.RP!.RP!.y!.|!.R!/d!.RP!.RP!/g!/jP!.RP!.RP!/n!.RP!/q!.RP!.R!.RP!.RP!/tP!/z!/}!0TP!.R!0a!0d!0l!1O!5h!5n!6y!7c!7i!7s!8x!9O!9U!9d!9j!9p!9v!9|!:S!:Y!:`!:f!:l!:r!:x!;O!;Y!;`!;j!;pPPP!;v!.R!<kP!@cP!AgP!DX!Do!H^2t!JZ!N[##[PP#&W#&ZP#(v#(|#*y#+Y#+`#,a#,w#-p#-y#-|#.YP#.]#.iP#.q#.xP#.{P#/UP#/Y#/]#/`#/d#/jsqOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/Y(goOVW^_almu!U!W!Z!]!c!j!n!s!u!w!x!}#R#U#W#^#`#b#e#f#g#h#i#j#k#n#o#p#q#s#y$Q$R$S$T$U$V$e$i$s$t$y$z%P%Q%Y%Z%^%_%a%c%h&S&X&Y&Z&[&a&d&e&i&j&l&w&x&z'P'Q'['k'v(P(Q(a(e(h({)O)P)R)W)Y)`)k)l)o)t*T*V*X*Y*]*`*c*d*i*n+U+g+i+l+o+r+s+v+x+{,P,U,W,Z,l,n,w,{-P-W-^-o-x-z-{-}.O.[.h.k.n.p.w.z/R/W/Y/i/m/o/p0Q0S0Y0g0j0k0l0m0n0v0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^#pfO^almu!U!W!Z!]#U#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$t%c&z'P'Q'k'v(a({)O*T*X*Y*]*`*n+x,l,n,w-W-^-}.O.h.k.n.w/Y/o0Q0Y1[1^t!aS}!P!Q!f!h$P$m)|)}*O*P,e,g.d.e/`0bQ#VbS%W!x-zQ%k#XU%p#]#{/ZQ%v#_W'^$e*d,{.pU'h$h&r*RQ'i$iS(V%Q/WS(v%q/tQ(z%wQ+T(eQ+`(xQ-Z*qQ-e+UQ-j+aq1O#^&i)t0w0x0y0z0{0|0}1R1S1T1U1V1Yu!aS}!P!Q!f!h$P$m)|)}*O*P,e,g.d.e/`0bT$j!`'|$enO^almu!U!W!Z!]#U#^#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$i$t%c&i&z'P'Q'k'v(a({)O)t*T*X*Y*]*`*n+x,l,n,w-W-^-}.O.h.k.n.w/Y/o0Q0Y0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^#riO^almu!U!W!Z!]#U#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$i$t%c&z'P'Q'k'v(a({)O*T*X*Y*]*`*n+x,l,n,w-W-^-}.O.h.k.n.w/Y/o0Q0Y1[1^W'_$e*d,{.pq1P#^&i)t0w0x0y0z0{0|0}1R1S1T1U1V1Y$mhO^almu!U!W!Z!]#U#^#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$e$i$t%c&i&z'P'Q'k'v(a({)O)t*T*X*Y*]*`*d*n+x,l,n,w,{-W-^-}.O.h.k.n.p.w/Y/o0Q0Y0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^&hYOV^aclmu{!U!W!Z!]!s!w!z!}#U#^#`#b#e#f#g#h#i#j#k#n#o#p#s#z$Q$R$S$T$U$V$e$i$t$y%Z%a%c%h%r&Y&Z&[&d&e&i&w&y&z'P'Q'`'k'v(P(Q(a(f(h({)O)X)Y)`)l)m)o)t*T*X*Y*]*`*d*n+g+s+v+x+{,P,W,l,n,w,{-W-^-{-}.O.[.h.k.n.p.w/Y/o0Q0Y0g0n0v0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^Q%O!uQ(T%PV,}*i-R.q&hYOV^aclmu{!U!W!Z!]!s!w!z!}#U#^#`#b#e#f#g#h#i#j#k#n#o#p#s#z$Q$R$S$T$U$V$e$i$t$y%Z%a%c%h%r&Y&Z&[&d&e&i&w&y&z'P'Q'`'k'v(P(Q(a(f(h({)O)X)Y)`)l)m)o)t*T*X*Y*]*`*d*n+g+s+v+x+{,P,W,l,n,w,{-W-^-{-}.O.[.h.k.n.p.w/Y/o0Q0Y0g0n0v0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^V,}*i-R.q&hZOV^aclmu{!U!W!Z!]!s!w!z!}#U#^#`#b#e#f#g#h#i#j#k#n#o#p#s#z$Q$R$S$T$U$V$e$i$t$y%Z%a%c%h%r&Y&Z&[&d&e&i&w&y&z'P'Q'`'k'v(P(Q(a(f(h({)O)X)Y)`)l)m)o)t*T*X*Y*]*`*d*n+g+s+v+x+{,P,W,l,n,w,{-W-^-{-}.O.[.h.k.n.p.w/Y/o0Q0Y0g0n0v0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^V-O*i-R.qS!tY,}S#z{%rS%q#]#{Q%w#_Q+a(xQ.S+xR/t/Z%VXO^almu!U!W!Z!]!s#U#^#`#b#e#f#g#h#i#j#k#n#o#s$Q$R$S$T$U$V$e$i$t%a%c&Z&[&e&i&z'P'Q'k'v(P(Q(a({)O)t*T*X*Y*]*`*d*n+g+x+{,P,l,n,w,{-W-^-}.O.h.k.n.p.w/Y/o0Q0Y0n0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^Q$|!sR*z(Q&i]OV^aclmu!U!W!Z!]!s!w!z!}#U#^#`#b#e#f#g#h#i#j#k#n#o#p#s$Q$R$S$T$U$V$e$i$t$y%Z%a%c%h&Y&Z&[&d&e&i&w&y&z'P'Q'`'k'v(P(Q(a(f(h({)O)X)Y)`)l)m)o)t*T*X*Y*]*`*d*i*n+g+s+v+x+{,P,W,l,n,w,{-R-W-^-{-}.O.[.h.k.n.p.q.w/Y/o0Q0Y0g0n0v0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^!u!kW!c!l!n!x#W#q$k$s$z%Q%Y%^&S&x'[(e)P)W)k*V*c+U+l+o+r,Z-P-o-x-z.z/R/W/i/m/p0S0e0j0k$lhO^almu!U!W!Z!]#U#^#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$e$i$t%c&i&z'P'Q'k'v(a({)O)t*T*X*Y*]*`*d*n+x,l,n,w,{-W-^-}.O.h.k.n.p.w/Y/o0Q0Y0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^Q$R!RQ$S!SQ$X!VQ$c![R*a'SW#af'^'i1OS&m#y(wQ(u%pQ)x&nQ+_(vQ,S)gQ-i+`Q.X,TQ/O-jS/[.Q.RQ/w/]Q0U/uR0Z0TQ&]#vW(l%l&^&_&`Q)w&mU+X(m(n(oQ,R)gQ,`)xS-f+Y+ZS.W,S,TQ.}-gR/^.XX)^&Y)`,W.[rcOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/YY!z^!}%Z+v1^Q&y$TW'`$e*d,{.pS(f%h(hW)X&Y)`,W.[S)h&a,US)m&d)oR-R*id!pW#W&x(e)W)k*V+U+o,ZQ'z$uQ(W%UR+O(Z#nkOalmu!U!W!Z!]#U#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$i$t%c&z'P'Q'k'v(a({)O*T*X*Y*]*`*n+x,l,n,w-W-^-}.O.h.k.n.w/Y/o0Q0Y1[r!nW!x#W$u%U%Y%^&x'[(Z(e*V*c+U-Q-z.tS#P^1^Q#vxQ#wyQ#xzQ%l#YQ%m#ZQ%n#[Q(c%dS)Q&X+iY)[&Y)X)`,W.[S)g&a,UQ+h)RW+l)W)k+o,ZQ+t)YQ,T)hS-v+r-xq1Q#^&i)t0w0x0y0z0{0|0}1R1S1T1U1V1YU'x$t'v-^R)v&lW)^&Y)`,W.[T)n&d)oQ&`#vQ&h#xQ(o%lQ(t%nY)Y&Y)X)`,W.[V)l&d)m)oQ)S&XR-m+iQ+f)QR-l+h#rkO^almu!U!W!Z!]#U#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$i$t%c&z'P'Q'k'v(a({)O*T*X*Y*]*`*n+x,l,n,w-W-^-}.O.h.k.n.w/Y/o0Q0Y1[1^Q+w)[S-o+l-vQ-y+tq1Q#^&i)t0w0x0y0z0{0|0}1R1S1T1U1V1YV!}^+v1^W!{^!}+v1^R([%ZQ+z)]Q-q+nQ-u+qQ/U-wR/r/VrsOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/YQ$f!^S&V#o0|Q'W$cQ'g$gW)^&Y)`,W.[Q*k'eQ+u)ZQ,O)bQ-S*jR-s+prqOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/YS(g%h(hW)^&Y)`,W.[T)n&d)oQ&_#vS(n%l&`R+Z(oQ&^#vQ&c#wU(m%l&_&`Q(q%mS+Y(n(oR-g+ZQ)f&[R)q&eQ&g#xS(s%n&hR+^(tQ&f#xU(r%n&g&hS+](s(tR-h+^S(g%h(hT)n&d)orqOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/YW)^&Y)`,W.[T)n&d)oQ&b#wS(p%m&cR+[(qQ)i&aR.Y,UR,Y)jQ%i#VR(k%kT(g%h(hQ+y)]S-t+q+zR/T-uR.O+xWh$e*d,{.p#riO^almu!U!W!Z!]#U#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$i$t%c&z'P'Q'k'v(a({)O*T*X*Y*]*`*n+x,l,n,w-W-^-}.O.h.k.n.w/Y/o0Q0Y1[1^q1P#^&i)t0w0x0y0z0{0|0}1R1S1T1U1V1YT&k#y&l!W#ej!y$W$a$d%x%z%|%}&O&P&R&U'j'w*W*Z+c+e,p,u-U.g.m/e/h1Xe1T%u)s,_0o0p0q0r0s0t0u!Q#fj!y$W$a$d%x%z%}&R&U'j'w*W*Z+c+e,p,u-U.g.m/e/h1X_0x%u)s,_0o0q0t0u#rkO^almu!U!W!Z!]#U#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$i$t%c&z'P'Q'k'v(a({)O*T*X*Y*]*`*n+x,l,n,w-W-^-}.O.h.k.n.w/Y/o0Q0Y1[1^q1Q#^&i)t0w0x0y0z0{0|0}1R1S1T1U1V1Ya'l$i'k*n-W.w/o0Q0YQ'n$iR-[*qQ&p#|Q'q$lR*u'rT)y&o)zssOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/YsrOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/YR$U!TrsOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/YR&z$TR$V!TR'R$XT*['Q*]R$]!XR$`!YX'b$f'c'g*lR*j'dQ-Q*iR.t-RQ'f$fQ*h'cQ*m'gR-T*lR$g!^Q'a$eV,y*d,{.pQuOQ#UaW#tu#U-}/YQ-}+xR/Y.OrVOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/Yr!eV!j!w#R#p$y%P%_&j&w)R+s-{0g0l0m0v^!jW!x#q&S&x'[)PS!w^1^Q#R_#z#plm!U!Z!]#^#`#b#e#f#g#h#i#j#k#o$Q$i$t%a%c&Z&[&e&i&z'P'k'v(P(a({)O)t*X*Y*`*n+g+{,P,l,n,w-W-^.h.k.n.w/o0Q0Y0w0x0y0z0{0|0}1R1S1T1U1V1Y1[S$y!s(QQ%P!uj%_!}%Z%h&Y&a&d(h)`)o*i,U,W.[S&j#y&lY&w$T$e*d,{.pS)R&X+iS+s)Y)lQ-{+vQ0g#n![0l!c!n#W$s$z%Q%Y%^(e)W)k*V*c+U+l+o+r,Z-P-o-x-z.z/R/W/i/m/p0SS0m0j0kR0v0nQ(R$|R*{(R^!lW!x#q&S&x'[)Px$k!c#W$z%Q%Y%^(e)W)k*V*c+U+o+r,Z-P-x-z/W/i^$r!l$k$s/R/m0S0eS$s!n+lQ/R-oQ/m.zQ0S/pT0e0j0kQ$p!iQ'p0cW't$p'p'u*tQ'u$qQ*t0hQ/P0dR/q0iQ(|%xR+d(|Q)`&YS+|)`.[R.[,W!n`O^au!W!}#U#s$R$S$T$U$V$e%Z%h&Y&a&d'Q(h)`)o*T*]*d*i+v+x,U,W,{-}.O.[.p/Y1^Y!dV!w%_&w-{T#S`!dQ-_*vR.y-_Q$v!pR'{$vQ%b#OU(`%b/Q1]Q/Q-kR1]1ZQ+j)SR-n+jQ%[!{R(]%[Q,Q)dR.V,QQ)o&dR,[)oQ,V)iR.Z,VQ(h%hR+V(hQ&l#yR)u&lQ%e#PR(d%eQ-X*oR.v-XQ*r'nR-]*rQ)z&oR,a)zQ,e)|R.a,eQ/a.bS/y/a/{R/{/cQ*]'QR,r*]Q'c$fS*g'c*lR*l'gQ.r-PR/j.rQ*e'aR,|*e`tOau#U+x-}.O/YQ$Y!WQ&W#sQ&u$RQ&v$SQ&|$UQ&}$VS*['Q*]R,k*T(UpOVW^_almu!U!W!Z!]!c!j!n!s!u!w!x!}#R#U#W#^#`#b#e#f#g#h#i#j#k#n#o#p#q#s#y$Q$R$S$T$U$V$e$s$t$y$z%P%Q%Y%Z%^%_%a%c%h&S&X&Y&Z&[&a&d&e&i&j&l&w&x&z'P'Q'['v(P(Q(a(e(h({)O)P)R)W)Y)`)k)l)o)t*T*V*X*Y*]*`*c*d*i+U+g+i+l+o+r+s+v+x+{,P,U,W,Z,l,n,w,{-P-^-o-x-z-{-}.O.[.h.k.n.p.z/R/W/Y/i/m/p0S0g0j0k0l0m0n0v0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^a'm$i'k*n-W.w/o0Q0YQ!`SQ#|}Q#}!PQ$O!QQ$l!fQ$n!hQ&t$PQ'r$mQ'|0bS,c)|*OQ,g)}Q,h*PQ.`,eS.b,g.dQ/c.eR/x/`&_ROS^ablmu}!P!Q!U!W!Z!]!f!h!x#U#X#]#^#_#`#b#e#f#g#h#i#j#k#o#s#{$P$Q$R$S$T$U$V$e$h$i$m$t%Q%c%q%w&i&r&z'P'Q'k'v(a(e(x({)O)t)|)}*O*P*R*T*X*Y*]*`*d*n*q+U+a+x,e,g,l,n,w,{-W-^-z-}.O.d.e.h.k.n.p.w/W/Y/Z/`/o/t0Q0Y0b0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^Q'o$iQ*o'kS-V*n.wQ.u-WQ0R/oQ0W0QR0^0YrjOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/YU!y^$Q1^S#ll1RS#rm1SQ$W!UQ$a!ZQ$d!]Q%u#^Y%x#`$T*X,n.kQ%z#bQ%{#eQ%|#fQ%}#gQ&O#hQ&P#iS&Q#j1UQ&R#kQ&U#o^'j$i'k-W.w/o0Q0YU'w$t'v-^S(b%c1VQ)s&iQ*W&zQ*Z'PS+P(a1YQ+c({Q+e)OQ,_)tQ,p*YQ,u*`Q-U*nQ.g,lQ.m,wQ/e.hQ/h.nQ0o0wQ0p0xQ0q0yQ0r0zQ0s0{Q0t0|Q0u0}Q1W1TR1X1[$beO^almu!U!W!Z!]#U#^#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$i$t%c&i&z'P'Q'k'v(a({)O)t*T*X*Y*]*`*n,l,n,w-W-^-}.O.h.k.n.w/Y/o0Q0Y0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^W']$e*d,{.pR.P+xrWOau!W#U#s$R$S$U$V'Q*T*]+x-}.O/YW!cV#p$y&wS!x^1^Q#Wc#j#qlm!U!Z!]#^#`#b#e#f#g#h#i#j#k#o$Q$i$t%c&i&z'P'k'v(a({)O)t*X*Y*`*n,l,n,w-W-^.h.k.n.w/o0Q0Y0w0x0y0z0{0|0}1R1S1T1U1V1Y1[d$z!s%a&Z&[&e(P(Q+g+{,PQ%Q!wQ%Y!zS%^!}%ZQ&S#nQ&x$TW'[$e*d,{.pS(e%h(hQ)P0gW)W&Y)`,W.[S)k&d)oQ*V&yQ*c'`Q+U(fQ+o)XS+r)Y)lQ,Z)mS-P*i-RQ-x+sQ-z+vQ/W-{Q/i.qQ0j0nR0k0v&h]OV^aclmu!U!W!Z!]!s!w!z!}#U#^#`#b#e#f#g#h#i#j#k#n#o#p#s$Q$R$S$T$U$V$e$i$t$y%Z%a%c%h&Y&Z&[&d&e&i&w&y&z'P'Q'`'k'v(P(Q(a(f(h({)O)X)Y)`)l)m)o)t*T*X*Y*]*`*d*i*n+g+s+v+x+{,P,W,l,n,w,{-R-W-^-{-}.O.[.h.k.n.p.q.w/Y/o0Q0Y0g0n0v0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^Q#y{Q&n#zR(w%r&sUOV^aclmu{!U!W!Z!]!s!u!w!z!}#U#^#`#b#e#f#g#h#i#j#k#n#o#p#s#z$Q$R$S$T$U$V$e$i$t$y%P%Z%a%c%h%r&Y&Z&[&d&e&i&w&y&z'P'Q'`'k'v(P(Q(a(f(h({)O)X)Y)`)l)m)o)t*T*X*Y*]*`*d*i*n+g+s+v+x+{,P,W,l,n,w,{-R-W-^-{-}.O.[.h.k.n.p.q.w/Y/o0Q0Y0g0n0v0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^R$}!s$hgOalmu!U!W!Z!]#U#^#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$e$i$t%c&i&z'P'Q'k'v(a({)O)t*T*X*Y*]*`*d*n+x,l,n,w,{-W-^-}.O.h.k.n.p.w/Y/o0Q0Y0w0x0y0z0{0|0}1R1S1T1U1V1Y1[Q#O^Q$|!sS&T#n0nQ(_%aQ)c&ZU)d&[&e+{Q*y(PQ*z(QQ-k+gQ.U,PR1Z1^Q(O${R*x'}$ldO^almu!U!W!Z!]#U#^#`#b#e#f#g#h#i#j#k#o#s$Q$R$S$T$U$V$e$i$t%c&i&z'P'Q'k'v(a({)O)t*T*X*Y*]*`*d*n+x,l,n,w,{-W-^-}.O.h.k.n.p.w/Y/o0Q0Y0w0x0y0z0{0|0}1R1S1T1U1V1Y1[1^T%o#]/ZQ%y#`Q&{$TQ,o*XQ.i,nR/g.kX)_&Y)`,W.[!}_OV^`au!W!d!w!}#U#s$R$S$T$U$V$e%Z%_%h&Y&a&d&w'Q(h)`)o*T*]*d*i+v+x,U,W,{-{-}.O.[.p/Y1^S!qW&xS%j#W*VS+S(e)kQ+m)WS-d+U,ZR-r+of!oW#W$u%U(Z(e)W)k+U+o,ZU%T!x%^-zQ(Y%YQ*U&xQ*b'[Q,m*VQ,x*cQ.s-QR/l.tQ'y$tQ*v'vR.x-^R*w'v[)Z&Y&d)`)o,W.[T+p)X)mR)T&XW+n)W)k+o,ZQ-w+rR/V-xU!|^+v1^R%`!}S)e&[&eR.T+{R)j&aW)]&Y)`,W.[R+q)XT#Q^1^R*p'kR'o$iT,d)|,eQ.c,gR/b.dR/b.e",
      nodeNames: "⚠ LineComment BlockComment Program ModuleDeclaration MarkerAnnotation Identifier ScopedIdentifier . Annotation ) ( AnnotationArgumentList AssignmentExpression FieldAccess IntegerLiteral FloatingPointLiteral BooleanLiteral CharacterLiteral StringLiteral null ClassLiteral void PrimitiveType TypeName ScopedTypeName GenericType TypeArguments AnnotatedType Wildcard extends super , ArrayType Dimension [ ] class this ParenthesizedExpression ObjectCreationExpression new ArgumentList } { ClassBody ; FieldDeclaration Modifiers public protected private abstract static final strictfp default synchronized native transient volatile VariableDeclarator Definition AssignOp ArrayInitializer MethodDeclaration TypeParameters TypeParameter TypeBound FormalParameters ReceiverParameter FormalParameter SpreadParameter Throws throws Block ClassDeclaration Superclass SuperInterfaces implements InterfaceTypeList InterfaceDeclaration interface ExtendsInterfaces InterfaceBody ConstantDeclaration EnumDeclaration enum EnumBody EnumConstant EnumBodyDeclarations AnnotationTypeDeclaration AnnotationTypeBody AnnotationTypeElementDeclaration StaticInitializer ConstructorDeclaration ConstructorBody ExplicitConstructorInvocation ArrayAccess MethodInvocation MethodReference ArrayCreationExpression Dimension AssignOp BinaryExpression CompareOp CompareOp LogicOp BitOp BitOp LogicOp ArithOp ArithOp ArithOp BitOp InstanceofExpression instanceof LambdaExpression InferredParameters TernaryExpression LogicOp : UpdateExpression UpdateOp UnaryExpression LogicOp BitOp CastExpression ElementValueArrayInitializer ElementValuePair open module ModuleBody ModuleDirective requires transitive exports to opens uses provides with PackageDeclaration package ImportDeclaration import Asterisk ExpressionStatement LabeledStatement Label IfStatement if else WhileStatement while ForStatement for ForSpec LocalVariableDeclaration EnhancedForStatement ForSpec AssertStatement assert SwitchStatement switch SwitchBlock SwitchLabel case DoStatement do BreakStatement break Label ContinueStatement continue Label ReturnStatement return SynchronizedStatement ThrowStatement throw TryStatement try CatchClause catch CatchFormalParameter CatchType FinallyClause finally TryWithResourcesStatement ResourceSpecification Resource",
      maxTerm: 270,
      nodeProps: [
        [NodeProp$1.group, -26,4,46,75,76,81,86,91,142,144,147,148,150,153,155,158,159,161,163,168,170,173,176,178,179,181,189,"Statement",-24,6,13,14,15,16,17,18,19,20,21,38,39,40,98,99,100,101,104,115,117,119,122,124,127,"Expression",-7,22,23,24,25,26,28,33,"Type"],
        [NodeProp$1.openedBy, 10,"(",43,"{"],
        [NodeProp$1.closedBy, 11,")",44,"}"]
      ],
      skippedNodes: [0,1,2],
      repeatNodeCount: 28,
      tokenData: "Cr~R{X^#xpq#xqr$mrs$ztu%ruv&Wvw&ewx&uxy(]yz(bz{(g{|(q|})R}!O)W!O!P)k!P!Q-S!Q!R.b!R![3S![!]?[!]!^?i!^!_?n!_!`@R!`!a@Z!a!b@q!b!c@x!c!}BX!}#OBm#P#QBr#Q#RBw#R#S%r#T#o%r#o#pCP#p#qCU#q#rCh#r#sCm#y#z#x$f$g#x#BY#BZ#x$IS$I_#x$I|$JO#x$JT$JU#x$KV$KW#x&FU&FV#x~#}Y%v~X^#xpq#x#y#z#x$f$g#x#BY#BZ#x$IS$I_#x$I|$JO#x$JT$JU#x$KV$KW#x&FU&FV#xR$rP#qP!_!`$uQ$zO#]Q~$}UOY$zZr$zrs%as#O$z#O#P%f#P~$z~%fOc~~%iROY$zYZ$zZ~$z~%wT%|~tu%r!Q![%r!c!}%r#R#S%r#T#o%r~&]P#e~!_!`&`Q&eO#ZQ~&jQ&h~vw&p!_!`&`~&uO#_~~&xTOY'XZw'Xx#O'X#O#P(P#P~'X~'[UOY'XZw'Xwx'nx#O'X#O#P's#P~'X~'sOb~~'vROY'XYZ'XZ~'X~(SROY'XYZ'XZ~'X~(bOZ~~(gOY~R(nP$WP#dQ!_!`&`~(vQ#c~{|(|!_!`&`~)RO#o~~)WOp~~)]R#c~}!O(|!_!`&`!`!a)f~)kO&r~~)pQWU!O!P)v!Q![*R~)yP!O!P)|~*RO&k~P*WW`P!Q![*R!f!g*p!g!h*u!h!i*p#R#S,_#W#X*p#X#Y*u#Y#Z*pP*uO`PP*xR{|+R}!O+R!Q![+XP+UP!Q![+XP+^U`P!Q![+X!f!g*p!h!i*p#R#S+p#W#X*p#Y#Z*pP+sP!Q![+vP+{U`P!Q![+v!f!g*p!h!i*p#R#S+p#W#X*p#Y#Z*pP,bP!Q![,eP,jW`P!Q![,e!f!g*p!g!h*u!h!i*p#R#S,_#W#X*p#X#Y*u#Y#Z*p~-XR#dQz{-b!P!Q.V!_!`&`~-eROz-bz{-n{~-b~-qTOz-bz{-n{!P-b!P!Q.Q!Q~-b~.VOQ~~.[QP~OY.VZ~.V~.ga_~!O!P/l!Q![3S!d!e6g!f!g*p!g!h3z!h!i*p!n!o5d!q!r7s!z!{8s#R#S5i#U#V6g#W#X*p#X#Y3z#Y#Z*p#`#a5d#c#d7s#l#m8sP/qV`P!Q![0W!f!g*p!g!h0u!h!i*p#W#X*p#X#Y0u#Y#Z*pP0]W`P!Q![0W!f!g*p!g!h0u!h!i*p#R#S2_#W#X*p#X#Y0u#Y#Z*pP0xR{|1R}!O1R!Q![1XP1UP!Q![1XP1^U`P!Q![1X!f!g*p!h!i*p#R#S1p#W#X*p#Y#Z*pP1sP!Q![1vP1{U`P!Q![1v!f!g*p!h!i*p#R#S1p#W#X*p#Y#Z*pP2bP!Q![2eP2jW`P!Q![2e!f!g*p!g!h0u!h!i*p#R#S2_#W#X*p#X#Y0u#Y#Z*p~3XZ_~!O!P/l!Q![3S!f!g*p!g!h3z!h!i*p!n!o5d#R#S5i#W#X*p#X#Y3z#Y#Z*p#`#a5dP3}R{|4W}!O4W!Q![4^P4ZP!Q![4^P4cU`P!Q![4^!f!g*p!h!i*p#R#S4u#W#X*p#Y#Z*pP4xP!Q![4{P5QU`P!Q![4{!f!g*p!h!i*p#R#S4u#W#X*p#Y#Z*p~5iO_~~5lP!Q![5o~5tZ_~!O!P/l!Q![5o!f!g*p!g!h3z!h!i*p!n!o5d#R#S5i#W#X*p#X#Y3z#Y#Z*p#`#a5d~6jQ!Q!R6p!R!S6p~6uT_~!Q!R6p!R!S6p!n!o5d#R#S7U#`#a5d~7XQ!Q!R7_!R!S7_~7dT_~!Q!R7_!R!S7_!n!o5d#R#S7U#`#a5d~7vP!Q!Y7y~8OS_~!Q!Y7y!n!o5d#R#S8[#`#a5d~8_P!Q!Y8b~8gS_~!Q!Y8b!n!o5d#R#S8[#`#a5d~8vS!O!P9S!Q![<Q!c!i<Q#T#Z<QP9VR!Q![9`!c!i9`#T#Z9`P9cU!Q![9`!c!i9`!r!s9u#R#S;_#T#Z9`#d#e9uP9xR{|:R}!O:R!Q![:XP:UP!Q![:XP:^U`P!Q![:X!f!g*p!h!i*p#R#S:p#W#X*p#Y#Z*pP:sP!Q![:vP:{U`P!Q![:v!f!g*p!h!i*p#R#S:p#W#X*p#Y#Z*pP;bR!Q![;k!c!i;k#T#Z;kP;nU!Q![;k!c!i;k!r!s9u#R#S;_#T#Z;k#d#e9u~<VX_~!O!P<r!Q![<Q!c!i<Q!n!o5d!r!s9u#R#S>^#T#Z<Q#`#a5d#d#e9uP<uT!Q![=U!c!i=U!r!s9u#T#Z=U#d#e9uP=XU!Q![=U!c!i=U!r!s9u#R#S=k#T#Z=U#d#e9uP=nR!Q![=w!c!i=w#T#Z=wP=zU!Q![=w!c!i=w!r!s9u#R#S=k#T#Z=w#d#e9u~>aR!Q![>j!c!i>j#T#Z>j~>oX_~!O!P<r!Q![>j!c!i>j!n!o5d!r!s9u#R#S>^#T#Z>j#`#a5d#d#e9u~?aP#m~![!]?d~?iO&p~~?nO!O~~?sQ&X~!^!_?y!_!`$u~@OP#f~!_!`&`~@WP!a~!_!`$u~@`Q&W~!_!`$u!`!a@f~@kQ#f~!_!`&`!`!a?yV@xO&[T#lQ~@}P%z~#]#^AQ~ATP#b#cAW~AZP#h#iA^~AaP#X#YAd~AgP#f#gAj~AmP#Y#ZAp~AsP#T#UAv~AyP#V#WA|~BPP#X#YBS~BXO&n~~B^T&O~tuBX!Q![BX!c!}BX#R#SBX#T#oBX~BrOs~~BwOt~QB|P#aQ!_!`&`~CUO|~VC]Q&xT#aQ!_!`&`#p#qCcQChO#bQ~CmO{~~CrO#r~",
      tokenizers: [0, 1, 2],
      topRules: {"Program":[0,3]},
      dynamicPrecedences: {"26":1,"229":-1,"237":-1},
      specialized: [{term: 228, get: value => spec_identifier$4[value] || -1}],
      tokenPrec: 7611
    });

    /// A syntax provider based on the [Lezer Java
    /// parser](https://github.com/lezer-parser/java), extended with
    /// highlighting and indentation information.
    const javaSyntax = LezerSyntax.define(parser$5.withProps(indentNodeProp.add({
        IfStatement: continuedIndent({ except: /^\s*({|else\b)/ }),
        TryStatement: continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
        LabeledStatement: flatIndent,
        SwitchBlock: context => {
            let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
            return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
        },
        BlockComment: () => -1,
        Statement: continuedIndent({ except: /^{/ })
    }), foldNodeProp.add({
        "Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody ConstructorBody InterfaceBody ArrayInitializer"(tree) { return { from: tree.from + 1, to: tree.to - 1 }; },
        BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
    }), styleTags({
        null: tags$1.null,
        instanceof: tags$1.operatorKeyword,
        this: tags$1.self,
        "new super assert open to with void": tags$1.keyword,
        "class interface extends implements module package import enum": tags$1.definitionKeyword,
        "switch while for if else case default do break continue return try catch finally throw": tags$1.controlKeyword,
        ["requires exports opens uses provides public private protected static transitive abstract final " +
            "strictfp synchronized native transient volatile throws"]: tags$1.modifier,
        IntegerLiteral: tags$1.integer,
        FloatLiteral: tags$1.float,
        StringLiteral: tags$1.string,
        CharacterLiteral: tags$1.character,
        LineComment: tags$1.lineComment,
        BlockComment: tags$1.blockComment,
        BooleanLiteral: tags$1.bool,
        PrimitiveType: tags$1.standard(tags$1.typeName),
        TypeName: tags$1.typeName,
        Identifier: tags$1.name,
        Definition: tags$1.definition(tags$1.variableName),
        ArithOp: tags$1.arithmeticOperator,
        LogicOp: tags$1.logicOperator,
        BitOp: tags$1.bitwiseOperator,
        CompareOp: tags$1.compareOperator,
        AssignOp: tags$1.definitionOperator,
        UpdateOp: tags$1.updateOperator,
        Asterisk: tags$1.punctuation,
        Label: tags$1.labelName,
        "( )": tags$1.paren,
        "[ ]": tags$1.squareBracket,
        "{ }": tags$1.brace,
        ".": tags$1.derefOperator,
        ", ;": tags$1.separator
    })), {
        languageData: {
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:case |default:|\{|\})$/
        }
    });
    /// Returns an extension that installs the Java syntax and
    /// support features.
    function java() {
        return [javaSyntax];
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const 
      noSemi$1 = 268,
      incdec$1 = 1,
      incdecPrefix$1 = 2,
      templateContent$1 = 269,
      templateDollarBrace$1 = 270,
      templateEnd$1 = 271,
      insertSemi$1 = 272,
      TSExtends$1 = 3,
      Dialect_ts$1 = 1;

    /* Hand-written tokenizers for JavaScript tokens that can't be
       expressed by lezer's built-in tokenizer. */

    const newline$1 = [10, 13, 8232, 8233];
    const space$3 = [9, 11, 12, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288];

    const braceR$1 = 125, braceL$1 = 123, semicolon$1 = 59, slash$2 = 47, star$1 = 42,
          plus$1 = 43, minus$1 = 45, dollar$1 = 36, backtick$1 = 96, backslash$1 = 92;

    // FIXME this should technically enter block comments
    function newlineBefore$1(input, pos) {
      for (let i = pos - 1; i >= 0; i--) {
        let prev = input.get(i);
        if (newline$1.indexOf(prev) > -1) return true
        if (space$3.indexOf(prev) < 0) break
      }
      return false
    }

    const insertSemicolon$1 = new ExternalTokenizer((input, token, stack) => {
      let pos = token.start, next = input.get(pos);
      if ((next == braceR$1 || next == -1 || newlineBefore$1(input, pos)) && stack.canShift(insertSemi$1))
        token.accept(insertSemi$1, token.start);
    }, {contextual: true, fallback: true});

    const noSemicolon$1 = new ExternalTokenizer((input, token, stack) => {
      let pos = token.start, next = input.get(pos++);
      if (space$3.indexOf(next) > -1 || newline$1.indexOf(next) > -1) return
      if (next == slash$2) {
        let after = input.get(pos++);
        if (after == slash$2 || after == star$1) return
      }
      if (next != braceR$1 && next != semicolon$1 && next != -1 && !newlineBefore$1(input, token.start) &&
          stack.canShift(noSemi$1))
        token.accept(noSemi$1, token.start);
    }, {contextual: true});

    const incdecToken$1 = new ExternalTokenizer((input, token, stack) => {
      let pos = token.start, next = input.get(pos);
      if ((next == plus$1 || next == minus$1) && next == input.get(pos + 1)) {
        let mayPostfix = !newlineBefore$1(input, token.start) && stack.canShift(incdec$1);
        token.accept(mayPostfix ? incdec$1 : incdecPrefix$1, pos + 2);
      }
    }, {contextual: true});

    const template$1 = new ExternalTokenizer((input, token) => {
      let pos = token.start, afterDollar = false;
      for (;;) {
        let next = input.get(pos++);
        if (next < 0) {
          if (pos - 1 > token.start) token.accept(templateContent$1, pos - 1);
          break
        } else if (next == backtick$1) {
          if (pos == token.start + 1) token.accept(templateEnd$1, pos);
          else token.accept(templateContent$1, pos - 1);
          break
        } else if (next == braceL$1 && afterDollar) {
          if (pos == token.start + 2) token.accept(templateDollarBrace$1, pos);
          else token.accept(templateContent$1, pos - 2);
          break
        } else if (next == 10 /* "\n" */ && pos > token.start + 1) {
          // Break up template strings on lines, to avoid huge tokens
          token.accept(templateContent$1, pos);
          break
        } else if (next == backslash$1 && pos != input.length) {
          pos++;
        }
        afterDollar = next == dollar$1;
      }
    });

    function tsExtends$1(value, stack) {
      return value == "extends" && stack.dialectEnabled(Dialect_ts$1) ? TSExtends$1 : -1
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$5 = {__proto__:null,export:16, as:21, from:25, default:30, async:35, function:36, this:46, true:54, false:54, void:58, typeof:62, null:76, super:78, new:112, await:129, yield:131, delete:132, class:142, extends:144, public:181, private:181, protected:181, readonly:183, in:202, instanceof:204, import:236, keyof:285, unique:289, infer:295, is:329, abstract:349, implements:351, type:353, let:356, var:358, const:360, interface:367, enum:371, namespace:377, module:379, declare:383, global:387, for:408, of:417, while:420, with:424, do:428, if:432, else:434, switch:438, case:444, try:450, catch:452, finally:454, return:458, throw:462, break:466, continue:470, debugger:474};
    const spec_word$1 = {__proto__:null,async:99, get:101, set:103, public:151, private:151, protected:151, static:153, abstract:155, readonly:159, new:333};
    const spec_LessThan$1 = {__proto__:null,"<":119};
    const parser$6 = Parser.deserialize({
      version: 12,
      states: "$8YO]QYOOO&zQ!LdO'#CgO'ROSO'#DRO)ZQYO'#DWO)kQYO'#DcO)rQYO'#DmO-iQYO'#DsOOQO'#ET'#ETO-|QWO'#ESO.RQWO'#ESO.ZQ!LdO'#IfO2dQ!LdO'#IgO3QQWO'#EpO3VQpO'#FUOOQ!LS'#Ex'#ExO3_O!bO'#ExO3mQWO'#F]O4wQWO'#F[OOQ!LS'#Ig'#IgOOQ!LS'#If'#IfOOQQ'#JQ'#JQO4|QWO'#HdO5RQ!LYO'#HeOOQQ'#IZ'#IZOOQQ'#Hf'#HfQ]QYOOO)rQYO'#DeO5ZQWO'#GPO5`Q#tO'#ClO5nQWO'#ESO5yQ#tO'#EwO6eQWO'#GPO6jQWO'#GTO6uQWO'#GTO7TQWO'#GXO7TQWO'#GYO7TQWO'#G[O5ZQWO'#G_O7tQWO'#GbO9SQWO'#CcO9dQWO'#GoO9lQWO'#GuO9lQWO'#GwO]QYO'#GyO9lQWO'#G{O9lQWO'#HOO9qQWO'#HUO9vQ!LZO'#HYO)rQYO'#H[O:RQ!LZO'#H^O:^Q!LZO'#H`O5RQ!LYO'#HbO)rQYO'#IiOOOS'#Hg'#HgO:iOSO,59mOOQ!LS,59m,59mO<zQbO'#CgO=UQYO'#HhO=cQWO'#IkO?bQbO'#IkO'^QYO'#IkO?iQWO,59rO@PQ&jO'#D]O@xQWO'#ETOAVQWO'#IuOAbQWO'#ItOAjQWO,5:qOAoQWO'#IsOAvQWO'#DtO5`Q#tO'#ERO5qQWO'#ESOBUQ`O'#EwOOQ!LS,59},59}OB^QYO,59}OD[Q!LdO,5:XODxQWO,5:_OEcQ!LYO'#IrO6jQWO'#IqOEjQWO'#IqOErQWO,5:pOEwQWO'#IqOFVQYO,5:nOHSQWO'#EPOIZQWO,5:nOJgQWO'#DgOJnQYO'#DlOJxQ&jO,5:wO)rQYO,5:wOOQQ'#Eh'#EhOOQQ'#Ej'#EjO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xO)rQYO,5:xOOQQ'#En'#EnOJ}QYO,5;XOOQ!LS,5;^,5;^OOQ!LS,5;_,5;_OLzQWO,5;_OOQ!LS,5;`,5;`O)rQYO'#HrOMPQ!LYO,5;xOHSQWO,5:xO)rQYO,5;[OM|QpO'#IyOMkQpO'#IyONTQpO'#IyONfQpO,5;gOOQO,5;p,5;pO!!qQYO'#FWOOOO'#Hq'#HqO3_O!bO,5;dO!!xQpO'#FYOOQ!LS,5;d,5;dO!#fQ,UO'#CqOOQ!LS'#Ct'#CtO!#yQWO'#CtO!$aQ#tO,5;uO!$hQWO,5;wO!%qQWO'#FgO!&OQWO'#FhO!&TQWO'#FlO!'VQ&jO'#FpO!'xQ,UO'#IdOOQ!LS'#Id'#IdO!(SQWO'#IcO!(bQWO'#IbOOQ!LS'#Cr'#CrOOQ!LS'#Cx'#CxO!(jQWO'#CzOI`QWO'#F_OI`QWO'#FaO!(oQWO'#FcOIUQWO'#FdO!(tQWO'#FjOI`QWO'#FoO!(yQWO'#EUO!)bQWO,5;vO]QYO,5>OOOQQ'#I^'#I^OOQQ,5>P,5>POOQQ-E;d-E;dO!+^Q!LdO,5:POOQ!LQ'#Co'#CoO!+}Q#tO,5<kOOQO'#Ce'#CeO!,`QWO'#CpO!,hQ!LYO'#I_O4wQWO'#I_O9qQWO,59WO!,vQpO,59WO!-OQ#tO,59WO!-ZQWO,5:nO5`Q#tO,59WO!-cQWO'#GnO!-kQWO'#JUO!-sQYO,5;aOJxQ&jO,5;cO!/pQWO,5=XO!/uQWO,5=XO!/zQWO,5=XO5RQ!LYO,5=XO5ZQWO,5<kO!0YQWO'#EVO!0kQ&jO'#EWOOQ!LQ'#Is'#IsO!0|Q!LYO'#JRO5RQ!LYO,5<oO7TQWO,5<vOOQO'#Cq'#CqO!1XQpO,5<sO!1aQ#tO,5<tO!1lQWO,5<vO!1qQ`O,5<yO9qQWO'#GdO5ZQWO'#GfO!1yQWO'#GfO5`Q#tO'#GiO!2OQWO'#GiOOQQ,5<|,5<|O!2TQWO'#GjO!2]QWO'#ClO!2bQWO,58}O!2lQWO,58}O!4kQYO,58}OOQQ,58},58}O!4xQ!LYO,58}O)rQYO,58}O!5TQYO'#GqOOQQ'#Gr'#GrOOQQ'#Gs'#GsO]QYO,5=ZO!5eQWO,5=ZO)rQYO'#DsO]QYO,5=aO]QYO,5=cO!5jQWO,5=eO]QYO,5=gO!5oQWO,5=jO!5tQYO,5=pOOQQ,5=t,5=tO)rQYO,5=tO5RQ!LYO,5=vOOQQ,5=x,5=xO!9rQWO,5=xOOQQ,5=z,5=zO!9rQWO,5=zOOQQ,5=|,5=|O!9wQ`O,5?TOOOS-E;e-E;eOOQ!LS1G/X1G/XO!9|QbO,5>SO)rQYO,5>SOOQO-E;f-E;fO!:WQWO,5?VO!:`QbO,5?VO!:gQWO,5?`OOQ!LS1G/^1G/^O!:oQpO'#DPOOQO'#Im'#ImO)rQYO'#ImO!;^QpO'#ImO!;{QpO'#D^O!<^Q&jO'#D^O!>fQYO'#D^O!>mQWO'#IlO!>uQWO,59wO!>zQWO'#EXO!?YQWO'#IvO!?bQWO,5:rO!?xQ&jO'#D^O)rQYO,5?aO!@SQWO'#HmO!:gQWO,5?`OOQ!LQ1G0]1G0]O!AYQ&jO'#DwOOQ!LS,5:`,5:`O)rQYO,5:`OHSQWO,5:`O!AaQWO,5:`O9qQWO,5:mO!,vQpO,5:mO!-OQ#tO,5:mOOQ!LS1G/i1G/iOOQ!LS1G/y1G/yOOQ!LQ'#EO'#EOO)rQYO,5?^O!AlQ!LYO,5?^O!A}Q!LYO,5?^O!BUQWO,5?]O!B^QWO'#HoO!BUQWO,5?]OOQ!LQ1G0[1G0[O6jQWO,5?]OOQ!LS1G0Y1G0YO!BxQ!LbO,5:kOOQ!LS'#Ff'#FfO!CfQ!LdO'#IdOFVQYO1G0YO!EeQ#tO'#InO!EoQWO,5:RO!EtQbO'#IoO)rQYO'#IoO!FOQWO,5:WOOQ!LS'#DP'#DPOOQ!LS1G0c1G0cO!FTQWO1G0cO!HfQ!LdO1G0dO!HmQ!LdO1G0dO!KQQ!LdO1G0dO!KXQ!LdO1G0dO!M`Q!LdO1G0dO!MsQ!LdO1G0dO#!dQ!LdO1G0dO#!kQ!LdO1G0dO#%OQ!LdO1G0dO#%VQ!LdO1G0dO#&zQ!LdO1G0dO#)tQ7^O'#CgO#+oQ7^O1G0sO#-mQ7^O'#IgOOQ!LS1G0y1G0yO#-wQ!LdO,5>^OOQ!LS-E;p-E;pO#.hQ!LdO1G0dO#0jQ!LdO1G0vO#1ZQpO,5;iO#1`QpO,5;jO#1eQpO'#FQO#1yQWO'#FPOOQO'#Iz'#IzOOQO'#Hp'#HpO#2OQpO1G1ROOQ!LS1G1R1G1ROOQO1G1Z1G1ZO#2^Q7^O'#IfO#4WQWO,5;rONtQYO,5;rOOOO-E;o-E;oOOQ!LS1G1O1G1OOOQ!LS,5;t,5;tO#4]QpO,5;tOOQ!LS,59`,59`O)rQYO1G1aOJxQ&jO'#HtO#4bQWO,5<YOOQ!LS,5<V,5<VOOQO'#Fz'#FzOI`QWO,5<eOOQO'#F|'#F|OI`QWO,5<gOI`QWO,5<iOOQO1G1c1G1cO#4mQ`O'#CoO#5QQ`O,5<RO#5XQWO'#I}O5ZQWO'#I}O#5gQWO,5<TOI`QWO,5<SO#5lQ`O'#FfO#5yQ`O'#JOO#6TQWO'#JOOHSQWO'#JOO#6YQWO,5<WOOQ!LQ'#Db'#DbO#6_QWO'#FiO#6jQpO'#FqO!'QQ&jO'#FqO!'QQ&jO'#FsO#6{QWO'#FtO!(tQWO'#FwOOQO'#Hv'#HvO#7QQ&jO,5<[OOQ!LS,5<[,5<[O#7XQ&jO'#FqO#7gQ&jO'#FrO#7oQ&jO'#FrOOQ!LS,5<j,5<jOI`QWO,5>}OI`QWO,5>}O#7tQWO'#HwO#8PQWO,5>|OOQ!LS'#Cg'#CgO#8sQ#tO,59fOOQ!LS,59f,59fO#9fQ#tO,5;yO#:XQ#tO,5;{O#:cQWO,5;}OOQ!LS,5<O,5<OO#:hQWO,5<UO#:mQ#tO,5<ZOFVQYO1G1bO#:}QWO1G1bOOQQ1G3j1G3jOOQ!LS1G/k1G/kOLzQWO1G/kOOQQ1G2V1G2VOHSQWO1G2VO)rQYO1G2VOHSQWO1G2VO#;SQWO1G2VO#;bQWO,59[O#<hQWO'#EPOOQ!LQ,5>y,5>yO#<rQ!LYO,5>yOOQQ1G.r1G.rO9qQWO1G.rO!,vQpO1G.rO#=QQWO1G0YO!-OQ#tO1G.rO#=VQWO'#CgO#=bQWO'#JVO#=jQWO,5=YO#=oQWO'#JVO#=tQWO'#IPO#>SQWO,5?pO#@OQbO1G0{OOQ!LS1G0}1G0}O5ZQWO1G2sO#@VQWO1G2sO#@[QWO1G2sO#@aQWO1G2sOOQQ1G2s1G2sO#@fQ#tO1G2VO6jQWO'#ItO6jQWO'#EXO6jQWO'#HyO#@wQ!LYO,5?mOOQQ1G2Z1G2ZO!1lQWO1G2bOHSQWO1G2_O#ASQWO1G2_OOQQ1G2`1G2`OHSQWO1G2`O#AXQWO1G2`O#AaQ&jO'#G^OOQQ1G2b1G2bO!'QQ&jO'#H{O!1qQ`O1G2eOOQQ1G2e1G2eOOQQ,5=O,5=OO#AiQ#tO,5=QO5ZQWO,5=QO#6{QWO,5=TO4wQWO,5=TO!,vQpO,5=TO!-OQ#tO,5=TO5`Q#tO,5=TO#AzQWO'#JTO#BVQWO,5=UOOQQ1G.i1G.iO#B[Q!LYO1G.iO#BgQWO1G.iO!(jQWO1G.iO5RQ!LYO1G.iO#BlQbO,5?rO#BvQWO,5?rO#CRQYO,5=]O#CYQWO,5=]O6jQWO,5?rOOQQ1G2u1G2uO]QYO1G2uOOQQ1G2{1G2{OOQQ1G2}1G2}O9lQWO1G3PO#C_QYO1G3RO#GVQYO'#HQOOQQ1G3U1G3UO9qQWO1G3[O#GdQWO1G3[O5RQ!LYO1G3`OOQQ1G3b1G3bOOQ!LQ'#Fm'#FmO5RQ!LYO1G3dO5RQ!LYO1G3fOOOS1G4o1G4oO#I`Q!LdO,5;xO#IsQbO1G3nO#I}QWO1G4qO#JVQWO1G4zO#J_QWO,5?XONtQYO,5:sO6jQWO,5:sO9qQWO,59xONtQYO,59xO!,vQpO,59xO#LWQ7^O,59xOOQO,5:s,5:sO#LbQ&jO'#HiO#LxQWO,5?WOOQ!LS1G/c1G/cO#MQQ&jO'#HnO#MfQWO,5?bOOQ!LQ1G0^1G0^O!<^Q&jO,59xO#MnQbO1G4{OOQO,5>X,5>XO6jQWO,5>XOOQO-E;k-E;kO#MxQ!LrO'#D|O!'QQ&jO'#DxOOQO'#Hl'#HlO#NdQ&jO,5:cOOQ!LS,5:c,5:cO#NkQ&jO'#DxO#NyQ&jO'#D|O$ _Q&jO'#D|O!'QQ&jO'#D|O$ iQWO1G/zO$ nQ`O1G/zOOQ!LS1G/z1G/zO)rQYO1G/zOHSQWO1G/zOOQ!LS1G0X1G0XO9qQWO1G0XO!,vQpO1G0XO$ uQ!LdO1G4xO)rQYO1G4xO$!VQ!LYO1G4xO$!hQWO1G4wO6jQWO,5>ZOOQO,5>Z,5>ZO$!pQWO,5>ZOOQO-E;m-E;mO$!hQWO1G4wOOQ!LS,5;x,5;xO$#OQ!LdO,59fO$$}Q!LdO,5;yO$'PQ!LdO,5;{O$)RQ!LdO,5<ZOOQ!LS7+%t7+%tO$+ZQWO'#HjO$+eQWO,5?YOOQ!LS1G/m1G/mO$+mQYO'#HkO$+zQWO,5?ZO$,SQbO,5?ZOOQ!LS1G/r1G/rOOQ!LS7+%}7+%}O$,^Q7^O,5:XO)rQYO7+&_O$,hQ7^O,5:POOQO1G1T1G1TOOQO1G1U1G1UO$,oQMhO,5;lONtQYO,5;kOOQO-E;n-E;nOOQ!LS7+&m7+&mOOQO7+&u7+&uOOOO1G1^1G1^O$,zQWO1G1^OOQ!LS1G1`1G1`O$-PQ!LdO7+&{OOQ!LS,5>`,5>`O$-pQWO,5>`OOQ!LS1G1t1G1tP$-uQWO'#HtPOQ!LS-E;r-E;rO$.fQ#tO1G2PO$/XQ#tO1G2RO$/cQ#tO1G2TOOQ!LS1G1m1G1mO$/jQWO'#HsO$/xQWO,5?iO$/xQWO,5?iO$0QQWO,5?iO$0]QWO,5?iOOQO1G1o1G1oO$0kQ#tO1G1nO$0{QWO'#HuO$1]QWO,5?jOHSQWO,5?jO$1eQ`O,5?jOOQ!LS1G1r1G1rO5RQ!LYO,5<]O5RQ!LYO,5<^O$1oQWO,5<^O#6vQWO,5<^O!,vQpO,5<]O$1tQWO,5<_O5RQ!LYO,5<`O$1oQWO,5<cOOQO-E;t-E;tOOQ!LS1G1v1G1vO!'QQ&jO,5<]O$1|QWO,5<^O!'QQ&jO,5<_O!'QQ&jO,5<^O$2XQ#tO1G4iO$2cQ#tO1G4iOOQO,5>c,5>cOOQO-E;u-E;uOJxQ&jO,59hO)rQYO,59hO$2pQWO1G1iOI`QWO1G1pOOQ!LS7+&|7+&|OFVQYO7+&|OOQ!LS7+%V7+%VO$2uQ`O'#JPO$ iQWO7+'qO$3PQWO7+'qO$3XQ`O7+'qOOQQ7+'q7+'qOHSQWO7+'qO)rQYO7+'qOHSQWO7+'qOOQO1G.v1G.vO$3cQ!LbO'#CgO$3sQ!LbO,5<aO$4bQWO,5<aOOQ!LQ1G4e1G4eOOQQ7+$^7+$^O9qQWO7+$^OFVQYO7+%tO!,vQpO7+$^O$4gQWO'#IOO$4rQWO,5?qOOQO1G2t1G2tO5ZQWO,5?qOOQO,5>k,5>kOOQO-E;}-E;}OOQ!LS7+&g7+&gO$4zQWO7+(_O5RQ!LYO7+(_O5ZQWO7+(_O$5PQWO7+(_O$5UQWO7+'qOOQ!LQ,5>e,5>eOOQ!LQ-E;w-E;wOOQQ7+'|7+'|O$5dQ!LbO7+'yOHSQWO7+'yO$5nQ`O7+'zOOQQ7+'z7+'zOHSQWO7+'zO$5uQWO'#JSO$6QQWO,5<xOOQO,5>g,5>gOOQO-E;y-E;yOOQQ7+(P7+(PO$6wQ&jO'#GgOOQQ1G2l1G2lOHSQWO1G2lO)rQYO1G2lOHSQWO1G2lO$7OQWO1G2lO$7^Q#tO1G2lO5RQ!LYO1G2oO#6{QWO1G2oO4wQWO1G2oO!,vQpO1G2oO!-OQ#tO1G2oO$7oQWO'#H}O$7zQWO,5?oO$8SQ&jO,5?oOOQ!LQ1G2p1G2pOOQQ7+$T7+$TO$8XQWO7+$TO5RQ!LYO7+$TO$8^QWO7+$TO)rQYO1G5^O)rQYO1G5_O$8cQYO1G2wO$8jQWO1G2wO$8oQYO1G2wO$8vQ!LYO1G5^OOQQ7+(a7+(aO5RQ!LYO7+(kO]QYO7+(mOOQQ'#JY'#JYOOQQ'#IQ'#IQO$9QQYO,5=lOOQQ,5=l,5=lO)rQYO'#HRO$9_QWO'#HTOOQQ7+(v7+(vO$9dQYO7+(vO6jQWO7+(vOOQQ7+(z7+(zOOQQ7+)O7+)OOOQQ7+)Q7+)QOOQO1G4s1G4sO$=_Q7^O1G0_O$=iQWO1G0_OOQO1G/d1G/dO$=tQ7^O1G/dO9qQWO1G/dONtQYO'#D^OOQO,5>T,5>TOOQO-E;g-E;gOOQO,5>Y,5>YOOQO-E;l-E;lO!,vQpO1G/dOOQO1G3s1G3sO9qQWO,5:dOOQO,5:h,5:hO!-sQYO,5:hO$>OQ!LYO,5:hO$>ZQ!LYO,5:hO!,vQpO,5:dOOQO-E;j-E;jOOQ!LS1G/}1G/}O!'QQ&jO,5:dO$>iQ!LrO,5:hO$?TQ&jO,5:dO!'QQ&jO,5:hO$?cQ&jO,5:hO$?wQ!LYO,5:hOOQ!LS7+%f7+%fO$ iQWO7+%fO$ nQ`O7+%fOOQ!LS7+%s7+%sO9qQWO7+%sO$@]Q!LdO7+*dO)rQYO7+*dOOQO1G3u1G3uO6jQWO1G3uO$@mQWO7+*cO$@uQ!LdO1G2PO$BwQ!LdO1G2RO$DyQ!LdO1G1nO$GRQ#tO,5>UOOQO-E;h-E;hO$G]QbO,5>VO)rQYO,5>VOOQO-E;i-E;iO$GgQWO1G4uO$IiQ7^O1G0dO$KdQ7^O1G0dO$M_Q7^O1G0dO$MfQ7^O1G0dO% TQ7^O1G0dO% hQ7^O1G0dO%#oQ7^O1G0dO%#vQ7^O1G0dO%%qQ7^O1G0dO%%xQ7^O1G0dO%'mQ7^O1G0dO%'zQ!LdO<<IyO%(kQ7^O1G0dO%*ZQ7^O'#IdO%,WQ7^O1G0vOOQO'#I{'#I{ONtQYO'#I{OOQO1G1W1G1WO%,_QWO1G1VO%,dQ7^O,5>^OOOO7+&x7+&xOOQ!LS1G3z1G3zOI`QWO7+'oO%,qQWO,5>_O5ZQWO,5>_OOQO-E;q-E;qO%-PQWO1G5TO%-PQWO1G5TO%-XQWO1G5TO%-dQ`O,5>aO%-nQWO,5>aOHSQWO,5>aOOQO-E;s-E;sO%-sQ`O1G5UO%-}QWO1G5UOOQO1G1w1G1wOOQO1G1x1G1xO5RQ!LYO1G1xO$1oQWO1G1xO5RQ!LYO1G1wO%.VQWO1G1yOHSQWO1G1yOOQO1G1z1G1zO5RQ!LYO1G1}O!,vQpO1G1wO#6vQWO1G1xO%.[QWO1G1yO%.dQWO1G1xOI`QWO7+*TOOQ!LS1G/S1G/SO%.oQWO1G/SOOQ!LS7+'T7+'TO%.tQ#tO7+'[OOQ!LS<<Jh<<JhOHSQWO'#HxO%/UQWO,5?kOOQQ<<K]<<K]OHSQWO<<K]O$ iQWO<<K]O%/^QWO<<K]O%/fQ`O<<K]OHSQWO1G1{OOQQ<<Gx<<GxOOQ!LS<<I`<<I`O9qQWO<<GxOOQO,5>j,5>jO%/pQWO,5>jOOQO-E;|-E;|O%/uQWO1G5]O%/}QWO<<KyOOQQ<<Ky<<KyO%0SQWO<<KyO5RQ!LYO<<KyO)rQYO<<K]OHSQWO<<K]OOQQ<<Ke<<KeO$5dQ!LbO<<KeOOQQ<<Kf<<KfO$5nQ`O<<KfO%0XQ&jO'#HzO%0dQWO,5?nONtQYO,5?nOOQQ1G2d1G2dO#MxQ!LrO'#D|O!'QQ&jO'#GhOOQO'#H|'#H|O%0lQ&jO,5=ROOQQ,5=R,5=RO#7gQ&jO'#D|O%0sQ&jO'#D|O%1XQ&jO'#D|O%1cQ&jO'#GhO%1qQWO7+(WO%1vQWO7+(WO%2OQ`O7+(WOOQQ7+(W7+(WOHSQWO7+(WO)rQYO7+(WOHSQWO7+(WO%2YQWO7+(WOOQQ7+(Z7+(ZO5RQ!LYO7+(ZO#6{QWO7+(ZO4wQWO7+(ZO!,vQpO7+(ZO%2hQWO,5>iOOQO-E;{-E;{OOQO'#Gk'#GkO%2sQWO1G5ZO5RQ!LYO<<GoOOQQ<<Go<<GoO%2{QWO<<GoO%3QQWO7+*xO%3VQWO7+*yOOQQ7+(c7+(cO%3[QWO7+(cO%3aQYO7+(cO%3hQWO7+(cO)rQYO7+*xO)rQYO7+*yOOQQ<<LV<<LVOOQQ<<LX<<LXOOQQ-E<O-E<OOOQQ1G3W1G3WO%3mQWO,5=mOOQQ,5=o,5=oO9qQWO<<LbO%3rQWO<<LbONtQYO7+%yOOQO7+%O7+%OO%3wQ7^O1G4{O9qQWO7+%OOOQO1G0O1G0OO%4RQ!LdO1G0SOOQO1G0S1G0SO!-sQYO1G0SO%4]Q!LYO1G0SO9qQWO1G0OO!,vQpO1G0OO%4hQ!LYO1G0SO!'QQ&jO1G0OO%4vQ!LYO1G0SO%5[Q!LrO1G0SO%5fQ&jO1G0OO!'QQ&jO1G0SOOQ!LS<<IQ<<IQOOQ!LS<<I_<<I_O%5tQ!LdO<<NOOOQO7+)a7+)aO%6UQ!LdO7+'[O%8^QbO1G3qO%8hQ7^O,5;xO%8rQ7^O,59fO%:oQ7^O,5;yO%<lQ7^O,5;{O%>iQ7^O,5<ZO%@XQ7^O7+&{O%@`QWO,5?gOOQO7+&q7+&qO%@eQ#tO<<KZOOQO1G3y1G3yO%@uQWO1G3yO%AQQWO1G3yO%A`QWO7+*oO%A`QWO7+*oOHSQWO1G3{O%AhQ`O1G3{O%ArQWO7+*pOOQO7+'d7+'dO5RQ!LYO7+'dOOQO7+'c7+'cO$1oQWO7+'eO%AzQ`O7+'eOOQO7+'i7+'iO5RQ!LYO7+'cO$1oQWO7+'dO%BRQWO7+'eOHSQWO7+'eO#6vQWO7+'dO%BWQ#tO<<MoOOQ!LS7+$n7+$nO%BbQ`O,5>dOOQO-E;v-E;vO$ iQWOAN@wOOQQAN@wAN@wOHSQWOAN@wO%BlQ!LbO7+'gOOQQAN=dAN=dO5ZQWO1G4UO%ByQWO7+*wO5RQ!LYOANAeO%CRQWOANAeOOQQANAeANAeO%CWQWOAN@wO%C`Q`OAN@wOOQQANAPANAPOOQQANAQANAQO%CjQWO,5>fOOQO-E;x-E;xO%CuQ7^O1G5YO#6{QWO,5=SO4wQWO,5=SO!,vQpO,5=SOOQO-E;z-E;zOOQQ1G2m1G2mO$>iQ!LrO,5:hO!'QQ&jO,5=SO%DPQ&jO,5=SO%D_Q&jO,5:hOOQQ<<Kr<<KrOHSQWO<<KrO%1qQWO<<KrO%DsQWO<<KrO%D{Q`O<<KrO)rQYO<<KrOHSQWO<<KrOOQQ<<Ku<<KuO5RQ!LYO<<KuO#6{QWO<<KuO4wQWO<<KuO%EVQ&jO1G4TO%E[QWO7+*uOOQQAN=ZAN=ZO5RQ!LYOAN=ZOOQQ<<Nd<<NdOOQQ<<Ne<<NeOOQQ<<K}<<K}O%EdQWO<<K}O%EiQYO<<K}O%EpQWO<<NdO%EuQWO<<NeOOQQ1G3X1G3XOOQQANA|ANA|O9qQWOANA|O%EzQ7^O<<IeOOQO<<Hj<<HjOOQO7+%n7+%nO%4RQ!LdO7+%nO!-sQYO7+%nOOQO7+%j7+%jO9qQWO7+%jO%FUQ!LYO7+%nO!,vQpO7+%jO%FaQ!LYO7+%nO!'QQ&jO7+%jO%FoQ!LYO7+%nO%GTQ!LdO<<KZO%I]Q7^O<<IyO%IdQ7^O1G1nO%KSQ7^O1G2PO%MPQ7^O1G2ROOQO1G5R1G5ROOQO7+)e7+)eO%N|QWO7+)eO& XQWO<<NZO& aQ`O7+)gOOQO<<KO<<KOO5RQ!LYO<<KPO$1oQWO<<KPOOQO<<J}<<J}O5RQ!LYO<<KOO& kQ`O<<KPO$1oQWO<<KOOOQQG26cG26cO$ iQWOG26cOOQO7+)p7+)pOOQQG27PG27PO5RQ!LYOG27POHSQWOG26cONtQYO1G4QO& rQWO7+*tO5RQ!LYO1G2nO#6{QWO1G2nO4wQWO1G2nO!,vQpO1G2nO!'QQ&jO1G2nO%5[Q!LrO1G0SO& zQ&jO1G2nO%1qQWOANA^OOQQANA^ANA^OHSQWOANA^O&!YQWOANA^O&!bQ`OANA^OOQQANAaANAaO5RQ!LYOANAaO#6{QWOANAaOOQO'#Gl'#GlOOQO7+)o7+)oOOQQG22uG22uOOQQANAiANAiO&!lQWOANAiOOQQANDOANDOOOQQANDPANDPO&!qQYOG27hOOQO<<IY<<IYO%4RQ!LdO<<IYOOQO<<IU<<IUO!-sQYO<<IYO9qQWO<<IUO&&lQ!LYO<<IYO!,vQpO<<IUO&&wQ!LYO<<IYO&'VQ7^O7+'[OOQO<<MP<<MPOOQOAN@kAN@kO5RQ!LYOAN@kOOQOAN@jAN@jO$1oQWOAN@kO5RQ!LYOAN@jOOQQLD+}LD+}OOQQLD,kLD,kO$ iQWOLD+}O&(uQ7^O7+)lOOQO7+(Y7+(YO5RQ!LYO7+(YO#6{QWO7+(YO4wQWO7+(YO!,vQpO7+(YO!'QQ&jO7+(YOOQQG26xG26xO%1qQWOG26xOHSQWOG26xOOQQG26{G26{O5RQ!LYOG26{OOQQG27TG27TO9qQWOLD-SOOQOAN>tAN>tO%4RQ!LdOAN>tOOQOAN>pAN>pO!-sQYOAN>tO9qQWOAN>pO&)PQ!LYOAN>tO&)[Q7^O<<KZOOQOG26VG26VO5RQ!LYOG26VOOQOG26UG26UOOQQ!$( i!$( iOOQO<<Kt<<KtO5RQ!LYO<<KtO#6{QWO<<KtO4wQWO<<KtO!,vQpO<<KtOOQQLD,dLD,dO%1qQWOLD,dOOQQLD,gLD,gOOQQ!$(!n!$(!nOOQOG24`G24`O%4RQ!LdOG24`OOQOG24[G24[O!-sQYOG24`OOQOLD+qLD+qOOQOANA`ANA`O5RQ!LYOANA`O#6{QWOANA`O4wQWOANA`OOQQ!$(!O!$(!OOOQOLD)zLD)zO%4RQ!LdOLD)zOOQOG26zG26zO5RQ!LYOG26zO#6{QWOG26zOOQO!$'Mf!$'MfOOQOLD,fLD,fO5RQ!LYOLD,fOOQO!$(!Q!$(!QOJ}QYO'#DmO&*zQ!LdO'#IfO&+_Q!LdO'#IfOJ}QYO'#DeO&+fQ!LdO'#CgO&,PQbO'#CgO&,aQYO,5:nOFVQYO,5:nOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xOJ}QYO,5:xONtQYO'#HrO&.^QWO,5;xO&.fQWO,5:xOJ}QYO,5;[O!(jQWO'#CzO!(jQWO'#CzOHSQWO'#F_O&.fQWO'#F_OHSQWO'#FaO&.fQWO'#FaOHSQWO'#FoO&.fQWO'#FoONtQYO,5?aO&,aQYO1G0YOFVQYO1G0YO&/mQ7^O'#CgO&/wQ7^O'#IfO&0RQ7^O'#IfOJ}QYO1G1aOHSQWO,5<eO&.fQWO,5<eOHSQWO,5<gO&.fQWO,5<gOHSQWO,5<SO&.fQWO,5<SO&,aQYO1G1bOFVQYO1G1bO&,aQYO1G1bO&,aQYO1G0YOJ}QYO7+&_OHSQWO1G1pO&.fQWO1G1pO&,aQYO7+&|OFVQYO7+&|O&,aQYO7+&|O&,aQYO7+%tOFVQYO7+%tO&,aQYO7+%tOHSQWO7+'oO&.fQWO7+'oO&0YQWO'#ESO&0_QWO'#ESO&0dQWO'#ESO&0lQWO'#ESO&0tQWO'#EpO!-sQYO'#DeO!-sQYO'#DmO&0yQWO'#IuO&1UQWO'#IsO&1aQWO,5:nO&1fQWO,5:nO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5:xO!-sQYO,5;[O&1kQ#tO,5;uO&1rQWO'#FhO&1wQWO'#FhO&1|QWO,5;vO&2UQWO,5;vO&2^QWO,5;vO&2fQ!LdO,5:PO&2sQWO,5:nO&2xQWO,5:nO&3QQWO,5:nO&3YQWO,5:nO&5UQ!LdO1G0dO&5cQ!LdO1G0dO&7jQ!LdO1G0dO&7qQ!LdO1G0dO&9rQ!LdO1G0dO&9yQ!LdO1G0dO&;zQ!LdO1G0dO&<RQ!LdO1G0dO&>SQ!LdO1G0dO&>ZQ!LdO1G0dO&>bQ7^O1G0sO&>iQ!LdO1G0vO!-sQYO1G1aO&>vQWO,5<UO&>{QWO,5<UO&?QQWO1G1bO&?VQWO1G1bO&?[QWO1G1bO&?aQWO1G0YO&?fQWO1G0YO&?kQWO1G0YO!-sQYO7+&_O&?pQ!LdO7+&{O&?}Q#tO1G2TO&@UQ#tO1G2TO&@]Q!LdO<<IyO&,aQYO,5:nO&B^Q!LdO'#IgO&BqQWO'#EpO3mQWO'#F]O4wQWO'#F[O4wQWO'#F[O4wQWO'#F[O5qQWO'#ESO5qQWO'#ESO5qQWO'#ESOJ}QYO,5;XO&BvQ#tO,5;uO!(tQWO'#FjO!(tQWO'#FjO&B}Q7^O1G0sOI`QWO,5<iOI`QWO,5<iONtQYO'#DmONtQYO'#DeONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5:xONtQYO,5;[ONtQYO1G1aONtQYO7+&_O&CUQWO'#ESO&CZQWO'#ESO&CcQWO'#EpO&ChQ#tO,5;uO&CoQ7^O1G0sO3mQWO'#F]OJ}QYO,5;XO&CvQ7^O'#IgO&DWQ7^O,5:PO&DeQ7^O1G0dO&FfQ7^O1G0dO&FmQ7^O1G0dO&HbQ7^O1G0dO&HuQ7^O1G0dO&KSQ7^O1G0dO&KZQ7^O1G0dO&M[Q7^O1G0dO&McQ7^O1G0dO' WQ7^O1G0dO' kQ7^O1G0vO' xQ7^O7+&{O'!VQ7^O<<IyO3mQWO'#F]OJ}QYO,5;X",
      stateData: "'#V~O&|OSSOSTOS~OPTOQTOWwO]bO^gOamOblOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!OSO!YjO!_UO!bTO!cTO!dTO!eTO!fTO!ikO#jnO#n]O$toO$vrO$xpO$ypO$zqO$}sO%PtO%SuO%TuO%VvO%dxO%jyO%lzO%n{O%p|O%s}O%y!OO%}!PO&P!QO&R!RO&T!SO&V!TO'OPO'[QO'p`O~OPZXYZX^ZXiZXqZXrZXtZX|ZX![ZX!]ZX!_ZX!eZX!tZX#OcX#RZX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#`ZX#eZX&zZX'[ZX'dZX'kZX'lZX~O!W$aX~P$tO&w!VO&x!UO&y!XO~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!O!`O!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'O!YO'[QO'p`O~O{!^O|!ZOy'_Py'hP~P'^O}!jO~P]OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!O!`O!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'O8UO'[QO'p`O~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!O!`O!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'[QO'p`O~O{!oO!|!rO!}!oO'O8VO!^'eP~P+oO#O!sO~O!W!tO#O!sO~OP#ZOY#aOi#OOq!xOr!xOt!yO|#_O![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO#`#WO'[QO'd#XO'k!zO'l!{O^'YX&z'YX!^'YXy'YX!O'YX$u'YX!W'YX~O!t#bO#e#bOP'ZXY'ZX^'ZXi'ZXq'ZXr'ZXt'ZX|'ZX!['ZX!]'ZX!_'ZX!e'ZX#R'ZX#S'ZX#T'ZX#U'ZX#V'ZX#W'ZX#Y'ZX#Z'ZX#]'ZX#_'ZX#`'ZX'['ZX'd'ZX'k'ZX'l'ZX~O#X'ZX&z'ZXy'ZX!^'ZX'^'ZX!O'ZX$u'ZX!W'ZX~P0gO!t#bO~O#p#cO#v#gO~O!O#hO#n]O#y#iO#{#kO~O]#nOg#zOi#oOj#nOk#nOm#{Oo#|Ot#tO!O#uO!Y$RO!_#rO!}$SO#j$PO$S#}O$U$OO$X$QO'O#mO'S'UP~O!_$TO~O!W$VO~O^$WO&z$WO~O'O$[O~O!_$TO'O$[O'P$^O'T$_O~Ob$fO!_$TO'O$[O~O]$nOq$jO!O$gO!_$iO$v$mO'O$[O'P$^O['xP~O!i$oO~Ot$pO!O$qO'O$[O~Ot$pO!O$qO%P$uO'O$[O~O'O$vO~O$vrO$xpO$ypO$zqO$}sO%PtO%SuO%TuO~Oa%POb%OO!i$|O$t$}O%X${O~P7YOa%SOblO!O%RO!ikO$toO$xpO$ypO$zqO$}sO%PtO%SuO%TuO%VvO~O_%VO!t%YO$v%TO'P$^O~P8XO!_%ZO!b%_O~O!_%`O~O!OSO~O^$WO&v%hO&z$WO~O^$WO&v%kO&z$WO~O^$WO&v%mO&z$WO~O&w!VO&x!UO&y%qO~OPZXYZXiZXqZXrZXtZX|ZX|cX![ZX!]ZX!_ZX!eZX!tZX!tcX#OcX#RZX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#`ZX#eZX'[ZX'dZX'kZX'lZX~OyZXycX~P:tO{%sOy&[X|&[X~P)rO|!ZOy'_X~OP#ZOY#aOi#OOq!xOr!xOt!yO|!ZO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO#`#WO'[QO'd#XO'k!zO'l!{O~Oy'_X~P=kOy%xO~Ot%{O!R&VO!S&OO!T&OO'P$^O~O]%|Oj%|O{&PO'X%yO}'`P}'jP~P?nOy'gX|'gX!W'gX!^'gX'd'gX~O!t'gX#O!wX}'gX~P@gO!t&WOy'iX|'iX~O|&XOy'hX~Oy&ZO~O!t#bO~P@gOR&_O!O&[O!j&^O'O$[O~Oq$jO!_$iO~O}&dO~P]Oq!xOr!xOt!yO!]!vO!_!wO'[QOP!aaY!aai!aa|!aa![!aa!e!aa#R!aa#S!aa#T!aa#U!aa#V!aa#W!aa#X!aa#Y!aa#Z!aa#]!aa#_!aa#`!aa'd!aa'k!aa'l!aa~O^!aa&z!aay!aa!^!aa'^!aa!O!aa$u!aa!W!aa~PBeO!^&eO~O!W!tO!t&gO'd&fO|'fX^'fX&z'fX~O!^'fX~PD}O|&kO!^'eX~O!^&mO~Ot$pO!O$qO!}&nO'O$[O~OPTOQTO]bOa!hOb!gOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!OSO!YjO!_UO!bTO!cTO!dTO!eTO!fTO!i!fO#j!iO#n]O'O8UO'[QO'p`O~O]#nOg#zOi#oOj#nOk#nOm#{Oo8iOt#tO!O#uO!Y:yO!_#rO!}8oO#j$PO$S8kO$U8mO$X$QO'O&qO~O#O&sO~O]#nOg#zOi#oOj#nOk#nOm#{Oo#|Ot#tO!O#uO!Y$RO!_#rO!}$SO#j$PO$S#}O$U$OO$X$QO'O&qO~O'S'bP~PI`O{&wO!^'cP~P)rO'X&yO~OP8QOQ8QO]bOa:tOb!gOgbOi8QOjbOkbOm8QOo8QOtROvbOwbOxbO!O!`O!Y8TO!_UO!b8QO!c8QO!d8QO!e8QO!f8QO!i!fO#j!iO#n]O'O'XO'[QO'p:pO~O!_!wO~O|#_O^$Qa&z$Qa!^$Qay$Qa!O$Qa$u$Qa!W$Qa~O!W'aO!O'mX#m'mX#p'mX#v'mX~Oq'bO~PMkOq'bO!O'mX#m'mX#p'mX#v'mX~O!O'dO#m'hO#p'cO#v'iO~OP;OOQ;OO]bOa:vOb!gOgbOi;OOjbOkbOm;OOo;OOtROvbOwbOxbO!O!`O!Y;PO!_UO!b;OO!c;OO!d;OO!e;OO!f;OO!i!fO#j!iO#n]O'O'XO'[QO'p;vO~O{'lO~PNtO#p#cO#v'oO~Oq$YXt$YX!]$YX'd$YX'k$YX'l$YX~OReX|eX!teX'SeX'S$YX~P!#QOj'qO~Oq'sOt'tO'd#XO'k'vO'l'xO~O'S'rO~P!$OO'S'{O~O]#nOg#zOi#oOj#nOk#nOm#{Oo8iOt#tO!O#uO!Y:yO!_#rO!}8oO#j$PO$S8kO$U8mO$X$QO~O{(PO'O'|O!^'qP~P!$mO#O(RO~O{(VO'O(SOy'rP~P!$mO^(`Oi(eOt(]O!R(cO!S([O!T([O!_(YO!q(dO$l(_O'P$^O'X(XO~O}(bO~P!&bO!]!vOq'WXt'WX'd'WX'k'WX'l'WX|'WX!t'WX~O'S'WX#c'WX~P!'^OR(hO!t(gO|'VX'S'VX~O|(iO'S'UX~O'O(kO~O!_(pO~O!_(YO~Ot$pO{!oO!O$qO!|!rO!}!oO'O$[O!^'eP~O!W!tO#O(tO~OP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO#`#WO'[QO'd#XO'k!zO'l!{O~O^!Xa|!Xa&z!Xay!Xa!^!Xa'^!Xa!O!Xa$u!Xa!W!Xa~P!)jOR(|O!O&[O!j({O$u(zO'T$_O~O'O$vO'S'UP~O!W)PO!O'RX^'RX&z'RX~O!_$TO'T$_O~O!_$TO'O$[O'T$_O~O!W!tO#O&sO~O'O)XO}'yP~O|)]O['xX~OP9eOQ9eO]bOa:uOb!gOgbOi9eOjbOkbOm9eOo9eOtROvbOwbOxbO!O!`O!Y9dO!_UO!b9eO!c9eO!d9eO!e9eO!f9eO!i!fO#j!iO#n]O'O8UO'[QO'p;eO~OY)aO~O[)bO~O!O$gO'O$[O'P$^O['xP~Ot$pO{)gO!O$qO'O$[Oy'hP~O]&SOj&SO{)hO'X&yO}'jP~O|)iO^'uX&z'uX~O!t)mO'T$_O~OR)pO!O#uO'T$_O~O!O)rO~Oq)tO!OSO~O!i)yO~Ob*OO~O'O(kO}'wP~Ob$fO~O$vrO'O$vO~P8XOY*UO[*TO~OPTOQTO]bOamOblOgbOiTOjbOkbOmTOoTOtROvbOwbOxbO!YjO!_UO!bTO!cTO!dTO!eTO!fTO!ikO#n]O$toO'[QO'p`O~O!O!`O#j!iO'O8UO~P!2tO[*TO^$WO&z$WO~O^*YO$x*[O$y*[O$z*[O~P)rO!_%ZO~O%j*aO~O!O*cO~O%z*fO%{*eOP%xaQ%xaW%xa]%xa^%xaa%xab%xag%xai%xaj%xak%xam%xao%xat%xav%xaw%xax%xa!O%xa!Y%xa!_%xa!b%xa!c%xa!d%xa!e%xa!f%xa!i%xa#j%xa#n%xa$t%xa$v%xa$x%xa$y%xa$z%xa$}%xa%P%xa%S%xa%T%xa%V%xa%d%xa%j%xa%l%xa%n%xa%p%xa%s%xa%y%xa%}%xa&P%xa&R%xa&T%xa&V%xa&u%xa'O%xa'[%xa'p%xa}%xa%q%xa_%xa%v%xa~O'O*iO~O'^*lO~Oy&[a|&[a~P!)jO|!ZOy'_a~Oy'_a~P=kO|&XOy'ha~O|sX|!UX}sX}!UX!WsX!W!UX!_!UX!tsX'T!UX~O!W*sO!t*rO|!{X|'aX}!{X}'aX!W'aX!_'aX'T'aX~O!W*uO!_$TO'T$_O|!QX}!QX~O]%zOj%zOt%{O'X(XO~OP;OOQ;OO]bOa:vOb!gOgbOi;OOjbOkbOm;OOo;OOtROvbOwbOxbO!O!`O!Y;PO!_UO!b;OO!c;OO!d;OO!e;OO!f;OO!i!fO#j!iO#n]O'[QO'p;vO~O'O8tO~P!<lO|*yO}'`X~O}*{O~O!W*sO!t*rO|!{X}!{X~O|*|O}'jX~O}+OO~O]%zOj%zOt%{O'P$^O'X(XO~O!S+PO!T+PO~P!?gOt$pO{+SO!O$qO'O$[Oy&aX|&aX~O^+WO!R+ZO!S+VO!T+VO!m+]O!n+[O!o+[O!q+^O'P$^O'X(XO~O}+YO~P!@hOR+cO!O&[O!j+bO~O!t+hO|'fa!^'fa^'fa&z'fa~O!W!tO~P!AlO|&kO!^'ea~Ot$pO{+kO!O$qO!|+mO!}+kO'O$[O|&cX!^&cX~O#O!sa|!sa!^!sa!t!sa!O!sa^!sa&z!say!sa~P!$OO#O'WXP'WXY'WX^'WXi'WXr'WX!['WX!_'WX!e'WX#R'WX#S'WX#T'WX#U'WX#V'WX#W'WX#X'WX#Y'WX#Z'WX#]'WX#_'WX#`'WX&z'WX'['WX!^'WXy'WX!O'WX$u'WX'^'WX!W'WX~P!'^O|+vO'S'bX~P!$OO'S+xO~O|+yO!^'cX~P!)jO!^+|O~Oy+}O~OP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO'[QOY#Qi^#Qii#Qi|#Qi![#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&z#Qi'd#Qi'k#Qi'l#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~O#R#Qi~P!FYO#R!|O~P!FYOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O'[QOY#Qi^#Qi|#Qi![#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&z#Qi'd#Qi'k#Qi'l#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~Oi#Qi~P!HtOi#OO~P!HtOP#ZOi#OOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO'[QO^#Qi|#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&z#Qi'd#Qi'k#Qi'l#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~OY#Qi![#Qi#W#Qi#X#Qi#Y#Qi~P!K`OY#aO![#QO#W#QO#X#QO#Y#QO~P!K`OP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO'[QO^#Qi|#Qi#]#Qi#_#Qi#`#Qi&z#Qi'd#Qi'l#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~O'k#Qi~P!NWO'k!zO~P!NWOP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO'[QO'k!zO^#Qi|#Qi#_#Qi#`#Qi&z#Qi'd#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~O'l#Qi~P#!rO'l!{O~P#!rOP#ZOY#aOi#OOq!xOr!xOt!yO![#QO!]!vO!_!wO!e#ZO#R!|O#S!}O#T!}O#U!}O#V#PO#W#QO#X#QO#Y#QO#Z#RO#]#TO#_#VO'[QO'k!zO'l!{O~O^#Qi|#Qi#`#Qi&z#Qi'd#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~P#%^OPZXYZXiZXqZXrZXtZX![ZX!]ZX!_ZX!eZX!tZX#OcX#RZX#SZX#TZX#UZX#VZX#WZX#XZX#YZX#ZZX#]ZX#_ZX#`ZX#eZX'[ZX'dZX'kZX'lZX|ZX}ZX~O#cZX~P#'qOP#ZOY8gOi8[Oq!xOr!xOt!yO![8^O!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO#V8]O#W8^O#X8^O#Y8^O#Z8_O#]8aO#_8cO#`8dO'[QO'd#XO'k!zO'l!{O~O#c,PO~P#){OP'ZXY'ZXi'ZXq'ZXr'ZXt'ZX!['ZX!]'ZX!_'ZX!e'ZX#R'ZX#S'ZX#T'ZX#U'ZX#V'ZX#W'ZX#X'ZX#Y'ZX#Z'ZX#]'ZX#_'ZX#`'ZX#c'ZX'['ZX'd'ZX'k'ZX'l'ZX~O!t8hO#e8hO~P#+vO^&fa|&fa&z&fa!^&fa'^&fay&fa!O&fa$u&fa!W&fa~P!)jOP#QiY#Qi^#Qii#Qir#Qi|#Qi![#Qi!]#Qi!_#Qi!e#Qi#R#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi&z#Qi'[#Qiy#Qi!^#Qi'^#Qi!O#Qi$u#Qi!W#Qi~P!$OO^#di|#di&z#diy#di!^#di'^#di!O#di$u#di!W#di~P!)jO#p,RO~O#p,SO~O!W'aO!t,TO!O#tX#m#tX#p#tX#v#tX~O{,UO~O!O'dO#m,WO#p'cO#v,XO~OP#ZOY8gOi;SOq!xOr!xOt!yO|8eO![;UO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO#W;UO#X;UO#Y;UO#Z;VO#];XO#_;ZO#`;[O'[QO'd#XO'k!zO'l!{O}'YX~O},YO~O#v,[O~O],_Oj,_Oy,`O~O|cX!WcX!^cX!^$YX'dcX~P!#QO!^,fO~P!$OO|,gO!W!tO'd&fO!^'qX~O!^,lO~Oy$YX|$YX!W$aX~P!#QO|,nOy'rX~P!$OO!W,pO~Oy,rO~O{(PO'O$[O!^'qP~Oi,vO!W!tO!_$TO'T$_O'd&fO~O!W)PO~O},|O~P!&bO!S,}O!T,}O'P$^O'X(XO~Ot-PO'X(XO~O!q-QO~O'O$vO|&kX'S&kX~O|(iO'S'Ua~Oq-VOr-VOt-WO'dna'kna'lna|na!tna~O'Sna#cna~P#8XOq'sOt'tO'd$Ra'k$Ra'l$Ra|$Ra!t$Ra~O'S$Ra#c$Ra~P#8}Oq'sOt'tO'd$Ta'k$Ta'l$Ta|$Ta!t$Ta~O'S$Ta#c$Ta~P#9pO]-XO~O#O-YO~O'S$ca|$ca#c$ca!t$ca~P!$OO#O-[O~OR-eO!O&[O!j-dO$u-cO~O'S-fO~O]#nOi#oOj#nOk#nOm#{Oo8iOt#tO!O#uO!Y:yO!_#rO!}8oO#j$PO$S8kO$U8mO$X$QO~Og-hO'O-gO~P#;gO!W)PO!O'Ra^'Ra&z'Ra~O#O-mO~OYZX|cX}cX~O|-oO}'yX~O}-qO~OY-rO~O!O$gO'O$[O[&sX|&sX~O|)]O['xa~OP#ZOY#aOi9lOq!xOr!xOt!yO![9nO!]!vO!_!wO!e#ZO#R9jO#S9kO#T9kO#U9kO#V9mO#W9nO#X9nO#Y9nO#Z9oO#]9qO#_9sO#`9tO'[QO'd#XO'k!zO'l!{O~O!^-uO~P#>[O]-wO~OY-xO~O[-yO~OR-eO!O&[O!j-dO$u-cO'T$_O~O|)iO^'ua&z'ua~O!t.PO~OR.SO!O#uO~O'X&yO}'vP~OR.^O!O.YO!j.]O$u.[O'T$_O~OY.hO|.fO}'wX~O}.iO~O[.kO^$WO&z$WO~O].lO~O#X.nO%h.oO~P0gO!t#bO#X.nO%h.oO~O^.pO~P)rO^.rO~O%q.vOP%oiQ%oiW%oi]%oi^%oia%oib%oig%oii%oij%oik%oim%oio%oit%oiv%oiw%oix%oi!O%oi!Y%oi!_%oi!b%oi!c%oi!d%oi!e%oi!f%oi!i%oi#j%oi#n%oi$t%oi$v%oi$x%oi$y%oi$z%oi$}%oi%P%oi%S%oi%T%oi%V%oi%d%oi%j%oi%l%oi%n%oi%p%oi%s%oi%y%oi%}%oi&P%oi&R%oi&T%oi&V%oi&u%oi'O%oi'[%oi'p%oi}%oi_%oi%v%oi~O_.|O}.zO%v.{O~P]O!OSO!_/PO~OP$QaY$Qai$Qaq$Qar$Qat$Qa![$Qa!]$Qa!_$Qa!e$Qa#R$Qa#S$Qa#T$Qa#U$Qa#V$Qa#W$Qa#X$Qa#Y$Qa#Z$Qa#]$Qa#_$Qa#`$Qa'[$Qa'd$Qa'k$Qa'l$Qa~O|#_O'^$Qa!^$Qa^$Qa&z$Qa~P#GlOy&[i|&[i~P!)jO|!ZOy'_i~O|&XOy'hi~Oy/TO~OP#ZOY8gOi;SOq!xOr!xOt!yO![;UO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO#W;UO#X;UO#Y;UO#Z;VO#];XO#_;ZO#`;[O'[QO'd#XO'k!zO'l!{O~O|!Qa}!Qa~P#JdO]%zOj%zO{/ZO'X(XO|&]X}&]X~P?nO|*yO}'`a~O]&SOj&SO{)hO'X&yO|&bX}&bX~O|*|O}'ja~Oy'ii|'ii~P!)jO^$WO!W!tO!_$TO!e/fO!t/dO&z$WO'T$_O'd&fO~O}/iO~P!@hO!S/jO!T/jO'P$^O'X(XO~O!R/lO!S/jO!T/jO!q/mO'P$^O'X(XO~O!n/nO!o/nO~P#NyO!O&[O~O!O&[O~P!$OO|'fi!^'fi^'fi&z'fi~P!)jO!t/vO|'fi!^'fi^'fi&z'fi~O|&kO!^'ei~Ot$pO!O$qO!}/xO'O$[O~O#OnaPnaYna^naina![na!]na!_na!ena#Rna#Sna#Tna#Una#Vna#Wna#Xna#Yna#Zna#]na#_na#`na&zna'[na!^nayna!Ona$una'^na!Wna~P#8XO#O$RaP$RaY$Ra^$Rai$Rar$Ra![$Ra!]$Ra!_$Ra!e$Ra#R$Ra#S$Ra#T$Ra#U$Ra#V$Ra#W$Ra#X$Ra#Y$Ra#Z$Ra#]$Ra#_$Ra#`$Ra&z$Ra'[$Ra!^$Ray$Ra!O$Ra$u$Ra'^$Ra!W$Ra~P#8}O#O$TaP$TaY$Ta^$Tai$Tar$Ta![$Ta!]$Ta!_$Ta!e$Ta#R$Ta#S$Ta#T$Ta#U$Ta#V$Ta#W$Ta#X$Ta#Y$Ta#Z$Ta#]$Ta#_$Ta#`$Ta&z$Ta'[$Ta!^$Tay$Ta!O$Ta$u$Ta'^$Ta!W$Ta~P#9pO#O$caP$caY$ca^$cai$car$ca|$ca![$ca!]$ca!_$ca!e$ca#R$ca#S$ca#T$ca#U$ca#V$ca#W$ca#X$ca#Y$ca#Z$ca#]$ca#_$ca#`$ca&z$ca'[$ca!^$cay$ca!O$ca!t$ca$u$ca'^$ca!W$ca~P!$OO|&^X'S&^X~PI`O|+vO'S'ba~O{0QO|&_X!^&_X~P)rO|+yO!^'ca~O|+yO!^'ca~P!)jO#c!aa}!aa~PBeO#c!Xa~P#){O!O0eO#n]O#u0dO~O}0iO~O^#}q|#}q&z#}qy#}q!^#}q'^#}q!O#}q$u#}q!W#}q~P!)jOy0jO~O],_Oj,_O~Oq'sOt'tO'l'xO'd$mi'k$mi|$mi!t$mi~O'S$mi#c$mi~P$-}Oq'sOt'tO'd$oi'k$oi'l$oi|$oi!t$oi~O'S$oi#c$oi~P$.pO#c0kO~P!$OO{0mO'O$[O|&gX!^&gX~O|,gO!^'qa~O|,gO!W!tO!^'qa~O|,gO!W!tO'd&fO!^'qa~O'S$[i|$[i#c$[i!t$[i~P!$OO{0tO'O(SOy&iX|&iX~P!$mO|,nOy'ra~O|,nOy'ra~P!$OO!W!tO~O!W!tO#X1OO~Oi1SO!W!tO'd&fO~O|'Vi'S'Vi~P!$OO!t1VO|'Vi'S'Vi~P!$OO!^1YO~O|1]O!O'sX~P!$OO!O&[O$u1`O~O!O&[O$u1`O~P!$OO!O$YX$jZX^$YX&z$YX~P!#QO$j1dOqfXtfX!OfX'dfX'kfX'lfX^fX&zfX~O$j1dO~O'O)XO|&rX}&rX~O|-oO}'ya~O[1lO~O]1oO~OR1qO!O&[O!j1pO$u1`O~O^$WO&z$WO~P!$OO!O#uO~P!$OO|1vO!t1xO}'vX~O}1yO~Ot(]O!R2SO!S1{O!T1{O!m2RO!n2QO!o2QO!q2PO'P$^O'X(XO~O}2OO~P$6VOR2ZO!O.YO!j2YO$u2XO~OR2ZO!O.YO!j2YO$u2XO'T$_O~O'O(kO|&qX}&qX~O|.fO}'wa~O'X2dO~O]2fO~O[2hO~O!^2kO~P)rO^2mO~O^2mO~P)rO#X2oO%h2pO~PD}O_.|O}2tO%v.{O~P]O!W2vO~O%{2wOP%xqQ%xqW%xq]%xq^%xqa%xqb%xqg%xqi%xqj%xqk%xqm%xqo%xqt%xqv%xqw%xqx%xq!O%xq!Y%xq!_%xq!b%xq!c%xq!d%xq!e%xq!f%xq!i%xq#j%xq#n%xq$t%xq$v%xq$x%xq$y%xq$z%xq$}%xq%P%xq%S%xq%T%xq%V%xq%d%xq%j%xq%l%xq%n%xq%p%xq%s%xq%y%xq%}%xq&P%xq&R%xq&T%xq&V%xq&u%xq'O%xq'[%xq'p%xq}%xq%q%xq_%xq%v%xq~O|!{i}!{i~P#JdO!t2yO|!{i}!{i~O|!Qi}!Qi~P#JdO^$WO!t3QO&z$WO~O^$WO!W!tO!t3QO&z$WO~O^$WO!W!tO!_$TO!e3UO!t3QO&z$WO'T$_O'd&fO~O!S3VO!T3VO'P$^O'X(XO~O!R3YO!S3VO!T3VO!q3ZO'P$^O'X(XO~O^$WO!W!tO!e3UO!t3QO&z$WO'd&fO~O|'fq!^'fq^'fq&z'fq~P!)jO|&kO!^'eq~O#O$miP$miY$mi^$mii$mir$mi![$mi!]$mi!_$mi!e$mi#R$mi#S$mi#T$mi#U$mi#V$mi#W$mi#X$mi#Y$mi#Z$mi#]$mi#_$mi#`$mi&z$mi'[$mi!^$miy$mi!O$mi$u$mi'^$mi!W$mi~P$-}O#O$oiP$oiY$oi^$oii$oir$oi![$oi!]$oi!_$oi!e$oi#R$oi#S$oi#T$oi#U$oi#V$oi#W$oi#X$oi#Y$oi#Z$oi#]$oi#_$oi#`$oi&z$oi'[$oi!^$oiy$oi!O$oi$u$oi'^$oi!W$oi~P$.pO#O$[iP$[iY$[i^$[ii$[ir$[i|$[i![$[i!]$[i!_$[i!e$[i#R$[i#S$[i#T$[i#U$[i#V$[i#W$[i#X$[i#Y$[i#Z$[i#]$[i#_$[i#`$[i&z$[i'[$[i!^$[iy$[i!O$[i!t$[i$u$[i'^$[i!W$[i~P!$OO|&^a'S&^a~P!$OO|&_a!^&_a~P!)jO|+yO!^'ci~OP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO'[QOY#Qii#Qi![#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'd#Qi'k#Qi'l#Qi|#Qi}#Qi~O#R#Qi~P$GoOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO'[QOY#Qii#Qi![#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'd#Qi'k#Qi'l#Qi~O#R8YO~P$IpOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO'[QOY#Qi![#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'd#Qi'k#Qi'l#Qi~Oi#Qi~P$KkOi8[O~P$KkOP#ZOi8[Oq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO#V8]O'[QO#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'd#Qi'k#Qi'l#Qi~OY#Qi![#Qi#W#Qi#X#Qi#Y#Qi~P$MmOY8gO![8^O#W8^O#X8^O#Y8^O~P$MmOP#ZOY8gOi8[Oq!xOr!xOt!yO![8^O!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO#V8]O#W8^O#X8^O#Y8^O#Z8_O'[QO#]#Qi#_#Qi#`#Qi#c#Qi'd#Qi'l#Qi~O'k#Qi~P% {O'k!zO~P% {OP#ZOY8gOi8[Oq!xOr!xOt!yO![8^O!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO#V8]O#W8^O#X8^O#Y8^O#Z8_O#]8aO'[QO'k!zO#_#Qi#`#Qi#c#Qi'd#Qi~O'l#Qi~P%#}O'l!{O~P%#}OP#ZOY8gOi8[Oq!xOr!xOt!yO![8^O!]!vO!_!wO!e#ZO#R8YO#S8ZO#T8ZO#U8ZO#V8]O#W8^O#X8^O#Y8^O#Z8_O#]8aO#_8cO'[QO'k!zO'l!{O~O#`#Qi#c#Qi'd#Qi~P%&PO^#ay|#ay&z#ayy#ay!^#ay'^#ay!O#ay$u#ay!W#ay~P!)jOP#QiY#Qii#Qir#Qi![#Qi!]#Qi!_#Qi!e#Qi#R#Qi#S#Qi#T#Qi#U#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi#c#Qi'[#Qi|#Qi}#Qi~P!$OO!]!vOP'WXY'WXi'WXq'WXr'WXt'WX!['WX!_'WX!e'WX#R'WX#S'WX#T'WX#U'WX#V'WX#W'WX#X'WX#Y'WX#Z'WX#]'WX#_'WX#`'WX#c'WX'['WX'd'WX'k'WX'l'WX|'WX}'WX~O#c#di~P#){O}3iO~O|&fa}&fa#c&fa~P#JdO!W!tO'd&fO|&ga!^&ga~O|,gO!^'qi~O|,gO!W!tO!^'qi~Oy&ia|&ia~P!$OO!W3pO~O|,nOy'ri~P!$OO|,nOy'ri~Oy3vO~O!W!tO#X3|O~Oi3}O!W!tO'd&fO~Oy4PO~O'S$^q|$^q#c$^q!t$^q~P!$OO|1]O!O'sa~O!O&[O$u4UO~O!O&[O$u4UO~P!$OOY4XO~O|-oO}'yi~O]4ZO~O[4[O~O'X&yO|&nX}&nX~O|1vO}'va~O}4iO~P$6VO!R4lO!S4kO!T4kO!q/mO'P$^O'X(XO~O!n4mO!o4mO~P%0sO!S4kO!T4kO'P$^O'X(XO~O!O.YO~O!O.YO$u4oO~O!O.YO$u4oO~P!$OOR4tO!O.YO!j4sO$u4oO~OY4yO|&qa}&qa~O|.fO}'wi~O]4|O~O!^4}O~O!^5OO~O!^5PO~O!^5PO~P)rO^5RO~O!W5UO~O!^5WO~O|'ii}'ii~P#JdO^$WO&z$WO~P#>[O^$WO!t5]O&z$WO~O^$WO!W!tO!t5]O&z$WO~O^$WO!W!tO!e5bO!t5]O&z$WO'd&fO~O!_$TO'T$_O~P%4vO!S5cO!T5cO'P$^O'X(XO~O|'fy!^'fy^'fy&z'fy~P!)jO#O$^qP$^qY$^q^$^qi$^qr$^q|$^q![$^q!]$^q!_$^q!e$^q#R$^q#S$^q#T$^q#U$^q#V$^q#W$^q#X$^q#Y$^q#Z$^q#]$^q#_$^q#`$^q&z$^q'[$^q!^$^qy$^q!O$^q!t$^q$u$^q'^$^q!W$^q~P!$OO|&_i!^&_i~P!)jO|8eO#c$Qa~P#GlOq-VOr-VOt-WOPnaYnaina![na!]na!_na!ena#Rna#Sna#Tna#Una#Vna#Wna#Xna#Yna#Zna#]na#_na#`na#cna'[na'dna'kna'lna|na}na~Oq'sOt'tOP$RaY$Rai$Rar$Ra![$Ra!]$Ra!_$Ra!e$Ra#R$Ra#S$Ra#T$Ra#U$Ra#V$Ra#W$Ra#X$Ra#Y$Ra#Z$Ra#]$Ra#_$Ra#`$Ra#c$Ra'[$Ra'd$Ra'k$Ra'l$Ra|$Ra}$Ra~Oq'sOt'tOP$TaY$Tai$Tar$Ta![$Ta!]$Ta!_$Ta!e$Ta#R$Ta#S$Ta#T$Ta#U$Ta#V$Ta#W$Ta#X$Ta#Y$Ta#Z$Ta#]$Ta#_$Ta#`$Ta#c$Ta'[$Ta'd$Ta'k$Ta'l$Ta|$Ta}$Ta~OP$caY$cai$car$ca![$ca!]$ca!_$ca!e$ca#R$ca#S$ca#T$ca#U$ca#V$ca#W$ca#X$ca#Y$ca#Z$ca#]$ca#_$ca#`$ca#c$ca'[$ca|$ca}$ca~P!$OO#c#}q~P#){O}5jO~O'S$qy|$qy#c$qy!t$qy~P!$OO!W!tO|&gi!^&gi~O!W!tO'd&fO|&gi!^&gi~O|,gO!^'qq~Oy&ii|&ii~P!$OO|,nOy'rq~Oy5qO~P!$OOy5qO~O|'Vy'S'Vy~P!$OO|&la!O&la~P!$OO!O$iq^$iq&z$iq~P!$OO|-oO}'yq~O]5zO~O!O&[O$u5{O~O!O&[O$u5{O~P!$OO!t5|O|&na}&na~O|1vO}'vi~P#JdO!S6SO!T6SO'P$^O'X(XO~O!R6UO!S6SO!T6SO!q3ZO'P$^O'X(XO~O!O.YO$u6XO~O!O.YO$u6XO~P!$OO'X6_O~O|.fO}'wq~O!^6bO~O!^6bO~P)rO!^6dO~O!^6eO~O|!{y}!{y~P#JdO^$WO!t6jO&z$WO~O^$WO!W!tO!t6jO&z$WO~O^$WO!W!tO!e6nO!t6jO&z$WO'd&fO~O#O$qyP$qyY$qy^$qyi$qyr$qy|$qy![$qy!]$qy!_$qy!e$qy#R$qy#S$qy#T$qy#U$qy#V$qy#W$qy#X$qy#Y$qy#Z$qy#]$qy#_$qy#`$qy&z$qy'[$qy!^$qyy$qy!O$qy!t$qy$u$qy'^$qy!W$qy~P!$OO#c#ay~P#){OP$[iY$[ii$[ir$[i![$[i!]$[i!_$[i!e$[i#R$[i#S$[i#T$[i#U$[i#V$[i#W$[i#X$[i#Y$[i#Z$[i#]$[i#_$[i#`$[i#c$[i'[$[i|$[i}$[i~P!$OOq'sOt'tO'l'xOP$miY$mii$mir$mi![$mi!]$mi!_$mi!e$mi#R$mi#S$mi#T$mi#U$mi#V$mi#W$mi#X$mi#Y$mi#Z$mi#]$mi#_$mi#`$mi#c$mi'[$mi'd$mi'k$mi|$mi}$mi~Oq'sOt'tOP$oiY$oii$oir$oi![$oi!]$oi!_$oi!e$oi#R$oi#S$oi#T$oi#U$oi#V$oi#W$oi#X$oi#Y$oi#Z$oi#]$oi#_$oi#`$oi#c$oi'[$oi'd$oi'k$oi'l$oi|$oi}$oi~O!W!tO|&gq!^&gq~O|,gO!^'qy~Oy&iq|&iq~P!$OOy6tO~P!$OO|1vO}'vq~O!S7PO!T7PO'P$^O'X(XO~O!O.YO$u7SO~O!O.YO$u7SO~P!$OO!^7VO~O%{7WOP%x!ZQ%x!ZW%x!Z]%x!Z^%x!Za%x!Zb%x!Zg%x!Zi%x!Zj%x!Zk%x!Zm%x!Zo%x!Zt%x!Zv%x!Zw%x!Zx%x!Z!O%x!Z!Y%x!Z!_%x!Z!b%x!Z!c%x!Z!d%x!Z!e%x!Z!f%x!Z!i%x!Z#j%x!Z#n%x!Z$t%x!Z$v%x!Z$x%x!Z$y%x!Z$z%x!Z$}%x!Z%P%x!Z%S%x!Z%T%x!Z%V%x!Z%d%x!Z%j%x!Z%l%x!Z%n%x!Z%p%x!Z%s%x!Z%y%x!Z%}%x!Z&P%x!Z&R%x!Z&T%x!Z&V%x!Z&u%x!Z'O%x!Z'[%x!Z'p%x!Z}%x!Z%q%x!Z_%x!Z%v%x!Z~O^$WO!t7[O&z$WO~O^$WO!W!tO!t7[O&z$WO~OP$^qY$^qi$^qr$^q![$^q!]$^q!_$^q!e$^q#R$^q#S$^q#T$^q#U$^q#V$^q#W$^q#X$^q#Y$^q#Z$^q#]$^q#_$^q#`$^q#c$^q'[$^q|$^q}$^q~P!$OO|&nq}&nq~P#JdO^$WO!t7pO&z$WO~OP$qyY$qyi$qyr$qy![$qy!]$qy!_$qy!e$qy#R$qy#S$qy#T$qy#U$qy#V$qy#W$qy#X$qy#Y$qy#Z$qy#]$qy#_$qy#`$qy#c$qy'[$qy|$qy}$qy~P!$OO|#_O'^'YX!^'YX^'YX&z'YX~P!)jO'^'YX~P.ZO'^ZXyZX!^ZX%hZX!OZX$uZX!WZX~P$tO!WcX!^ZX!^cX'dcX~P:tOP;OOQ;OO]bOa:vOb!gOgbOi;OOjbOkbOm;OOo;OOtROvbOwbOxbO!OSO!Y;PO!_UO!b;OO!c;OO!d;OO!e;OO!f;OO!i!fO#j!iO#n]O'O'XO'[QO'p;vO~O|8eO}$Qa~O]#nOg#zOi#oOj#nOk#nOm#{Oo8jOt#tO!O#uO!Y:zO!_#rO!}8pO#j$PO$S8lO$U8nO$X$QO'O&qO~O}ZX}cX~P:tO|8eO#c'YX~P#JdO#c'YX~P#2^O#O8WO~O#O8XO~O!W!tO#O8WO~O!W!tO#O8XO~O!t8hO~O!t8qO|'iX}'iX~O!t;]O|'gX}'gX~O#O8rO~O#O8sO~O'S8wO~P!$OO#O8|O~O#O8}O~O!W!tO#O9OO~O!W!tO#O9PO~O!W!tO#O9QO~O!^!Xa^!Xa&z!Xa~P#>[O#O9RO~O!W!tO#O8rO~O!W!tO#O8sO~O!W!tO#O9RO~OP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R9jO'[QOY#Qii#Qi![#Qi!^#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'd#Qi'k#Qi'l#Qi^#Qi&z#Qi~O#S#Qi#T#Qi#U#Qi~P&3bO#S9kO#T9kO#U9kO~P&3bOP#ZOi9lOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R9jO#S9kO#T9kO#U9kO'[QOY#Qi![#Qi!^#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'd#Qi'k#Qi'l#Qi^#Qi&z#Qi~O#V#Qi~P&5pO#V9mO~P&5pOP#ZOY#aOi9lOq!xOr!xOt!yO![9nO!]!vO!_!wO!e#ZO#R9jO#S9kO#T9kO#U9kO#V9mO#W9nO#X9nO#Y9nO'[QO!^#Qi#]#Qi#_#Qi#`#Qi'd#Qi'k#Qi'l#Qi^#Qi&z#Qi~O#Z#Qi~P&7xO#Z9oO~P&7xOP#ZOY#aOi9lOq!xOr!xOt!yO![9nO!]!vO!_!wO!e#ZO#R9jO#S9kO#T9kO#U9kO#V9mO#W9nO#X9nO#Y9nO#Z9oO'[QO'k!zO!^#Qi#_#Qi#`#Qi'd#Qi'l#Qi^#Qi&z#Qi~O#]#Qi~P&:QO#]9qO~P&:QOP#ZOY#aOi9lOq!xOr!xOt!yO![9nO!]!vO!_!wO!e#ZO#R9jO#S9kO#T9kO#U9kO#V9mO#W9nO#X9nO#Y9nO#Z9oO#]9qO'[QO'k!zO'l!{O!^#Qi#`#Qi'd#Qi^#Qi&z#Qi~O#_#Qi~P&<YO#_9sO~P&<YO#c9SO~P#){O!^#di^#di&z#di~P#>[O#O9TO~O#O9UO~O#O9VO~O#O9WO~O#O9XO~O#O9YO~O#O9ZO~O#O9[O~O!^#}q^#}q&z#}q~P#>[O#c9]O~P!$OO#c9^O~P!$OO!^#ay^#ay&z#ay~P#>[OP'ZXY'ZXi'ZXq'ZXr'ZXt'ZX!['ZX!]'ZX!_'ZX!e'ZX#R'ZX#S'ZX#T'ZX#U'ZX#V'ZX#W'ZX#X'ZX#Y'ZX#Z'ZX#]'ZX#_'ZX#`'ZX'['ZX'd'ZX'k'ZX'l'ZX~O!t9uO#e9uO!^'ZX^'ZX&z'ZX~P&@jO!t9uO~O'S:_O~P!$OO#c:hO~P#){O#O:mO~O!W!tO#O:mO~O!t;]O~O'S;^O~P!$OO#c;_O~P#){O!t;]O#e;]O|'ZX}'ZX~P#+vO|!Xa}!Xa#c!Xa~P#JdO#R;QO~P$GoOP#ZOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO'[QOY#Qi|#Qi}#Qi![#Qi#V#Qi#W#Qi#X#Qi#Y#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'd#Qi'k#Qi'l#Qi#c#Qi~Oi#Qi~P&DlOi;SO~P&DlOP#ZOi;SOq!xOr!xOt!yO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO'[QO|#Qi}#Qi#Z#Qi#]#Qi#_#Qi#`#Qi'd#Qi'k#Qi'l#Qi#c#Qi~OY#Qi![#Qi#W#Qi#X#Qi#Y#Qi~P&FtOY8gO![;UO#W;UO#X;UO#Y;UO~P&FtOP#ZOY8gOi;SOq!xOr!xOt!yO![;UO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO#W;UO#X;UO#Y;UO#Z;VO'[QO|#Qi}#Qi#]#Qi#_#Qi#`#Qi'd#Qi'l#Qi#c#Qi~O'k#Qi~P&IYO'k!zO~P&IYOP#ZOY8gOi;SOq!xOr!xOt!yO![;UO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO#W;UO#X;UO#Y;UO#Z;VO#];XO'[QO'k!zO|#Qi}#Qi#_#Qi#`#Qi'd#Qi#c#Qi~O'l#Qi~P&KbO'l!{O~P&KbOP#ZOY8gOi;SOq!xOr!xOt!yO![;UO!]!vO!_!wO!e#ZO#R;QO#S;RO#T;RO#U;RO#V;TO#W;UO#X;UO#Y;UO#Z;VO#];XO#_;ZO'[QO'k!zO'l!{O~O|#Qi}#Qi#`#Qi'd#Qi#c#Qi~P&MjO|#di}#di#c#di~P#JdO|#}q}#}q#c#}q~P#JdO|#ay}#ay#c#ay~P#JdO#n~!]!m!o!|!}'p$S$U$X$j$t$u$v$}%P%S%T%V%X~TS#n'p#p'X'O&|#Sx~",
      goto: "$!b'}PPPPPPP(OP(`P)xPPPP.ZPP.p4p6`6uP6uPPP6uP6uP8dPP8iP9QPPPP>vPPPP>vBdPPPBjDmP>vPGXPPPPIh>vPPPPPKx>vPP! u!!rPPP!!vP!#O!$PP>v>v!'j!+k!1f!1f!5uPPP!5|>vPPPPPPPPP!9rP!;dPP>v!<|P>vP>v>v>v>vP>v!?iPP!C^P!F}!GV!GZ!GZPP!G_!G_P!KOP!KS>v>v!KY!N|6uP6uP6u6uP#!e6u6u#$Z6u6u6u#&^6u6u#&z#(u#(u#(y#(u#)RP#(uP6u#)}6u#+Y6u6u.ZPPP#,hPPP#-Q#-QP#-QP#-g#-QPP#-mP#-dP#-d#.P!!z#-d#.n#.t#.w(O#.z(OP#/R#/R#/RP(OP(OP(OP(OPP(OP#/X#/[P#/[(OPPP(OP(OP(OP(OP(OP(O(O#/`#/j#/p#0O#0U#0[#0f#0l#0v#0|#1[#1b#1h#2O#2e#3x#4W#4^#4d#4j#4p#4z#5Q#5W#5b#5l#5rPPPPPPPP#5xPP#6l#:jPP#;x#<R#<]P#@l#CoP#KgP#Kk#Kn#Kq#K|#LPP#LS#LW#Lu#Mj#Mn#NQPP#NU#N[#N`P#Nc#Ng#Nj$ Y$ p$ u$ x$ {$!R$!U$!Y$!^mgOSi{!k$V%^%a%b%d*^*c.v.yQ$dlQ$knQ%UwS&O!`*yQ&c!gS([#u(aQ)W$fQ)c$mQ)}%OQ+P&VS+V&[+XQ,}(cQ.e*OU/j+Z+[+]S1{.Y1}S3V/l/nU4k2Q2R2SQ5c3YS6S4l4mR7P6U$hZORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9Zx'Z#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;wQ(l#|Q)[$gQ*P%RQ*W%ZQ+q8iQ-i)PQ.m*UQ1i-oQ2b.fQ3c8j!O:n$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h!q;g#h&P'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_pdOSiw{!k$V%T%^%a%b%d*^*c.v.yR*R%V(WVOSTijm{!Q!U!Z!h!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:t:u:v:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wW!aRU!^&PQ$]kQ$clS$hn$mv$rpq!o!r$T$p&X&k&n)g)h)i*[*s+S+k+m/P/xQ$zuQ&`!fQ&b!gS(O#r(YS)U$d$fQ)Y$gQ)f$oQ)x$|Q)|%OQ+f&cQ,k(PQ-n)WQ-s)]Q-v)aQ.`)yS.d)}*OQ0l,gQ1h-oQ1k-rQ1n-xQ2a.eQ3m0mR5x4X!Q$al!g$c$d$f%}&b&c(Z)U)W*v+U+f,w-n/`/g/k1R3T3X5a6mQ(}$]Q)n$wQ)q$xQ){%OQ-z)fQ._)xU.c)|)}*OQ2[.`S2`.d.eQ4f1zQ4x2aS6Q4g4jS6}6R6TQ7g7OR7u7h[#x`$_(i:p;e;vS$wr%TQ$xsQ$ytR)l$u$X#w`!t!v#a#r#t#}$O$S&_'w'y'z(R(V(g(h(z(|)P)m)p+c+v,n,p-Y-c-e.P.S.[.^0k0t1O1V1]1`1d1q2X2Z3p3|4U4o4t5{6X7S8g8k8l8m8n8o8p8x8y8z8{8|8}9T9U9]9^:p:|:};e;vV(m#|8i8jU&S!`$q*|Q&z!xQ)`$jQ,^'sQ.T)rQ1W-VR4b1v(UbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;w%]#^Y!]!l$Z%r%v&v&|&}'O'P'Q'R'S'T'U'V'W'Y']'`'j)_*n*w+Q+g+{,O,Q,]/U/X/u0P0T0U0V0W0X0Y0Z0[0]0^0_0`0c0h2{3O3^3a3g4d5X5[5f6h6y7Y7n7x8R8S8u8v9|:R:S:T:U:V:W:X:Y:Z:[:]:^:i:l:{;d;h;i;j;k;l;m;n;o;p;q;r;s;t;u(VbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wQ&Q!`R/[*yY%z!`&O&V*y+PS(Z#u(aS+U&[+XS,w([(cQ,x(]Q-O(dQ.V)tS/g+V+ZS/k+[+]S/o+^2PQ1R,}Q1T-PQ1U-QS1z.Y1}S3T/j/lQ3W/mQ3X/nS4g1{2SS4j2Q2RS5a3V3YQ5d3ZS6R4k4lQ6T4mQ6m5cS7O6S6UR7h7PlgOSi{!k$V%^%a%b%d*^*c.v.yQ%f!OW&o!s8W8X:mQ)S$bQ)v$zQ)w${Q+d&aW+u&s8r8s9RW-Z(t9O9P9QQ-k)TQ.X)uQ.}*eQ/O*fQ/W*tQ/s+eW1[-[9V9W9XQ1e-lW1f-m9Y9Z9[Q2z/YQ2}/bQ3]/tQ4W1gQ5V2wQ5Y2|Q5^3SQ6f5WQ6i5_Q7Z6kQ7l7WR7o7]%S#]Y!]!l%r%v&v&|&}'O'P'Q'R'S'T'U'V'W'Y']'`'j)_*n*w+Q+g+{,O,]/U/X/u0P0T0U0V0W0X0Y0Z0[0]0^0_0`0c0h2{3O3^3a3g4d5X5[5f6h6y7Y7n7x8R8S8u8v:R:S:T:U:V:W:X:Y:Z:[:]:^:i:l:{;d;i;j;k;l;m;n;o;p;q;r;s;t;uU(f#v&r0bX(x$Z,Q9|;h%S#[Y!]!l%r%v&v&|&}'O'P'Q'R'S'T'U'V'W'Y']'`'j)_*n*w+Q+g+{,O,]/U/X/u0P0T0U0V0W0X0Y0Z0[0]0^0_0`0c0h2{3O3^3a3g4d5X5[5f6h6y7Y7n7x8R8S8u8v:R:S:T:U:V:W:X:Y:Z:[:]:^:i:l:{;d;i;j;k;l;m;n;o;p;q;r;s;t;uQ'[#]W(w$Z,Q9|;hR-](x(UbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wQ%ayQ%bzQ%d|Q%e}R.u*aQ&]!fQ(y$]Q+a&`S-b(})fS/p+_+`W1_-_-`-a-zS3[/q/rU4T1a1b1cU5v4S4^4_Q6v5wR7c6xT+W&[+XS+W&[+XT1|.Y1}S&i!n.sQ,j(OQ,u(ZS/f+U1zQ0q,kS0{,v-OU3U/k/o4jQ3l0lS3z1S1UU5b3W3X6TQ5l3mQ5u3}R6n5dQ!uXS&h!n.sQ(u$UQ)Q$`Q)V$eQ+i&iQ,i(OQ,t(ZQ,y(^Q-j)RQ.a)zS/e+U1zS0p,j,kS0z,u-OQ0},xQ1Q,zQ2^.bW3R/f/k/o4jQ3k0lQ3o0qS3t0{1UQ3{1TQ4v2_W5`3U3W3X6TS5k3l3mQ5p3vQ5s3zQ6O4eQ6]4wS6l5b5dQ6p5lQ6r5qQ6u5uQ6{6PQ7U6^Q7^6nQ7a6tQ7e6|Q7s7fQ7z7tQ8O7{Q9h9aQ9i9bQ9};aQ:b9yQ:c9zQ:d9{Q:e:OQ:f:PR:g:Q$jWORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%Z%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9ZS!um!hx9_#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;w!O9`$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:hQ9h:tQ9i:uQ9}:v!q;`#h&P'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_$jXORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%Z%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9ZQ$Ua!Q$`l!g$c$d$f%}&b&c(Z)U)W*v+U+f,w-n/`/g/k1R3T3X5a6mS$em!hQ)R$aQ)z%OW.b){)|)}*OU2_.c.d.eQ4e1zS4w2`2aU6P4f4g4jQ6^4xU6|6Q6R6TS7f6}7OS7t7g7hQ7{7ux9a#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;w!O9b$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:hQ9y:qQ9z:rQ9{:sQ:O:tQ:P:uQ:Q:v!q;a#h&P'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_$b[OSTij{!Q!U!Z!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9ZU!eRU!^v$rpq!o!r$T$p&X&k&n)g)h)i*[*s+S+k+m/P/xQ*X%Zx9c#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;wQ9g&P!O:o$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h!o;b#h'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_S&T!`$qR/^*|$hZORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9Zx'Z#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;wQ*W%Z!O:n$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h!q;g#h&P'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_!Q#SY!]$Z%r%v&v'T'U'V'W']'`*n+Q+g+{,]/u0P0`3^3a8R8Sh8`'Y,Q0[0]0^0_0c3g5f:]:{;dn9p)_3O5[6h7Y7n7x9|:X:Y:Z:[:^:i:lw;W'j*w/U/X0h2{4d5X6y8u8v;h;o;p;q;r;s;t;u|#UY!]$Z%r%v&v'V'W']'`*n+Q+g+{,]/u0P0`3^3a8R8Sd8b'Y,Q0^0_0c3g5f:]:{;dj9r)_3O5[6h7Y7n7x9|:Z:[:^:i:ls;Y'j*w/U/X0h2{4d5X6y8u8v;h;q;r;s;t;ux#YY!]$Z%r%v&v']'`*n+Q+g+{,]/u0P0`3^3a8R8Sp'z#p&t(s,e,m-R-S/}1Z3j4O9v:j:k:x;c`:w'Y,Q0c3g5f:]:{;d!^:|&p'_'}(T+`+t,q-^-a.O.Q/r/|0r0v1c1s1u2V3`3q3w4Q4V4_4r5e5n5t6ZY:}0a3f5g6o7_f;f)_3O5[6h7Y7n7x9|:^:i:lo;w'j*w/U/X0h2{4d5X6y8u8v;h;s;t;u(UbORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wS#i_#jR0d,T(]^ORSTU_ij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h#j$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,T,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wS#d]#kT'c#f'gT#e]#kT'e#f'g(]_ORSTU_ij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#Y#_#b#h#j$V$i%V%Y%Z%^%`%a%b%d%h%s%{&P&W&^&g&s&w'l'r(t({*Y*^*c*r*u+b+h+y,P,T,U-W-[-d-m.].n.o.p.r.v.y.{/Z/d/v0Q0e1p1x2Y2m2o2p2y3Q4s5R5]5|6j7[7p8Q8T8W8X8Y8Z8[8]8^8_8`8a8b8c8d8e8h8q8r8s8w9O9P9Q9R9S9V9W9X9Y9Z9[9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h:m:w;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;f;wT#i_#jQ#l_R'n#j$jaORSTUij{!Q!U!Z!^!k!s!w!y!|!}#O#P#Q#R#S#T#U#V#W#_#b$V%V%Y%Z%^%`%a%b%d%h%s%{&W&^&g&s&w'r(t({*Y*^*c+b+h+y,P-W-[-d-m.].n.o.p.r.v.y.{/v0Q1p2Y2m2o2p4s5R8X8s9P9W9Zx:q#Y8Q8T8Y8Z8[8]8^8_8`8a8b8c8d8h8w9S:w;f;w!O:r$i/d3Q5]6j7[7p9d9e9j9k9l9m9n9o9p9q9r9s9t9u:_:h!q:s#h&P'l*r*u,U/Z0e1x2y5|8W8e8q8r9O9Q9R9V9X9Y9[:m;O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_#{cOSUi{!Q!U!k!s!y#h$V%V%Y%Z%^%`%a%b%d%h%{&^&s'l(t({*Y*^*c+b,U-W-[-d-m.].n.o.p.r.v.y.{0e1p2Y2m2o2p4s5R8W8X8r8s9O9P9Q9R9V9W9X9Y9Z9[:mx#v`!v#}$O$S'w'y'z(R(g(h+v-Y0k1V:p:|:};e;v!z&r!t#a#r#t&_(V(z(|)P)m)p+c,n,p-c-e.P.S.[.^0t1O1]1`1d1q2X2Z3p3|4U4o4t5{6X7S8k8m8o8x8z8|9T9]Q(q$Qc0b8g8l8n8p8y8{8}9U9^x#s`!v#}$O$S'w'y'z(R(g(h+v-Y0k1V:p:|:};e;vS(^#u(aQ(r$RQ,z(_!z9w!t#a#r#t&_(V(z(|)P)m)p+c,n,p-c-e.P.S.[.^0t1O1]1`1d1q2X2Z3p3|4U4o4t5{6X7S8k8m8o8x8z8|9T9]b9x8g8l8n8p8y8{8}9U9^Q:`:yR:a:zleOSi{!k$V%^%a%b%d*^*c.v.yQ(U#tQ*j%kQ*k%mR0s,n$W#w`!t!v#a#r#t#}$O$S&_'w'y'z(R(V(g(h(z(|)P)m)p+c+v,n,p-Y-c-e.P.S.[.^0k0t1O1V1]1`1d1q2X2Z3p3|4U4o4t5{6X7S8g8k8l8m8n8o8p8x8y8z8{8|8}9T9U9]9^:p:|:};e;vQ)o$xQ.R)qQ1t.QR4a1uT(`#u(aS(`#u(aT1|.Y1}Q)Q$`Q,y(^Q-j)RQ.a)zQ2^.bQ4v2_Q6O4eQ6]4wQ6{6PQ7U6^Q7e6|Q7s7fQ7z7tR8O7{p'w#p&t(s,e,m-R-S/}1Z3j4O9v:j:k:x;c!^8x&p'_'}(T+`+t,q-^-a.O.Q/r/|0r0v1c1s1u2V3`3q3w4Q4V4_4r5e5n5t6ZZ8y0a3f5g6o7_r'y#p&t(s,c,e,m-R-S/}1Z3j4O9v:j:k:x;c!`8z&p'_'}(T+`+t,q-^-a.O.Q/r/z/|0r0v1c1s1u2V3`3q3w4Q4V4_4r5e5n5t6Z]8{0a3f5g5h6o7_pdOSiw{!k$V%T%^%a%b%d*^*c.v.yQ%QvR*Y%ZpdOSiw{!k$V%T%^%a%b%d*^*c.v.yR%QvQ)s$yR-})lqdOSiw{!k$V%T%^%a%b%d*^*c.v.yQ.Z)xS2W._.`W4n2T2U2V2[U6W4p4q4rU7Q6V6Y6ZQ7i7RR7v7jQ%XwR*S%TR2e.hR6`4yS$hn$mR-s)]Q%^xR*^%_R*d%eT.w*c.yQiOQ!kST$Yi!kQ!WQR%p!WQ![RU%t![%u*oQ%u!]R*o%vQ*z&QR/]*zQ+w&tR0O+wQ+z&vS0R+z0SR0S+{Q+X&[R/h+XQ&Y!cQ*p%wT+T&Y*pQ*}&TR/_*}Q&l!pQ+j&jU+n&l+j/yR/y+oQ'g#fR,V'gQ#j_R'm#jQ#`YW'^#`*m3b8fQ*m8RS+p8S8vQ3b8uR8f'jQ,h(OW0n,h0o3n5mU0o,i,j,kS3n0p0qR5m3o#s'u#p&p&t'_'}(T(n(o(s+`+r+s+t,c,d,e,m,q-R-S-^-a.O.Q/r/z/{/|/}0a0r0v1Z1c1s1u2V3`3d3e3f3j3q3w4O4Q4V4_4r5e5g5h5i5n5t6Z6o7_9v:j:k:x;cQ,o(TU0u,o0w3rQ0w,qR3r0vQ(a#uR,{(aQ(j#yR-U(jQ1^-^R4R1^Q)j$sR-|)jQ1w.TS4c1w5}R5}4dQ)u$zR.W)uQ1}.YR4h1}Q.g*PS2c.g4zR4z2eQ-p)YS1j-p4YR4Y1kQ)^$hR-t)^Q.y*cR2s.yWhOSi!kQ%c{Q(v$VQ*]%^Q*_%aQ*`%bQ*b%dQ.t*^S.w*c.yR2r.vQ$XfQ%g!PQ%j!RQ%l!SQ%n!TQ)e$nQ)k$tQ*R%XQ*h%iS.j*S*VQ/Q*gQ/R*jQ/S*kS/c+U1zQ0x,sQ0y,tQ1P,yQ1m-wQ1r.OQ2].aQ2g.lQ2q.uY3P/e/f/k/o4jQ3s0zQ3u0|Q3x1QQ4]1oQ4`1sQ4u2^Q4{2f[5Z3O3R3U3W3X6TQ5o3tQ5r3yQ5y4ZQ6[4vQ6a4|W6g5[5`5b5dQ6q5pQ6s5sQ6w5zQ6z6OQ7T6]U7X6h6l6nQ7`6rQ7b6uQ7d6{Q7k7US7m7Y7^Q7q7aQ7r7eQ7w7nQ7y7sQ7|7xQ7}7zR8P8OQ$blQ&a!gU)T$c$d$fQ*t%}S+e&b&cQ,s(ZS-l)U)WQ/Y*vQ/b+UQ/t+fQ0|,wQ1g-nQ2|/`S3S/g/kQ3y1RS5_3T3XQ6k5aR7]6mW#q`:p;e;vR)O$_Y#y`$_:p;e;vR-T(iQ#p`S&p!t)PQ&t!vQ'_#aQ'}#rQ(T#tQ(n#}Q(o$OQ(s$SQ+`&_Q+r8kQ+s8mQ+t8oQ,c'wQ,d'yQ,e'zQ,m(RQ,q(VQ-R(gQ-S(hd-^(z-c.[1`2X4U4o5{6X7SQ-a(|Q.O)mQ.Q)pQ/r+cQ/z8xQ/{8zQ/|8|Q/}+vQ0a8gQ0r,nQ0v,pQ1Z-YQ1c-eQ1s.PQ1u.SQ2V.^Q3`9TQ3d8lQ3e8nQ3f8pQ3j0kQ3q0tQ3w1OQ4O1VQ4Q1]Q4V1dQ4_1qQ4r2ZQ5e9]Q5g8}Q5h8yQ5i8{Q5n3pQ5t3|Q6Z4tQ6o9UQ7_9^Q9v:pQ:j:|Q:k:}Q:x;eR;c;vlfOSi{!k$V%^%a%b%d*^*c.v.yS!mU%`Q%i!QQ%o!UW&o!s8W8X:mQ&{!yQ'k#hS*V%V%YQ*Z%ZQ*g%hQ*q%{Q+_&^W+u&s8r8s9RQ,Z'lW-Z(t9O9P9QQ-`({Q.q*YQ/q+bQ0g,UQ1X-WW1[-[9V9W9XQ1b-dW1f-m9Y9Z9[Q2U.]Q2i.nQ2j.oQ2l.pQ2n.rQ2u.{Q3h0eQ4^1pQ4q2YQ5Q2mQ5S2oQ5T2pQ6Y4sR6c5R!vYOSUi{!Q!k!y$V%V%Y%Z%^%`%a%b%d%h%{&^({*Y*^*c+b-W-d.].n.o.p.r.v.y.{1p2Y2m2o2p4s5RQ!]RS!lT9eQ$ZjQ%r!ZQ%v!^Q&v!wS&|!|9jQ&}!}Q'O#OQ'P#PQ'Q#QQ'R#RQ'S#SQ'T#TQ'U#UQ'V#VQ'W#WQ'Y#YQ']#_Q'`#bW'j#h'l,U0eQ)_$iQ*n%sS*w&P/ZQ+Q&WQ+g&gQ+{&wS,O8Q;OQ,Q8TQ,]'rQ/U*rQ/X*uQ/u+hQ0P+yS0T8Y;QQ0U8ZQ0V8[Q0W8]Q0X8^Q0Y8_Q0Z8`Q0[8aQ0]8bQ0^8cQ0_8dQ0`,PQ0c8hQ0h8eQ2{8qQ3O/dQ3^/vQ3a0QQ3g8wQ4d1xQ5X2yQ5[3QQ5f9SQ6h5]Q6y5|Q7Y6jQ7n7[Q7x7p[8R!U8X8s9P9W9ZY8S!s&s(t-[-mY8u8W8r9O9V9YY8v9Q9R9X9[:mQ9|9dQ:R9kQ:S9lQ:T9mQ:U9nQ:V9oQ:W9pQ:X9qQ:Y9rQ:Z9sQ:[9tQ:]:wQ:^9uQ:i:_Q:l:hQ:{;fQ;d;wQ;h;PQ;i;RQ;j;SQ;k;TQ;l;UQ;m;VQ;n;WQ;o;XQ;p;YQ;q;ZQ;r;[Q;s;]Q;t;^R;u;_T!VQ!WR!_RR&R!`S%}!`*yS*v&O&VR/`+PR&u!vR&x!wT!qU$TS!pU$TU$spq*[S&j!o!rQ+l&kQ+o&nQ-{)iS/w+k+mR3_/x[!bR!^$p&X)g+Sh!nUpq!o!r$T&k&n)i+k+m/xQ.s*[Q/V*sQ2x/PT9f&P)hT!dR$pS!cR$pS%w!^)gS*x&P)hQ+R&XR/a+ST&U!`$qQ#f]R'p#kT'f#f'gR0f,TT(Q#r(YR(W#tQ-_(zQ1a-cQ2T.[Q4S1`Q4p2XQ5w4UQ6V4oQ6x5{Q7R6XR7j7SlgOSi{!k$V%^%a%b%d*^*c.v.yQ%WwR*R%TV$tpq*[R.U)rR*Q%RQ$lnR)d$mR)Z$gT%[x%_T%]x%_T.x*c.y",
      nodeNames: "⚠ ArithOp ArithOp extends LineComment BlockComment Script ExportDeclaration export Star as VariableName from String ; default FunctionDeclaration async function VariableDefinition TypeParamList TypeDefinition ThisType this LiteralType ArithOp Number BooleanLiteral VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString null super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyNameDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression await yield delete LogicOp BitOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration Privacy static abstract PropertyDeclaration readonly Optional TypeAnnotation Equals FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp in instanceof CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplatExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var const TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try catch finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement",
      maxTerm: 320,
      nodeProps: [
        [NodeProp$1.group, -26,7,14,16,53,173,177,181,182,184,187,190,201,203,209,211,213,215,218,224,228,230,232,234,236,238,239,"Statement",-30,11,13,23,26,27,37,38,39,40,42,47,55,63,69,70,83,84,93,94,109,112,114,115,116,117,119,120,137,138,140,"Expression",-21,22,24,28,30,141,143,145,146,148,149,150,152,153,154,156,157,158,167,169,171,172,"Type",-2,74,78,"ClassItem"],
        [NodeProp$1.closedBy, 36,"]",46,"}",61,")",122,"JSXSelfCloseEndTag JSXEndTag",135,"JSXEndTag"],
        [NodeProp$1.openedBy, 41,"[",45,"{",60,"(",121,"JSXStartTag",130,"JSXStartTag JSXStartCloseTag"]
      ],
      skippedNodes: [0,4,5],
      repeatNodeCount: 27,
      tokenData: "!Ck~R!ZOX$tX^%S^p$tpq%Sqr&rrs'zst$ttu/wuv2Xvw2|wx3zxy:byz:rz{;S{|<S|}<g}!O<S!O!P<w!P!QAT!Q!R!0Z!R![!2j![!]!8Y!]!^!8l!^!_!8|!_!`!9y!`!a!;U!a!b!<{!b!c$t!c!}/w!}#O!>^#O#P$t#P#Q!>n#Q#R!?O#R#S/w#S#T!?c#T#o/w#o#p!?s#p#q!?x#q#r!@`#r#s!@r#s#y$t#y#z%S#z$f$t$f$g%S$g#BY/w#BY#BZ!AS#BZ$IS/w$IS$I_!AS$I_$I|/w$I|$JO!AS$JO$JT/w$JT$JU!AS$JU$KV/w$KV$KW!AS$KW&FU/w&FU&FV!AS&FV~/wW$yR#yWO!^$t!_#o$t#p~$t,T%Zg#yW&|+{OX$tX^%S^p$tpq%Sq!^$t!_#o$t#p#y$t#y#z%S#z$f$t$f$g%S$g#BY$t#BY#BZ%S#BZ$IS$t$IS$I_%S$I_$I|$t$I|$JO%S$JO$JT$t$JT$JU%S$JU$KV$t$KV$KW%S$KW&FU$t&FU&FV%S&FV~$t$T&yS#yW!e#{O!^$t!_!`'V!`#o$t#p~$t$O'^S#Z#v#yWO!^$t!_!`'j!`#o$t#p~$t$O'qR#Z#v#yWO!^$t!_#o$t#p~$t'u(RZ#yW]!ROY'zYZ(tZr'zrs*Rs!^'z!^!_*e!_#O'z#O#P,q#P#o'z#o#p*e#p~'z&r(yV#yWOr(trs)`s!^(t!^!_)p!_#o(t#o#p)p#p~(t&r)gR#u&j#yWO!^$t!_#o$t#p~$t&j)sROr)prs)|s~)p&j*RO#u&j'u*[R#u&j#yW]!RO!^$t!_#o$t#p~$t'm*jV]!ROY*eYZ)pZr*ers+Ps#O*e#O#P+W#P~*e'm+WO#u&j]!R'm+ZROr*ers+ds~*e'm+kU#u&j]!ROY+}Zr+}rs,fs#O+}#O#P,k#P~+}!R,SU]!ROY+}Zr+}rs,fs#O+}#O#P,k#P~+}!R,kO]!R!R,nPO~+}'u,vV#yWOr'zrs-]s!^'z!^!_*e!_#o'z#o#p*e#p~'z'u-fZ#u&j#yW]!ROY.XYZ$tZr.Xrs/Rs!^.X!^!_+}!_#O.X#O#P/c#P#o.X#o#p+}#p~.X!Z.`Z#yW]!ROY.XYZ$tZr.Xrs/Rs!^.X!^!_+}!_#O.X#O#P/c#P#o.X#o#p+}#p~.X!Z/YR#yW]!RO!^$t!_#o$t#p~$t!Z/hT#yWO!^.X!^!_+}!_#o.X#o#p+}#p~.X&i0S_#yW#pS'Xp'O%kOt$ttu/wu}$t}!O1R!O!Q$t!Q![/w![!^$t!_!c$t!c!}/w!}#R$t#R#S/w#S#T$t#T#o/w#p$g$t$g~/w[1Y_#yW#pSOt$ttu1Ru}$t}!O1R!O!Q$t!Q![1R![!^$t!_!c$t!c!}1R!}#R$t#R#S1R#S#T$t#T#o1R#p$g$t$g~1R$O2`S#T#v#yWO!^$t!_!`2l!`#o$t#p~$t$O2sR#yW#e#vO!^$t!_#o$t#p~$t%r3TU'l%j#yWOv$tvw3gw!^$t!_!`2l!`#o$t#p~$t$O3nS#yW#_#vO!^$t!_!`2l!`#o$t#p~$t'u4RZ#yW]!ROY3zYZ4tZw3zwx*Rx!^3z!^!_5l!_#O3z#O#P7l#P#o3z#o#p5l#p~3z&r4yV#yWOw4twx)`x!^4t!^!_5`!_#o4t#o#p5`#p~4t&j5cROw5`wx)|x~5`'m5qV]!ROY5lYZ5`Zw5lwx+Px#O5l#O#P6W#P~5l'm6ZROw5lwx6dx~5l'm6kU#u&j]!ROY6}Zw6}wx,fx#O6}#O#P7f#P~6}!R7SU]!ROY6}Zw6}wx,fx#O6}#O#P7f#P~6}!R7iPO~6}'u7qV#yWOw3zwx8Wx!^3z!^!_5l!_#o3z#o#p5l#p~3z'u8aZ#u&j#yW]!ROY9SYZ$tZw9Swx/Rx!^9S!^!_6}!_#O9S#O#P9|#P#o9S#o#p6}#p~9S!Z9ZZ#yW]!ROY9SYZ$tZw9Swx/Rx!^9S!^!_6}!_#O9S#O#P9|#P#o9S#o#p6}#p~9S!Z:RT#yWO!^9S!^!_6}!_#o9S#o#p6}#p~9S%V:iR!_$}#yWO!^$t!_#o$t#p~$tZ:yR!^R#yWO!^$t!_#o$t#p~$t%R;]U'P!R#U#v#yWOz$tz{;o{!^$t!_!`2l!`#o$t#p~$t$O;vS#R#v#yWO!^$t!_!`2l!`#o$t#p~$t$u<ZSi$m#yWO!^$t!_!`2l!`#o$t#p~$t&i<nR|&a#yWO!^$t!_#o$t#p~$t&i=OVq%n#yWO!O$t!O!P=e!P!Q$t!Q![>Z![!^$t!_#o$t#p~$ty=jT#yWO!O$t!O!P=y!P!^$t!_#o$t#p~$ty>QR{q#yWO!^$t!_#o$t#p~$ty>bZ#yWjqO!Q$t!Q![>Z![!^$t!_!g$t!g!h?T!h#R$t#R#S>Z#S#X$t#X#Y?T#Y#o$t#p~$ty?YZ#yWO{$t{|?{|}$t}!O?{!O!Q$t!Q![@g![!^$t!_#R$t#R#S@g#S#o$t#p~$ty@QV#yWO!Q$t!Q![@g![!^$t!_#R$t#R#S@g#S#o$t#p~$ty@nV#yWjqO!Q$t!Q![@g![!^$t!_#R$t#R#S@g#S#o$t#p~$t,TA[`#yW#S#vOYB^YZ$tZzB^z{HT{!PB^!P!Q!*|!Q!^B^!^!_Da!_!`!+u!`!a!,t!a!}B^!}#O!-s#O#P!/o#P#oB^#o#pDa#p~B^XBe[#yWxPOYB^YZ$tZ!PB^!P!QCZ!Q!^B^!^!_Da!_!}B^!}#OFY#O#PGi#P#oB^#o#pDa#p~B^XCb_#yWxPO!^$t!_#Z$t#Z#[CZ#[#]$t#]#^CZ#^#a$t#a#bCZ#b#g$t#g#hCZ#h#i$t#i#jCZ#j#m$t#m#nCZ#n#o$t#p~$tPDfVxPOYDaZ!PDa!P!QD{!Q!}Da!}#OEd#O#PFP#P~DaPEQUxP#Z#[D{#]#^D{#a#bD{#g#hD{#i#jD{#m#nD{PEgTOYEdZ#OEd#O#PEv#P#QDa#Q~EdPEyQOYEdZ~EdPFSQOYDaZ~DaXF_Y#yWOYFYYZ$tZ!^FY!^!_Ed!_#OFY#O#PF}#P#QB^#Q#oFY#o#pEd#p~FYXGSV#yWOYFYYZ$tZ!^FY!^!_Ed!_#oFY#o#pEd#p~FYXGnV#yWOYB^YZ$tZ!^B^!^!_Da!_#oB^#o#pDa#p~B^,TH[^#yWxPOYHTYZIWZzHTz{Ki{!PHT!P!Q!)j!Q!^HT!^!_Mt!_!}HT!}#O!%e#O#P!(x#P#oHT#o#pMt#p~HT,TI]V#yWOzIWz{Ir{!^IW!^!_Jt!_#oIW#o#pJt#p~IW,TIwX#yWOzIWz{Ir{!PIW!P!QJd!Q!^IW!^!_Jt!_#oIW#o#pJt#p~IW,TJkR#yWT+{O!^$t!_#o$t#p~$t+{JwROzJtz{KQ{~Jt+{KTTOzJtz{KQ{!PJt!P!QKd!Q~Jt+{KiOT+{,TKp^#yWxPOYHTYZIWZzHTz{Ki{!PHT!P!QLl!Q!^HT!^!_Mt!_!}HT!}#O!%e#O#P!(x#P#oHT#o#pMt#p~HT,TLu_#yWT+{xPO!^$t!_#Z$t#Z#[CZ#[#]$t#]#^CZ#^#a$t#a#bCZ#b#g$t#g#hCZ#h#i$t#i#jCZ#j#m$t#m#nCZ#n#o$t#p~$t+{MyYxPOYMtYZJtZzMtz{Ni{!PMt!P!Q!$a!Q!}Mt!}#O! w#O#P!#}#P~Mt+{NnYxPOYMtYZJtZzMtz{Ni{!PMt!P!Q! ^!Q!}Mt!}#O! w#O#P!#}#P~Mt+{! eUT+{xP#Z#[D{#]#^D{#a#bD{#g#hD{#i#jD{#m#nD{+{! zWOY! wYZJtZz! wz{!!d{#O! w#O#P!#k#P#QMt#Q~! w+{!!gYOY! wYZJtZz! wz{!!d{!P! w!P!Q!#V!Q#O! w#O#P!#k#P#QMt#Q~! w+{!#[TT+{OYEdZ#OEd#O#PEv#P#QDa#Q~Ed+{!#nTOY! wYZJtZz! wz{!!d{~! w+{!$QTOYMtYZJtZzMtz{Ni{~Mt+{!$f_xPOzJtz{KQ{#ZJt#Z#[!$a#[#]Jt#]#^!$a#^#aJt#a#b!$a#b#gJt#g#h!$a#h#iJt#i#j!$a#j#mJt#m#n!$a#n~Jt,T!%j[#yWOY!%eYZIWZz!%ez{!&`{!^!%e!^!_! w!_#O!%e#O#P!(W#P#QHT#Q#o!%e#o#p! w#p~!%e,T!&e^#yWOY!%eYZIWZz!%ez{!&`{!P!%e!P!Q!'a!Q!^!%e!^!_! w!_#O!%e#O#P!(W#P#QHT#Q#o!%e#o#p! w#p~!%e,T!'hY#yWT+{OYFYYZ$tZ!^FY!^!_Ed!_#OFY#O#PF}#P#QB^#Q#oFY#o#pEd#p~FY,T!(]X#yWOY!%eYZIWZz!%ez{!&`{!^!%e!^!_! w!_#o!%e#o#p! w#p~!%e,T!(}X#yWOYHTYZIWZzHTz{Ki{!^HT!^!_Mt!_#oHT#o#pMt#p~HT,T!)qc#yWxPOzIWz{Ir{!^IW!^!_Jt!_#ZIW#Z#[!)j#[#]IW#]#^!)j#^#aIW#a#b!)j#b#gIW#g#h!)j#h#iIW#i#j!)j#j#mIW#m#n!)j#n#oIW#o#pJt#p~IW,T!+TV#yWS+{OY!*|YZ$tZ!^!*|!^!_!+j!_#o!*|#o#p!+j#p~!*|+{!+oQS+{OY!+jZ~!+j$P!,O[#yW#e#vxPOYB^YZ$tZ!PB^!P!QCZ!Q!^B^!^!_Da!_!}B^!}#OFY#O#PGi#P#oB^#o#pDa#p~B^]!,}[#mS#yWxPOYB^YZ$tZ!PB^!P!QCZ!Q!^B^!^!_Da!_!}B^!}#OFY#O#PGi#P#oB^#o#pDa#p~B^X!-xY#yWOY!-sYZ$tZ!^!-s!^!_!.h!_#O!-s#O#P!/T#P#QB^#Q#o!-s#o#p!.h#p~!-sP!.kTOY!.hZ#O!.h#O#P!.z#P#QDa#Q~!.hP!.}QOY!.hZ~!.hX!/YV#yWOY!-sYZ$tZ!^!-s!^!_!.h!_#o!-s#o#p!.h#p~!-sX!/tV#yWOYB^YZ$tZ!^B^!^!_Da!_#oB^#o#pDa#p~B^y!0bd#yWjqO!O$t!O!P!1p!P!Q$t!Q![!2j![!^$t!_!g$t!g!h?T!h#R$t#R#S!2j#S#U$t#U#V!4Q#V#X$t#X#Y?T#Y#b$t#b#c!3p#c#d!5`#d#l$t#l#m!6h#m#o$t#p~$ty!1wZ#yWjqO!Q$t!Q![!1p![!^$t!_!g$t!g!h?T!h#R$t#R#S!1p#S#X$t#X#Y?T#Y#o$t#p~$ty!2q_#yWjqO!O$t!O!P!1p!P!Q$t!Q![!2j![!^$t!_!g$t!g!h?T!h#R$t#R#S!2j#S#X$t#X#Y?T#Y#b$t#b#c!3p#c#o$t#p~$ty!3wR#yWjqO!^$t!_#o$t#p~$ty!4VW#yWO!Q$t!Q!R!4o!R!S!4o!S!^$t!_#R$t#R#S!4o#S#o$t#p~$ty!4vW#yWjqO!Q$t!Q!R!4o!R!S!4o!S!^$t!_#R$t#R#S!4o#S#o$t#p~$ty!5eV#yWO!Q$t!Q!Y!5z!Y!^$t!_#R$t#R#S!5z#S#o$t#p~$ty!6RV#yWjqO!Q$t!Q!Y!5z!Y!^$t!_#R$t#R#S!5z#S#o$t#p~$ty!6mZ#yWO!Q$t!Q![!7`![!^$t!_!c$t!c!i!7`!i#R$t#R#S!7`#S#T$t#T#Z!7`#Z#o$t#p~$ty!7gZ#yWjqO!Q$t!Q![!7`![!^$t!_!c$t!c!i!7`!i#R$t#R#S!7`#S#T$t#T#Z!7`#Z#o$t#p~$t%w!8cR!WV#yW#c%hO!^$t!_#o$t#p~$t!P!8sR^w#yWO!^$t!_#o$t#p~$t+c!9XR'Td![%Y#n&s'pP!P!Q!9b!^!_!9g!_!`!9tW!9gO#{W#v!9lP#V#v!_!`!9o#v!9tO#e#v#v!9yO#W#v%w!:QT!t%o#yWO!^$t!_!`!:a!`!a!:t!a#o$t#p~$t$O!:hS#Z#v#yWO!^$t!_!`'j!`#o$t#p~$t$P!:{R#O#w#yWO!^$t!_#o$t#p~$t%w!;aT'S!s#W#v#vS#yWO!^$t!_!`!;p!`!a!<Q!a#o$t#p~$t$O!;wR#W#v#yWO!^$t!_#o$t#p~$t$O!<XT#V#v#yWO!^$t!_!`2l!`!a!<h!a#o$t#p~$t$O!<oS#V#v#yWO!^$t!_!`2l!`#o$t#p~$t%w!=SV'd%o#yWO!O$t!O!P!=i!P!^$t!_!a$t!a!b!=y!b#o$t#p~$t$`!=pRr$W#yWO!^$t!_#o$t#p~$t$O!>QS#yW#`#vO!^$t!_!`2l!`#o$t#p~$t&e!>eRt&]#yWO!^$t!_#o$t#p~$tZ!>uRyR#yWO!^$t!_#o$t#p~$t$O!?VS#]#v#yWO!^$t!_!`2l!`#o$t#p~$t$P!?jR#yW'[#wO!^$t!_#o$t#p~$t~!?xO!O~%r!@PT'k%j#yWO!^$t!_!`2l!`#o$t#p#q!=y#q~$t$u!@iR}$k#yW'^QO!^$t!_#o$t#p~$tX!@yR!fP#yWO!^$t!_#o$t#p~$t,T!Aar#yW#pS'Xp'O%k&|+{OX$tX^%S^p$tpq%Sqt$ttu/wu}$t}!O1R!O!Q$t!Q![/w![!^$t!_!c$t!c!}/w!}#R$t#R#S/w#S#T$t#T#o/w#p#y$t#y#z%S#z$f$t$f$g%S$g#BY/w#BY#BZ!AS#BZ$IS/w$IS$I_!AS$I_$I|/w$I|$JO!AS$JO$JT/w$JT$JU!AS$JU$KV/w$KV$KW!AS$KW&FU/w&FU&FV!AS&FV~/w",
      tokenizers: [noSemicolon$1, incdecToken$1, template$1, 0, 1, 2, 3, 4, 5, 6, 7, 8, insertSemicolon$1],
      topRules: {"Script":[0,6]},
      dialects: {jsx: 12762, ts: 12764},
      dynamicPrecedences: {"138":1,"165":1},
      specialized: [{term: 276, get: (value, stack) => (tsExtends$1(value, stack) << 1) | 1},{term: 276, get: value => spec_identifier$5[value] || -1},{term: 285, get: value => spec_word$1[value] || -1},{term: 58, get: value => spec_LessThan$1[value] || -1}],
      tokenPrec: 12784
    });

    /// A collection of JavaScript-related
    /// [snippets](#autocomplete.snippet).
    const snippets$1 = [
        { label: "function",
            detail: "definition",
            type: "keyword",
            snippet: "function ${name}(${params}) {\n\t${}\n}" },
        { label: "for",
            detail: "loop",
            type: "keyword",
            snippet: "for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}" },
        { label: "for",
            detail: "of loop",
            type: "keyword",
            snippet: "for (let ${name} of ${collection}) {\n\t${}\n}" },
        { label: "try",
            detail: "block",
            type: "keyword",
            snippet: "try {\n\t${}\n} catch (${error}) {\n\t${}\n}" },
        { label: "class",
            detail: "definition",
            type: "keyword",
            snippet: "class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}" },
        { label: "import",
            detail: "named",
            type: "keyword",
            snippet: "import {${names}} from \"${module}\"\n${}" },
        { label: "import",
            detail: "default",
            type: "keyword",
            snippet: "import ${name} from \"${module}\"\n${}" }
    ];

    /// A syntax provider based on the [Lezer JavaScript
    /// parser](https://github.com/lezer-parser/javascript), extended with
    /// highlighting and indentation information.
    const javascriptSyntax$1 = LezerSyntax.define(parser$6.withProps(indentNodeProp.add({
        IfStatement: continuedIndent({ except: /^\s*({|else\b)/ }),
        TryStatement: continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
        LabeledStatement: flatIndent,
        SwitchBody: context => {
            let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
            return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
        },
        Block: delimitedIndent({ closing: "}" }),
        "TemplateString BlockComment": () => -1,
        "Statement Property": continuedIndent({ except: /^{/ })
    }), foldNodeProp.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression"(tree) {
            return { from: tree.from + 1, to: tree.to - 1 };
        },
        BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
    }), styleTags({
        "get set async static": tags$1.modifier,
        "for while do if else switch try catch finally return throw break continue default case": tags$1.controlKeyword,
        "in of await yield void typeof delete instanceof": tags$1.operatorKeyword,
        "export import let var const function class extends": tags$1.definitionKeyword,
        "with debugger from as new": tags$1.keyword,
        TemplateString: tags$1.special(tags$1.string),
        Super: tags$1.atom,
        BooleanLiteral: tags$1.bool,
        this: tags$1.self,
        null: tags$1.null,
        Star: tags$1.modifier,
        VariableName: tags$1.variableName,
        VariableDefinition: tags$1.definition(tags$1.variableName),
        Label: tags$1.labelName,
        PropertyName: tags$1.propertyName,
        PropertyNameDefinition: tags$1.definition(tags$1.propertyName),
        UpdateOp: tags$1.updateOperator,
        LineComment: tags$1.lineComment,
        BlockComment: tags$1.blockComment,
        Number: tags$1.number,
        String: tags$1.string,
        ArithOp: tags$1.arithmeticOperator,
        LogicOp: tags$1.logicOperator,
        BitOp: tags$1.bitwiseOperator,
        CompareOp: tags$1.compareOperator,
        RegExp: tags$1.regexp,
        Equals: tags$1.definitionOperator,
        "Arrow : Spread": tags$1.punctuation,
        "( )": tags$1.paren,
        "[ ]": tags$1.squareBracket,
        "{ }": tags$1.brace,
        ".": tags$1.derefOperator,
        ", ;": tags$1.separator,
        TypeName: tags$1.typeName,
        TypeDefinition: tags$1.definition(tags$1.typeName),
        "type enum interface implements namespace module declare": tags$1.definitionKeyword,
        "abstract global privacy readonly": tags$1.modifier,
        "is keyof unique infer": tags$1.operatorKeyword,
        JSXAttributeValue: tags$1.string,
        JSXText: tags$1.content,
        "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags$1.angleBracket,
        "JSXIdentifier JSXNameSpacedName": tags$1.typeName,
        "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags$1.propertyName
    })), {
        languageData: {
            closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:case |default:|\{|\})$/
        }
    });
    /// Returns an extension that installs JavaScript support features
    /// (completion of [snippets](#lang-javascript.snippets)).
    function javascriptSupport$1() {
        return javascriptSyntax$1.languageData.of({ autocomplete: completeSnippets(snippets$1) });
    }
    /// Returns an extension that installs the JavaScript syntax and
    /// support features.
    function javascript(config = {}) {
        let dialect = (config.jsx ? ["jsx"] : []).concat(config.typescript ? ["ts"] : []).join(" ");
        return [dialect ? javascriptSyntax$1.withDialect(dialect) : javascriptSyntax$1, javascriptSupport$1()];
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser$7 = Parser.deserialize({
      version: 12,
      states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CcOvQPO'#CfOOQO'#Cl'#ClQOQPOOOOQO'#Ce'#CeO}QPO'#CdO!SQPO'#CpOOQO,58},58}O![QPO,58}O!aQPO'#CuOOQO,59Q,59QO!iQPO,59QOVQPO,59OO!nQPO'#CgO!sQPO,59[OOQO1G.i1G.iOVQPO'#ChO!{QPO,59aOOQO1G.l1G.lOOQO1G.j1G.jOOQO,59R,59ROOQO-E6e-E6eOOQO,59S,59SOOQO-E6f-E6f",
      stateData: "#T~O_OS~OQSORSOSSOTSOaPOcQOhRO~OaUObXO~Og[O~PVOe^O~Of_ObdX~ObaO~OfbOgiX~OgdO~OaUO~Of_Obda~OfbOgia~O",
      goto: "!kjPPPPPPkkqwk{!RPPP!XPPP!ePPPP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
      nodeNames: "⚠ JsonText True False Null Number String Object Property PropertyName Array",
      maxTerm: 25,
      skippedNodes: [0],
      repeatNodeCount: 2,
      tokenData: "(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]O_~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOa~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOf~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOe~~&rOh~~&wOg~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOc~~(pOb~",
      tokenizers: [0],
      topRules: {"JsonText":[0,1]},
      tokenPrec: 0
    });

    const jsonSyntax = LezerSyntax.define(parser$7.withProps(indentNodeProp.add({
        Object: continuedIndent({ except: /^\s*\}/ }),
        Array: continuedIndent({ except: /^\s*\]/ })
    }), foldNodeProp.add({
        Object(subtree) { return { from: subtree.from + 1, to: subtree.to - 1 }; },
        Array(subtree) { return { from: subtree.from + 1, to: subtree.to - 1 }; }
    }), styleTags({
        String: tags$1.string,
        Number: tags$1.number,
        "True False": tags$1.bool,
        PropertyName: tags$1.propertyName,
        null: tags$1.null,
        ",": tags$1.separator,
        "[ ]": tags$1.squareBracket,
        "{ }": tags$1.brace
    })), {
        languageData: {
            closeBrackets: { brackets: ["[", "{", '"'] },
            indentOnInput: /^\s*[\}\]]$/
        }
    });
    /// Returns an extension that installs the JSON syntax provider.
    function json() {
        return jsonSyntax;
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const 
      StartTag$1 = 1,
      StartCloseTag$1 = 2,
      mismatchedStartCloseTag = 3,
      incompleteStartCloseTag = 4,
      Element$1 = 9;

    /* Hand-written tokenizer for XML tag matching. */

    function nameChar$1(ch) {
      return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
    }

    function isSpace$1(ch) {
      return ch == 9 || ch == 10 || ch == 13 || ch == 32
    }

    let elementQuery$1 = [Element$1], openAt$1 = 0;

    function parentElement$1(input, stack, pos, len) {
      openAt$1 = stack.startOf(elementQuery$1, pos);
      if (openAt$1 == null) return null
      let match = /^<\s*([\.\-\:\w\xa1-\uffff]+)/.exec(input.read(openAt$1, openAt$1 + len + 10));
      return match ? match[1].toLowerCase() : ""
    }

    const startTag = new ExternalTokenizer((input, token, stack) => {
      let pos = token.start;
      if (input.get(pos++) != 60 /* '<' */) return
      let next = input.get(pos++);
      if (next == 47 /* '/' */) {
        let tokEnd = pos;
        while (isSpace$1(input.get(pos))) pos++;
        let nameStart = pos;
        while (nameChar$1(input.get(pos))) pos++;
        if (pos == nameStart) return token.accept(incompleteStartCloseTag, tokEnd)

        let name = input.read(nameStart, pos);
        let parent = parentElement$1(input, stack, stack.pos + 1, name.length);
        if (name == parent) return token.accept(StartCloseTag$1, tokEnd)
        while (parent != null) {
          parent = parentElement$1(input, stack, openAt$1, name.length);
          if (parent == name) return
        }
        token.accept(mismatchedStartCloseTag, tokEnd);
      } else if (next != 33 /* '!' */ && next != 63 /* '?' */) {
        return token.accept(StartTag$1, token.start + 1)
      }
    }, {contextual: true});

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser$8 = Parser.deserialize({
      version: 12,
      states: "*nOQOROOOOOP'#Cu'#CuOcORO'#C|OwOROOOOOP-E6s-E6sO!POQO'#CgO!XOTO'#CeOOOP'#Ce'#CeO!yORO'#CvQ#[OPOOO#aOROOOOOO'#Cw'#CwO#oOQO,59RO#wOWO,59RO$VOQO'#CqOOOP'#DQ'#DQOOOP'#Cz'#CzO!XOTO,59PO$_OQO'#CrOOOP,59P,59POOOP,59b,59bOOOP-E6t-E6tO#[OPOOOOOO-E6u-E6uO$gOWO1G.mO$gOWO1G.mO$uOQO'#CiO$}OWO'#CxO%]OWO1G.mOOOP1G.m1G.mOOOP1G.z1G.zO%hOQO,59]O%pOQO,59]OOOP-E6x-E6xOOOP1G.k1G.kO%xOQO,59^O&QOQO,59^O&YOWO7+$XO&hOWO7+$XOOOP7+$X7+$XOOOP7+$f7+$fO&sOQO,59TO&{OQO,59TO'TOWO,59dOOOO-E6v-E6vO'cOQO1G.wO'cOQO1G.wOOOP1G.w1G.wO'kOQO1G.xO'kOQO1G.xOOOP1G.x1G.xO'sOWO<<GsOOOP<<Gs<<GsOOOP<<HQ<<HQO&{OQO1G.oO&{OQO1G.oO(OO`O'#ClOOOO1G.o1G.oO(^OQO7+$cOOOP7+$c7+$cO(fOQO7+$dOOOP7+$d7+$dOOOPAN=_AN=_OOOPAN=lAN=lO&{OQO7+$ZOOOO7+$Z7+$ZOOOO'#Cy'#CyO(nO`O,59WOOOO,59W,59WOOOP<<G}<<G}OOOP<<HO<<HOOOOO<<Gu<<GuOOOO-E6w-E6wOOOO1G.r1G.r",
      stateData: "(|~OUPOVPOqPOPpPWpP~OUPOVPOqPOPpXWpXopX~OPTOWYO~O[]OqZO~OPTOQbOR^OS_OU_OV_Oa_Ob_Oc_Od_O~OUPOVPOqPOPpPopP~OPTO~OUPOVPOqPOPpP~O[hOqZO~OYmO^jOgnOqZO~O[pOqZO~O[tOqZO~OYwO^jOgxOqZO~O_zOqZO~OqZOYlX^lXglX~OYwO^jOgxO~O[}OqZO~OY!POqZO~O[!QOqZO~OY!SOqZO~OY!UO^jOg!VOqZO~OY!UO^jOg!VO~O_!WOqZO~OqZOr!YO~OqZOYla^lagla~OY!]OqZO~OY!_OqZO~OY!`O^jOg!aO~Oa!dOb!dOr!fOs!dO~OY!gOqZO~OY!hOqZO~Oa!dOb!dOr!kOs!dO~O",
      goto: "%ZuPPPPPPPPPvP!PP!WPP!aPPPP{!kP!q!x#Q#X$a$p$vP$|PPP%VUWRXfT_UaZURUXaf_k]hiluv!TQ!ZzS!c!W!XR!i!bQcURraZVRUXafUQOWYRSQSXRfReXQ[Tjg[iosuy{!O!R!X![!^!bQi]Qo^QsbQuhQyjQ{kQ!OpQ!RtQ!XzQ![}Q!^!QR!b!WQl]SvhiU|lv!TR!TuQ!e!YR!j!eQaURqaQROQdWRfYT`Ua",
      nodeNames: "⚠ StartTag StartCloseTag StartCloseTag StartCloseTag Document Comment ProcessingInst DoctypeDecl Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue EntityReference CharacterReference Text Cdata MismatchedCloseTag CloseTag SelfCloseEndTag SelfClosingTag",
      maxTerm: 36,
      nodeProps: [
        [NodeProp$1.closedBy, 1,"SelfCloseEndTag EndTag",11,"CloseTag"],
        [NodeProp$1.openedBy, 10,"StartTag StartCloseTag",22,"OpenTag",23,"StartTag"]
      ],
      skippedNodes: [0],
      repeatNodeCount: 6,
      tokenData: "Dk~R!ROX$[XY%cYZ%cZ]$[]^%c^p$[pq%cqr$[rs&esv$[vw&uw!P$[!P!Q(b!Q![$[![!])n!]!^$[!^!_-g!_!`Br!`!aC_!a!c$[!c!})n!}#R$[#R#S)n#S#T$[#T#o)n#o%W$[%W%o)n%o%p$[%p&a)n&a&b$[&b1p)n1p4U$[4U4d)n4d4e$[4e$IS)n$IS$I`$[$I`$Ib)n$Ib$Kh$[$Kh%#t)n%#t&/x$[&/x&Et)n&Et&FV$[&FV;'S)n;'S;:jCz;:j?&r$[?&r?Ah)n?Ah?BY$[?BY?Mn)n?Mn~$[Y$cUcQsWOr$[rs$usv$[w!^$[!^!_%T!_~$[Q$zRcQOv$uw!^$u!_~$uW%YRsWOr%Tsv%Tw~%T_%l]cQsWqTOX$[XY%cYZ%cZ]$[]^%c^p$[pq%cqr$[rs$usv$[w!^$[!^!_%T!_~$[Z&lRrXcQOv$uw!^$u!_~$u~&xTOp'Xqs'Xst'pt!]'X!^~'X~'[TOp'Xqs'Xt!]'X!]!^'k!^~'X~'pOa~~'sROp'|q!]'|!^~'|~(PSOp'|q!]'|!]!^(]!^~'|~(bOb~^(iWcQsWOr$[rs$usv$[w!^$[!^!_%T!_!`$[!`!a)R!a~$[^)[UgScQsWOr$[rs$usv$[w!^$[!^!_%T!_~$[_)y}^S[PcQsWOr$[rs$usv$[w}$[}!O)n!O!P)n!P!Q$[!Q![)n![!])n!]!^$[!^!_%T!_!c$[!c!})n!}#R$[#R#S)n#S#T$[#T#o)n#o$}$[$}%O)n%O%W$[%W%o)n%o%p$[%p&a)n&a&b$[&b1p)n1p4U)n4U4d)n4d4e$[4e$IS)n$IS$I`$[$I`$Ib)n$Ib$Je$[$Je$Jg)n$Jg$Kh$[$Kh%#t)n%#t&/x$[&/x&Et)n&Et&FV$[&FV;'S)n;'S;:j,v;:j?&r$[?&r?Ah)n?Ah?BY$[?BY?Mn)n?Mn~$[_,}WcQsWOr$[rs$usv$[w!^$[!^!_%T!_;=`$[;=`<%l)n<%l~$[Z-lUsWOq%Tqr.Osv%Tw!a%T!a!b@m!b~%TZ.TZsWOr%Tsv%Tw}%T}!O.v!O!f%T!f!g2e!g!}%T!}#O6`#O#W%T#W#X>P#X~%TZ.{TsWOr%Tsv%Tw}%T}!O/[!O~%TZ/aVsWOr/[rs/vsv/[vw/vw}/[}!O0w!O~/[R/yRO}/v}!O0S!O~/vR0VRO}/v}!O0`!O~/vR0cTO}/v}!O0`!O!`/v!`!a0r!a~/vR0wOURZ0|VsWOr/[rs/vsv/[vw/vw}/[}!O1c!O~/[Z1hXsWOr/[rs/vsv/[vw/vw}/[}!O1c!O!`/[!`!a2T!a~/[Z2[RURsWOr%Tsv%Tw~%TX2jTsWOr%Tsv%Tw!q%T!q!r2y!r~%TX3OTsWOr%Tsv%Tw!e%T!e!f3_!f~%TX3dTsWOr%Tsv%Tw!v%T!v!w3s!w~%TX3xTsWOr%Tsv%Tw!{%T!{!|4X!|~%TX4^TsWOr%Tsv%Tw!r%T!r!s4m!s~%TX4rTsWOr%Tsv%Tw!g%T!g!h5R!h~%TX5WVsWOr5Rrs5msv5Rvw5mw!`5R!`!a6O!a~5RP5pRO!`5m!`!a5y!a~5mP6OOWPX6VRWPsWOr%Tsv%Tw~%TY6eVsWOr%Tsv%Tw!e%T!e!f6z!f#V%T#V#W<]#W~%TY7PTsWOr%Tsv%Tw!f%T!f!g7`!g~%TY7eTsWOr%Tsv%Tw!c%T!c!d7t!d~%TY7yTsWOr%Tsv%Tw!v%T!v!w8Y!w~%TY8_TsWOr%Tsv%Tw!c%T!c!d8n!d~%TY8sTsWOr%Tsv%Tw!}%T!}#O9S#O~%TY9XVsWOr9Srs9nsv9Svw9nw#P9S#P#Q:o#Q~9SQ9qRO#P9n#P#Q9z#Q~9nQ9}RO#P9n#P#Q:W#Q~9nQ:ZTO!`9n!`!a:j!a#P9n#P#Q:W#Q~9nQ:oOdQY:tVsWOr9Srs9nsv9Svw9nw#P9S#P#Q;Z#Q~9SY;`XsWOr9Srs9nsv9Svw9nw!`9S!`!a;{!a#P9S#P#Q;Z#Q~9SY<SRdQsWOr%Tsv%Tw~%TY<bTsWOr%Tsv%Tw#W%T#W#X<q#X~%TY<vTsWOr%Tsv%Tw#T%T#T#U=V#U~%TY=[TsWOr%Tsv%Tw#h%T#h#i=k#i~%TY=pTsWOr%Tsv%Tw#T%T#T#U8n#U~%TX>UTsWOr%Tsv%Tw#c%T#c#d>e#d~%TX>jTsWOr%Tsv%Tw#V%T#V#W>y#W~%TX?OTsWOr%Tsv%Tw#h%T#h#i?_#i~%TX?dTsWOr%Tsv%Tw#m%T#m#n?s#n~%TX?xTsWOr%Tsv%Tw#d%T#d#e@X#e~%TX@^TsWOr%Tsv%Tw#X%T#X#Y5R#Y~%TZ@rVsWOr@mrsAXsv@mvwAXw!a@m!a!bAv!b~@mRA[RO!aAX!a!bAe!b~AXRAhRO!`AX!`!aAq!a~AXRAvOVRZA{VsWOr@mrsAXsv@mvwAXw!`@m!`!aBb!a~@mZBiRVRsWOr%Tsv%Tw~%TZB{U_PcQsWOr$[rs$usv$[w!^$[!^!_%T!_~$[_ChUYTcQsWOr$[rs$usv$[w!^$[!^!_%T!_~$[_DRWcQsWOr$[rs$usv$[w!^$[!^!_%T!_;=`$[;=`<%l)n<%l~$[",
      tokenizers: [startTag, 0, 1, 2, 3],
      topRules: {"Document":[0,5]},
      tokenPrec: 0
    });

    function tagName$1(doc, tag) {
        let name = tag && tag.getChild("TagName");
        return name ? doc.sliceString(name.from, name.to) : "";
    }
    function elementName$1(doc, tree) {
        let tag = tree && tree.firstChild;
        return !tag || tag.name != "OpenTag" ? "" : tagName$1(doc, tag);
    }
    function attrName(doc, tag, pos) {
        let attr = tag && tag.getChildren("Attribute").find(a => a.from <= pos && a.to >= pos);
        let name = attr && attr.getChild("AttributeName");
        return name ? doc.sliceString(name.from, name.to) : "";
    }
    function findParentElement$1(tree) {
        for (let cur = tree && tree.parent; cur; cur = cur.parent)
            if (cur.name == "Element")
                return cur;
        return null;
    }
    function findLocation(state, pos) {
        var _a;
        let at = state.tree.resolve(pos, -1), inTag = null;
        for (let cur = at; !inTag && cur.parent; cur = cur.parent)
            if (cur.name == "OpenTag" || cur.name == "CloseTag" || cur.name == "SelfClosingTag" || cur.name == "MismatchedCloseTag")
                inTag = cur;
        if (inTag && (inTag.to > pos || inTag.lastChild.type.isError)) {
            let elt = inTag.parent;
            if (at.name == "TagName")
                return inTag.name == "CloseTag" || inTag.name == "MismatchedCloseTag"
                    ? { type: "closeTag", from: at.from, context: elt }
                    : { type: "openTag", from: at.from, context: findParentElement$1(elt) };
            if (at.name == "AttributeName")
                return { type: "attrName", from: at.from, context: inTag };
            if (at.name == "AttributeValue")
                return { type: "attrValue", from: at.from, context: inTag };
            let before = at == inTag || at.name == "Attribute" ? at.childBefore(pos) : at;
            if ((before === null || before === void 0 ? void 0 : before.name) == "StartTag")
                return { type: "openTag", from: pos, context: findParentElement$1(elt) };
            if ((before === null || before === void 0 ? void 0 : before.name) == "StartCloseTag" && before.to <= pos)
                return { type: "closeTag", from: pos, context: elt };
            if ((before === null || before === void 0 ? void 0 : before.name) == "Is")
                return { type: "attrValue", from: pos, context: inTag };
            if (before)
                return { type: "attrName", from: pos, context: inTag };
            return null;
        }
        else if (at.name == "StartCloseTag") {
            return { type: "closeTag", from: pos, context: at.parent };
        }
        while (at.parent && at.to == pos && !((_a = at.lastChild) === null || _a === void 0 ? void 0 : _a.type.isError))
            at = at.parent;
        if (at.name == "Element" || at.name == "Text" || at.name == "Document")
            return { type: "tag", from: pos, context: at.name == "Element" ? at : findParentElement$1(at) };
        return null;
    }
    class Element$2 {
        constructor(spec, attrs, attrValues) {
            this.attrs = attrs;
            this.attrValues = attrValues;
            this.children = [];
            this.name = spec.name;
            this.completion = Object.assign(Object.assign({ type: "type" }, spec.completion || {}), { label: this.name });
            this.openCompletion = Object.assign(Object.assign({}, this.completion), { label: "<" + this.name });
            this.closeCompletion = Object.assign(Object.assign({}, this.completion), { label: "</" + this.name + ">", boost: 2 });
            this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), { label: this.name + ">" });
        }
    }
    const Identifier = /^[:\-\.\w\u00b7-\uffff]*$/;
    function attrCompletion(spec) {
        return Object.assign(Object.assign({ type: "property" }, spec.completion || {}), { label: spec.name });
    }
    function valueCompletion(spec) {
        return typeof spec == "string" ? { label: `"${spec}"`, type: "constant" }
            : /^"/.test(spec.label) ? spec
                : Object.assign(Object.assign({}, spec), { label: `"${spec.label}"` });
    }
    function completeFromSchema(eltSpecs, attrSpecs) {
        let allAttrs = [], globalAttrs = [];
        let attrValues = Object.create(null);
        for (let s of attrSpecs) {
            let completion = attrCompletion(s);
            allAttrs.push(completion);
            if (s.global)
                globalAttrs.push(completion);
            if (s.values)
                attrValues[s.name] = s.values.map(valueCompletion);
        }
        let allElements = [], topElements = [];
        let byName = Object.create(null);
        for (let s of eltSpecs) {
            let attrs = globalAttrs, attrVals = attrValues;
            if (s.attributes)
                attrs = attrs.concat(s.attributes.map(s => {
                    if (typeof s == "string")
                        return allAttrs.find(a => a.label == s) || { label: s, type: "property" };
                    if (s.values) {
                        if (attrVals == attrValues)
                            attrVals = Object.create(attrVals);
                        attrVals[s.name] = s.values.map(valueCompletion);
                    }
                    return attrCompletion(s);
                }));
            let elt = new Element$2(s, attrs, attrVals);
            byName[elt.name] = elt;
            allElements.push(elt);
            if (s.top)
                topElements.push(elt);
        }
        if (!topElements.length)
            topElements = allElements;
        for (let i = 0; i < allElements.length; i++) {
            let s = eltSpecs[i], elt = allElements[i];
            if (s.children) {
                for (let ch of s.children)
                    if (byName[ch])
                        elt.children.push(byName[ch]);
            }
            else {
                elt.children = allElements;
            }
        }
        return cx => {
            var _a;
            let { doc } = cx.state, loc = findLocation(cx.state, cx.pos);
            if (!loc || (loc.type == "tag" && !cx.explicit))
                return null;
            let { type, from, context } = loc;
            if (type == "openTag") {
                let children = topElements;
                let parentName = elementName$1(doc, context);
                if (parentName) {
                    let parent = byName[parentName];
                    children = (parent === null || parent === void 0 ? void 0 : parent.children) || allElements;
                }
                return {
                    from,
                    options: children.map(ch => ch.completion),
                    span: Identifier
                };
            }
            else if (type == "closeTag") {
                let parentName = elementName$1(doc, context);
                return parentName ? {
                    from,
                    to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == ">" ? 1 : 0),
                    options: [((_a = byName[parentName]) === null || _a === void 0 ? void 0 : _a.closeNameCompletion) || { label: parentName + ">", type: "type" }],
                    span: Identifier
                } : null;
            }
            else if (type == "attrName") {
                let parent = byName[tagName$1(doc, context)];
                return {
                    from,
                    options: (parent === null || parent === void 0 ? void 0 : parent.attrs) || globalAttrs,
                    span: Identifier
                };
            }
            else if (type == "attrValue") {
                let attr = attrName(doc, context, from);
                if (!attr)
                    return null;
                let parent = byName[tagName$1(doc, context)];
                let values = ((parent === null || parent === void 0 ? void 0 : parent.attrValues) || attrValues)[attr];
                if (!values || !values.length)
                    return null;
                return {
                    from,
                    to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == '"' ? 1 : 0),
                    options: values,
                    span: /^"[^"]*"?$/
                };
            }
            else if (type == "tag") {
                let parentName = elementName$1(doc, context), parent = byName[parentName];
                let closing = [], last = context && context.lastChild;
                if (parentName && (!last || last.name != "CloseTag" || tagName$1(doc, last) != parentName))
                    closing.push(parent ? parent.closeCompletion : { label: "</" + parentName + ">", type: "type", boost: 2 });
                return {
                    from,
                    options: closing.concat(((parent === null || parent === void 0 ? void 0 : parent.children) || (context ? allElements : topElements)).map(e => e.openCompletion)),
                    span: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
                };
            }
            else {
                return null;
            }
        };
    }

    /// A syntax provider based on the [Lezer XML
    /// parser](https://github.com/lezer-parser/xml), extended with
    /// highlighting and indentation information.
    const xmlSyntax = LezerSyntax.define(parser$8.withProps(indentNodeProp.add(type => {
        if (type.name == "Element")
            return delimitedIndent({ closing: "</", align: false });
        if (type.name == "OpenTag" || type.name == "CloseTag" || type.name == "SelfClosingTag")
            return continuedIndent();
        return undefined;
    }), foldNodeProp.add({
        Element(subtree) {
            let first = subtree.firstChild, last = subtree.lastChild;
            if (!first || first.name != "OpenTag")
                return null;
            return { from: first.to, to: last.name == "CloseTag" ? last.from : subtree.to };
        }
    }), styleTags({
        AttributeValue: tags$1.string,
        Text: tags$1.content,
        "StartTag StartCloseTag EndTag SelfCloseEndTag": tags$1.angleBracket,
        TagName: tags$1.typeName,
        "MismatchedCloseTag/Tagname": [tags$1.typeName, tags$1.invalid],
        AttributeName: tags$1.propertyName,
        UnquotedAttributeValue: tags$1.string,
        Is: tags$1.definitionOperator,
        "EntityReference CharacterReference": tags$1.character,
        Comment: tags$1.blockComment,
        ProcessingInst: tags$1.processingInstruction,
        DoctypeDecl: tags$1.documentMeta,
        Cdata: tags$1.special(tags$1.string)
    })), {
        languageData: {
            commentTokens: { block: { open: "<!--", close: "-->" } },
            indentOnInput: /^\s*<\/$/
        }
    });
    /// Return an extension that installs XML support functionality.
    function xmlSupport(conf = {}) {
        return xmlSyntax.languageData.of({
            autocomplete: completeFromSchema(conf.elements || [], conf.attributes || [])
        });
    }
    /// Returns an extension that installs the XML syntax and
    /// support features.
    function xml(conf) {
        return [xmlSyntax, xmlSupport(conf)];
    }

    exports.EditorState = EditorState$1;
    exports.EditorView = EditorView;
    exports.autocompletion = autocompletion;
    exports.bracketMatching = bracketMatching;
    exports.closeBrackets = closeBrackets;
    exports.closeBracketsKeymap = closeBracketsKeymap;
    exports.commentKeymap = commentKeymap;
    exports.completionKeymap = completionKeymap;
    exports.cpp = cpp;
    exports.css = css;
    exports.defaultHighlightStyle = defaultHighlightStyle;
    exports.defaultKeymap = defaultKeymap;
    exports.drawSelection = drawSelection;
    exports.foldGutter = foldGutter;
    exports.foldKeymap = foldKeymap;
    exports.gotoLineKeymap = gotoLineKeymap;
    exports.highlightActiveLine = highlightActiveLine;
    exports.highlightSelectionMatches = highlightSelectionMatches;
    exports.highlightSpecialChars = highlightSpecialChars;
    exports.history = history;
    exports.historyKeymap = historyKeymap;
    exports.html = html;
    exports.indentOnInput = indentOnInput;
    exports.java = java;
    exports.javascript = javascript;
    exports.json = json;
    exports.keymap = keymap;
    exports.lineNumbers = lineNumbers;
    exports.lintKeymap = lintKeymap;
    exports.rectangularSelection = rectangularSelection;
    exports.searchKeymap = searchKeymap;
    exports.xml = xml;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
